// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.Data;
using Web.Areas.Consultas.Models;
using Dominio.Entidades.Balances;
using Persistencia.Repositorios.Balance;
using Persistencia.Repositorios.Identidad;
using Web.Areas.Historiales.Models;
using Externos.Logica.SRi.Modelos;
using Externos.Logica.IESS.Modelos;
using Microsoft.AspNetCore.Identity;
using Externos.Logica.Balances.Modelos;
using Microsoft.EntityFrameworkCore;
using Externos.Logica.Garancheck.Modelos;
using Microsoft.AspNetCore.Http;
using System.Text.RegularExpressions;
using System.IO;
using Dominio.Tipos;

namespace Web.Areas.Consultas.Controllers
{
    [Area("Consultas")]
    [Route("Consultas/Calificacion")]
    [Authorize(Policy = "Consultas")]
    public class CalificacionController : Controller
    {
        private readonly ILogger _logger;
        private readonly IHistoriales _historiales;
        private readonly IDetallesHistorial _detalleHistorial;
        private readonly IUsuarios _usuarios;
        private readonly IPoliticas _politicas;
        private readonly ICalificaciones _calificaciones;
        private readonly IDetalleCalificaciones _detalleCalificaciones;
        private readonly IPlanesEvaluaciones _planesEvaluaciones;
        private readonly IReportesConsolidados _reporteConsolidado;
        private readonly IAccesos _accesos;

        public CalificacionController(ILoggerFactory loggerFactory,
            IHistoriales historiales,
            IDetallesHistorial detallehistoriales,
            IUsuarios usuarios,
            ICalificaciones calificaciones,
            IPoliticas politicas,
            IDetalleCalificaciones detalleCalificaciones,
            IPlanesEvaluaciones planesEvaluaciones,
            IReportesConsolidados reportesConsolidados,
            IAccesos accesos
            )
        {
            _logger = loggerFactory.CreateLogger(GetType());
            _historiales = historiales;
            _detalleHistorial = detallehistoriales;
            _usuarios = usuarios;
            _calificaciones = calificaciones;
            _politicas = politicas;
            _detalleCalificaciones = detalleCalificaciones;
            _planesEvaluaciones = planesEvaluaciones;
            _accesos = accesos;
            _reporteConsolidado = reportesConsolidados;
        }

        public IActionResult Inicio()
        {
            return View();
        }

        [HttpPost]
        [Route("ObtenerCalificacionCedula")]
        public async Task<IActionResult> ObtenerCalificacionCedula(ReporteCalificacionViewModel modelo)
        {
            try
            {
                _logger.LogInformation($"Procesando informacion Cedula del Historial {modelo.IdHistorial}");
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva actualizar la página por favor.");

                #region Inicialización
                var datosPersona = new CalificacionViewModel();
                var detalleCalificacion = new List<DetalleCalificacionViewModel>();
                var detalleSimple = new DetalleCalificacionViewModel();
                var politica = new Politica();
                var datosHistorial = new SRIViewModel();
                var detalleHistorial = new DatosJsonViewModel();
                var calificacionAnterior = new Calificacion();
                var detalleCalificacionAnterior = new List<DetalleCalificacion>();
                var observaciones = new List<string>();
                int minimo;
                double valorMensualPAlimenticia = 0;
                bool actualizar = false;
                var datosPersonaLista = new List<CalificacionViewModel>();
                var datosPersonaBuro = new CalificacionViewModel();
                var detalleCalificacionBuro = new List<DetalleCalificacionViewModel>();
                var calificacionAnteriorBuro = new Calificacion();
                var detalleCalificacionAnteriorBuro = new List<DetalleCalificacion>();
                var observacionesBuro = new List<string>();
                bool actualizarBuro = false;
                var culture = System.Globalization.CultureInfo.CurrentCulture;
                Dominio.Tipos.FuentesBuro? tipoFuenteBuro = null;

                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                ViewBag.EvaluarBuro = false;
                ViewBag.VisualizarBuro = false;

                var identificacionOriginal = await _historiales.FirstOrDefaultAsync(m => m.Identificacion, m => m.Id == modelo.IdHistorial, null, null, true);
                modelo.IdEmpresa = usuarioActual.IdEmpresa;

                //Planes Activos
                var resultadoPermiso = Dominio.Tipos.EstadosPlanesEvaluaciones.Activo; ;
                var dataPlanEvaluacion = await _planesEvaluaciones.FirstOrDefaultAsync(s => s, s => s.IdEmpresa == modelo.IdEmpresa && s.Estado == Dominio.Tipos.EstadosPlanesEvaluaciones.Activo);
                if (dataPlanEvaluacion == null)
                    throw new Exception("No se encontró un plan de evaluación Activo.");

                var dataUsuario = await _accesos.AnyAsync(s => s.IdUsuario == idUsuario && s.Estado == Dominio.Tipos.EstadosAccesos.Activo && s.Acceso == Dominio.Tipos.TiposAccesos.Evaluacion);
                if (!dataUsuario)
                    throw new Exception("El usuario no tiene permisos para la evaluación.");

                var fechaActual = DateTime.Now;
                var primerDiadelMes = new DateTime(fechaActual.Year, fechaActual.Month, 1);
                var ultimoDiadelMes = primerDiadelMes.AddMonths(1).AddDays(-1);
                var numeroHistorialEvaluacion = await _historiales.CountAsync(s => s.Id != modelo.IdHistorial && s.IdPlanEvaluacion == dataPlanEvaluacion.Id && s.Fecha.Date >= primerDiadelMes.Date && s.Fecha.Date <= ultimoDiadelMes.Date);

                if (dataPlanEvaluacion.BloquearConsultas)
                    resultadoPermiso = dataPlanEvaluacion.NumeroConsultas > numeroHistorialEvaluacion ? Dominio.Tipos.EstadosPlanesEvaluaciones.Activo : Dominio.Tipos.EstadosPlanesEvaluaciones.Inactivo;
                if (resultadoPermiso != Dominio.Tipos.EstadosPlanesEvaluaciones.Activo)
                    throw new Exception("No es posible realizar esta consulta ya que excedió el límite de consultas del plan Evaluación.");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);

                //Politicas
                var politicasActuales = await _politicas.ReadAsync(m => m, m => m.IdEmpresa == modelo.IdEmpresa);
                if (!politicasActuales.Any())
                    throw new Exception("La empresa actual no tiene registrada políticas.");
                ViewBag.Historial = false;

                #endregion Inicialización

                #region Políticas Evaluaciones
                int demandadoEspecificoJudicial = 0;
                //int demandadoEspecificoEmpresa = 0;
                bool aprobacionAdicional = false;
                bool aprobacionAdicionalBuro = false;

                _logger.LogInformation("Obteniendo políticas para procesamiento...");
                //General
                var antiguedadRuc = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.AntiguedadRucCedula);
                var impuestoRenta = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ImpuestoRentaCedula);
                var isd = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ISDCedula);
                var deudaFirme = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DeudaFirmeCedula);
                var civil = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CivilCedula);
                var iessMoraPatronal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.IessMoraPatronalCedula);
                var iessAfiliacion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.IessAfiliacionCedula);
                //var nivelEstudios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NivelEstudiosCedula);
                var legalPersona = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalPersonaCedula);
                //var legalDemandante = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalDemandanteCedula);
                var contactarmeDirecciones = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeDireccionesCedula);
                var contactarmeTelefonos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeTelefonosCedula);
                var contactarmeEmails = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeEmailsCedula);
                var estadoTributario = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.EstadoTributarioCedula);
                var permisoFacturacion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PermisoFacturacionCedula);
                var deudaPensionAlimenticia = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PagoPendientePensionAlimenticiaCedula);
                var pagoMultasPendiente = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PagoMultasPendienteCedula);
                var prediosPersonal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PrediosPersonalCedula);
                var antecedentesPenales = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.AntecedentesPenalesCedula);
                var noticiaDelito = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NoticiasDelitoCedula);
                var superBancosCedula = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosCedula);
                var superBancosNatural = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosRNCedula);
                var tituloNivelSuperior = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.TituloNivelSuperiorCedula);

                //Buro de credito
                var manejoCuentasCorrientes = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ManejodeCuentasCorrientesCedula);
                var FechaCumplimientoSancion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.FechaCumplimientoSancionCedula);
                var deudaVigenteTotal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DeudaVigenteTotalCedula);
                var valorDemandaJudicial = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialCedula);
                var valorCarteraCastigada = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaCedula);
                var valorCuotaVencidos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCuotaVencidosCedula);
                var saldoVencidoTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SaldoVencidoTarjetasCedula);
                var valorDemandaJudicialTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialTarjetasCedula);
                var carteraCastigadaTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaTarjetasCedula);
                var diasMorosidadTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadTarjetasCedula);
                var valorVencidoTotalBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalBancosCedula);
                var valorDemandaJudicialBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialBancosCedula);
                var valorCarteraCastigadaBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaBancosCedula);
                var diasMorosidadBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadBancosCedula);
                var valorVencidoTotalCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalCooperativasCedula);
                var valorDemandaJudicialCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialCooperativasCedula);
                var valorCarteraCastigadaCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaCooperativasCedula);
                var diasMorosidadCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadCooperativasCedula);
                var valorVencidoTotalEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalEmpresasCedula);
                var valorDemandaJudicialEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialEmpresasCedula);
                var valorCarteraCastigadaEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaEmpresasCedula);
                var diasMorosidadEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadEmpresasCedula);
                var valorVencidoVigentesServicios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoVigentesServiciosCedula);
                var numeroDiasVencidoVigentesServicios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NumeroDiasVencidoVigentesServiciosCedula);
                var valorVencidoVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoVigentesCobranzasCedula);
                var demandaJudicialVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DemandaJudicialVigentesCobranzasCedula);
                var carteraCastigadaVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaVigentesCobranzasCedula);
                var numeroDiasVencidoVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NumeroDiasVencidoVigentesCobranzasCedula);
                var mayorSaldoVencido36Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.MayorSaldoVencido36MesesCedula);
                var valorVencidoHistoricoTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoTarjetasCedula);
                var valorVencidoHistoricoBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoBancosCedula);
                var valorVencidoHistoricoCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoCooperativasCedula);
                var valorVencidoHistoricoEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoEmpresasCedula);
                var valorVencidoHistoricoServicio = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoServicioCedula);
                var valorVencidoHistoricoCobranza = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoCobranzaCedula);
                var gastosFinancieros = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.GastosFinancierosCedula);
                var valorVencido12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencido12MesesCedula);
                var valorDemandaJudicial12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicial12MesesCedula);
                var carteraCastigada12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigada12MesesCedula);
                var valorVencidoMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoMayor12MesesCedula);
                var valorDemandaJudicialMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialMayor12MesesCedula);
                var carteraCastigadaMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaMayor12MesesCedula);

                //Fin Buro de credito
                _logger.LogInformation("Fin Obtención de políticas para procesamiento.");
                #endregion Políticas Evaluaciones

                #region Re-procesamiento
                _logger.LogInformation($"Obteniento la calificación anterior {modelo.IdCalificacion}");

                calificacionAnterior = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Evaluacion, null, i => i.Include(m => m.DetalleCalificacion));
                if (calificacionAnterior != null)
                {
                    actualizar = true;
                    detalleCalificacionAnterior = calificacionAnterior.DetalleCalificacion.ToList();
                }
                _logger.LogInformation($"Finalizando la obtención de la calificación anterior {modelo.IdCalificacion}");

                _logger.LogInformation($"Obteniento la calificación anterior Buró {modelo.IdCalificacionBuro}");

                calificacionAnteriorBuro = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Buro, null, i => i.Include(m => m.DetalleCalificacion));
                if (calificacionAnteriorBuro != null)
                {
                    actualizarBuro = true;
                    detalleCalificacionAnteriorBuro = calificacionAnteriorBuro.DetalleCalificacion.ToList();
                }
                _logger.LogInformation($"Finalizando la obtención de la calificación anterior Buró {modelo.IdCalificacionBuro}");
                #endregion Re-procesamiento

                #region Evalución SRI
                try
                {
                    _logger.LogInformation("Procesando políticas SRI...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Sri && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosHistorial.Sri = JsonConvert.DeserializeObject<Contribuyente>(detalleHistorial.Datos);

                        datosPersona.FechaInicio = datosHistorial.Sri.FechaInicio;
                        detalleSimple.Politica = antiguedadRuc.Nombre;
                        var diferenciaAnios = DateTime.Today.Year - datosPersona.FechaInicio.Date.Year;
                        if (datosPersona.FechaInicio.Date > DateTime.Today.AddYears(-diferenciaAnios))
                            diferenciaAnios--;

                        minimo = 2;
                        var estadoRuc = Dominio.Constantes.Politicas.RucActivo;
                        var resultadoComparacion = diferenciaAnios >= minimo && estadoRuc == datosHistorial.Sri.Estado;
                        if (!string.IsNullOrEmpty(datosHistorial.Sri.EstadoContribuyente) && datosHistorial.Sri.EstadoContribuyente == "SUSPENDIDO" && datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado) && datosHistorial.Sri.EstadoTributario.Estado != "OBLIGACIONES TRIBUTARIAS PENDIENTES")
                        {
                            resultadoComparacion = diferenciaAnios >= minimo;
                            if (antiguedadRuc != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antiguedadRuc.Excepcional,
                                    IdPolitica = antiguedadRuc.Id,
                                    Politica = antiguedadRuc.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAniosRuc, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, datosPersona.FechaInicio.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = diferenciaAnios.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now,
                                });
                                if (antiguedadRuc.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antiguedadRuc.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else
                        {
                            if (antiguedadRuc != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antiguedadRuc.Excepcional,
                                    IdPolitica = antiguedadRuc.Id,
                                    Politica = antiguedadRuc.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAniosRuc, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, datosPersona.FechaInicio.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = diferenciaAnios.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antiguedadRuc.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antiguedadRuc.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        minimo = 0;
                        if (datosHistorial.Sri.Anexos != null && datosHistorial.Sri.Anexos.Any())
                        {
                            var datosRenta = datosHistorial.Sri.Anexos.OrderByDescending(x => x.Periodo).Select(x => new { x.Periodo, x.Causado }).ToList().Take(2);
                            int periodo = 0;
                            double causado = 0;
                            var impuestoMensaje = string.Empty;
                            if (datosRenta != null && datosRenta.Any())
                            {
                                if (datosRenta.Count() == 2 && datosRenta.First().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.First().Periodo;
                                    causado = (double)datosRenta.First().Causado;
                                }
                                else if (datosRenta.Count() == 2 && datosRenta.Last().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.Last().Periodo;
                                    causado = (double)datosRenta.Last().Causado;
                                }
                                else if (datosRenta.Count() == 1 && datosRenta.First().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.First().Periodo;
                                    causado = (double)datosRenta.First().Causado;
                                }
                                else
                                {
                                    periodo = DateTime.Now.AddYears(-1).Year;
                                    impuestoMensaje = $"No presenta valor en el año {periodo}";
                                }
                            }
                            else
                            {
                                periodo = DateTime.Now.AddYears(-1).Year;
                                impuestoMensaje = $"No presenta valor en el año {periodo}";
                            }

                            if (string.IsNullOrEmpty(impuestoMensaje))
                            {
                                resultadoComparacion = causado > minimo;
                                if (impuestoRenta != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = impuestoRenta.Excepcional,
                                        IdPolitica = impuestoRenta.Id,
                                        Politica = $"{impuestoRenta.Nombre} {periodo}",
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", causado >= 0 ? causado.ToString("N", culture) : "0.00"),
                                        Valor = causado >= 0 ? causado.ToString("N", culture) : "0.00",
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        Observacion = $"Periodo {periodo}",
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (impuestoRenta.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(impuestoRenta.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = false;
                                if (impuestoRenta != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = impuestoRenta.Excepcional,
                                        IdPolitica = impuestoRenta.Id,
                                        Politica = $"{impuestoRenta.Nombre} {periodo}",
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                        ValorResultado = impuestoMensaje,
                                        Valor = impuestoMensaje,
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        Observacion = $"Periodo {periodo}",
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (impuestoRenta.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(impuestoRenta.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }

                        //minimo = 0;
                        //if (datosHistorial.Sri.UltimoValorDivisa != null)
                        //{
                        //    resultadoComparacion = datosHistorial.Sri.UltimoValorDivisa > minimo;
                        //    if (isd != null)
                        //    {
                        //        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        //        {
                        //            IdPolitica = isd.Id,
                        //            Politica = isd.Nombre,
                        //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                        //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosHistorial.Sri.UltimoValorDivisa.ToString()),
                        //            Valor = datosHistorial.Sri.UltimoValorDivisa.ToString(),
                        //            Parametro = minimo.ToString(),
                        //            ResultadoPolitica = resultadoComparacion
                        //        });
                        //        if (isd.Excepcional && !resultadoComparacion)
                        //        {
                        //            observaciones.Add(isd.Nombre);
                        //            aprobacionAdicional = true;
                        //        }
                        //    }
                        //}

                        minimo = 40;
                        if (datosHistorial.Sri.Deudas != null && datosHistorial.Sri.Deudas.Any() && datosHistorial.Sri.Deudas.ContainsKey("Firmes"))
                        {
                            resultadoComparacion = datosHistorial.Sri.Deudas["Firmes"].Valor.Value < minimo;
                            if (deudaFirme != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = deudaFirme.Excepcional,
                                    IdPolitica = deudaFirme.Id,
                                    Politica = deudaFirme.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosHistorial.Sri.Deudas["Firmes"].Valor.Value),
                                    Valor = datosHistorial.Sri.Deudas["Firmes"].Valor.Value.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (deudaFirme.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(deudaFirme.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else
                        {
                            if (deudaFirme != null)
                            {
                                resultadoComparacion = true;
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = deudaFirme.Excepcional,
                                    IdPolitica = deudaFirme.Id,
                                    Politica = deudaFirme.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                    Valor = "0.00",
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (deudaFirme.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(deudaFirme.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        if (datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado))
                        {
                            resultadoComparacion = datosHistorial.Sri.EstadoTributario.Estado != "OBLIGACIONES TRIBUTARIAS PENDIENTES";
                            if (estadoTributario != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = estadoTributario.Excepcional,
                                    IdPolitica = estadoTributario.Id,
                                    Politica = estadoTributario.Nombre,
                                    ReferenciaMinima = Dominio.Constantes.TextoReferencia.EstadoTributario,
                                    ValorResultado = datosHistorial.Sri.EstadoTributario.Estado,
                                    Valor = datosHistorial.Sri.EstadoTributario.Estado,
                                    Parametro = Dominio.Constantes.TextoReferencia.EstadoTributario,
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (estadoTributario.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(estadoTributario.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        if ((!string.IsNullOrEmpty(datosHistorial.Sri.EstadoContribuyente) && datosHistorial.Sri.EstadoContribuyente != "SUSPENDIDO") || (datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado) && datosHistorial.Sri.EstadoTributario.Estado == "OBLIGACIONES TRIBUTARIAS PENDIENTES"))
                        {
                            if (datosHistorial.Sri.PermisoFacturacion != null && !string.IsNullOrEmpty(datosHistorial.Sri.PermisoFacturacion.Vigencia))
                            {
                                var valorVigencia = Regex.Matches(datosHistorial.Sri.PermisoFacturacion.Vigencia, @"[0-9]+");
                                if (valorVigencia != null && int.TryParse(valorVigencia[0].ToString(), out _))
                                {
                                    var valorFacturacion = int.Parse(valorVigencia[0].ToString());
                                    minimo = 12;
                                    if (valorFacturacion <= 3)
                                    {
                                        resultadoComparacion = valorFacturacion > minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (!resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                    else if (valorFacturacion > 3 && valorFacturacion < 12)
                                    {
                                        resultadoComparacion = valorFacturacion > minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (permisoFacturacion.Excepcional && !resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                    else if (valorFacturacion >= 12)
                                    {
                                        resultadoComparacion = valorFacturacion >= minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (permisoFacturacion.Excepcional && !resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas SRI.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SRI. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación SRI

                #region Evaluación Civil
                try
                {
                    var direccionesAdicionales = new List<string>();
                    Externos.Logica.Garancheck.Modelos.Persona personaTemp = null;
                    _logger.LogInformation("Procesando políticas Civil...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                    var resultadoComparacion = false;

                    var edad = -1;
                    if (detalleHistorial != null)
                    {
                        //Civil En Línea
                        var persona = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(detalleHistorial.Datos);
                        if (persona != null && persona.FechaNacimiento != default)
                        {
                            edad = DateTime.Today.Year - persona.FechaNacimiento.Year;
                            if (persona.FechaNacimiento.Date > DateTime.Today.AddYears(-edad))
                                edad--;
                        }

                        if (persona != null)
                        {
                            var direccionTempRegCivil = string.Join("/", new[] { persona.LugarDomicilio?.Trim(), persona.CalleDomicilio?.Trim(), persona.NumeracionDomicilio?.Trim() }.Where(m => !string.IsNullOrEmpty(m)).ToArray());
                            if (!string.IsNullOrEmpty(direccionTempRegCivil))
                                direccionesAdicionales.Add(direccionTempRegCivil);
                        }
                    }
                    else
                    {
                        //Civil Histórico
                        detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                        {
                            Datos = m.Data
                        }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);

                        if (detalleHistorial != null)
                        {
                            var persona = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(detalleHistorial.Datos);
                            if (persona != null && !string.IsNullOrEmpty(persona.FechaNacimiento.Value.ToString()))
                            {
                                edad = DateTime.Today.Year - persona.FechaNacimiento.Value.Year;
                                if (persona.FechaNacimiento.Value.Date > DateTime.Today.AddYears(-edad))
                                    edad--;
                            }
                            personaTemp = persona;
                        }
                    }

                    //Edad
                    if (edad >= 0)
                    {
                        resultadoComparacion = (edad > 25 && edad <= 80);
                        if (civil != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = civil.Excepcional,
                                IdPolitica = civil.Id,
                                Politica = civil.Nombre,
                                ReferenciaMinima = "Mayor a 25 años y Menor o igual a 80 años",
                                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Edad, edad.ToString()),
                                Valor = edad.ToString(),
                                Parametro = "[25,80]",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (civil.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(civil.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                    //Contactos
                    var detalleHistorialPersonal = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Personales && m.Generado);

                    Externos.Logica.Garancheck.Modelos.Personal personalTemp = null;
                    if (detalleHistorialPersonal != null)
                        personalTemp = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(detalleHistorialPersonal.Datos);

                    if (personaTemp == null)
                    {
                        var detalleHistorialCiudadano = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                        {
                            Datos = m.Data
                        }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);

                        if (detalleHistorialCiudadano != null)
                            personaTemp = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(detalleHistorialCiudadano.Datos);
                    }

                    if (personalTemp != null && !string.IsNullOrEmpty(personalTemp.NombreCalle?.Trim()) && !string.IsNullOrEmpty(personalTemp.NumeroCasa?.Trim()))
                    {
                        if (personaTemp != null && !string.IsNullOrEmpty(personaTemp.Provincia?.Trim()) && !string.IsNullOrEmpty(personaTemp.Canton?.Trim()) && !string.IsNullOrEmpty(personaTemp.Parroquia?.Trim()))
                            direccionesAdicionales.Add($"{personaTemp.Provincia} / {personaTemp.Canton} / {personaTemp.Parroquia} / {personalTemp.NombreCalle} {personalTemp.NumeroCasa}");
                        else
                            direccionesAdicionales.Add($"{personalTemp.NombreCalle} {personalTemp.NumeroCasa}");
                    }

                    var contactosPersona = new Contacto();
                    var direccionesContacto = 0;
                    var telefonosContacto = 0;
                    var emailsContacto = 0;
                    var detalleContactos = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Contactos && m.Generado);

                    if (detalleContactos != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactos.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    var detalleContactosEmpresa = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa && m.Generado);

                    if (detalleContactosEmpresa != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactosEmpresa.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    var detalleContactosIess = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosIess && m.Generado);

                    if (detalleContactosIess != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactosIess.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    if (direccionesAdicionales.Any())
                        direccionesContacto += direccionesAdicionales.Count;

                    minimo = 2;
                    resultadoComparacion = direccionesContacto >= minimo;
                    if (contactarmeDirecciones != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeDirecciones.Excepcional,
                            IdPolitica = contactarmeDirecciones.Id,
                            Politica = contactarmeDirecciones.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = direccionesContacto.ToString(),
                            Valor = direccionesContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeDirecciones.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeDirecciones.Nombre);
                            aprobacionAdicional = true;
                        }
                    }
                    resultadoComparacion = telefonosContacto >= minimo;
                    if (contactarmeTelefonos != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeTelefonos.Excepcional,
                            IdPolitica = contactarmeTelefonos.Id,
                            Politica = contactarmeTelefonos.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = telefonosContacto.ToString(),
                            Valor = telefonosContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeTelefonos.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeTelefonos.Nombre);
                            aprobacionAdicional = true;
                        }
                    }

                    resultadoComparacion = emailsContacto >= minimo;
                    if (contactarmeEmails != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeEmails.Excepcional,
                            IdPolitica = contactarmeEmails.Id,
                            Politica = contactarmeEmails.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = emailsContacto.ToString(),
                            Valor = emailsContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeEmails.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeEmails.Nombre);
                            aprobacionAdicional = true;
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas Civil.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Civil. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Civil

                #region Evaluación IESS
                try
                {
                    _logger.LogInformation("Procesando políticas IESS...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Iess && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var iess = JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Persona>(detalleHistorial.Datos);

                        if (iess != null)
                        {
                            var mora = Convert.ToDouble(iess.Mora);
                            minimo = 50;

                            var resultadoComparacion = mora < minimo;
                            if (iessMoraPatronal != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = iessMoraPatronal.Excepcional,
                                    IdPolitica = iessMoraPatronal.Id,
                                    Politica = iessMoraPatronal.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", mora.ToString()),
                                    Valor = mora.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (iessMoraPatronal.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(iessMoraPatronal.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas IESS.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de IESS. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación IESS

                #region Evaluación Afiliado
                try
                {
                    _logger.LogInformation("Procesando políticas AFILIADO...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var afiliado = JsonConvert.DeserializeObject<Afiliacion>(detalleHistorial.Datos);
                        var estadoAfiliadoIess = new[] { "ACTIVO/A", "JUBILADO/A", "AFILIADO ACTIVO" };
                        var resultadoComparacion = false;
                        var estadoAfiliado = "N/A";
                        if (!string.IsNullOrEmpty(afiliado.Estado))
                        {
                            estadoAfiliado = afiliado.Estado;
                            resultadoComparacion = estadoAfiliadoIess.Contains(afiliado.Estado);
                        }
                        if (iessAfiliacion != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = iessAfiliacion.Excepcional,
                                IdPolitica = iessAfiliacion.Id,
                                Politica = iessAfiliacion.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoAfiliacion, "ACTIVO/A, JUBILADO/A"),
                                ValorResultado = estadoAfiliado,
                                Valor = estadoAfiliado,
                                Parametro = "ACTIVO/A, JUBILADO/A, AFILIADO ACTIVO",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (iessAfiliacion.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(iessAfiliacion.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                    _logger.LogInformation("Fin procesamiento políticas AFILIADO.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de AFILIADO. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Afiliado

                #region Evaluación Senescyt
                try
                {
                    _logger.LogInformation("Procesando políticas SENECYT...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt && m.Generado);

                    var resultadoComparacion = false;
                    if (detalleHistorial != null)
                    {
                        var senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(detalleHistorial.Datos);
                        if (senescyt != null)
                            resultadoComparacion = senescyt.TotalTitulos > 0;

                        if (tituloNivelSuperior != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = tituloNivelSuperior.Excepcional,
                                IdPolitica = tituloNivelSuperior.Id,
                                Politica = tituloNivelSuperior.Nombre,
                                ReferenciaMinima = "SI",
                                ValorResultado = resultadoComparacion ? "SI" : "NO",
                                Valor = resultadoComparacion ? "SI" : "NO",
                                Parametro = "SI",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(tituloNivelSuperior.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                    else
                    {
                        var datosCivil = new CivilViewModel();
                        var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                        var detallesCivil = await _detalleHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);

                        var civilHistorial = detallesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado && !string.IsNullOrEmpty(m.Data));
                        if (civilHistorial != null)
                            datosCivil.RegistroCivil = JsonConvert.DeserializeObject<RegistroCivil>(civilHistorial.Data);

                        if (datosCivil != null && datosCivil.RegistroCivil == null)
                        {
                            civilHistorial = detallesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado && !string.IsNullOrEmpty(m.Data));
                            if (civilHistorial != null)
                                datosCivil.Ciudadano = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(civilHistorial.Data);
                        }

                        if (datosCivil != null && datosCivil.RegistroCivil != null)
                        {
                            if (!string.IsNullOrEmpty(datosCivil.RegistroCivil.Instruccion?.Trim()) && datosCivil.RegistroCivil.Instruccion.Trim().ToUpper() == "SUPERIOR")
                                resultadoComparacion = true;

                            if (tituloNivelSuperior != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = tituloNivelSuperior.Excepcional,
                                    IdPolitica = tituloNivelSuperior.Id,
                                    Politica = tituloNivelSuperior.Nombre,
                                    ReferenciaMinima = "SI",
                                    ValorResultado = resultadoComparacion ? "SI" : "NO",
                                    Valor = resultadoComparacion ? "SI" : "NO",
                                    Parametro = "SI",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(tituloNivelSuperior.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else if (datosCivil != null && datosCivil.RegistroCivil == null && datosCivil.Ciudadano != null)
                        {
                            if (!string.IsNullOrEmpty(datosCivil.Ciudadano.Instruccion?.Trim()) && datosCivil.Ciudadano.Instruccion.Trim().ToUpper() == "SUPERIOR")
                                resultadoComparacion = true;

                            if (tituloNivelSuperior != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = tituloNivelSuperior.Excepcional,
                                    IdPolitica = tituloNivelSuperior.Id,
                                    Politica = tituloNivelSuperior.Nombre,
                                    ReferenciaMinima = "SI",
                                    ValorResultado = resultadoComparacion ? "SI" : "NO",
                                    Valor = resultadoComparacion ? "SI" : "NO",
                                    Parametro = "SI",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(tituloNivelSuperior.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }

                    //if (detalleHistorial != null)
                    //{
                    //    var senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(detalleHistorial.Datos);
                    //    minimo = 0;

                    //    var resultadoComparacion = senescyt.TotalTitulos > 0;

                    //    if (nivelEstudios != null)
                    //    {
                    //        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                    //        {
                    //            IdPolitica = nivelEstudios.Id,
                    //            Politica = nivelEstudios.Nombre,
                    //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                    //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Titulos, senescyt.TotalTitulos.ToString()),
                    //            Valor = senescyt.TotalTitulos.ToString(),
                    //            Parametro = 0.ToString(),
                    //            ResultadoPolitica = resultadoComparacion,
                    //            FechaCreacion = DateTime.Now
                    //        });
                    //        if (nivelEstudios.Excepcional && !resultadoComparacion)
                    //        {
                    //            observaciones.Add(nivelEstudios.Nombre);
                    //            aprobacionAdicional = true;
                    //        }
                    //    }
                    //}

                    _logger.LogInformation("Fin procesamiento políticas SENECYT.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SENECYT. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Senescyt

                #region Evaluación Legal
                try
                {
                    _logger.LogInformation("Procesando políticas LEGAL...");
                    //int? procesosActor = null;
                    int? procesosDemandado = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado);

                    if (detalleHistorial != null)
                    {
                        //procesosActor = 0;
                        procesosDemandado = 0;
                        var fJudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(detalleHistorial.Datos);
                        var pathProcesosLegales = Path.Combine("wwwroot", "data", "dataProcesosLegales.json");
                        var lstProcesos = JsonConvert.DeserializeObject<List<ProcesoLegal>>(System.IO.File.ReadAllText(pathProcesosLegales));
                        var lstCadena = lstProcesos.Select(x => x.Proceso.ToUpper()).ToList();
                        var fechaTope = DateTime.Now.AddYears(-6);
                        demandadoEspecificoJudicial = fJudicial.Demandado.Values.Count(m => lstCadena.Any(n => m.Descripcion.ToUpper().Contains(n)) && (m.Fecha.HasValue ? m.Fecha.Value.Date >= fechaTope.Date : false));

                        //procesosActor += fJudicial.Actor.Values.Count(m => !m.Descripcion.Contains(Dominio.Constantes.Politicas.PoliticaLegalRoboDocumento)
                        //                                                && !m.Descripcion.Contains(Dominio.Constantes.Politicas.PoliticaLegalArrendamiento));
                        procesosDemandado += demandadoEspecificoJudicial;

                        //minimo = 5;
                        //var resultadoComparacion = !(procesosActor > minimo);
                        //if (legalDemandante != null)
                        //{
                        //    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        //    {
                        //        IdPolitica = legalDemandante.Id,
                        //        Politica = legalDemandante.Nombre,
                        //        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgual, minimo),
                        //        ValorResultado = procesosActor.ToString(),
                        //        Valor = procesosActor.ToString(),
                        //        Parametro = minimo.ToString(),
                        //        ResultadoPolitica = resultadoComparacion
                        //    });
                        //    if (legalDemandante.Excepcional && !resultadoComparacion)
                        //    {
                        //        observaciones.Add(legalDemandante.Nombre);
                        //        aprobacionAdicional = true;
                        //    }
                        //}

                        minimo = 0;
                        var resultadoComparacion = !(procesosDemandado > minimo);
                        if (legalPersona != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = legalPersona.Excepcional,
                                IdPolitica = legalPersona.Id,
                                Politica = legalPersona.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximo, minimo),
                                ValorResultado = procesosDemandado.ToString(),
                                Valor = procesosDemandado.ToString(),
                                Parametro = minimo.ToString(),
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (legalPersona.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(legalPersona.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }



                    _logger.LogInformation("Fin procesamiento políticas LEGAL.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de LEGAL. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Legal

                #region Evaluación Ant
                try
                {
                    _logger.LogInformation("Procesando políticas ANT...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ant && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var fuenteAnt = JsonConvert.DeserializeObject<Externos.Logica.ANT.Modelos.Licencia>(detalleHistorial.Datos);
                        if (fuenteAnt != null)
                        {
                            minimo = 150;
                            var autos = fuenteAnt.Autos != null && fuenteAnt.Autos.Any() ? fuenteAnt.Autos.Where(m => (!string.IsNullOrEmpty(m.Placa) && m.Placa.Length > 1 && m.Placa != "SIN/PLACA") && (string.IsNullOrEmpty(m.NombrePropietario) || m.NombrePropietario == fuenteAnt.Titular)).ToList() : new List<Externos.Logica.ANT.Modelos.Auto>();
                            if (fuenteAnt.Multas != null && fuenteAnt.Multas.Any())
                                fuenteAnt.Multas = fuenteAnt.Multas.Where(m => autos.Select(m => m.Placa).Contains(m.Placa) || m.Placa == "-" || m.Placa == "SIN/PLACA" || m.Placa.Length == 1 || m.Placa?.Trim() == string.Empty).ToList();

                            var totalMultas = fuenteAnt.Multas.Sum(x => (!x.Pagada.HasValue || (x.Pagada.HasValue && !x.Pagada.Value)) && (!x.Reclamo.HasValue || (x.Reclamo.HasValue && !x.Reclamo.Value))
                                              && (!x.Anulada.HasValue || (x.Anulada.HasValue && !x.Anulada.Value)) ? x.Saldo : 0);
                            var resultadoComparacion = totalMultas < minimo;
                            if (pagoMultasPendiente != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = pagoMultasPendiente.Excepcional,
                                    IdPolitica = pagoMultasPendiente.Id,
                                    Politica = pagoMultasPendiente.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", totalMultas.ToString("N", culture)),
                                    Valor = totalMultas.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (pagoMultasPendiente.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(pagoMultasPendiente.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de ANT. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Ant

                #region PensionAlimenticia
                try
                {
                    _logger.LogInformation("Procesando políticas Pensión Alimenticia...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PensionAlimenticia && m.Generado);
                    var resultadoComparacion = false;

                    if (detalleHistorial != null)
                    {
                        var pensionAlimenticia = JsonConvert.DeserializeObject<Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia>(detalleHistorial.Datos);
                        double totalDeudaAlimenticia = 0;
                        minimo = 500;

                        if (pensionAlimenticia != null && pensionAlimenticia.Resultados != null && pensionAlimenticia.Resultados.Any())
                        {
                            var valorDeudaPension = new List<List<Externos.Logica.PensionesAlimenticias.Modelos.Movimiento>>();
                            var valorMensualPension = new List<string>();
                            var resultadoPension = pensionAlimenticia.Resultados;
                            var nombreHistorial = resultadoPension.FirstOrDefault().Nombre;
                            var movimientosPension = resultadoPension.Select(x => new { x.Movimientos, x.Intervinientes, x.PensionActualOriginal }).ToList();
                            if (movimientosPension != null && movimientosPension.Any() && !string.IsNullOrEmpty(nombreHistorial))
                            {
                                var nombreDivido = nombreHistorial.Split(' ');
                                foreach (var item in movimientosPension)
                                {
                                    var obligadoNombre = item.Intervinientes.Where(x => x.Tipo.ToUpper() == "OBLIGADO PRINCIPAL").Select(x => x.Nombre).ToList();
                                    if (obligadoNombre != null && obligadoNombre.Any())
                                    {
                                        var listaNombre = new List<bool>();
                                        foreach (var item1 in obligadoNombre)
                                        {
                                            var nombreSeparado = item1.Split(' ').Where(s => !string.IsNullOrWhiteSpace(s)).ToArray();
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (nombreHistorial.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (listaNombre.Count(x => x) == nombreDivido.Length)
                                            {
                                                valorDeudaPension.Add(item.Movimientos);
                                                valorMensualPension.Add(item.PensionActualOriginal);
                                            }
                                        }
                                    }
                                }
                            }

                            if (valorDeudaPension != null && valorDeudaPension.Any())
                            {
                                totalDeudaAlimenticia = valorDeudaPension.Sum(x => x.Sum(m => double.Parse(!string.IsNullOrEmpty(m.ValorDeudaOriginal) ? m.ValorDeudaOriginal.Replace(",", ".") : "0"))) - valorDeudaPension.Sum(x => x.Sum(m => double.Parse(!string.IsNullOrEmpty(m.ValorPagadoOriginal) ? m.ValorPagadoOriginal.Replace(",", ".") : "0")));
                                resultadoComparacion = totalDeudaAlimenticia <= minimo;
                                if (deudaPensionAlimenticia != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = deudaPensionAlimenticia.Excepcional,
                                        IdPolitica = deudaPensionAlimenticia.Id,
                                        Politica = deudaPensionAlimenticia.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", totalDeudaAlimenticia.ToString("N", culture)),
                                        Valor = totalDeudaAlimenticia.ToString("N", culture),
                                        Parametro = minimo.ToString("N", culture),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });

                                    if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(permisoFacturacion.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (deudaPensionAlimenticia != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = deudaPensionAlimenticia.Excepcional,
                                        IdPolitica = deudaPensionAlimenticia.Id,
                                        Politica = deudaPensionAlimenticia.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                        Valor = "0.00",
                                        Parametro = minimo.ToString("N", culture),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });

                                    if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(permisoFacturacion.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }

                            if (valorMensualPension != null && valorMensualPension.Any())
                                valorMensualPAlimenticia = valorMensualPension.Sum(m => double.Parse(!string.IsNullOrEmpty(m) ? m.Replace(",", ".") : "0"));


                            //var pensionActualOriginal = pensionAlimenticia.Resultados.Select(x => x.PensionActualOriginal).ToList();
                            //if (pensionActualOriginal != null && pensionActualOriginal.Any())
                            //    valorMensualPAlimenticia = pensionActualOriginal.Sum(x => double.Parse(!string.IsNullOrEmpty(x) ? x.Replace(",", ".") : "0"));
                        }
                    }
                    else
                    {
                        resultadoComparacion = true;
                        if (deudaPensionAlimenticia != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = deudaPensionAlimenticia.Excepcional,
                                IdPolitica = deudaPensionAlimenticia.Id,
                                Politica = deudaPensionAlimenticia.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "500.00"),
                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                Valor = "0.00",
                                Parametro = "500.00",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });

                            if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(permisoFacturacion.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Pensión Alimenticia. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region SuperintendenciaBancos
                try
                {
                    _logger.LogInformation("Procesando políticas SuperintendenciaBancos...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancos = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancos != null)
                        {
                            var estadoBancos = superBancos.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosCedula != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosCedula.Excepcional,
                                        IdPolitica = superBancosCedula.Id,
                                        Politica = superBancosCedula.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosCedula.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosCedula.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancosRucNatural = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancosRucNatural != null)
                        {
                            var estadoBancos = superBancosRucNatural.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosNatural != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosNatural.Excepcional,
                                        IdPolitica = superBancosNatural.Id,
                                        Politica = superBancosNatural.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosNatural.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosNatural.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SuperintendenciaBancos. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                //#region Predios
                //try
                //{
                //    _logger.LogInformation("Procesando políticas Predios...");
                //    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                //    {
                //        Datos = m.Data
                //    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio && m.Generado);
                //    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                //    {
                //        var predioMunicipio = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(detalleHistorial.Datos);
                //        if (predioMunicipio != null)
                //        {
                //            var nroPredios = predioMunicipio.Detalle.Where(m => m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("CEM")).GroupBy(m => m.Numero).Count();
                //            minimo = 1;
                //            var resultadoComparacion = nroPredios > minimo;
                //            if (prediosPersonal != null)
                //            {
                //                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                //                {
                //                    IdPolitica = prediosPersonal.Id,
                //                    Politica = prediosPersonal.Nombre,
                //                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                //                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Predios, nroPredios.ToString()),
                //                    Valor = nroPredios.ToString(),
                //                    Parametro = minimo.ToString(),
                //                    ResultadoPolitica = resultadoComparacion,
                //                    FechaCreacion = DateTime.Now
                //                });
                //                if (prediosPersonal.Excepcional && !resultadoComparacion)
                //                {
                //                    observaciones.Add(prediosPersonal.Nombre);
                //                    aprobacionAdicional = true;
                //                }
                //            }
                //        }
                //    }
                //}
                //catch (Exception ex)
                //{
                //    _logger.LogError($"Error al procesar políticas de Predios. {ex.Message}");
                //    _logger.LogError(ex, ex.Message);
                //}
                //#endregion

                #region AntecedentesPenales
                try
                {
                    _logger.LogInformation("Procesando políticas Antecedentes Penales...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.AntecedentesPenales && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var antecedentes = JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.Resultado>(detalleHistorial.Datos);
                        if (antecedentes != null && !string.IsNullOrEmpty(antecedentes.Antecedente))
                        {
                            var resultadoComparacion = !antecedentes.Antecedente.ToUpper().Equals("SI");
                            if (antecedentesPenales != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antecedentesPenales.Excepcional,
                                    IdPolitica = antecedentesPenales.Id,
                                    Politica = antecedentesPenales.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.AntecedentesPenales, "NO"),
                                    ValorResultado = antecedentes.Antecedente.ToUpper(),
                                    Valor = antecedentes.Antecedente.ToUpper(),
                                    Parametro = "NO",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antecedentesPenales.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antecedentesPenales.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Antecedentes Penales. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region NoticiaDelito
                try
                {
                    _logger.LogInformation("Procesando políticas Noticias del Delito...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosPersona && m.Generado);
                    var entidad = await _historiales.FirstOrDefaultAsync(m => new { m.Identificacion, m.IdentificacionSecundaria, m.NombresPersona }, m => m.Id == modelo.IdHistorial, null);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos) && entidad != null)
                    {
                        var delitoNoticia = JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(detalleHistorial.Datos);
                        if (delitoNoticia != null)
                        {
                            minimo = 0;
                            var resultadoComparacion = false;
                            var cantidadSujeto = new List<string>();
                            var sujetos = delitoNoticia.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                            if (sujetos != null && sujetos.Any())
                            {
                                var nombreDivido = entidad.NombresPersona?.Split(' ');
                                var listaNombre = new List<bool>();

                                foreach (var item1 in sujetos.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                                {
                                    if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                    {
                                        if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(entidad.Identificacion) && entidad.Identificacion == item1.Cedula)
                                            cantidadSujeto.Add(item1.Numero);
                                        else if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(entidad.IdentificacionSecundaria) && entidad.IdentificacionSecundaria == item1.Cedula)
                                            cantidadSujeto.Add(item1.Numero);
                                        else
                                        {
                                            var nombreSeparado = item1.NombresCompletos.Split(' ');
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (!string.IsNullOrEmpty(entidad.NombresPersona) && entidad.NombresPersona.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                                                cantidadSujeto.Add(item1.Numero);
                                        }
                                    }
                                }
                                cantidadSujeto = cantidadSujeto.Distinct().ToList();
                            }

                            if (cantidadSujeto.Count() > 0)
                            {
                                resultadoComparacion = minimo > cantidadSujeto.Count();
                                if (noticiaDelito != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelito.Excepcional,
                                        IdPolitica = noticiaDelito.Id,
                                        Politica = noticiaDelito.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelito.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelito.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (noticiaDelito != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelito.Excepcional,
                                        IdPolitica = noticiaDelito.Id,
                                        Politica = noticiaDelito.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelito.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelito.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Noticias del Delito. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region Evaluación Buró
                try
                {
                    _logger.LogInformation("Procesando políticas BURÓ...");
                    Externos.Logica.BuroCredito.Modelos.CreditoRespuesta r_burocredito = null;
                    Externos.Logica.Equifax.Modelos.Resultado r_burocredito_equifax = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito && m.Generado);

                    if (detalleHistorial != null && planBuroCredito != null)
                    {
                        if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                        {
                            r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(detalleHistorial.Datos);
                            if (r_burocredito != null && r_burocredito.Result != null)
                            {
                                ViewBag.EvaluarBuro = true;
                                ViewBag.VisualizarBuro = true;
                                #region Procesamiento Políticas AVAL
                                //Manejo de cuentas corrientes
                                try
                                {
                                    if (manejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito.Result.ManejoCuentasCorrientes.OrderByDescending(x => x.FechaCumplimientoSancion).FirstOrDefault().FechaCumplimientoSancion;
                                        if (fechaCumplimiento != null && fechaCumplimiento != default)
                                        {
                                            var manejoCuentasCorrientesComparacion = DateTime.Now.Date >= fechaCumplimiento.Value.AddYears(+1).Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = manejoCuentasCorrientes.Excepcional,
                                                IdPolitica = manejoCuentasCorrientes.Id,
                                                Politica = manejoCuentasCorrientes.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFechaSansion, fechaCumplimiento.Value.AddYears(+1).Date.ToString("yyyy/MM/dd"), fechaCumplimiento.Value.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.Value.AddYears(+1).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = manejoCuentasCorrientesComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (manejoCuentasCorrientes.Excepcional && !manejoCuentasCorrientesComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Manejo Cuentas Corrientes. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Fecha Cumplimiento Sancion
                                try
                                {
                                    if (FechaCumplimientoSancion != null && r_burocredito.Result.ManejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito.Result.ManejoCuentasCorrientes.OrderByDescending(x => x.FechaCumplimientoSancion).FirstOrDefault().FechaCumplimientoSancion;
                                        if (fechaCumplimiento != null && fechaCumplimiento != default)
                                        {
                                            var fechaSansion = fechaCumplimiento.Value.Date <= DateTime.Now.Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = FechaCumplimientoSancion.Excepcional,
                                                IdPolitica = FechaCumplimientoSancion.Id,
                                                Politica = FechaCumplimientoSancion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFecha, fechaCumplimiento.Value.Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.Value.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = fechaSansion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (FechaCumplimientoSancion.Excepcional && !fechaSansion)
                                            {
                                                observacionesBuro.Add(FechaCumplimientoSancion.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Fecha Cumplimiento Sanción. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Deuda vigente total
                                try
                                {
                                    if (r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any())
                                    {
                                        //Valor vencido
                                        if (deudaVigenteTotal != null)
                                        {
                                            minimo = 0;
                                            decimal deudaVigenteTotalSuma = (decimal)r_burocredito.Result.DeudaVigenteTotal.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                            var deudaVigenteTotalComparacion = deudaVigenteTotalSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!deudaVigenteTotalComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.SaldoVencido.HasValue && x.SaldoVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.SaldoVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.ValorVencido.HasValue && x.ValorVencido.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesServicio != null && r_burocredito.Result.OperacionesVigentesServicio.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesServicio.Where(x => x.ValorVencido.HasValue && x.ValorVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", deudaVigenteTotalSuma.ToString()),
                                                Valor = deudaVigenteTotalSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = deudaVigenteTotalComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (deudaVigenteTotal.Excepcional && !deudaVigenteTotalComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        //Demanda judicial
                                        if (valorDemandaJudicial != null)
                                        {
                                            minimo = 0;
                                            var valorDemandaJudicialSuma = r_burocredito.Result.DeudaVigenteTotal.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                            var valorDemandaJudicialComparacion = valorDemandaJudicialSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!valorDemandaJudicialComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.DemandaJudicial.HasValue && x.DemandaJudicial.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.DemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialSuma.ToString()),
                                                Valor = valorDemandaJudicialSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicialComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (valorDemandaJudicial.Excepcional && !valorDemandaJudicialComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        //Cartera castigada
                                        if (valorCarteraCastigada != null)
                                        {
                                            minimo = 0;
                                            var valorCarteraCastigadaSuma = r_burocredito.Result.DeudaVigenteTotal.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                            var valorCarteraCastigadaComparacion = valorCarteraCastigadaSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!valorCarteraCastigadaComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaSuma.ToString()),
                                                Valor = valorCarteraCastigadaSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorCarteraCastigadaComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (valorCarteraCastigada.Excepcional && !valorCarteraCastigadaComparacion)
                                            {
                                                observacionesBuro.Add(valorCarteraCastigada.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = deudaVigenteTotal.Excepcional,
                                            IdPolitica = deudaVigenteTotal.Id,
                                            Politica = deudaVigenteTotal.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, deudaVigenteTotal.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial.Excepcional,
                                            IdPolitica = valorDemandaJudicial.Id,
                                            Politica = valorDemandaJudicial.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicial.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCarteraCastigada.Excepcional,
                                            IdPolitica = valorCarteraCastigada.Id,
                                            Politica = valorCarteraCastigada.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigada.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Deuda Vigente Total. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses
                                try
                                {
                                    var historicoTarjeta = r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any() ? r_burocredito.Result.OperacionesHistoricasTarjeta.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.SaldoVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoBanco = r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any() ? r_burocredito.Result.OperacionesHistoricasBanco.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCobranza = r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any() ? r_burocredito.Result.OperacionesHistoricasCobranza.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.DemandaJudicial, RazonSocial = x.NombreCasaCobranza }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCooperativa = r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any() ? r_burocredito.Result.OperacionesHistoricasCooperativa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoEmpresa = r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any() ? r_burocredito.Result.OperacionesHistoricasEmpresa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoServicio = r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any() ? r_burocredito.Result.OperacionesHistoricasServicio.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = (double?)0, DemandaJudicial = (double?)0, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();

                                    if (historicoTarjeta.Any() || historicoBanco.Any() || historicoCobranza.Any() ||
                                        historicoCooperativa.Any() || historicoEmpresa.Any() || historicoServicio.Any())
                                    {
                                        var historico = historicoTarjeta.Concat(historicoBanco).Concat(historicoCobranza).Concat(historicoCooperativa).Concat(historicoEmpresa).Concat(historicoServicio).ToList();

                                        if (valorVencido12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleVencido = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.Vencido == historico.Max(y => y.Vencido)).Select(x => new { x.Vencido, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleVencido != null && detalleVencido.Vencido.HasValue)
                                            {
                                                var valorVencido12MesesComparacion = detalleVencido.Vencido.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleVencido.Vencido.Value, 2).ToString()),
                                                    Valor = detalleVencido.Vencido.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencido12MesesComparacion,
                                                    FechaCorte = detalleVencido.FechaCorte.HasValue && detalleVencido.FechaCorte.Value.Date != default ? detalleVencido.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencido12MesesComparacion && detalleVencido != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencido.RazonSocial, Valor = detalleVencido.Vencido.HasValue ? (decimal)detalleVencido.Vencido.Value : 0 } }) : null
                                                });
                                                if (valorVencido12Meses.Excepcional && !valorVencido12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencido12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (valorDemandaJudicial12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicial = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historico.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleDemandaJudicial != null && detalleDemandaJudicial.DemandaJudicial.HasValue)
                                            {
                                                var valorDemandaJudicial12MesesComparacion = detalleDemandaJudicial.DemandaJudicial.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicial12Meses.Id,
                                                    Politica = valorDemandaJudicial12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleDemandaJudicial.DemandaJudicial.Value, 2).ToString()),
                                                    Valor = detalleDemandaJudicial.DemandaJudicial.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorDemandaJudicial12MesesComparacion,
                                                    FechaCorte = detalleDemandaJudicial.FechaCorte.HasValue && detalleDemandaJudicial.FechaCorte.Value.Date != default ? detalleDemandaJudicial.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorDemandaJudicial12MesesComparacion && detalleDemandaJudicial != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicial.RazonSocial, Valor = detalleDemandaJudicial.DemandaJudicial.HasValue ? (decimal)detalleDemandaJudicial.DemandaJudicial.Value : 0 } }) : null
                                                });
                                                if (valorDemandaJudicial12Meses.Excepcional && !valorDemandaJudicial12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorDemandaJudicial12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicial12Meses.Id,
                                                    Politica = valorDemandaJudicial12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (carteraCastigada12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigada = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historico.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleCarteraCastigada != null && detalleCarteraCastigada.CarteraCastigada.HasValue)
                                            {
                                                var carteraCastigada12MesesComparacion = detalleCarteraCastigada.CarteraCastigada.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigada12Meses.Excepcional,
                                                    IdPolitica = carteraCastigada12Meses.Id,
                                                    Politica = carteraCastigada12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleCarteraCastigada.CarteraCastigada.Value, 2).ToString()),
                                                    Valor = detalleCarteraCastigada.CarteraCastigada.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = carteraCastigada12MesesComparacion,
                                                    FechaCorte = detalleCarteraCastigada.FechaCorte.HasValue && detalleCarteraCastigada.FechaCorte.Value.Date != default ? detalleCarteraCastigada.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !carteraCastigada12MesesComparacion && detalleCarteraCastigada != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigada.RazonSocial, Valor = detalleCarteraCastigada.CarteraCastigada.HasValue ? (decimal)detalleCarteraCastigada.CarteraCastigada : 0 } }) : null
                                                });
                                                if (carteraCastigada12Meses.Excepcional && !carteraCastigada12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(carteraCastigada12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigada12Meses.Excepcional,
                                                    IdPolitica = carteraCastigada12Meses.Id,
                                                    Politica = carteraCastigada12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencido12Meses.Excepcional,
                                            IdPolitica = valorVencido12Meses.Id,
                                            Politica = valorVencido12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicial12Meses.Id,
                                            Politica = valorDemandaJudicial12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigada12Meses.Excepcional,
                                            IdPolitica = carteraCastigada12Meses.Id,
                                            Politica = carteraCastigada12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses
                                try
                                {
                                    var historicoTarjetaMayor12Meses = r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any() ? r_burocredito.Result.OperacionesHistoricasTarjeta.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.SaldoVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoBancoMayor12Meses = r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any() ? r_burocredito.Result.OperacionesHistoricasBanco.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCobranzaMayor12Meses = r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any() ? r_burocredito.Result.OperacionesHistoricasCobranza.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.DemandaJudicial, RazonSocial = x.NombreCasaCobranza }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCooperativaMayor12Meses = r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any() ? r_burocredito.Result.OperacionesHistoricasCooperativa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoEmpresaMayor12Meses = r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any() ? r_burocredito.Result.OperacionesHistoricasEmpresa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoServicioMayor12Meses = r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any() ? r_burocredito.Result.OperacionesHistoricasServicio.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = (double?)0, DemandaJudicial = (double?)0, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();

                                    if (historicoTarjetaMayor12Meses.Any() || historicoBancoMayor12Meses.Any() || historicoCobranzaMayor12Meses.Any() ||
                                        historicoCooperativaMayor12Meses.Any() || historicoEmpresaMayor12Meses.Any() || historicoServicioMayor12Meses.Any())
                                    {
                                        var historicoMayor12Meses = historicoTarjetaMayor12Meses.Concat(historicoBancoMayor12Meses).Concat(historicoCobranzaMayor12Meses).Concat(historicoCooperativaMayor12Meses).Concat(historicoEmpresaMayor12Meses).Concat(historicoServicioMayor12Meses).ToList();

                                        if (valorVencidoMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleVencidoMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.Vencido == historicoMayor12Meses.Max(y => y.Vencido)).Select(x => new { x.Vencido, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleVencidoMayor12Meses != null && detalleVencidoMayor12Meses.Vencido.HasValue)
                                            {
                                                var valorVencidoMayor12MesesComparacion = detalleVencidoMayor12Meses.Vencido.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleVencidoMayor12Meses.Vencido.Value, 2).ToString()),
                                                    Valor = detalleVencidoMayor12Meses.Vencido.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencidoMayor12MesesComparacion,
                                                    FechaCorte = detalleVencidoMayor12Meses.FechaCorte.HasValue && detalleVencidoMayor12Meses.FechaCorte.Value.Date != default ? detalleVencidoMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencidoMayor12MesesComparacion && detalleVencidoMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencidoMayor12Meses.RazonSocial, Valor = detalleVencidoMayor12Meses.Vencido.HasValue ? (decimal)detalleVencidoMayor12Meses.Vencido.Value : 0 } }) : null
                                                });
                                                if (valorVencidoMayor12Meses.Excepcional && !valorVencidoMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencidoMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (valorDemandaJudicialMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicialMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historicoMayor12Meses.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleDemandaJudicialMayor12Meses != null && detalleDemandaJudicialMayor12Meses.DemandaJudicial.HasValue)
                                            {
                                                var valorDemandaJudicialMayor12MesesComparacion = detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                    Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value, 2).ToString()),
                                                    Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorDemandaJudicialMayor12MesesComparacion,
                                                    FechaCorte = detalleDemandaJudicialMayor12Meses.FechaCorte.HasValue && detalleDemandaJudicialMayor12Meses.FechaCorte.Value.Date != default ? detalleDemandaJudicialMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorDemandaJudicialMayor12MesesComparacion && detalleDemandaJudicialMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicialMayor12Meses.RazonSocial, Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.HasValue ? (decimal)detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value : 0 } }) : null
                                                });
                                                if (valorDemandaJudicialMayor12Meses.Excepcional && !valorDemandaJudicialMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorDemandaJudicialMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                    Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });

                                        }

                                        if (carteraCastigadaMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigadaMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historicoMayor12Meses.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleCarteraCastigadaMayor12Meses != null && detalleCarteraCastigadaMayor12Meses.CarteraCastigada.HasValue)
                                            {
                                                var carteraCastigadaMayor12MesesComparacion = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                    IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                    Politica = carteraCastigadaMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value, 2).ToString()),
                                                    Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = carteraCastigadaMayor12MesesComparacion,
                                                    FechaCorte = detalleCarteraCastigadaMayor12Meses.FechaCorte.HasValue && detalleCarteraCastigadaMayor12Meses.FechaCorte.Value.Date != default ? detalleCarteraCastigadaMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !carteraCastigadaMayor12MesesComparacion && detalleCarteraCastigadaMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigadaMayor12Meses.RazonSocial, Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.HasValue ? (decimal)detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value : 0 } }) : null
                                                });
                                                if (carteraCastigadaMayor12Meses.Excepcional && !carteraCastigadaMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(carteraCastigadaMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                    IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                    Politica = carteraCastigadaMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoMayor12Meses.Excepcional,
                                            IdPolitica = valorVencidoMayor12Meses.Id,
                                            Politica = valorVencidoMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                            Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                            IdPolitica = carteraCastigadaMayor12Meses.Id,
                                            Politica = carteraCastigadaMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cuota vencidos
                                try
                                {
                                    if (valorCuotaVencidos != null && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                    {
                                        minimo = 0;
                                        var valorCuotaVencidosSuma = r_burocredito.Result.GastoFinanciero.Where(m => m.CuotaVencidos.HasValue).Sum(m => m.CuotaVencidos.Value);
                                        var valorCuotaVencidosComparacion = valorCuotaVencidosSuma <= minimo;

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCuotaVencidosSuma.ToString()),
                                            Valor = valorCuotaVencidosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorCuotaVencidosComparacion,
                                            FechaCreacion = DateTime.Now
                                        });
                                        if (valorCuotaVencidos.Excepcional && !valorCuotaVencidosComparacion)
                                        {
                                            observacionesBuro.Add(valorCuotaVencidos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCuotaVencidos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones vigentes tarjetas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                //    {
                                //        if (saldoVencidoTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var saldoVencidoTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Where(m => m.SaldoVencido.HasValue).Sum(m => m.SaldoVencido.Value);
                                //            var saldoVencidoTarjetasComparacion = saldoVencidoTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = saldoVencidoTarjetas.Id,
                                //                Politica = saldoVencidoTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", saldoVencidoTarjetasSuma.ToString()),
                                //                Valor = saldoVencidoTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = saldoVencidoTarjetasComparacion
                                //            });
                                //            if (saldoVencidoTarjetas.Excepcional && !saldoVencidoTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(saldoVencidoTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialTarjetasComparacion = valorDemandaJudicialTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialTarjetas.Id,
                                //                Politica = valorDemandaJudicialTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialTarjetasSuma.ToString()),
                                //                Valor = valorDemandaJudicialTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialTarjetasComparacion
                                //            });
                                //            if (valorDemandaJudicialTarjetas.Excepcional && !valorDemandaJudicialTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (carteraCastigadaTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var carteraCastigadaTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Sum(m => m.CarteraCastigada ?? 0);
                                //            var carteraCastigadaTarjetasComparacion = carteraCastigadaTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = carteraCastigadaTarjetas.Id,
                                //                Politica = carteraCastigadaTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaTarjetasSuma.ToString()),
                                //                Valor = carteraCastigadaTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = carteraCastigadaTarjetasComparacion
                                //            });
                                //            if (carteraCastigadaTarjetas.Excepcional && !carteraCastigadaTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(carteraCastigadaTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Max(m => m.DiasMorosidad) ?? 0;
                                //            var diasMorosidadTarjetasComparacion = diasMorosidadTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadTarjetas.Id,
                                //                Politica = diasMorosidadTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadTarjetasSuma.ToString()),
                                //                Valor = diasMorosidadTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadTarjetasComparacion
                                //            });
                                //            if (diasMorosidadTarjetas.Excepcional && !diasMorosidadTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = saldoVencidoTarjetas.Id,
                                //            Politica = saldoVencidoTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, saldoVencidoTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialTarjetas.Id,
                                //            Politica = valorDemandaJudicialTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = carteraCastigadaTarjetas.Id,
                                //            Politica = carteraCastigadaTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, carteraCastigadaTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadTarjetas.Id,
                                //            Politica = diasMorosidadTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadTarjetas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Tarjetas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes bancos                            
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                //    {
                                //        if (valorVencidoTotalBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalBancosComparacion = valorVencidoTotalBancosSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalBancos.Id,
                                //                Politica = valorVencidoTotalBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalBancosSuma.ToString()),
                                //                Valor = valorVencidoTotalBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalBancosComparacion
                                //            });
                                //            if (valorVencidoTotalBancos.Excepcional && !valorVencidoTotalBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialBancosComparacion = valorDemandaJudicialBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialBancos.Id,
                                //                Politica = valorDemandaJudicialBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialBancosSuma.ToString()),
                                //                Valor = valorDemandaJudicialBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialBancosComparacion
                                //            });
                                //            if (valorDemandaJudicialBancos.Excepcional && !valorDemandaJudicialBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaBancosComparacion = valorCarteraCastigadaBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaBancos.Id,
                                //                Politica = valorCarteraCastigadaBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaBancosSuma.ToString()),
                                //                Valor = valorCarteraCastigadaBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaBancosComparacion
                                //            });
                                //            if (valorCarteraCastigadaBancos.Excepcional && !valorCarteraCastigadaBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.DiasMorosidad.HasValue).Max(m => m.DiasMorosidad.Value);
                                //            var diasMorosidadBancosComparacion = diasMorosidadBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadBancos.Id,
                                //                Politica = diasMorosidadBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadBancosSuma.ToString()),
                                //                Valor = diasMorosidadBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadBancosComparacion
                                //            });
                                //            if (diasMorosidadBancos.Excepcional && !diasMorosidadBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalBancos.Id,
                                //            Politica = valorVencidoTotalBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalBancos.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialBancos.Id,
                                //            Politica = valorDemandaJudicialBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialBancos.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaBancos.Id,
                                //            Politica = valorCarteraCastigadaBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaBancos.Nombre)

                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadBancos.Id,
                                //            Politica = diasMorosidadBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadBancos.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Bancos. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes cooperativas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                //    {
                                //        if (valorVencidoTotalCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalCooperativasComparacion = valorVencidoTotalCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalCooperativas.Id,
                                //                Politica = valorVencidoTotalCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalCooperativasSuma.ToString()),
                                //                Valor = valorVencidoTotalCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalCooperativasComparacion
                                //            });
                                //            if (valorVencidoTotalCooperativas.Excepcional && !valorVencidoTotalCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialCooperativasComparacion = valorDemandaJudicialCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialCooperativas.Id,
                                //                Politica = valorDemandaJudicialCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialCooperativasSuma.ToString()),
                                //                Valor = valorDemandaJudicialCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialCooperativasComparacion
                                //            });
                                //            if (valorDemandaJudicialCooperativas.Excepcional && !valorDemandaJudicialCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaCooperativasComparacion = valorCarteraCastigadaCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaCooperativas.Id,
                                //                Politica = valorCarteraCastigadaCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaCooperativasSuma.ToString()),
                                //                Valor = valorCarteraCastigadaCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaCooperativasComparacion
                                //            });
                                //            if (valorCarteraCastigadaCooperativas.Excepcional && !valorCarteraCastigadaCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.DiasMorosidad.HasValue).Max(m => m.DiasMorosidad.Value);
                                //            var diasMorosidadCooperativasComparacion = diasMorosidadCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadCooperativas.Id,
                                //                Politica = diasMorosidadCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadCooperativasSuma.ToString()),
                                //                Valor = diasMorosidadCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadCooperativasComparacion
                                //            });
                                //            if (diasMorosidadCooperativas.Excepcional && !diasMorosidadCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalCooperativas.Id,
                                //            Politica = valorVencidoTotalCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialCooperativas.Id,
                                //            Politica = valorDemandaJudicialCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaCooperativas.Id,
                                //            Politica = valorCarteraCastigadaCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadCooperativas.Id,
                                //            Politica = diasMorosidadCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadCooperativas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes empresas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                //    {
                                //        if (valorVencidoTotalEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalEmpresasComparacion = valorVencidoTotalEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalEmpresas.Id,
                                //                Politica = valorVencidoTotalEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalEmpresasSuma.ToString()),
                                //                Valor = valorVencidoTotalEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalEmpresasComparacion
                                //            });
                                //            if (valorVencidoTotalEmpresas.Excepcional && !valorVencidoTotalEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialEmpresasComparacion = valorDemandaJudicialEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialEmpresas.Id,
                                //                Politica = valorDemandaJudicialEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialEmpresasSuma.ToString()),
                                //                Valor = valorDemandaJudicialEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialEmpresasComparacion
                                //            });
                                //            if (valorDemandaJudicialEmpresas.Excepcional && !valorDemandaJudicialEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaEmpresasComparacion = valorCarteraCastigadaEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaEmpresas.Id,
                                //                Politica = valorCarteraCastigadaEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaEmpresasSuma.ToString()),
                                //                Valor = valorCarteraCastigadaEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaEmpresasComparacion
                                //            });
                                //            if (valorCarteraCastigadaEmpresas.Excepcional && !valorCarteraCastigadaEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.DiasVencido.HasValue).Max(m => m.DiasVencido.Value);
                                //            var diasMorosidadEmpresasComparacion = diasMorosidadEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadEmpresas.Id,
                                //                Politica = diasMorosidadEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadEmpresasSuma.ToString()),
                                //                Valor = diasMorosidadEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadEmpresasComparacion
                                //            });
                                //            if (diasMorosidadEmpresas.Excepcional && !diasMorosidadEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalEmpresas.Id,
                                //            Politica = valorVencidoTotalEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialEmpresas.Id,
                                //            Politica = valorDemandaJudicialEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaEmpresas.Id,
                                //            Politica = valorCarteraCastigadaEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadEmpresas.Id,
                                //            Politica = diasMorosidadEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadEmpresas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Empresas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //operaciones vigentes servicios
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesServicio != null && r_burocredito.Result.OperacionesVigentesServicio.Any())
                                //    {
                                //        if (valorVencidoVigentesServicios != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoVigentesServiciosSuma = r_burocredito.Result.OperacionesVigentesServicio.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                //            var valorVencidoVigentesServiciosComparacion = valorVencidoVigentesServiciosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoVigentesServicios.Id,
                                //                Politica = valorVencidoVigentesServicios.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoVigentesServiciosSuma.ToString()),
                                //                Valor = valorVencidoVigentesServiciosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoVigentesServiciosComparacion
                                //            });
                                //            if (valorVencidoVigentesServicios.Excepcional && !valorVencidoVigentesServiciosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoVigentesServicios.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (numeroDiasVencidoVigentesServicios != null)
                                //        {
                                //            minimo = 0;
                                //            var numeroDiasVencidoVigentesServiciosSuma = r_burocredito.Result.OperacionesVigentesServicio.Where(m => m.NumeroDiasVencido.HasValue).Max(m => m.NumeroDiasVencido.Value);
                                //            var numeroDiasVencidoVigentesServiciosComparacion = numeroDiasVencidoVigentesServiciosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = numeroDiasVencidoVigentesServicios.Id,
                                //                Politica = numeroDiasVencidoVigentesServicios.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, numeroDiasVencidoVigentesServiciosSuma.ToString()),
                                //                Valor = numeroDiasVencidoVigentesServiciosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = numeroDiasVencidoVigentesServiciosComparacion
                                //            });
                                //            if (numeroDiasVencidoVigentesServicios.Excepcional && !numeroDiasVencidoVigentesServiciosComparacion)
                                //            {
                                //                observacionesBuro.Add(numeroDiasVencidoVigentesServicios.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoVigentesServicios.Id,
                                //            Politica = valorVencidoVigentesServicios.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoVigentesServicios.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = numeroDiasVencidoVigentesServicios.Id,
                                //            Politica = numeroDiasVencidoVigentesServicios.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, numeroDiasVencidoVigentesServicios.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Servicios. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes cobranzas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                //    {
                                //        if (valorVencidoVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                //            var valorVencidoVigentesCobranzasComparacion = valorVencidoVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoVigentesCobranzas.Id,
                                //                Politica = valorVencidoVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoVigentesCobranzasSuma.ToString()),
                                //                Valor = valorVencidoVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoVigentesCobranzasComparacion
                                //            });
                                //            if (valorVencidoVigentesCobranzas.Excepcional && !valorVencidoVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (demandaJudicialVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var demandaJudicialVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.DemandaJudicial.HasValue).Sum(m => m.DemandaJudicial.Value);
                                //            var demandaJudicialVigentesCobranzasComparacion = demandaJudicialVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = demandaJudicialVigentesCobranzas.Id,
                                //                Politica = demandaJudicialVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", demandaJudicialVigentesCobranzasSuma.ToString()),
                                //                Valor = demandaJudicialVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = demandaJudicialVigentesCobranzasComparacion
                                //            });
                                //            if (demandaJudicialVigentesCobranzas.Excepcional && !demandaJudicialVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(demandaJudicialVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (carteraCastigadaVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var carteraCastigadaVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var carteraCastigadaVigentesCobranzasComparacion = carteraCastigadaVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = carteraCastigadaVigentesCobranzas.Id,
                                //                Politica = carteraCastigadaVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaVigentesCobranzasSuma.ToString()),
                                //                Valor = carteraCastigadaVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = carteraCastigadaVigentesCobranzasComparacion
                                //            });
                                //            if (carteraCastigadaVigentesCobranzas.Excepcional && !carteraCastigadaVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(carteraCastigadaVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (numeroDiasVencidoVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var numeroDiasVencidoVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.NumeroDiasVencido.HasValue).Max(m => m.NumeroDiasVencido.Value);
                                //            var numeroDiasVencidoVigentesCobranzasComparacion = numeroDiasVencidoVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = numeroDiasVencidoVigentesCobranzas.Id,
                                //                Politica = numeroDiasVencidoVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, numeroDiasVencidoVigentesCobranzasSuma.ToString()),
                                //                Valor = numeroDiasVencidoVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = numeroDiasVencidoVigentesCobranzasComparacion
                                //            });
                                //            if (numeroDiasVencidoVigentesCobranzas.Excepcional && !numeroDiasVencidoVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(numeroDiasVencidoVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoVigentesCobranzas.Id,
                                //            Politica = valorVencidoVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = demandaJudicialVigentesCobranzas.Id,
                                //            Politica = demandaJudicialVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, demandaJudicialVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = carteraCastigadaVigentesCobranzas.Id,
                                //            Politica = carteraCastigadaVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, carteraCastigadaVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = numeroDiasVencidoVigentesCobranzas.Id,
                                //            Politica = numeroDiasVencidoVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, numeroDiasVencidoVigentesCobranzas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cobranzas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Indicadores deuda
                                //try
                                //{
                                //    if (mayorSaldoVencido36Meses != null && r_burocredito.Result.IndicadoresDeuda != null && r_burocredito.Result.IndicadoresDeuda.Any())
                                //    {
                                //        minimo = 0;
                                //        var mayorSaldoVencido36MesesSuma = r_burocredito.Result.IndicadoresDeuda.Where(m => m.MaySaldoVencDirecta36M.HasValue).Sum(m => m.MaySaldoVencDirecta36M.Value);
                                //        var mayorSaldoVencido36MesesComparacion = mayorSaldoVencido36MesesSuma <= minimo;

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = mayorSaldoVencido36Meses.Id,
                                //            Politica = mayorSaldoVencido36Meses.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", mayorSaldoVencido36MesesSuma.ToString()),
                                //            Valor = mayorSaldoVencido36MesesSuma.ToString(),
                                //            Parametro = minimo.ToString(),
                                //            ResultadoPolitica = mayorSaldoVencido36MesesComparacion,
                                //            FechaCreacion = DateTime.Now
                                //        });
                                //        if (mayorSaldoVencido36Meses.Excepcional && !mayorSaldoVencido36MesesComparacion)
                                //        {
                                //            observacionesBuro.Add(mayorSaldoVencido36Meses.Nombre);
                                //            aprobacionAdicionalBuro = true;
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = mayorSaldoVencido36Meses.Id,
                                //            Politica = mayorSaldoVencido36Meses.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, mayorSaldoVencido36Meses.Nombre),
                                //            FechaCreacion = DateTime.Now
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Indicadores Deudas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones históricas tarjetas                             
                                try
                                {
                                    if (valorVencidoHistoricoTarjetas != null && r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoTarjetasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasTarjeta.Where(m => m.SaldoVencido.HasValue).Sum(m => m.SaldoVencido.Value), 2);
                                        var valorVencidoHistoricoTarjetasComparacion = valorVencidoHistoricoTarjetasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoTarjetasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasTarjeta.Where(m => m.SaldoVencido.HasValue && m.SaldoVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.SaldoVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoTarjetas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoTarjetas.Id,
                                            Politica = valorVencidoHistoricoTarjetas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoTarjetasSuma.ToString()),
                                            Valor = valorVencidoHistoricoTarjetasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoTarjetasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoTarjetas.Excepcional && !valorVencidoHistoricoTarjetasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoTarjetas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoTarjetas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoTarjetas.Id,
                                            Politica = valorVencidoHistoricoTarjetas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoTarjetas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Tarjetas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas bancos                            
                                try
                                {
                                    if (valorVencidoHistoricoBancos != null && r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoBancosSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasBanco.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoBancosComparacion = valorVencidoHistoricoBancosSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoBancosComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasBanco.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoBancos.Excepcional,
                                            IdPolitica = valorVencidoHistoricoBancos.Id,
                                            Politica = valorVencidoHistoricoBancos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoBancosSuma.ToString()),
                                            Valor = valorVencidoHistoricoBancosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoBancosComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoBancos.Excepcional && !valorVencidoHistoricoBancosComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoBancos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoBancos.Excepcional,
                                            IdPolitica = valorVencidoHistoricoBancos.Id,
                                            Politica = valorVencidoHistoricoBancos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoBancos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Bancos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas cooperativas                            
                                try
                                {
                                    if (valorVencidoHistoricoCooperativas != null && r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoCooperativasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasCooperativa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoCooperativasComparacion = valorVencidoHistoricoCooperativasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoCooperativasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasCooperativa.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCooperativas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCooperativas.Id,
                                            Politica = valorVencidoHistoricoCooperativas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoCooperativasSuma.ToString()),
                                            Valor = valorVencidoHistoricoCooperativasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoCooperativasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoCooperativas.Excepcional && !valorVencidoHistoricoCooperativasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoCooperativas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCooperativas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCooperativas.Id,
                                            Politica = valorVencidoHistoricoCooperativas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoCooperativas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas empresas                            
                                try
                                {
                                    if (valorVencidoHistoricoEmpresas != null && r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoEmpresasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasEmpresa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoEmpresasComparacion = valorVencidoHistoricoEmpresasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoEmpresasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasEmpresa.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoEmpresas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoEmpresas.Id,
                                            Politica = valorVencidoHistoricoEmpresas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoEmpresasSuma.ToString()),
                                            Valor = valorVencidoHistoricoEmpresasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoEmpresasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoEmpresas.Excepcional && !valorVencidoHistoricoEmpresasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoEmpresas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoEmpresas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoEmpresas.Id,
                                            Politica = valorVencidoHistoricoEmpresas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoEmpresas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Empresas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas servicio                            
                                try
                                {
                                    if (valorVencidoHistoricoServicio != null && r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoServicioSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasServicio.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value), 2);
                                        var valorVencidoHistoricoServicioComparacion = valorVencidoHistoricoServicioSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoServicioComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasServicio.Where(m => m.ValorVencido.HasValue && m.ValorVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoServicio.Excepcional,
                                            IdPolitica = valorVencidoHistoricoServicio.Id,
                                            Politica = valorVencidoHistoricoServicio.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoServicioSuma.ToString()),
                                            Valor = valorVencidoHistoricoServicioSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoServicioComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoServicio.Excepcional && !valorVencidoHistoricoServicioComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoServicio.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoServicio.Excepcional,
                                            IdPolitica = valorVencidoHistoricoServicio.Id,
                                            Politica = valorVencidoHistoricoServicio.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoServicio.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Servicios. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas cobranza                            
                                try
                                {
                                    if (valorVencidoHistoricoCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoCobranzaSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasCobranza.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value), 2);
                                        var valorVencidoHistoricoCobranzaComparacion = valorVencidoHistoricoCobranzaSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoCobranzaComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasCobranza.Where(m => m.ValorVencido.HasValue && m.ValorVencido.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCobranza.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCobranza.Id,
                                            Politica = valorVencidoHistoricoCobranza.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoCobranzaSuma.ToString()),
                                            Valor = valorVencidoHistoricoCobranzaSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoCobranzaComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoCobranza.Excepcional && !valorVencidoHistoricoCobranzaComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoCobranza.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCobranza.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCobranza.Id,
                                            Politica = valorVencidoHistoricoCobranza.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoCobranza.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Cobranzas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Gastos financieros e Ingresos
                                try
                                {
                                    if (r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any() && r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any())
                                    {
                                        var valorRangoIngreso = double.Parse(!string.IsNullOrEmpty(r_burocredito.Result.Ingreso.Select(m => m.RangoIngreso).FirstOrDefault()) ? r_burocredito.Result.Ingreso.Select(m => m.RangoIngreso).FirstOrDefault() : "0");
                                        var valorGastosFinancieros = r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular).FirstOrDefault() != null && r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular).FirstOrDefault() > 0 ? r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular).FirstOrDefault() : 0;
                                        var valorGastosFinancierosTotal = valorGastosFinancieros + valorMensualPAlimenticia;
                                        var ingresoEstimado = valorGastosFinancierosTotal * 1.40;
                                        var saldoFinanciero = true;
                                        var deudaSuma = 0.00;
                                        if ((r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any()) || valorMensualPAlimenticia > 0)
                                        {
                                            var deudaVencido = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorVencido);
                                            var deudaDemandaJudicial = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorDemandaJudicial);
                                            var deudaCarteraCastigada = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.CarteraCastigada);
                                            deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + valorMensualPAlimenticia);
                                        }

                                        if (deudaSuma == 0)
                                        {
                                            if (ingresoEstimado > valorRangoIngreso)
                                            {
                                                saldoFinanciero = valorGastosFinancierosTotal < (ingresoEstimado * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (ingresoEstimado * 0.80).Value.ToString("N", culture), ingresoEstimado.Value.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastosFinancierosTotal.Value.ToString("N", culture)),
                                                    Valor = valorGastosFinancierosTotal.ToString(),
                                                    Parametro = (ingresoEstimado * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                            {
                                                if (valorRangoIngreso >= 0 && gastosFinancieros != null)
                                                {
                                                    saldoFinanciero = valorGastosFinancierosTotal < (valorRangoIngreso * 0.80);
                                                    detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                    {
                                                        Excepcional = gastosFinancieros.Excepcional,
                                                        IdPolitica = gastosFinancieros.Id,
                                                        Politica = gastosFinancieros.Nombre,
                                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorRangoIngreso * 0.80).ToString("N", culture), valorRangoIngreso.ToString("N", culture)),
                                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastosFinancierosTotal.Value.ToString("N", culture)),
                                                        Valor = valorGastosFinancierosTotal.ToString(),
                                                        Parametro = (valorRangoIngreso * 0.80).ToString(),
                                                        ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                        FechaCreacion = DateTime.Now
                                                    });
                                                    if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                    {
                                                        observacionesBuro.Add(gastosFinancieros.Nombre);
                                                        aprobacionAdicionalBuro = true;
                                                    }
                                                }

                                            }
                                        }
                                        else if (deudaSuma > 0)
                                        {
                                            if (valorRangoIngreso >= 0 && gastosFinancieros != null)
                                            {
                                                saldoFinanciero = valorGastosFinancierosTotal < (valorRangoIngreso * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorRangoIngreso * 0.80).ToString("N", culture), valorRangoIngreso.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastosFinancierosTotal.Value.ToString("N", culture)),
                                                    Valor = valorGastosFinancierosTotal.ToString(),
                                                    Parametro = (valorRangoIngreso * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = gastosFinancieros.Excepcional,
                                            IdPolitica = gastosFinancieros.Id,
                                            Politica = gastosFinancieros.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, "0", "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? true : false,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, gastosFinancieros.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros e Ingresos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                #endregion Procesamiento Políticas AVAL

                                #region AYASA
                                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1792899036001)
                                {
                                    if (r_burocredito.Result.ModeloAutomotrizAyasa != null)
                                        datosPersonaBuro.ModeloAutomotrizaAyasa = r_burocredito.Result.ModeloAutomotrizAyasa.FirstOrDefault();

                                    datosPersonaBuro.CalificacionClienteAyasa = true;
                                }
                                #endregion AYASA

                                #region BCapital
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                                {
                                    if (r_burocredito.Result != null)
                                        datosPersonaBuro.ModeloBCapital = r_burocredito;

                                    datosPersonaBuro.CalificacionBCapital = true;
                                }
                                #endregion BCapital

                                #region Cooperativas
                                if (planBuroCredito.ModeloCooperativas)
                                {
                                    if (r_burocredito.Result != null)
                                        datosPersonaBuro.ModeloCooperativas = r_burocredito;

                                    datosPersonaBuro.CalificacionCooperativas = true;
                                }
                                #endregion Cooperativas

                                #region Calificación
                                datosPersonaBuro.Score = 0;
                                if (r_burocredito.Result.Score != null && r_burocredito.Result.Score.Any())
                                    datosPersonaBuro.Score = r_burocredito.Result.Score.Select(m => m.Score).FirstOrDefault();

                                datosPersonaBuro.CupoEstimado = 0;
                                if (r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any() && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                {
                                    var rangoIngreso = double.Parse(!string.IsNullOrEmpty(r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso) ? r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso : "0");
                                    var cuotaEstimada = r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular != null && r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular > 0 ? r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular : 0;
                                    var cuotaEstimadaTotal = cuotaEstimada + valorMensualPAlimenticia;
                                    var ingresoEstimado = cuotaEstimadaTotal * 1.40;
                                    var deudaSuma = 0.00;
                                    if ((r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any()) || valorMensualPAlimenticia > 0)
                                    {
                                        var deudaVencido = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorVencido);
                                        var deudaDemandaJudicial = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorDemandaJudicial);
                                        var deudaCarteraCastigada = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.CarteraCastigada);
                                        deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + valorMensualPAlimenticia);
                                    }
                                    if (deudaSuma == 0)
                                    {
                                        if (rangoIngreso != 0)
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimadaTotal) * 0.45;
                                        else
                                            datosPersonaBuro.CupoEstimado = (ingresoEstimado - cuotaEstimadaTotal) * 0.45;
                                    }
                                    else if (deudaSuma > 0)
                                    {
                                        if (rangoIngreso >= 0)
                                        {
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimadaTotal) * 0.45;
                                        }
                                    }
                                }

                                tipoFuenteBuro = Dominio.Tipos.FuentesBuro.Aval;
                                datosPersonaBuro.RangoIngreso = string.Empty;
                                if (r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any() && !string.IsNullOrEmpty(r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso))
                                    datosPersonaBuro.RangoIngreso = r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso;

                                datosPersonaBuro.GastoFinanciero = 0;
                                if (r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                    datosPersonaBuro.GastoFinanciero = r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular)?.FirstOrDefault();

                                datosPersonaBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero + valorMensualPAlimenticia;


                                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                                    datosPersonaBuro.Score = r_burocredito?.Result?.ScoreFinanciero?.FirstOrDefault()?.Score;
                                else if (planBuroCredito.ModeloCooperativas)
                                    datosPersonaBuro.Score = r_burocredito?.Result?.ScoreFinanciero?.FirstOrDefault()?.Score;

                                if (datosPersonaBuro.Score < Dominio.Constantes.ConstantesCalificacion.MinimoScoreBuro)
                                {
                                    observacionesBuro.Add("Score");
                                    aprobacionAdicionalBuro = true;
                                }

                                if (detalleCalificacionBuro != null && detalleCalificacionBuro.Any())
                                {
                                    datosPersonaBuro.Identificacion = identificacionOriginal;
                                    datosPersonaBuro.TipoFuente = tipoFuenteBuro;
                                    datosPersonaBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                    datosPersonaBuro.TotalValidados = detalleCalificacionBuro.Count;
                                    datosPersonaBuro.TotalAprobados = detalleCalificacionBuro.Count(m => m.ResultadoPolitica);
                                    datosPersonaBuro.TotalRechazados = detalleCalificacionBuro.Count(m => !m.ResultadoPolitica);

                                    if (datosPersonaBuro.TotalValidados > 0) datosPersonaBuro.Calificacion = Math.Round((decimal)datosPersonaBuro.TotalAprobados * 100 / datosPersonaBuro.TotalValidados, 2, MidpointRounding.AwayFromZero);
                                    datosPersonaBuro.Aprobado = datosPersonaBuro.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                                    datosPersonaBuro.DetalleCalificacion = detalleCalificacionBuro;

                                    if (aprobacionAdicionalBuro)
                                    {
                                        datosPersonaBuro.Observaciones = string.Join(". ", observacionesBuro);
                                        datosPersonaBuro.Aprobado = false;
                                    }

                                    var calificacionesDetalleBuro = datosPersonaBuro.DetalleCalificacion.Select(m => new DetalleCalificacion
                                    {
                                        IdPolitica = m.IdPolitica,
                                        Valor = m.Valor,
                                        Parametro = m.Parametro,
                                        Aprobado = m.ResultadoPolitica,
                                        Datos = m.ValorResultado,
                                        ReferenciaMinima = m.ReferenciaMinima,
                                        Observacion = m.Observacion,
                                        UsuarioCreacion = idUsuario,
                                        FechaCorte = m.FechaCorte,
                                        Instituciones = m.Instituciones
                                    }).ToList();

                                    if (actualizarBuro)
                                    {
                                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnteriorBuro);
                                        calificacionAnteriorBuro.DetalleCalificacion = calificacionesDetalleBuro;
                                        calificacionAnteriorBuro.Puntaje = datosPersonaBuro.Calificacion;
                                        calificacionAnteriorBuro.Aprobado = datosPersonaBuro.Aprobado;
                                        calificacionAnteriorBuro.NumeroAprobados = datosPersonaBuro.TotalAprobados;
                                        calificacionAnteriorBuro.NumeroRechazados = datosPersonaBuro.TotalRechazados;
                                        calificacionAnteriorBuro.TotalVerificados = datosPersonaBuro.TotalValidados;
                                        calificacionAnteriorBuro.Observaciones = datosPersonaBuro.Observaciones;
                                        calificacionAnteriorBuro.UsuarioModificacion = idUsuario;
                                        calificacionAnteriorBuro.FechaModificacion = DateTime.Now;
                                        calificacionAnteriorBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                        calificacionAnteriorBuro.Score = datosPersonaBuro.Score;
                                        calificacionAnteriorBuro.CupoEstimado = datosPersonaBuro.CupoEstimado;
                                        calificacionAnteriorBuro.RangoIngreso = datosPersonaBuro.RangoIngreso;
                                        calificacionAnteriorBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero;
                                        calificacionAnteriorBuro.TipoFuenteBuro = tipoFuenteBuro;
                                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnteriorBuro);
                                        datosPersonaBuro.IdCalificacion = calificacionAnteriorBuro.Id;
                                    }
                                    else
                                    {
                                        datosPersonaBuro.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                                        {
                                            IdHistorial = modelo.IdHistorial,
                                            Puntaje = datosPersonaBuro.Calificacion,
                                            Aprobado = datosPersonaBuro.Aprobado,
                                            NumeroAprobados = datosPersonaBuro.TotalAprobados,
                                            NumeroRechazados = datosPersonaBuro.TotalRechazados,
                                            TotalVerificados = datosPersonaBuro.TotalValidados,
                                            Observaciones = datosPersonaBuro.Observaciones,
                                            UsuarioCreacion = idUsuario,
                                            TipoCalificacion = datosPersonaBuro.TipoCalificacion,
                                            Score = datosPersonaBuro.Score,
                                            CupoEstimado = datosPersonaBuro.CupoEstimado,
                                            RangoIngreso = datosPersonaBuro.RangoIngreso,
                                            GastoFinanciero = datosPersonaBuro.GastoFinanciero,
                                            TipoFuenteBuro = tipoFuenteBuro,
                                            DetalleCalificacion = calificacionesDetalleBuro,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }

                                    datosPersonaLista.Add(datosPersonaBuro);
                                }
                                #endregion Calificación
                            }
                            else
                            {
                                ViewBag.VisualizarBuro = true;
                                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                            }
                        }
                        else if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                        {
                            //TODO: analizar si hacer con data de datarespaldo
                            r_burocredito_equifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(detalleHistorial.Datos);
                            if (r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.ResultadoConsulta)
                            {
                                ViewBag.EvaluarBuro = true;
                                ViewBag.VisualizarBuro = true;
                                #region Procesamiento Políticas EQUIFAX
                                //Manejo de cuentas corrientes
                                try
                                {
                                    if (manejoCuentasCorrientes != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito_equifax.Resultados.PersonasInhabilitadas.OrderByDescending(x => x.FechaInhabilitacion).Select(x => new { x.FechaInhabilitacion, x.TiempoInhabilitacion }).FirstOrDefault();
                                        if (fechaCumplimiento != null && fechaCumplimiento.FechaInhabilitacion != default && fechaCumplimiento.TiempoInhabilitacion > 0)
                                        {
                                            var manejoCuentasCorrientesComparacion = DateTime.Now.Date >= fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = manejoCuentasCorrientes.Excepcional,
                                                IdPolitica = manejoCuentasCorrientes.Id,
                                                Politica = manejoCuentasCorrientes.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFechaSansion, fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"), fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = manejoCuentasCorrientesComparacion,
                                                FechaCreacion = DateTime.Now
                                            });

                                            if (manejoCuentasCorrientes.Excepcional && !manejoCuentasCorrientesComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Manejo Cuentas Corrientes. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Fecha Cumplimiento Sancion
                                try
                                {
                                    if (FechaCumplimientoSancion != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito_equifax.Resultados.PersonasInhabilitadas.OrderByDescending(x => x.FechaInhabilitacion).Select(x => new { x.FechaInhabilitacion, x.TiempoInhabilitacion }).FirstOrDefault();
                                        if (fechaCumplimiento != null && fechaCumplimiento.FechaInhabilitacion != default && fechaCumplimiento.TiempoInhabilitacion > 0)
                                        {
                                            var fechaSansion = fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date <= DateTime.Now.Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = FechaCumplimientoSancion.Excepcional,
                                                IdPolitica = FechaCumplimientoSancion.Id,
                                                Politica = FechaCumplimientoSancion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFecha, fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = fechaSansion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (FechaCumplimientoSancion.Excepcional && !fechaSansion)
                                            {
                                                observacionesBuro.Add(FechaCumplimientoSancion.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Fecha Cumplimiento Sanción. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor vencido vigente total
                                try
                                {
                                    if (deudaVigenteTotal != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var deudaVigenteTotalSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.Vencido);
                                            var deudaVigenteTotalComparacion = deudaVigenteTotalSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!deudaVigenteTotalComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());
                                            }


                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", deudaVigenteTotalSuma.ToString()),
                                                Valor = deudaVigenteTotalSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = deudaVigenteTotalComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (deudaVigenteTotal.Excepcional && !deudaVigenteTotalComparacion)
                                            {
                                                observacionesBuro.Add(deudaVigenteTotal.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, deudaVigenteTotal.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor demanda judicial
                                try
                                {
                                    if (valorDemandaJudicial != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var demandaJudicialSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.DemandaJudicial);
                                            var demandaJudicialComparacion = demandaJudicialSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!demandaJudicialComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", demandaJudicialSuma.ToString()),
                                                Valor = demandaJudicialSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = demandaJudicialComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (valorDemandaJudicial.Excepcional && !demandaJudicialComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicial.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cartera castigada
                                try
                                {
                                    if (valorCarteraCastigada != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var carteraCastigadaSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.CarteraCastigada);
                                            var carteraCastigadaComparacion = carteraCastigadaSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!carteraCastigadaComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaSuma.ToString()),
                                                Valor = carteraCastigadaSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigadaComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (valorCarteraCastigada.Excepcional && !carteraCastigadaComparacion)
                                            {
                                                observacionesBuro.Add(valorCarteraCastigada.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigada.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses Vencido
                                try
                                {
                                    var historicoVencido = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && !string.IsNullOrEmpty(x.OpcionParam) && x.OpcionParam.Trim() == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        Vencido0 = new { Name = "Vencido 0 a 1", Valor = new[] { x.Vencido0a1 }.Max() },
                                        Vencido1 = new { Name = "Vencido 1 a 2", Valor = new[] { x.Vencido1a2 }.Max() },
                                        Vencido2 = new { Name = "Vencido 2 a 3", Valor = new[] { x.Vencido2a3 }.Max() },
                                        Vencido3 = new { Name = "Vencido 3 a 6", Valor = new[] { x.Vencido3a6 }.Max() },
                                        Vencido4 = new { Name = "Vencido 6 a 9", Valor = new[] { x.Vencido6a9 }.Max() },
                                        Vencido5 = new { Name = "Vencido 9 a 12", Valor = new[] { x.Vencido9a12 }.Max() },
                                        Vencido6 = new { Name = "Vencido 12 a 24", Valor = new[] { x.Vencido12a24 }.Max() },
                                        Vencido7 = new { Name = "Vencido 24", Valor = new[] { x.Vencido24 }.Max() },
                                        Vencido8 = new { Name = "Vencido 36", Valor = new[] { x.Vencido36 }.Max() },
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();

                                    if (historicoVencido != null && historicoVencido.Any())
                                    {
                                        var lstVencido = new List<HistoricoVencidoViewModel>();
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido0.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido0.Name, Valor = x.Vencido0.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido1.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido1.Name, Valor = x.Vencido1.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido2.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido2.Name, Valor = x.Vencido2.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido3.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido3.Name, Valor = x.Vencido3.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido4.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido4.Name, Valor = x.Vencido4.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido5.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido5.Name, Valor = x.Vencido5.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido6.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido6.Name, Valor = x.Vencido6.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido7.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido7.Name, Valor = x.Vencido7.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido8.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido8.Name, Valor = x.Vencido8.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());

                                        if (lstVencido != null && lstVencido.Any())
                                        {
                                            if (valorVencido12Meses != null)
                                            {
                                                minimo = 0;
                                                var detalleVencido = lstVencido.OrderByDescending(x => x.FechaCorte).Where(x => x.Valor == lstVencido.Max(y => y.Valor)).Select(x => new { x.NmbVencimiento, x.Valor, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                                var valorVencido12MesesComparacion = detalleVencido.Valor <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleVencido.Valor.ToString()),
                                                    Valor = detalleVencido.Valor.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencido12MesesComparacion,
                                                    FechaCorte = detalleVencido.FechaCorte.Date != default ? detalleVencido.FechaCorte.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencido12MesesComparacion && detalleVencido != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencido.SistemaFinanciero, Valor = detalleVencido.Valor, NmbVencimiento = detalleVencido.NmbVencimiento } }) : null
                                                });
                                                if (valorVencido12Meses.Excepcional && !valorVencido12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencido12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorVencido12Meses.Excepcional,
                                                IdPolitica = valorVencido12Meses.Id,
                                                Politica = valorVencido12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                FechaCorte = null,
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencido12Meses.Excepcional,
                                            IdPolitica = valorVencido12Meses.Id,
                                            Politica = valorVencido12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses Vencido. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses
                                try
                                {
                                    var historico = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && !string.IsNullOrEmpty(x.OpcionParam) && x.OpcionParam.Trim() == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        DemandaJudicial = x.DemandaJudicial,
                                        CarteraCastigada = x.CarteraCastigada,
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();
                                    if (historico != null && historico.Any())
                                    {
                                        if (valorDemandaJudicial12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicial = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historico.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var valorDemandaJudicial12MesesComparacion = detalleDemandaJudicial.DemandaJudicial <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                IdPolitica = valorDemandaJudicial12Meses.Id,
                                                Politica = valorDemandaJudicial12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleDemandaJudicial.DemandaJudicial.ToString()),
                                                Valor = detalleDemandaJudicial.DemandaJudicial.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicial12MesesComparacion,
                                                FechaCorte = detalleDemandaJudicial.FechaCorte.Date != default ? detalleDemandaJudicial.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !valorDemandaJudicial12MesesComparacion && detalleDemandaJudicial != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicial.SistemaFinanciero, Valor = detalleDemandaJudicial.DemandaJudicial } }) : null
                                            });
                                            if (valorDemandaJudicial12Meses.Excepcional && !valorDemandaJudicial12MesesComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        if (carteraCastigada12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigada = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historico.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var carteraCastigada12MesesComparacion = detalleCarteraCastigada.CarteraCastigada <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = carteraCastigada12Meses.Excepcional,
                                                IdPolitica = carteraCastigada12Meses.Id,
                                                Politica = carteraCastigada12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleCarteraCastigada.CarteraCastigada.ToString()),
                                                Valor = detalleCarteraCastigada.CarteraCastigada.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigada12MesesComparacion,
                                                FechaCorte = detalleCarteraCastigada.FechaCorte.Date != default ? detalleCarteraCastigada.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !carteraCastigada12MesesComparacion && detalleCarteraCastigada != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigada.SistemaFinanciero, Valor = detalleCarteraCastigada.CarteraCastigada } }) : null
                                            });
                                            if (carteraCastigada12Meses.Excepcional && !carteraCastigada12MesesComparacion)
                                            {
                                                observacionesBuro.Add(carteraCastigada12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicial12Meses.Id,
                                            Politica = valorDemandaJudicial12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigada12Meses.Excepcional,
                                            IdPolitica = carteraCastigada12Meses.Id,
                                            Politica = carteraCastigada12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses Vencido
                                try
                                {
                                    var historicoVencido = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && x.OpcionParam == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        Vencido0 = new { Name = "Vencido 0 a 1", Valor = new[] { x.Vencido0a1 }.Max() },
                                        Vencido1 = new { Name = "Vencido 1 a 2", Valor = new[] { x.Vencido1a2 }.Max() },
                                        Vencido2 = new { Name = "Vencido 2 a 3", Valor = new[] { x.Vencido2a3 }.Max() },
                                        Vencido3 = new { Name = "Vencido 3 a 6", Valor = new[] { x.Vencido3a6 }.Max() },
                                        Vencido4 = new { Name = "Vencido 6 a 9", Valor = new[] { x.Vencido6a9 }.Max() },
                                        Vencido5 = new { Name = "Vencido 9 a 12", Valor = new[] { x.Vencido9a12 }.Max() },
                                        Vencido6 = new { Name = "Vencido 12 a 24", Valor = new[] { x.Vencido12a24 }.Max() },
                                        Vencido7 = new { Name = "Vencido 24", Valor = new[] { x.Vencido24 }.Max() },
                                        Vencido8 = new { Name = "Vencido 36", Valor = new[] { x.Vencido36 }.Max() },
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();

                                    if (historicoVencido != null && historicoVencido.Any())
                                    {
                                        var lstVencido = new List<HistoricoVencidoViewModel>();
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido0.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido0.Name, Valor = x.Vencido0.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido1.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido1.Name, Valor = x.Vencido1.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido2.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido2.Name, Valor = x.Vencido2.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido3.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido3.Name, Valor = x.Vencido3.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido4.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido4.Name, Valor = x.Vencido4.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido5.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido5.Name, Valor = x.Vencido5.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido6.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido6.Name, Valor = x.Vencido6.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido7.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido7.Name, Valor = x.Vencido7.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido8.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido8.Name, Valor = x.Vencido8.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());

                                        if (lstVencido != null && lstVencido.Any())
                                        {
                                            if (valorVencidoMayor12Meses != null)
                                            {
                                                minimo = 0;
                                                var detalleVencidoMayor12Meses = lstVencido.OrderByDescending(x => x.FechaCorte).Where(x => x.Valor == lstVencido.Max(y => y.Valor)).Select(x => new { x.NmbVencimiento, x.Valor, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                                var valorVencidoMayor12MesesComparacion = detalleVencidoMayor12Meses.Valor <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleVencidoMayor12Meses.Valor.ToString()),
                                                    Valor = detalleVencidoMayor12Meses.Valor.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencidoMayor12MesesComparacion,
                                                    FechaCorte = detalleVencidoMayor12Meses.FechaCorte.Date != default ? detalleVencidoMayor12Meses.FechaCorte.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencidoMayor12MesesComparacion && detalleVencidoMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencidoMayor12Meses.SistemaFinanciero, Valor = detalleVencidoMayor12Meses.Valor, NmbVencimiento = detalleVencidoMayor12Meses.NmbVencimiento } }) : null
                                                });
                                                if (valorVencidoMayor12Meses.Excepcional && !valorVencidoMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencidoMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                IdPolitica = valorVencidoMayor12Meses.Id,
                                                Politica = valorVencidoMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                FechaCorte = null,
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoMayor12Meses.Excepcional,
                                            IdPolitica = valorVencidoMayor12Meses.Id,
                                            Politica = valorVencidoMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses Vencido. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses
                                try
                                {
                                    var historicoMayor12Meses = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && x.OpcionParam == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        DemandaJudicial = x.DemandaJudicial,
                                        CarteraCastigada = x.CarteraCastigada,
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();
                                    if (historicoMayor12Meses != null && historicoMayor12Meses.Any())
                                    {
                                        if (valorDemandaJudicialMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicialMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historicoMayor12Meses.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var valorDemandaJudicialMayor12MesesComparacion = detalleDemandaJudicialMayor12Meses.DemandaJudicial <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleDemandaJudicialMayor12Meses.DemandaJudicial.ToString()),
                                                Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicialMayor12MesesComparacion,
                                                FechaCorte = detalleDemandaJudicialMayor12Meses.FechaCorte.Date != default ? detalleDemandaJudicialMayor12Meses.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !valorDemandaJudicialMayor12MesesComparacion && detalleDemandaJudicialMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicialMayor12Meses.SistemaFinanciero, Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial } }) : null

                                            });
                                            if (valorDemandaJudicialMayor12Meses.Excepcional && !valorDemandaJudicialMayor12MesesComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicialMayor12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        if (carteraCastigadaMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigadaMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historicoMayor12Meses.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var carteraCastigadaMayor12MesesComparacion = detalleCarteraCastigadaMayor12Meses.CarteraCastigada <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                Politica = carteraCastigadaMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleCarteraCastigadaMayor12Meses.CarteraCastigada.ToString()),
                                                Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigadaMayor12MesesComparacion,
                                                FechaCorte = detalleCarteraCastigadaMayor12Meses.FechaCorte.Date != default ? detalleCarteraCastigadaMayor12Meses.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !carteraCastigadaMayor12MesesComparacion && detalleCarteraCastigadaMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigadaMayor12Meses.SistemaFinanciero, Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada } }) : null
                                            });
                                            if (carteraCastigadaMayor12Meses.Excepcional && !carteraCastigadaMayor12MesesComparacion)
                                            {
                                                observacionesBuro.Add(carteraCastigadaMayor12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                            Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                            IdPolitica = carteraCastigadaMayor12Meses.Id,
                                            Politica = carteraCastigadaMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cuota vencidos
                                try
                                {
                                    if (valorCuotaVencidos != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                    {
                                        minimo = 0;
                                        var valorCuotaVencidosSuma = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.TotalVencido;
                                        var valorCuotaVencidosComparacion = valorCuotaVencidosSuma <= minimo;

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCuotaVencidosSuma.ToString()),
                                            Valor = valorCuotaVencidosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorCuotaVencidosComparacion,
                                            FechaCreacion = DateTime.Now
                                        });
                                        if (valorCuotaVencidos.Excepcional && !valorCuotaVencidosComparacion)
                                        {
                                            observacionesBuro.Add(valorCuotaVencidos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCuotaVencidos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //GastosFinancieros e Ingresos
                                try
                                {
                                    if (r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.IndicadorCOVID0 != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                    {
                                        var valorIngreso = (double)r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor;
                                        var valorGastoFinanciero = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago + valorMensualPAlimenticia;
                                        var ingresoEstimado = valorGastoFinanciero * 1.40;
                                        var saldoFinanciero = true;
                                        var deudaSuma = 0.00;
                                        if ((r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any()) || valorMensualPAlimenticia > 0)
                                        {
                                            var deudaVencido = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.Vencido);
                                            var deudaDemandaJudicial = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.DemandaJudicial);
                                            var deudaCarteraCastigada = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.CarteraCastigada);
                                            deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + (decimal)valorMensualPAlimenticia);
                                        }

                                        if (deudaSuma == 0)
                                        {
                                            if (ingresoEstimado > valorIngreso)
                                            {
                                                saldoFinanciero = valorGastoFinanciero < (ingresoEstimado * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (ingresoEstimado * 0.80).ToString("N", culture), ingresoEstimado.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastoFinanciero.ToString("N", culture)),
                                                    Valor = valorGastoFinanciero.ToString(),
                                                    Parametro = (ingresoEstimado * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                            {
                                                if (valorIngreso >= 0 && gastosFinancieros != null)
                                                {
                                                    saldoFinanciero = valorGastoFinanciero < (valorIngreso * 0.80);
                                                    detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                    {
                                                        Excepcional = gastosFinancieros.Excepcional,
                                                        IdPolitica = gastosFinancieros.Id,
                                                        Politica = gastosFinancieros.Nombre,
                                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorIngreso * 0.80).ToString("N", culture), valorIngreso.ToString("N", culture)),
                                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastoFinanciero.ToString("N", culture)),
                                                        Valor = valorGastoFinanciero.ToString(),
                                                        Parametro = (valorIngreso * 0.80).ToString(),
                                                        ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                        FechaCreacion = DateTime.Now
                                                    });
                                                    if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                    {
                                                        observacionesBuro.Add(gastosFinancieros.Nombre);
                                                        aprobacionAdicionalBuro = true;
                                                    }
                                                }

                                            }
                                        }
                                        else if (deudaSuma > 0)
                                        {
                                            if (valorIngreso >= 0 && gastosFinancieros != null)
                                            {
                                                saldoFinanciero = valorGastoFinanciero < (valorIngreso * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorIngreso * 0.80).ToString("N", culture), valorIngreso.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastoFinanciero.ToString("N", culture)),
                                                    Valor = valorGastoFinanciero.ToString(),
                                                    Parametro = (valorGastoFinanciero * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = gastosFinancieros.Excepcional,
                                            IdPolitica = gastosFinancieros.Id,
                                            Politica = gastosFinancieros.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, "0", "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? true : false,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, gastosFinancieros.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros e Ingresos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }
                                #endregion Procesamiento Políticas EQUIFAX

                                #region Calificación
                                tipoFuenteBuro = Dominio.Tipos.FuentesBuro.Equifax;
                                datosPersonaBuro.Score = 0;
                                if (r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.ScoreV4V10 != null)
                                    datosPersonaBuro.Score = r_burocredito_equifax.Resultados.ScoreV4V10.Score;

                                datosPersonaBuro.RangoIngreso = string.Empty;
                                datosPersonaBuro.GastoFinanciero = 0;
                                datosPersonaBuro.CupoEstimado = 0;

                                if (r_burocredito_equifax.Resultados.IndicadorCOVID0 != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                {
                                    var rangoIngreso = (double)r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor;
                                    var cuotaEstimada = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago + valorMensualPAlimenticia;
                                    var ingresoEstimado = cuotaEstimada * 1.40;
                                    var deudaSuma = 0.00;
                                    if ((r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any()) || valorMensualPAlimenticia > 0)
                                    {
                                        var deudaVencido = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.Vencido);
                                        var deudaDemandaJudicial = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.DemandaJudicial);
                                        var deudaCarteraCastigada = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.CarteraCastigada);
                                        deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + (decimal)valorMensualPAlimenticia);
                                    }
                                    if (deudaSuma == 0)
                                    {
                                        if (rangoIngreso != 0)
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimada) * 0.45;
                                        else
                                            datosPersonaBuro.CupoEstimado = (ingresoEstimado - cuotaEstimada) * 0.45;
                                    }
                                    else if (deudaSuma > 0)
                                    {
                                        if (rangoIngreso >= 0)
                                        {
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimada) * 0.45;
                                        }
                                    }
                                }

                                if (r_burocredito_equifax.Resultados.IndicadorCOVID0 != null && r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor > 0)
                                    datosPersonaBuro.RangoIngreso = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0,0.00}", r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor);

                                if (r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago > 0)
                                    datosPersonaBuro.GastoFinanciero = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago;

                                datosPersonaBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero + valorMensualPAlimenticia;

                                if (datosPersonaBuro.Score < Dominio.Constantes.ConstantesCalificacion.MinimoScoreBuro)
                                {
                                    observacionesBuro.Add("Score");
                                    aprobacionAdicionalBuro = true;
                                }

                                if (detalleCalificacionBuro != null && detalleCalificacionBuro.Any())
                                {
                                    datosPersonaBuro.Identificacion = identificacionOriginal;
                                    datosPersonaBuro.TipoFuente = tipoFuenteBuro.Value;
                                    datosPersonaBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                    datosPersonaBuro.TotalValidados = detalleCalificacionBuro.Count;
                                    datosPersonaBuro.TotalAprobados = detalleCalificacionBuro.Count(m => m.ResultadoPolitica);
                                    datosPersonaBuro.TotalRechazados = detalleCalificacionBuro.Count(m => !m.ResultadoPolitica);

                                    if (datosPersonaBuro.TotalValidados > 0) datosPersonaBuro.Calificacion = Math.Round((decimal)datosPersonaBuro.TotalAprobados * 100 / datosPersonaBuro.TotalValidados, 2, MidpointRounding.AwayFromZero);
                                    datosPersonaBuro.Aprobado = datosPersonaBuro.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                                    datosPersonaBuro.DetalleCalificacion = detalleCalificacionBuro;

                                    if (aprobacionAdicionalBuro)
                                    {
                                        datosPersonaBuro.Observaciones = string.Join(". ", observacionesBuro);
                                        datosPersonaBuro.Aprobado = false;
                                    }

                                    var calificacionesDetalleBuro = datosPersonaBuro.DetalleCalificacion.Select(m => new DetalleCalificacion
                                    {
                                        IdPolitica = m.IdPolitica,
                                        Valor = m.Valor,
                                        Parametro = m.Parametro,
                                        Aprobado = m.ResultadoPolitica,
                                        Datos = m.ValorResultado,
                                        ReferenciaMinima = m.ReferenciaMinima,
                                        Observacion = m.Observacion,
                                        FechaCorte = m.FechaCorte,
                                        UsuarioCreacion = idUsuario,
                                        FechaCreacion = m.FechaCreacion,
                                        Instituciones = m.Instituciones
                                    }).ToList();

                                    if (actualizarBuro)
                                    {
                                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnteriorBuro);
                                        calificacionAnteriorBuro.DetalleCalificacion = calificacionesDetalleBuro;
                                        calificacionAnteriorBuro.Puntaje = datosPersonaBuro.Calificacion;
                                        calificacionAnteriorBuro.Aprobado = datosPersonaBuro.Aprobado;
                                        calificacionAnteriorBuro.NumeroAprobados = datosPersonaBuro.TotalAprobados;
                                        calificacionAnteriorBuro.NumeroRechazados = datosPersonaBuro.TotalRechazados;
                                        calificacionAnteriorBuro.TotalVerificados = datosPersonaBuro.TotalValidados;
                                        calificacionAnteriorBuro.Observaciones = datosPersonaBuro.Observaciones;
                                        calificacionAnteriorBuro.UsuarioModificacion = idUsuario;
                                        calificacionAnteriorBuro.FechaModificacion = DateTime.Now;
                                        calificacionAnteriorBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                        calificacionAnteriorBuro.Score = datosPersonaBuro.Score;
                                        calificacionAnteriorBuro.CupoEstimado = datosPersonaBuro.CupoEstimado;
                                        calificacionAnteriorBuro.RangoIngreso = datosPersonaBuro.RangoIngreso;
                                        calificacionAnteriorBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero;
                                        calificacionAnteriorBuro.TipoFuenteBuro = tipoFuenteBuro;
                                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnteriorBuro);
                                        datosPersonaBuro.IdCalificacion = calificacionAnteriorBuro.Id;
                                    }
                                    else
                                    {
                                        datosPersonaBuro.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                                        {
                                            IdHistorial = modelo.IdHistorial,
                                            Puntaje = datosPersonaBuro.Calificacion,
                                            Aprobado = datosPersonaBuro.Aprobado,
                                            NumeroAprobados = datosPersonaBuro.TotalAprobados,
                                            NumeroRechazados = datosPersonaBuro.TotalRechazados,
                                            TotalVerificados = datosPersonaBuro.TotalValidados,
                                            Observaciones = datosPersonaBuro.Observaciones,
                                            UsuarioCreacion = idUsuario,
                                            TipoCalificacion = datosPersonaBuro.TipoCalificacion,
                                            Score = datosPersonaBuro.Score,
                                            CupoEstimado = datosPersonaBuro.CupoEstimado,
                                            RangoIngreso = datosPersonaBuro.RangoIngreso,
                                            GastoFinanciero = datosPersonaBuro.GastoFinanciero,
                                            TipoFuenteBuro = tipoFuenteBuro,
                                            DetalleCalificacion = calificacionesDetalleBuro,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }

                                    datosPersonaLista.Add(datosPersonaBuro);
                                }
                                #endregion Calificación
                            }
                            else
                            {
                                ViewBag.VisualizarBuro = true;
                                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas BURÓ.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de BURÓ. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Buró

                #region Procesamiento Calificación de Evaluación
                if (detalleCalificacion != null && detalleCalificacion.Any())
                {
                    datosPersona.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Evaluacion;
                    datosPersona.TotalValidados = detalleCalificacion.Count;
                    datosPersona.TotalAprobados = detalleCalificacion.Count(m => m.ResultadoPolitica);
                    datosPersona.TotalRechazados = detalleCalificacion.Count(m => !m.ResultadoPolitica);

                    if (datosPersona.TotalValidados > 0) datosPersona.Calificacion = Math.Round((decimal)datosPersona.TotalAprobados * 100 / datosPersona.TotalValidados, 2, MidpointRounding.AwayFromZero);
                    datosPersona.Aprobado = datosPersona.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                    datosPersona.DetalleCalificacion = detalleCalificacion;

                    if (aprobacionAdicional)
                    {
                        datosPersona.Observaciones = string.Join(". ", observaciones);
                        datosPersona.Aprobado = false;
                    }

                    var calificacionesDetalle = datosPersona.DetalleCalificacion.Select(m => new DetalleCalificacion
                    {
                        IdPolitica = m.IdPolitica,
                        Valor = m.Valor,
                        Parametro = m.Parametro,
                        Aprobado = m.ResultadoPolitica,
                        Datos = m.ValorResultado,
                        ReferenciaMinima = m.ReferenciaMinima,
                        FechaCorte = m.FechaCorte,
                        UsuarioCreacion = idUsuario,
                        Observacion = m.Observacion,
                        FechaCreacion = m.FechaCreacion,
                    }).ToList();

                    if (actualizar)
                    {
                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnterior);
                        calificacionAnterior.DetalleCalificacion = calificacionesDetalle;
                        calificacionAnterior.Puntaje = datosPersona.Calificacion;
                        calificacionAnterior.Aprobado = datosPersona.Aprobado;
                        calificacionAnterior.NumeroAprobados = datosPersona.TotalAprobados;
                        calificacionAnterior.NumeroRechazados = datosPersona.TotalRechazados;
                        calificacionAnterior.TotalVerificados = datosPersona.TotalValidados;
                        calificacionAnterior.Observaciones = datosPersona.Observaciones;
                        calificacionAnterior.UsuarioModificacion = idUsuario;
                        calificacionAnterior.FechaModificacion = DateTime.Now;
                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnterior);
                        datosPersona.IdCalificacion = calificacionAnterior.Id;
                    }
                    else
                    {
                        datosPersona.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                        {
                            IdHistorial = modelo.IdHistorial,
                            Puntaje = datosPersona.Calificacion,
                            Aprobado = datosPersona.Aprobado,
                            NumeroAprobados = datosPersona.TotalAprobados,
                            NumeroRechazados = datosPersona.TotalRechazados,
                            TotalVerificados = datosPersona.TotalValidados,
                            Observaciones = datosPersona.Observaciones,
                            UsuarioCreacion = idUsuario,
                            TipoCalificacion = datosPersona.TipoCalificacion,
                            DetalleCalificacion = calificacionesDetalle,
                            FechaCreacion = DateTime.Now
                        });
                    }
                    datosPersonaLista.Add(datosPersona);
                }
                if ((detalleCalificacion != null && detalleCalificacion.Any()) || (detalleCalificacionBuro != null && detalleCalificacionBuro.Any()))
                {
                    var historialAnterior = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null);
                    var historialConsolidado = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial, null);
                    historialAnterior.IdPlanEvaluacion = dataPlanEvaluacion.Id;
                    await _historiales.UpdateAsync(historialAnterior);
                    if (historialConsolidado != null)
                    {
                        var historialEvaluacionBuro = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == TiposCalificaciones.Buro, null);
                        if (historialEvaluacionBuro != null)
                            historialConsolidado.AprobadoEvaluacion = datosPersona.Aprobado && historialEvaluacionBuro.Aprobado;
                        else
                            historialConsolidado.AprobadoEvaluacion = datosPersona.Aprobado;

                        historialConsolidado.ConsultaEvaluacion = historialAnterior.IdPlanEvaluacion.HasValue && historialAnterior.IdPlanEvaluacion.Value > 0;
                        await _reporteConsolidado.UpdateAsync(historialConsolidado);
                    }
                }
                #endregion Procesamiento Calificación de Evaluación

                _logger.LogInformation($"Fin de procesamiento Cédula {modelo.IdHistorial}");
                return PartialView($"../Shared/Fuentes/_FuenteCalificacion", datosPersonaLista);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteCalificacion", null);
            }
        }

        [HttpPost]
        [Route("ObtenerCalificacionRucNatural")]
        public async Task<IActionResult> ObtenerCalificacionRucNatural(ReporteCalificacionViewModel modelo)
        {
            try
            {
                _logger.LogInformation($"Procesando informacion RUC Natural del Historial {modelo.IdHistorial}");
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva actualizar la página por favor.");

                #region Inicialización
                var datosPersona = new CalificacionViewModel();
                var detalleCalificacion = new List<DetalleCalificacionViewModel>();
                var detalleSimple = new DetalleCalificacionViewModel();
                var datosHistorial = new SRIViewModel();
                var detalleHistorial = new DatosJsonViewModel();
                var calificacionAnterior = new Calificacion();
                var detalleCalificacionAnterior = new List<DetalleCalificacion>();
                var datosPersonaLista = new List<CalificacionViewModel>();
                var datosPersonaBuro = new CalificacionViewModel();
                var detalleCalificacionBuro = new List<DetalleCalificacionViewModel>();
                var detalleCalificacionAnteriorBuro = new List<DetalleCalificacion>();
                var calificacionAnteriorBuro = new Calificacion();
                var observaciones = new List<string>();
                var observacionesBuro = new List<string>();
                int minimo;
                double valorMensualPAlimenticia = 0;
                var actualizar = false;
                var actualizarBuro = false;
                var culture = System.Globalization.CultureInfo.CurrentCulture;
                Dominio.Tipos.FuentesBuro? tipoFuenteBuro = null;

                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                ViewBag.EvaluarBuro = false;
                ViewBag.VisualizarBuro = false;

                var identificacionOriginal = await _historiales.FirstOrDefaultAsync(m => m.Identificacion, m => m.Id == modelo.IdHistorial, null, null, true);
                modelo.IdEmpresa = usuarioActual.IdEmpresa;

                //Planes Activos
                var resultadoPermiso = Dominio.Tipos.EstadosPlanesEvaluaciones.Activo; ;
                var dataPlanEvaluacion = await _planesEvaluaciones.FirstOrDefaultAsync(s => s, s => s.IdEmpresa == modelo.IdEmpresa && s.Estado == Dominio.Tipos.EstadosPlanesEvaluaciones.Activo);
                if (dataPlanEvaluacion == null)
                    throw new Exception("No se encontró un plan de evaluación Activo.");

                var dataUsuario = await _accesos.AnyAsync(s => s.IdUsuario == idUsuario && s.Estado == Dominio.Tipos.EstadosAccesos.Activo && s.Acceso == Dominio.Tipos.TiposAccesos.Evaluacion);
                if (!dataUsuario)
                    throw new Exception("El usuario no tiene permisos para la evaluación.");

                var fechaActual = DateTime.Now;
                var primerDiadelMes = new DateTime(fechaActual.Year, fechaActual.Month, 1);
                var ultimoDiadelMes = primerDiadelMes.AddMonths(1).AddDays(-1);
                var numeroHistorialEvaluacion = await _historiales.CountAsync(s => s.Id != modelo.IdHistorial && s.IdPlanEvaluacion == dataPlanEvaluacion.Id && s.Fecha.Date >= primerDiadelMes.Date && s.Fecha.Date <= ultimoDiadelMes.Date);

                if (dataPlanEvaluacion.BloquearConsultas)
                    resultadoPermiso = dataPlanEvaluacion.NumeroConsultas > numeroHistorialEvaluacion ? Dominio.Tipos.EstadosPlanesEvaluaciones.Activo : Dominio.Tipos.EstadosPlanesEvaluaciones.Inactivo;
                if (resultadoPermiso != Dominio.Tipos.EstadosPlanesEvaluaciones.Activo)
                    throw new Exception("No es posible realizar esta consulta ya que excedió el límite de consultas del plan Evaluación.");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);

                //Políticas
                var politicasActuales = await _politicas.ReadAsync(m => m, m => m.IdEmpresa == modelo.IdEmpresa);
                if (!politicasActuales.Any())
                    throw new Exception("La empresa actual no tiene registrada políticas.");
                ViewBag.Historial = false;
                int demandadoEspecificoJudicial = 0;
                //int demandadoEspecificoEmpresa = 0;
                bool aprobacionAdicional = false;
                bool aprobacionAdicionalBuro = false;
                #endregion Inicialización

                #region Políticas Evaluaciones
                _logger.LogInformation("Obteniendo políticas para procesamiento...");
                //General
                var antiguedadRuc = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.AntiguedadRucNatural);
                var impuestoRenta = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ImpuestoRentaNatural);
                var isd = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ISDNatural);
                var deudaFirme = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DeudaFirmeNatural);
                var civil = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.Civil);
                var iessMoraPatronal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.IessMoraPatronal);
                var iessAfiliacion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.IessAfiliacion);
                //var nivelEstudios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NivelEstudios);
                var legalPersona = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalPersona);
                //var legalDemandante = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalDemandante);
                var sercop = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.Sercop);
                var pagoMultasPendiente = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PagoMultasPendienteNatural);
                var prediosPersonal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PrediosPersonalNatural);
                var antecedentesPenales = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.AntecedentesPenalesNatural);
                var noticiaDelito = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NoticiasDelitoNatural);
                var contactarmeDirecciones = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeDireccionesNatural);
                var contactarmeTelefonos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeTelefonosNatural);
                var contactarmeEmails = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeEmailsNatural);
                var estadoTributario = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.EstadoTributarioNatural);
                var permisoFacturacion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PermisoFacturacionNatural);
                var deudaPensionAlimenticia = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PagoPendientePensionAlimenticiaNatural);
                var superBancosCedula = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosCNatural);
                var superBancosNatural = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosNatural);
                var tituloNivelSuperior = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.TituloNivelSuperiorNatural);

                //Buro de credito
                var manejoCuentasCorrientes = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ManejodeCuentasCorrientesNatural);
                var FechaCumplimientoSancion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.FechaCumplimientoSancionNatural);
                var deudaVigenteTotal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DeudaVigenteTotalNatural);
                var valorDemandaJudicial = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialNatural);
                var valorCarteraCastigada = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaNatural);
                var valorCuotaVencidos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCuotaVencidosNatural);
                var saldoVencidoTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SaldoVencidoTarjetasNatural);
                var valorDemandaJudicialTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialTarjetasNatural);
                var carteraCastigadaTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaTarjetasNatural);
                var diasMorosidadTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadTarjetasNatural);
                var valorVencidoTotalBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalBancosNatural);
                var valorDemandaJudicialBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialBancosNatural);
                var valorCarteraCastigadaBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaBancosNatural);
                var diasMorosidadBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadBancosNatural);
                var valorVencidoTotalCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalCooperativasNatural);
                var valorDemandaJudicialCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialCooperativasNatural);
                var valorCarteraCastigadaCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaCooperativasNatural);
                var diasMorosidadCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadCooperativasNatural);
                var valorVencidoTotalEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalEmpresasNatural);
                var valorDemandaJudicialEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialEmpresasNatural);
                var valorCarteraCastigadaEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaEmpresasNatural);
                var diasMorosidadEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadEmpresasNatural);
                var valorVencidoVigentesServicios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoVigentesServiciosNatural);
                var numeroDiasVencidoVigentesServicios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NumeroDiasVencidoVigentesServiciosNatural);
                var valorVencidoVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoVigentesCobranzasNatural);
                var demandaJudicialVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DemandaJudicialVigentesCobranzasNatural);
                var carteraCastigadaVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaVigentesCobranzasNatural);
                var numeroDiasVencidoVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NumeroDiasVencidoVigentesCobranzasNatural);
                var mayorSaldoVencido36Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.MayorSaldoVencido36MesesNatural);
                var valorVencidoHistoricoTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoTarjetasNatural);
                var valorVencidoHistoricoBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoBancosNatural);
                var valorVencidoHistoricoCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoCooperativasNatural);
                var valorVencidoHistoricoEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoEmpresasNatural);
                var valorVencidoHistoricoServicio = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoServicioNatural);
                var valorVencidoHistoricoCobranza = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoCobranzaNatural);
                var gastosFinancieros = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.GastosFinancierosNatural);
                var valorVencido12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencido12MesesNatural);
                var valorDemandaJudicial12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicial12MesesNatural);
                var carteraCastigada12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigada12MesesNatural);
                var valorVencidoMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoMayor12MesesNatural);
                var valorDemandaJudicialMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialMayor12MesesNatural);
                var carteraCastigadaMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaMayor12MesesNatural);
                //Buro de credito
                _logger.LogInformation("Fin Obtención de políticas para procesamiento.");
                #endregion Políticas Evaluaciones

                #region Re-procesamiento
                _logger.LogInformation($"Obteniento la calificación anterior {modelo.IdCalificacion}");

                calificacionAnterior = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Evaluacion, null, i => i.Include(m => m.DetalleCalificacion));
                if (calificacionAnterior != null)
                {
                    actualizar = true;
                    detalleCalificacionAnterior = calificacionAnterior.DetalleCalificacion.ToList();
                }
                _logger.LogInformation($"Finalizando la obtención de la calificación anterior {modelo.IdCalificacion}");

                _logger.LogInformation($"Obteniento la calificación anterior Buró {modelo.IdCalificacionBuro}");

                calificacionAnteriorBuro = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Buro, null, i => i.Include(m => m.DetalleCalificacion));
                if (calificacionAnteriorBuro != null)
                {
                    actualizarBuro = true;
                    detalleCalificacionAnteriorBuro = calificacionAnteriorBuro.DetalleCalificacion.ToList();
                }
                _logger.LogInformation($"Finalizando la obtención de la calificación anterior Buró {modelo.IdCalificacionBuro}");
                #endregion Re-procesamiento

                #region Evaluación SRI
                try
                {
                    _logger.LogInformation("Procesando políticas SRI...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Sri && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosHistorial.Sri = JsonConvert.DeserializeObject<Contribuyente>(detalleHistorial.Datos);

                        datosPersona.FechaInicio = datosHistorial.Sri.FechaInicio;
                        detalleSimple.Politica = antiguedadRuc.Nombre;
                        var diferenciaAnios = DateTime.Today.Year - datosPersona.FechaInicio.Date.Year;
                        if (datosPersona.FechaInicio.Date > DateTime.Today.AddYears(-diferenciaAnios))
                            diferenciaAnios--;

                        minimo = 2;
                        var estadoRuc = Dominio.Constantes.Politicas.RucActivo;
                        var resultadoComparacion = diferenciaAnios >= minimo && estadoRuc == datosHistorial.Sri.Estado;
                        if (!string.IsNullOrEmpty(datosHistorial.Sri.EstadoContribuyente) && datosHistorial.Sri.EstadoContribuyente == "SUSPENDIDO" && datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado) && datosHistorial.Sri.EstadoTributario.Estado != "OBLIGACIONES TRIBUTARIAS PENDIENTES")
                        {
                            resultadoComparacion = diferenciaAnios >= minimo;
                            if (antiguedadRuc != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antiguedadRuc.Excepcional,
                                    IdPolitica = antiguedadRuc.Id,
                                    Politica = antiguedadRuc.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAniosRuc, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, datosPersona.FechaInicio.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = diferenciaAnios.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antiguedadRuc.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antiguedadRuc.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else
                        {
                            if (antiguedadRuc != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antiguedadRuc.Excepcional,
                                    IdPolitica = antiguedadRuc.Id,
                                    Politica = antiguedadRuc.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAniosRuc, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, datosPersona.FechaInicio.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = diferenciaAnios.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antiguedadRuc.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antiguedadRuc.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        minimo = 0;
                        if (datosHistorial.Sri.Anexos != null && datosHistorial.Sri.Anexos.Any())
                        {
                            var datosRenta = datosHistorial.Sri.Anexos.OrderByDescending(x => x.Periodo).Select(x => new { x.Periodo, x.Causado }).ToList().Take(2);
                            int periodo = 0;
                            double causado = 0;
                            var impuestoMensaje = string.Empty;
                            if (datosRenta != null && datosRenta.Any())
                            {
                                if (datosRenta.Count() == 2 && datosRenta.First().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.First().Periodo;
                                    causado = (double)datosRenta.First().Causado;
                                }
                                else if (datosRenta.Count() == 2 && datosRenta.Last().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.Last().Periodo;
                                    causado = (double)datosRenta.Last().Causado;
                                }
                                else if (datosRenta.Count() == 1 && datosRenta.First().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.First().Periodo;
                                    causado = (double)datosRenta.First().Causado;
                                }
                                else
                                {
                                    periodo = DateTime.Now.AddYears(-1).Year;
                                    impuestoMensaje = $"No presenta valor en el año {periodo}";
                                }
                            }
                            else
                            {
                                periodo = DateTime.Now.AddYears(-1).Year;
                                impuestoMensaje = $"No presenta valor en el año {periodo}";
                            }

                            if (string.IsNullOrEmpty(impuestoMensaje))
                            {
                                resultadoComparacion = causado > minimo;
                                if (impuestoRenta != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = impuestoRenta.Excepcional,
                                        IdPolitica = impuestoRenta.Id,
                                        Politica = $"{impuestoRenta.Nombre} {periodo}",
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", causado >= 0 ? causado.ToString("N", culture) : "0.00"),
                                        Valor = causado >= 0 ? causado.ToString("N", culture) : "0.00",
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        Observacion = $"Periodo {periodo}",
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (impuestoRenta.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(impuestoRenta.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = false;
                                if (impuestoRenta != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = impuestoRenta.Excepcional,
                                        IdPolitica = impuestoRenta.Id,
                                        Politica = $"{impuestoRenta.Nombre} {periodo}",
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                        ValorResultado = impuestoMensaje,
                                        Valor = impuestoMensaje,
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        Observacion = $"Periodo {periodo}",
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (impuestoRenta.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(impuestoRenta.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }

                        //minimo = 0;
                        //if (datosHistorial.Sri.UltimoValorDivisa != null)
                        //{
                        //    resultadoComparacion = datosHistorial.Sri.UltimoValorDivisa > minimo;
                        //    if (isd != null)
                        //    {
                        //        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        //        {
                        //            IdPolitica = isd.Id,
                        //            Politica = isd.Nombre,
                        //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                        //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosHistorial.Sri.UltimoValorDivisa.ToString()),
                        //            Valor = datosHistorial.Sri.UltimoValorDivisa.ToString(),
                        //            Parametro = minimo.ToString(),
                        //            ResultadoPolitica = resultadoComparacion
                        //        });
                        //        if (isd.Excepcional && !resultadoComparacion)
                        //        {
                        //            observaciones.Add(isd.Nombre);
                        //            aprobacionAdicional = true;
                        //        }
                        //    }
                        //}

                        minimo = 40;
                        if (datosHistorial.Sri.Deudas != null && datosHistorial.Sri.Deudas.Any() && datosHistorial.Sri.Deudas.ContainsKey("Firmes"))
                        {
                            resultadoComparacion = datosHistorial.Sri.Deudas["Firmes"].Valor.Value < minimo;
                            if (deudaFirme != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = deudaFirme.Excepcional,
                                    IdPolitica = deudaFirme.Id,
                                    Politica = deudaFirme.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosHistorial.Sri.Deudas["Firmes"].Valor.Value),
                                    Valor = datosHistorial.Sri.Deudas["Firmes"].Valor.Value.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (deudaFirme.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(deudaFirme.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else
                        {
                            if (deudaFirme != null)
                            {
                                resultadoComparacion = true;
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = deudaFirme.Excepcional,
                                    IdPolitica = deudaFirme.Id,
                                    Politica = deudaFirme.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                    Valor = "0.00",
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (deudaFirme.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(deudaFirme.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        if (datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado))
                        {
                            resultadoComparacion = datosHistorial.Sri.EstadoTributario.Estado != "OBLIGACIONES TRIBUTARIAS PENDIENTES";
                            if (estadoTributario != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = estadoTributario.Excepcional,
                                    IdPolitica = estadoTributario.Id,
                                    Politica = estadoTributario.Nombre,
                                    ReferenciaMinima = Dominio.Constantes.TextoReferencia.EstadoTributario,
                                    ValorResultado = datosHistorial.Sri.EstadoTributario.Estado,
                                    Valor = datosHistorial.Sri.EstadoTributario.Estado,
                                    Parametro = Dominio.Constantes.TextoReferencia.EstadoTributario,
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (estadoTributario.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(estadoTributario.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        if ((!string.IsNullOrEmpty(datosHistorial.Sri.EstadoContribuyente) && datosHistorial.Sri.EstadoContribuyente != "SUSPENDIDO") || (datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado) && datosHistorial.Sri.EstadoTributario.Estado == "OBLIGACIONES TRIBUTARIAS PENDIENTES"))
                        {
                            if (datosHistorial.Sri.PermisoFacturacion != null && !string.IsNullOrEmpty(datosHistorial.Sri.PermisoFacturacion.Vigencia))
                            {
                                var valorVigencia = Regex.Matches(datosHistorial.Sri.PermisoFacturacion.Vigencia, @"[0-9]+");
                                if (valorVigencia != null && int.TryParse(valorVigencia[0].ToString(), out _))
                                {
                                    var valorFacturacion = int.Parse(valorVigencia[0].ToString());
                                    minimo = 12;
                                    if (valorFacturacion <= 3)
                                    {
                                        resultadoComparacion = valorFacturacion > minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (!resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                    else if (valorFacturacion > 3 && valorFacturacion < 12)
                                    {
                                        resultadoComparacion = valorFacturacion > minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (permisoFacturacion.Excepcional && !resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                    else if (valorFacturacion >= 12)
                                    {
                                        resultadoComparacion = valorFacturacion >= minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (permisoFacturacion.Excepcional && !resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas SRI.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SRI. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación SRI

                #region Evaluación Civil
                try
                {
                    var direccionesAdicionales = new List<string>();
                    Externos.Logica.Garancheck.Modelos.Persona personaTemp = null;
                    _logger.LogInformation("Procesando políticas Civil...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                    var resultadoComparacion = false;

                    var edad = -1;
                    if (detalleHistorial != null)
                    {
                        //Civil En Línea
                        var persona = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(detalleHistorial.Datos);
                        if (persona != null && persona.FechaNacimiento != default)
                        {
                            edad = DateTime.Today.Year - persona.FechaNacimiento.Year;
                            if (persona.FechaNacimiento.Date > DateTime.Today.AddYears(-edad))
                                edad--;
                        }

                        if (persona != null)
                        {
                            var direccionTempRegCivil = string.Join("/", new[] { persona.LugarDomicilio?.Trim(), persona.CalleDomicilio?.Trim(), persona.NumeracionDomicilio?.Trim() }.Where(m => !string.IsNullOrEmpty(m)).ToArray());
                            if (!string.IsNullOrEmpty(direccionTempRegCivil))
                                direccionesAdicionales.Add(direccionTempRegCivil);
                        }
                    }
                    else
                    {
                        //Civil Histórico
                        detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                        {
                            Datos = m.Data
                        }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);

                        if (detalleHistorial != null)
                        {
                            var persona = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(detalleHistorial.Datos);
                            if (persona != null && !string.IsNullOrEmpty(persona.FechaNacimiento.Value.ToString()))
                            {
                                edad = DateTime.Today.Year - persona.FechaNacimiento.Value.Year;
                                if (persona.FechaNacimiento.Value.Date > DateTime.Today.AddYears(-edad))
                                    edad--;
                            }
                            personaTemp = persona;
                        }
                    }

                    //Edad
                    if (edad >= 0)
                    {
                        resultadoComparacion = (edad > 25 && edad <= 80);
                        if (civil != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = civil.Excepcional,
                                IdPolitica = civil.Id,
                                Politica = civil.Nombre,
                                ReferenciaMinima = "Mayor a 25 años y Menor o igual a 80 años",
                                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Edad, edad.ToString()),
                                Valor = edad.ToString(),
                                Parametro = "[25,80]",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (civil.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(civil.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                    //Contactos
                    var detalleHistorialPersonal = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Personales && m.Generado);

                    Externos.Logica.Garancheck.Modelos.Personal personalTemp = null;
                    if (detalleHistorialPersonal != null)
                        personalTemp = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(detalleHistorialPersonal.Datos);

                    if (personaTemp == null)
                    {
                        var detalleHistorialCiudadano = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                        {
                            Datos = m.Data
                        }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);

                        if (detalleHistorialCiudadano != null)
                            personaTemp = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(detalleHistorialCiudadano.Datos);
                    }

                    if (personalTemp != null && !string.IsNullOrEmpty(personalTemp.NombreCalle?.Trim()) && !string.IsNullOrEmpty(personalTemp.NumeroCasa?.Trim()))
                    {
                        if (personaTemp != null && !string.IsNullOrEmpty(personaTemp.Provincia?.Trim()) && !string.IsNullOrEmpty(personaTemp.Canton?.Trim()) && !string.IsNullOrEmpty(personaTemp.Parroquia?.Trim()))
                            direccionesAdicionales.Add($"{personaTemp.Provincia} / {personaTemp.Canton} / {personaTemp.Parroquia} / {personalTemp.NombreCalle} {personalTemp.NumeroCasa}");
                        else
                            direccionesAdicionales.Add($"{personalTemp.NombreCalle} {personalTemp.NumeroCasa}");
                    }

                    var contactosPersona = new Contacto();
                    var direccionesContacto = 0;
                    var telefonosContacto = 0;
                    var emailsContacto = 0;
                    var detalleContactos = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Contactos && m.Generado);

                    if (detalleContactos != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactos.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    var detalleContactosEmpresa = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa && m.Generado);

                    if (detalleContactosEmpresa != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactosEmpresa.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    var detalleContactosIess = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosIess && m.Generado);

                    if (detalleContactosIess != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactosIess.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    if (direccionesAdicionales.Any())
                        direccionesContacto += direccionesAdicionales.Count;

                    minimo = 2;
                    resultadoComparacion = direccionesContacto >= minimo;
                    if (contactarmeDirecciones != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeDirecciones.Excepcional,
                            IdPolitica = contactarmeDirecciones.Id,
                            Politica = contactarmeDirecciones.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = direccionesContacto.ToString(),
                            Valor = direccionesContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeDirecciones.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeDirecciones.Nombre);
                            aprobacionAdicional = true;
                        }
                    }
                    resultadoComparacion = telefonosContacto >= minimo;
                    if (contactarmeTelefonos != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeTelefonos.Excepcional,
                            IdPolitica = contactarmeTelefonos.Id,
                            Politica = contactarmeTelefonos.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = telefonosContacto.ToString(),
                            Valor = telefonosContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeTelefonos.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeTelefonos.Nombre);
                            aprobacionAdicional = true;
                        }
                    }

                    resultadoComparacion = emailsContacto >= minimo;
                    if (contactarmeEmails != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeEmails.Excepcional,
                            IdPolitica = contactarmeEmails.Id,
                            Politica = contactarmeEmails.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = emailsContacto.ToString(),
                            Valor = emailsContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeEmails.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeEmails.Nombre);
                            aprobacionAdicional = true;
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas Civil.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Civil. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Civil

                #region Evaluación IESS
                try
                {
                    _logger.LogInformation("Procesando políticas IESS...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Iess && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var iess = JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Persona>(detalleHistorial.Datos);

                        if (iess != null)
                        {
                            var mora = Convert.ToDouble(iess.Mora);
                            minimo = 50;

                            var resultadoComparacion = mora < minimo;

                            if (iessMoraPatronal != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = iessMoraPatronal.Excepcional,
                                    IdPolitica = iessMoraPatronal.Id,
                                    Politica = iessMoraPatronal.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", mora.ToString()),
                                    Valor = mora.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (iessMoraPatronal.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(iessMoraPatronal.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas IESS.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de IESS. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación IESS

                #region Evaluación Afiliado
                try
                {
                    _logger.LogInformation("Procesando políticas AFILIADO...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var afiliado = JsonConvert.DeserializeObject<Afiliacion>(detalleHistorial.Datos);
                        var estadoAfiliadoIess = new[] { "ACTIVO/A", "JUBILADO/A", "AFILIADO ACTIVO" };
                        var resultadoComparacion = false;
                        var estadoAfiliado = "N/A";
                        if (!string.IsNullOrEmpty(afiliado.Estado))
                        {
                            estadoAfiliado = afiliado.Estado;
                            resultadoComparacion = estadoAfiliadoIess.Contains(afiliado.Estado);
                        }
                        if (iessAfiliacion != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = iessAfiliacion.Excepcional,
                                IdPolitica = iessAfiliacion.Id,
                                Politica = iessAfiliacion.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoAfiliacion, "ACTIVO/A, JUBILADO/A"),
                                ValorResultado = estadoAfiliado,
                                Valor = estadoAfiliado,
                                Parametro = "ACTIVO/A, JUBILADO/A, AFILIADO ACTIVO",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (iessAfiliacion.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(iessAfiliacion.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                    _logger.LogInformation("Fin procesamiento políticas AFILIADO.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de AFILIADO. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Afiliado

                #region Evaluación Senescyt
                try
                {
                    _logger.LogInformation("Procesando políticas SENECYT...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt && m.Generado);

                    var resultadoComparacion = false;
                    if (detalleHistorial != null)
                    {
                        var senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(detalleHistorial.Datos);
                        if (senescyt != null)
                            resultadoComparacion = senescyt.TotalTitulos > 0;

                        if (tituloNivelSuperior != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = tituloNivelSuperior.Excepcional,
                                IdPolitica = tituloNivelSuperior.Id,
                                Politica = tituloNivelSuperior.Nombre,
                                ReferenciaMinima = "SI",
                                ValorResultado = resultadoComparacion ? "SI" : "NO",
                                Valor = resultadoComparacion ? "SI" : "NO",
                                Parametro = "SI",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(tituloNivelSuperior.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                    else
                    {
                        var datosCivil = new CivilViewModel();
                        var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                        var detallesCivil = await _detalleHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);

                        var civilHistorial = detallesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado && !string.IsNullOrEmpty(m.Data));
                        if (civilHistorial != null)
                            datosCivil.RegistroCivil = JsonConvert.DeserializeObject<RegistroCivil>(civilHistorial.Data);

                        if (datosCivil != null && datosCivil.RegistroCivil == null)
                        {
                            civilHistorial = detallesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado && !string.IsNullOrEmpty(m.Data));
                            if (civilHistorial != null)
                                datosCivil.Ciudadano = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(civilHistorial.Data);
                        }

                        if (datosCivil != null && datosCivil.RegistroCivil != null)
                        {
                            if (!string.IsNullOrEmpty(datosCivil.RegistroCivil.Instruccion?.Trim()) && datosCivil.RegistroCivil.Instruccion.Trim().ToUpper() == "SUPERIOR")
                                resultadoComparacion = true;

                            if (tituloNivelSuperior != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = tituloNivelSuperior.Excepcional,
                                    IdPolitica = tituloNivelSuperior.Id,
                                    Politica = tituloNivelSuperior.Nombre,
                                    ReferenciaMinima = "SI",
                                    ValorResultado = resultadoComparacion ? "SI" : "NO",
                                    Valor = resultadoComparacion ? "SI" : "NO",
                                    Parametro = "SI",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(tituloNivelSuperior.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else if (datosCivil != null && datosCivil.RegistroCivil == null && datosCivil.Ciudadano != null)
                        {
                            if (!string.IsNullOrEmpty(datosCivil.Ciudadano.Instruccion?.Trim()) && datosCivil.Ciudadano.Instruccion.Trim().ToUpper() == "SUPERIOR")
                                resultadoComparacion = true;

                            if (tituloNivelSuperior != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = tituloNivelSuperior.Excepcional,
                                    IdPolitica = tituloNivelSuperior.Id,
                                    Politica = tituloNivelSuperior.Nombre,
                                    ReferenciaMinima = "SI",
                                    ValorResultado = resultadoComparacion ? "SI" : "NO",
                                    Valor = resultadoComparacion ? "SI" : "NO",
                                    Parametro = "SI",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(tituloNivelSuperior.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }

                    //if (detalleHistorial != null)
                    //{
                    //    var senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(detalleHistorial.Datos);
                    //    minimo = 0;

                    //    var resultadoComparacion = senescyt.TotalTitulos > 0;

                    //    if (nivelEstudios != null)
                    //    {
                    //        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                    //        {
                    //            IdPolitica = nivelEstudios.Id,
                    //            Politica = nivelEstudios.Nombre,
                    //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                    //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Titulos, senescyt.TotalTitulos.ToString()),
                    //            Valor = senescyt.TotalTitulos.ToString(),
                    //            Parametro = 0.ToString(),
                    //            ResultadoPolitica = resultadoComparacion,
                    //            FechaCreacion = DateTime.Now
                    //        });
                    //        if (nivelEstudios.Excepcional && !resultadoComparacion)
                    //        {
                    //            observaciones.Add(nivelEstudios.Nombre);
                    //            aprobacionAdicional = true;
                    //        }
                    //    }
                    //}
                    _logger.LogInformation("Fin procesamiento políticas SENECYT.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SENECYT. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Senescyt

                #region Evaluación Legal
                try
                {
                    _logger.LogInformation("Procesando políticas LEGAL...");
                    //int? procesosActor = null;
                    int? procesosDemandado = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado);

                    if (detalleHistorial != null)
                    {
                        //procesosActor = 0;
                        procesosDemandado = 0;
                        var fJudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(detalleHistorial.Datos);
                        var pathProcesosLegales = Path.Combine("wwwroot", "data", "dataProcesosLegales.json");
                        var lstProcesos = JsonConvert.DeserializeObject<List<ProcesoLegal>>(System.IO.File.ReadAllText(pathProcesosLegales));
                        var lstCadena = lstProcesos.Select(x => x.Proceso.ToUpper()).ToList();
                        var fechaTope = DateTime.Now.AddYears(-6);
                        demandadoEspecificoJudicial = fJudicial.Demandado.Values.Count(m => lstCadena.Any(n => m.Descripcion.ToUpper().Contains(n)) && (m.Fecha.HasValue ? m.Fecha.Value.Date >= fechaTope.Date : false));

                        //procesosActor += fJudicial.Actor.Values.Count(m => !m.Descripcion.Contains(Dominio.Constantes.Politicas.PoliticaLegalRoboDocumento)
                        //                                                && !m.Descripcion.Contains(Dominio.Constantes.Politicas.PoliticaLegalArrendamiento));
                        procesosDemandado += demandadoEspecificoJudicial;

                        //else
                        //{
                        //    //procesosActor = 0;
                        //    procesosDemandado = 0;
                        //}
                        //minimo = 5;
                        //var resultadoComparacion = !(procesosActor > minimo);
                        //if (legalDemandante != null)
                        //{
                        //    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        //    {
                        //        IdPolitica = legalDemandante.Id,
                        //        Politica = legalDemandante.Nombre,
                        //        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgual, minimo),
                        //        ValorResultado = procesosActor.ToString(),
                        //        Valor = procesosActor.ToString(),
                        //        Parametro = minimo.ToString(),
                        //        ResultadoPolitica = resultadoComparacion
                        //    });
                        //    if (legalDemandante.Excepcional && !resultadoComparacion)
                        //    {
                        //        observaciones.Add(legalDemandante.Nombre);
                        //        aprobacionAdicional = true;
                        //    }
                        //}

                        minimo = 0;
                        var resultadoComparacion = !(procesosDemandado > minimo);

                        if (legalPersona != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = legalPersona.Excepcional,
                                IdPolitica = legalPersona.Id,
                                Politica = legalPersona.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximo, minimo),
                                ValorResultado = procesosDemandado.ToString(),
                                Valor = procesosDemandado.ToString(),
                                Parametro = minimo.ToString(),
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (legalPersona.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(legalPersona.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas LEGAL.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de LEGAL. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Legal                

                #region Evaluación SERCOP
                try
                {
                    _logger.LogInformation("Procesando políticas SERCOP...");
                    int? contadorSercop = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Proveedor && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var proveedor = JsonConvert.DeserializeObject<Externos.Logica.SERCOP.Modelos.ProveedorIncumplido>(detalleHistorial.Datos);
                        contadorSercop = 0;
                        if (proveedor.ProveedoresIncop != null && proveedor.ProveedoresIncop.Any()) contadorSercop += proveedor.ProveedoresIncop.Count;
                        if (proveedor.ProveedoresContraloria != null && proveedor.ProveedoresContraloria.Any()) contadorSercop += proveedor.ProveedoresContraloria.Count;
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ProveedorContraloria && m.Generado);

                    if (detalleHistorial != null)
                    {
                        if (contadorSercop == null) contadorSercop = 0;
                        var proveedorContraloria = JsonConvert.DeserializeObject<List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria>>(detalleHistorial.Datos);
                        if (proveedorContraloria != null && proveedorContraloria.Any()) contadorSercop += proveedorContraloria.Count;
                    }
                    if (contadorSercop == null) contadorSercop = 0;

                    if (contadorSercop != null)
                    {
                        minimo = 0;
                        var resultadoComparacion = contadorSercop == minimo;

                        if (sercop != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = sercop.Excepcional,
                                IdPolitica = sercop.Id,
                                Politica = sercop.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximo, minimo),
                                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Procesos, contadorSercop),
                                Valor = contadorSercop.ToString(),
                                Parametro = minimo.ToString(),
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (sercop.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(sercop.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas SERCOP.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SERCOP. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación SERCOP

                #region Evaluación Ant
                try
                {
                    _logger.LogInformation("Procesando políticas ANT...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ant && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var fuenteAnt = JsonConvert.DeserializeObject<Externos.Logica.ANT.Modelos.Licencia>(detalleHistorial.Datos);
                        if (fuenteAnt != null)
                        {
                            minimo = 150;
                            var autos = fuenteAnt.Autos != null && fuenteAnt.Autos.Any() ? fuenteAnt.Autos.Where(m => (!string.IsNullOrEmpty(m.Placa) && m.Placa.Length > 1 && m.Placa != "SIN/PLACA") && (string.IsNullOrEmpty(m.NombrePropietario) || m.NombrePropietario == fuenteAnt.Titular)).ToList() : new List<Externos.Logica.ANT.Modelos.Auto>();
                            if (fuenteAnt.Multas != null && fuenteAnt.Multas.Any())
                                fuenteAnt.Multas = fuenteAnt.Multas.Where(m => autos.Select(m => m.Placa).Contains(m.Placa) || m.Placa == "-" || m.Placa == "SIN/PLACA" || m.Placa.Length == 1 || m.Placa?.Trim() == string.Empty).ToList();

                            var totalMultas = fuenteAnt.Multas.Sum(x => (!x.Pagada.HasValue || (x.Pagada.HasValue && !x.Pagada.Value)) && (!x.Reclamo.HasValue || (x.Reclamo.HasValue && !x.Reclamo.Value))
                                              && (!x.Anulada.HasValue || (x.Anulada.HasValue && !x.Anulada.Value)) ? x.Saldo : 0);
                            var resultadoComparacion = totalMultas < minimo;
                            if (pagoMultasPendiente != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = pagoMultasPendiente.Excepcional,
                                    IdPolitica = pagoMultasPendiente.Id,
                                    Politica = pagoMultasPendiente.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", totalMultas.ToString("N", culture)),
                                    Valor = totalMultas.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (pagoMultasPendiente.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(pagoMultasPendiente.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de ANT. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Ant

                #region PensionAlimenticia
                try
                {
                    _logger.LogInformation("Procesando políticas Pensión Alimenticia...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PensionAlimenticia && m.Generado);
                    var resultadoComparacion = false;

                    if (detalleHistorial != null)
                    {
                        var pensionAlimenticia = JsonConvert.DeserializeObject<Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia>(detalleHistorial.Datos);
                        double totalDeudaAlimenticia = 0;
                        minimo = 500;

                        if (pensionAlimenticia != null && pensionAlimenticia.Resultados != null && pensionAlimenticia.Resultados.Any())
                        {
                            var valorDeudaPension = new List<List<Externos.Logica.PensionesAlimenticias.Modelos.Movimiento>>();
                            var valorMensualPension = new List<string>();
                            var resultadoPension = pensionAlimenticia.Resultados;
                            var nombreHistorial = resultadoPension.FirstOrDefault().Nombre;
                            var movimientosPension = resultadoPension.Select(x => new { x.Movimientos, x.Intervinientes, x.PensionActualOriginal }).ToList();
                            if (movimientosPension != null && movimientosPension.Any() && !string.IsNullOrEmpty(nombreHistorial))
                            {
                                var nombreDivido = nombreHistorial.Split(' ');
                                foreach (var item in movimientosPension)
                                {
                                    var obligadoNombre = item.Intervinientes.Where(x => x.Tipo.ToUpper() == "OBLIGADO PRINCIPAL").Select(x => x.Nombre).ToList();
                                    if (obligadoNombre != null && obligadoNombre.Any())
                                    {
                                        var listaNombre = new List<bool>();
                                        foreach (var item1 in obligadoNombre)
                                        {
                                            var nombreSeparado = item1.Split(' ');
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (nombreHistorial.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (listaNombre.Count(x => x) == nombreDivido.Length)
                                            {
                                                valorDeudaPension.Add(item.Movimientos);
                                                valorMensualPension.Add(item.PensionActualOriginal);
                                            }
                                        }
                                    }
                                }
                            }

                            if (valorDeudaPension != null && valorDeudaPension.Any())
                            {
                                totalDeudaAlimenticia = valorDeudaPension.Sum(x => x.Sum(m => double.Parse(!string.IsNullOrEmpty(m.ValorDeudaOriginal) ? m.ValorDeudaOriginal.Replace(",", ".") : "0"))) - valorDeudaPension.Sum(x => x.Sum(m => double.Parse(!string.IsNullOrEmpty(m.ValorPagadoOriginal) ? m.ValorPagadoOriginal.Replace(",", ".") : "0")));
                                resultadoComparacion = totalDeudaAlimenticia <= minimo;
                                if (deudaPensionAlimenticia != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = deudaPensionAlimenticia.Excepcional,
                                        IdPolitica = deudaPensionAlimenticia.Id,
                                        Politica = deudaPensionAlimenticia.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", totalDeudaAlimenticia.ToString("N", culture)),
                                        Valor = totalDeudaAlimenticia.ToString("N", culture),
                                        Parametro = minimo.ToString("N", culture),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });

                                    if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(permisoFacturacion.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (deudaPensionAlimenticia != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = deudaPensionAlimenticia.Excepcional,
                                        IdPolitica = deudaPensionAlimenticia.Id,
                                        Politica = deudaPensionAlimenticia.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                        Valor = "0.00",
                                        Parametro = minimo.ToString("N", culture),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });

                                    if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(permisoFacturacion.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }

                            if (valorMensualPension != null && valorMensualPension.Any())
                                valorMensualPAlimenticia = valorMensualPension.Sum(m => double.Parse(!string.IsNullOrEmpty(m) ? m.Replace(",", ".") : "0"));
                        }
                    }
                    else
                    {
                        resultadoComparacion = true;
                        if (deudaPensionAlimenticia != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = deudaPensionAlimenticia.Excepcional,
                                IdPolitica = deudaPensionAlimenticia.Id,
                                Politica = deudaPensionAlimenticia.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "500.00"),
                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                Valor = "0.00",
                                Parametro = "500.00",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });

                            if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(permisoFacturacion.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Pensión Alimenticia. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region SuperintendenciaBancos
                try
                {
                    _logger.LogInformation("Procesando políticas SuperintendenciaBancos...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancos = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancos != null)
                        {
                            var estadoBancos = superBancos.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosCedula != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosCedula.Excepcional,
                                        IdPolitica = superBancosCedula.Id,
                                        Politica = superBancosCedula.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosCedula.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosCedula.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancosRucNatural = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancosRucNatural != null)
                        {
                            var estadoBancos = superBancosRucNatural.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosNatural != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosNatural.Excepcional,
                                        IdPolitica = superBancosNatural.Id,
                                        Politica = superBancosNatural.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosNatural.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosNatural.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SuperintendenciaBancos. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                //#region Predios
                //try
                //{
                //    _logger.LogInformation("Procesando políticas Predios...");
                //    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                //    {
                //        Datos = m.Data
                //    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio && m.Generado);
                //    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                //    {
                //        var predioMunicipio = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(detalleHistorial.Datos);
                //        if (predioMunicipio != null)
                //        {
                //            var nroPredios = predioMunicipio.Detalle.Where(m => m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("CEM")).GroupBy(m => m.Numero).Count();
                //            minimo = 1;
                //            var resultadoComparacion = nroPredios > minimo;
                //            if (prediosPersonal != null)
                //            {
                //                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                //                {
                //                    IdPolitica = prediosPersonal.Id,
                //                    Politica = prediosPersonal.Nombre,
                //                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                //                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Predios, nroPredios.ToString()),
                //                    Valor = nroPredios.ToString(),
                //                    Parametro = minimo.ToString(),
                //                    ResultadoPolitica = resultadoComparacion,
                //                    FechaCreacion = DateTime.Now
                //                });
                //                if (prediosPersonal.Excepcional && !resultadoComparacion)
                //                {
                //                    observaciones.Add(prediosPersonal.Nombre);
                //                    aprobacionAdicional = true;
                //                }
                //            }
                //        }
                //    }
                //}
                //catch (Exception ex)
                //{
                //    _logger.LogError($"Error al procesar políticas de Predios. {ex.Message}");
                //    _logger.LogError(ex, ex.Message);
                //}
                //#endregion

                #region AntecedentesPenales
                try
                {
                    _logger.LogInformation("Procesando políticas Antecedentes Penales...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.AntecedentesPenales && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var antecedentes = JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.Resultado>(detalleHistorial.Datos);
                        if (antecedentes != null && !string.IsNullOrEmpty(antecedentes.Antecedente))
                        {
                            var resultadoComparacion = !antecedentes.Antecedente.ToUpper().Equals("SI");
                            if (antecedentesPenales != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antecedentesPenales.Excepcional,
                                    IdPolitica = antecedentesPenales.Id,
                                    Politica = antecedentesPenales.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.AntecedentesPenales, "NO"),
                                    ValorResultado = antecedentes.Antecedente.ToUpper(),
                                    Valor = antecedentes.Antecedente.ToUpper(),
                                    Parametro = "NO",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antecedentesPenales.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antecedentesPenales.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Antecedentes Penales. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region NoticiaDelito
                try
                {
                    _logger.LogInformation("Procesando políticas Noticias del Delito...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosPersona && m.Generado);
                    var entidad = await _historiales.FirstOrDefaultAsync(m => new { m.Identificacion, m.IdentificacionSecundaria, m.NombresPersona }, m => m.Id == modelo.IdHistorial, null);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos) && entidad != null)
                    {
                        var delitoNoticia = JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(detalleHistorial.Datos);
                        if (delitoNoticia != null)
                        {
                            minimo = 0;
                            var resultadoComparacion = false;
                            var cantidadSujeto = new List<string>();
                            var sujetos = delitoNoticia.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                            if (sujetos != null && sujetos.Any())
                            {
                                var nombreDivido = entidad.NombresPersona?.Split(' ');
                                var listaNombre = new List<bool>();

                                foreach (var item1 in sujetos.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                                {
                                    if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                    {
                                        if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(entidad.Identificacion) && entidad.Identificacion == item1.Cedula)
                                            cantidadSujeto.Add(item1.Numero);
                                        else if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(entidad.IdentificacionSecundaria) && entidad.IdentificacionSecundaria == item1.Cedula)
                                            cantidadSujeto.Add(item1.Numero);
                                        else
                                        {
                                            var nombreSeparado = item1.NombresCompletos.Split(' ');
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (!string.IsNullOrEmpty(entidad.NombresPersona) && entidad.NombresPersona.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                                                cantidadSujeto.Add(item1.Numero);
                                        }
                                    }
                                }
                                cantidadSujeto = cantidadSujeto.Distinct().ToList();
                            }

                            if (cantidadSujeto.Count() > 0)
                            {
                                resultadoComparacion = minimo > cantidadSujeto.Count();
                                if (noticiaDelito != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelito.Excepcional,
                                        IdPolitica = noticiaDelito.Id,
                                        Politica = noticiaDelito.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelito.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelito.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (noticiaDelito != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelito.Excepcional,
                                        IdPolitica = noticiaDelito.Id,
                                        Politica = noticiaDelito.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelito.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelito.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Noticias del Delito. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region Evaluación Buró
                try
                {
                    _logger.LogInformation("Procesando políticas BURÓ...");
                    Externos.Logica.BuroCredito.Modelos.CreditoRespuesta r_burocredito = null;
                    Externos.Logica.Equifax.Modelos.Resultado r_burocredito_equifax = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito && m.Generado);

                    if (detalleHistorial != null && planBuroCredito != null)
                    {
                        if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                        {
                            r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(detalleHistorial.Datos);
                            if (r_burocredito != null && r_burocredito.Result != null)
                            {
                                ViewBag.EvaluarBuro = true;
                                ViewBag.VisualizarBuro = true;
                                #region Procesamiento Políticas AVAL
                                //Manejo de cuentas corrientes
                                try
                                {
                                    if (manejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito.Result.ManejoCuentasCorrientes.OrderByDescending(x => x.FechaCumplimientoSancion).FirstOrDefault().FechaCumplimientoSancion;
                                        if (fechaCumplimiento != null && fechaCumplimiento != default)
                                        {
                                            var manejoCuentasCorrientesComparacion = DateTime.Now.Date >= fechaCumplimiento.Value.AddYears(+1).Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = manejoCuentasCorrientes.Excepcional,
                                                IdPolitica = manejoCuentasCorrientes.Id,
                                                Politica = manejoCuentasCorrientes.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFechaSansion, fechaCumplimiento.Value.AddYears(+1).Date.ToString("yyyy/MM/dd"), fechaCumplimiento.Value.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.Value.AddYears(+1).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = manejoCuentasCorrientesComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (manejoCuentasCorrientes.Excepcional && !manejoCuentasCorrientesComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Manejo Cuentas Corrientes. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Fecha Cumplimiento Sancion
                                try
                                {
                                    if (FechaCumplimientoSancion != null && r_burocredito.Result.ManejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito.Result.ManejoCuentasCorrientes.OrderByDescending(x => x.FechaCumplimientoSancion).FirstOrDefault().FechaCumplimientoSancion;
                                        if (fechaCumplimiento != null && fechaCumplimiento != default)
                                        {
                                            var fechaSansion = fechaCumplimiento.Value.Date <= DateTime.Now.Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = FechaCumplimientoSancion.Excepcional,
                                                IdPolitica = FechaCumplimientoSancion.Id,
                                                Politica = FechaCumplimientoSancion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFecha, fechaCumplimiento.Value.Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.Value.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = fechaSansion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (FechaCumplimientoSancion.Excepcional && !fechaSansion)
                                            {
                                                observacionesBuro.Add(FechaCumplimientoSancion.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Fecha Cumplimiento Sanción. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Deuda vigente total
                                try
                                {
                                    if (r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any())
                                    {
                                        //Valor vencido
                                        if (deudaVigenteTotal != null)
                                        {
                                            minimo = 0;
                                            decimal deudaVigenteTotalSuma = (decimal)r_burocredito.Result.DeudaVigenteTotal.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                            var deudaVigenteTotalComparacion = deudaVigenteTotalSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!deudaVigenteTotalComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.SaldoVencido.HasValue && x.SaldoVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.SaldoVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.ValorVencido.HasValue && x.ValorVencido.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesServicio != null && r_burocredito.Result.OperacionesVigentesServicio.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesServicio.Where(x => x.ValorVencido.HasValue && x.ValorVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", deudaVigenteTotalSuma.ToString()),
                                                Valor = deudaVigenteTotalSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = deudaVigenteTotalComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (deudaVigenteTotal.Excepcional && !deudaVigenteTotalComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        //Demanda judicial
                                        if (valorDemandaJudicial != null)
                                        {
                                            minimo = 0;
                                            var valorDemandaJudicialSuma = r_burocredito.Result.DeudaVigenteTotal.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                            var valorDemandaJudicialComparacion = valorDemandaJudicialSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!valorDemandaJudicialComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.DemandaJudicial.HasValue && x.DemandaJudicial.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.DemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialSuma.ToString()),
                                                Valor = valorDemandaJudicialSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicialComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (valorDemandaJudicial.Excepcional && !valorDemandaJudicialComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        //Cartera castigada
                                        if (valorCarteraCastigada != null)
                                        {
                                            minimo = 0;
                                            var valorCarteraCastigadaSuma = r_burocredito.Result.DeudaVigenteTotal.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                            var valorCarteraCastigadaComparacion = valorCarteraCastigadaSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!valorCarteraCastigadaComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaSuma.ToString()),
                                                Valor = valorCarteraCastigadaSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorCarteraCastigadaComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (valorCarteraCastigada.Excepcional && !valorCarteraCastigadaComparacion)
                                            {
                                                observacionesBuro.Add(valorCarteraCastigada.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = deudaVigenteTotal.Excepcional,
                                            IdPolitica = deudaVigenteTotal.Id,
                                            Politica = deudaVigenteTotal.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, deudaVigenteTotal.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial.Excepcional,
                                            IdPolitica = valorDemandaJudicial.Id,
                                            Politica = valorDemandaJudicial.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicial.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCarteraCastigada.Excepcional,
                                            IdPolitica = valorCarteraCastigada.Id,
                                            Politica = valorCarteraCastigada.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigada.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Deuda Vigente Total. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses
                                try
                                {
                                    var historicoTarjeta = r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any() ? r_burocredito.Result.OperacionesHistoricasTarjeta.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.SaldoVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoBanco = r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any() ? r_burocredito.Result.OperacionesHistoricasBanco.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCobranza = r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any() ? r_burocredito.Result.OperacionesHistoricasCobranza.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.DemandaJudicial, RazonSocial = x.NombreCasaCobranza }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCooperativa = r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any() ? r_burocredito.Result.OperacionesHistoricasCooperativa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoEmpresa = r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any() ? r_burocredito.Result.OperacionesHistoricasEmpresa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoServicio = r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any() ? r_burocredito.Result.OperacionesHistoricasServicio.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = (double?)0, DemandaJudicial = (double?)0, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();

                                    if (historicoTarjeta.Any() || historicoBanco.Any() || historicoCobranza.Any() ||
                                        historicoCooperativa.Any() || historicoEmpresa.Any() || historicoServicio.Any())
                                    {
                                        var historico = historicoTarjeta.Concat(historicoBanco).Concat(historicoCobranza).Concat(historicoCooperativa).Concat(historicoEmpresa).Concat(historicoServicio).ToList();

                                        if (valorVencido12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleVencido = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.Vencido == historico.Max(y => y.Vencido)).Select(x => new { x.Vencido, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleVencido != null && detalleVencido.Vencido.HasValue)
                                            {
                                                var valorVencido12MesesComparacion = detalleVencido.Vencido.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleVencido.Vencido.Value, 2).ToString()),
                                                    Valor = detalleVencido.Vencido.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencido12MesesComparacion,
                                                    FechaCorte = detalleVencido.FechaCorte.HasValue && detalleVencido.FechaCorte.Value.Date != default ? detalleVencido.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencido12MesesComparacion && detalleVencido != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencido.RazonSocial, Valor = detalleVencido.Vencido.HasValue ? (decimal)detalleVencido.Vencido.Value : 0 } }) : null
                                                });
                                                if (valorVencido12Meses.Excepcional && !valorVencido12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencido12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (valorDemandaJudicial12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicial = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historico.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleDemandaJudicial != null && detalleDemandaJudicial.DemandaJudicial.HasValue)
                                            {
                                                var valorDemandaJudicial12MesesComparacion = detalleDemandaJudicial.DemandaJudicial.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicial12Meses.Id,
                                                    Politica = valorDemandaJudicial12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleDemandaJudicial.DemandaJudicial.Value, 2).ToString()),
                                                    Valor = detalleDemandaJudicial.DemandaJudicial.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorDemandaJudicial12MesesComparacion,
                                                    FechaCorte = detalleDemandaJudicial.FechaCorte.HasValue && detalleDemandaJudicial.FechaCorte.Value.Date != default ? detalleDemandaJudicial.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorDemandaJudicial12MesesComparacion && detalleDemandaJudicial != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicial.RazonSocial, Valor = detalleDemandaJudicial.DemandaJudicial.HasValue ? (decimal)detalleDemandaJudicial.DemandaJudicial.Value : 0 } }) : null
                                                });
                                                if (valorDemandaJudicial12Meses.Excepcional && !valorDemandaJudicial12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorDemandaJudicial12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicial12Meses.Id,
                                                    Politica = valorDemandaJudicial12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (carteraCastigada12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigada = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historico.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleCarteraCastigada != null && detalleCarteraCastigada.CarteraCastigada.HasValue)
                                            {
                                                var carteraCastigada12MesesComparacion = detalleCarteraCastigada.CarteraCastigada.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigada12Meses.Excepcional,
                                                    IdPolitica = carteraCastigada12Meses.Id,
                                                    Politica = carteraCastigada12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleCarteraCastigada.CarteraCastigada.Value, 2).ToString()),
                                                    Valor = detalleCarteraCastigada.CarteraCastigada.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = carteraCastigada12MesesComparacion,
                                                    FechaCorte = detalleCarteraCastigada.FechaCorte.HasValue && detalleCarteraCastigada.FechaCorte.Value.Date != default ? detalleCarteraCastigada.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !carteraCastigada12MesesComparacion && detalleCarteraCastigada != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigada.RazonSocial, Valor = detalleCarteraCastigada.CarteraCastigada.HasValue ? (decimal)detalleCarteraCastigada.CarteraCastigada : 0 } }) : null
                                                });
                                                if (carteraCastigada12Meses.Excepcional && !carteraCastigada12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(carteraCastigada12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigada12Meses.Excepcional,
                                                    IdPolitica = carteraCastigada12Meses.Id,
                                                    Politica = carteraCastigada12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencido12Meses.Excepcional,
                                            IdPolitica = valorVencido12Meses.Id,
                                            Politica = valorVencido12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicial12Meses.Id,
                                            Politica = valorDemandaJudicial12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigada12Meses.Excepcional,
                                            IdPolitica = carteraCastigada12Meses.Id,
                                            Politica = carteraCastigada12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses
                                try
                                {
                                    var historicoTarjetaMayor12Meses = r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any() ? r_burocredito.Result.OperacionesHistoricasTarjeta.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.SaldoVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoBancoMayor12Meses = r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any() ? r_burocredito.Result.OperacionesHistoricasBanco.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCobranzaMayor12Meses = r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any() ? r_burocredito.Result.OperacionesHistoricasCobranza.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.DemandaJudicial, RazonSocial = x.NombreCasaCobranza }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCooperativaMayor12Meses = r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any() ? r_burocredito.Result.OperacionesHistoricasCooperativa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoEmpresaMayor12Meses = r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any() ? r_burocredito.Result.OperacionesHistoricasEmpresa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoServicioMayor12Meses = r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any() ? r_burocredito.Result.OperacionesHistoricasServicio.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = (double?)0, DemandaJudicial = (double?)0, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();

                                    if (historicoTarjetaMayor12Meses.Any() || historicoBancoMayor12Meses.Any() || historicoCobranzaMayor12Meses.Any() ||
                                        historicoCooperativaMayor12Meses.Any() || historicoEmpresaMayor12Meses.Any() || historicoServicioMayor12Meses.Any())
                                    {
                                        var historicoMayor12Meses = historicoTarjetaMayor12Meses.Concat(historicoBancoMayor12Meses).Concat(historicoCobranzaMayor12Meses).Concat(historicoCooperativaMayor12Meses).Concat(historicoEmpresaMayor12Meses).Concat(historicoServicioMayor12Meses).ToList();

                                        if (valorVencidoMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleVencidoMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.Vencido == historicoMayor12Meses.Max(y => y.Vencido)).Select(x => new { x.Vencido, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleVencidoMayor12Meses != null && detalleVencidoMayor12Meses.Vencido.HasValue)
                                            {
                                                var valorVencidoMayor12MesesComparacion = detalleVencidoMayor12Meses.Vencido.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleVencidoMayor12Meses.Vencido.Value, 2).ToString()),
                                                    Valor = detalleVencidoMayor12Meses.Vencido.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencidoMayor12MesesComparacion,
                                                    FechaCorte = detalleVencidoMayor12Meses.FechaCorte.HasValue && detalleVencidoMayor12Meses.FechaCorte.Value.Date != default ? detalleVencidoMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencidoMayor12MesesComparacion && detalleVencidoMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencidoMayor12Meses.RazonSocial, Valor = detalleVencidoMayor12Meses.Vencido.HasValue ? (decimal)detalleVencidoMayor12Meses.Vencido.Value : 0 } }) : null
                                                });
                                                if (valorVencidoMayor12Meses.Excepcional && !valorVencidoMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencidoMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (valorDemandaJudicialMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicialMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historicoMayor12Meses.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleDemandaJudicialMayor12Meses != null && detalleDemandaJudicialMayor12Meses.DemandaJudicial.HasValue)
                                            {
                                                var valorDemandaJudicialMayor12MesesComparacion = detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                    Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value, 2).ToString()),
                                                    Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorDemandaJudicialMayor12MesesComparacion,
                                                    FechaCorte = detalleDemandaJudicialMayor12Meses.FechaCorte.HasValue && detalleDemandaJudicialMayor12Meses.FechaCorte.Value.Date != default ? detalleDemandaJudicialMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorDemandaJudicialMayor12MesesComparacion && detalleDemandaJudicialMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicialMayor12Meses.RazonSocial, Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.HasValue ? (decimal)detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value : 0 } }) : null
                                                });
                                                if (valorDemandaJudicialMayor12Meses.Excepcional && !valorDemandaJudicialMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorDemandaJudicialMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                    Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });

                                        }

                                        if (carteraCastigadaMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigadaMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historicoMayor12Meses.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleCarteraCastigadaMayor12Meses != null && detalleCarteraCastigadaMayor12Meses.CarteraCastigada.HasValue)
                                            {
                                                var carteraCastigadaMayor12MesesComparacion = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                    IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                    Politica = carteraCastigadaMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value, 2).ToString()),
                                                    Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = carteraCastigadaMayor12MesesComparacion,
                                                    FechaCorte = detalleCarteraCastigadaMayor12Meses.FechaCorte.HasValue && detalleCarteraCastigadaMayor12Meses.FechaCorte.Value.Date != default ? detalleCarteraCastigadaMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !carteraCastigadaMayor12MesesComparacion && detalleCarteraCastigadaMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigadaMayor12Meses.RazonSocial, Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.HasValue ? (decimal)detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value : 0 } }) : null
                                                });
                                                if (carteraCastigadaMayor12Meses.Excepcional && !carteraCastigadaMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(carteraCastigadaMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                    IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                    Politica = carteraCastigadaMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoMayor12Meses.Excepcional,
                                            IdPolitica = valorVencidoMayor12Meses.Id,
                                            Politica = valorVencidoMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                            Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                            IdPolitica = carteraCastigadaMayor12Meses.Id,
                                            Politica = carteraCastigadaMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cuota vencidos
                                try
                                {
                                    if (valorCuotaVencidos != null && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                    {
                                        minimo = 0;
                                        var valorCuotaVencidosSuma = r_burocredito.Result.GastoFinanciero.Where(m => m.CuotaVencidos.HasValue).Sum(m => m.CuotaVencidos.Value);
                                        var valorCuotaVencidosComparacion = valorCuotaVencidosSuma <= minimo;

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCuotaVencidosSuma.ToString()),
                                            Valor = valorCuotaVencidosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorCuotaVencidosComparacion,
                                            FechaCreacion = DateTime.Now
                                        });
                                        if (valorCuotaVencidos.Excepcional && !valorCuotaVencidosComparacion)
                                        {
                                            observacionesBuro.Add(valorCuotaVencidos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCuotaVencidos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones vigentes tarjetas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                //    {
                                //        if (saldoVencidoTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var saldoVencidoTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Where(m => m.SaldoVencido.HasValue).Sum(m => m.SaldoVencido.Value);
                                //            var saldoVencidoTarjetasComparacion = saldoVencidoTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = saldoVencidoTarjetas.Id,
                                //                Politica = saldoVencidoTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", saldoVencidoTarjetasSuma.ToString()),
                                //                Valor = saldoVencidoTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = saldoVencidoTarjetasComparacion
                                //            });
                                //            if (saldoVencidoTarjetas.Excepcional && !saldoVencidoTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(saldoVencidoTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialTarjetasComparacion = valorDemandaJudicialTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialTarjetas.Id,
                                //                Politica = valorDemandaJudicialTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialTarjetasSuma.ToString()),
                                //                Valor = valorDemandaJudicialTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialTarjetasComparacion
                                //            });
                                //            if (valorDemandaJudicialTarjetas.Excepcional && !valorDemandaJudicialTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (carteraCastigadaTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var carteraCastigadaTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Sum(m => m.CarteraCastigada ?? 0);
                                //            var carteraCastigadaTarjetasComparacion = carteraCastigadaTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = carteraCastigadaTarjetas.Id,
                                //                Politica = carteraCastigadaTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaTarjetasSuma.ToString()),
                                //                Valor = carteraCastigadaTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = carteraCastigadaTarjetasComparacion
                                //            });
                                //            if (carteraCastigadaTarjetas.Excepcional && !carteraCastigadaTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(carteraCastigadaTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Max(m => m.DiasMorosidad) ?? 0;
                                //            var diasMorosidadTarjetasComparacion = diasMorosidadTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadTarjetas.Id,
                                //                Politica = diasMorosidadTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadTarjetasSuma.ToString()),
                                //                Valor = diasMorosidadTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadTarjetasComparacion
                                //            });
                                //            if (diasMorosidadTarjetas.Excepcional && !diasMorosidadTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = saldoVencidoTarjetas.Id,
                                //            Politica = saldoVencidoTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, saldoVencidoTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialTarjetas.Id,
                                //            Politica = valorDemandaJudicialTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = carteraCastigadaTarjetas.Id,
                                //            Politica = carteraCastigadaTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, carteraCastigadaTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadTarjetas.Id,
                                //            Politica = diasMorosidadTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadTarjetas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Tarjetas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes bancos                            
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                //    {
                                //        if (valorVencidoTotalBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalBancosComparacion = valorVencidoTotalBancosSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalBancos.Id,
                                //                Politica = valorVencidoTotalBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalBancosSuma.ToString()),
                                //                Valor = valorVencidoTotalBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalBancosComparacion
                                //            });
                                //            if (valorVencidoTotalBancos.Excepcional && !valorVencidoTotalBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialBancosComparacion = valorDemandaJudicialBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialBancos.Id,
                                //                Politica = valorDemandaJudicialBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialBancosSuma.ToString()),
                                //                Valor = valorDemandaJudicialBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialBancosComparacion
                                //            });
                                //            if (valorDemandaJudicialBancos.Excepcional && !valorDemandaJudicialBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaBancosComparacion = valorCarteraCastigadaBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaBancos.Id,
                                //                Politica = valorCarteraCastigadaBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaBancosSuma.ToString()),
                                //                Valor = valorCarteraCastigadaBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaBancosComparacion
                                //            });
                                //            if (valorCarteraCastigadaBancos.Excepcional && !valorCarteraCastigadaBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.DiasMorosidad.HasValue).Max(m => m.DiasMorosidad.Value);
                                //            var diasMorosidadBancosComparacion = diasMorosidadBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadBancos.Id,
                                //                Politica = diasMorosidadBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadBancosSuma.ToString()),
                                //                Valor = diasMorosidadBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadBancosComparacion
                                //            });
                                //            if (diasMorosidadBancos.Excepcional && !diasMorosidadBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalBancos.Id,
                                //            Politica = valorVencidoTotalBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalBancos.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialBancos.Id,
                                //            Politica = valorDemandaJudicialBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialBancos.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaBancos.Id,
                                //            Politica = valorCarteraCastigadaBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaBancos.Nombre)

                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadBancos.Id,
                                //            Politica = diasMorosidadBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadBancos.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Bancos. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes cooperativas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                //    {
                                //        if (valorVencidoTotalCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalCooperativasComparacion = valorVencidoTotalCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalCooperativas.Id,
                                //                Politica = valorVencidoTotalCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalCooperativasSuma.ToString()),
                                //                Valor = valorVencidoTotalCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalCooperativasComparacion
                                //            });
                                //            if (valorVencidoTotalCooperativas.Excepcional && !valorVencidoTotalCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialCooperativasComparacion = valorDemandaJudicialCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialCooperativas.Id,
                                //                Politica = valorDemandaJudicialCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialCooperativasSuma.ToString()),
                                //                Valor = valorDemandaJudicialCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialCooperativasComparacion
                                //            });
                                //            if (valorDemandaJudicialCooperativas.Excepcional && !valorDemandaJudicialCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaCooperativasComparacion = valorCarteraCastigadaCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaCooperativas.Id,
                                //                Politica = valorCarteraCastigadaCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaCooperativasSuma.ToString()),
                                //                Valor = valorCarteraCastigadaCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaCooperativasComparacion
                                //            });
                                //            if (valorCarteraCastigadaCooperativas.Excepcional && !valorCarteraCastigadaCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.DiasMorosidad.HasValue).Max(m => m.DiasMorosidad.Value);
                                //            var diasMorosidadCooperativasComparacion = diasMorosidadCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadCooperativas.Id,
                                //                Politica = diasMorosidadCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadCooperativasSuma.ToString()),
                                //                Valor = diasMorosidadCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadCooperativasComparacion
                                //            });
                                //            if (diasMorosidadCooperativas.Excepcional && !diasMorosidadCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalCooperativas.Id,
                                //            Politica = valorVencidoTotalCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialCooperativas.Id,
                                //            Politica = valorDemandaJudicialCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaCooperativas.Id,
                                //            Politica = valorCarteraCastigadaCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadCooperativas.Id,
                                //            Politica = diasMorosidadCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadCooperativas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes empresas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                //    {
                                //        if (valorVencidoTotalEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalEmpresasComparacion = valorVencidoTotalEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalEmpresas.Id,
                                //                Politica = valorVencidoTotalEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalEmpresasSuma.ToString()),
                                //                Valor = valorVencidoTotalEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalEmpresasComparacion
                                //            });
                                //            if (valorVencidoTotalEmpresas.Excepcional && !valorVencidoTotalEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialEmpresasComparacion = valorDemandaJudicialEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialEmpresas.Id,
                                //                Politica = valorDemandaJudicialEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialEmpresasSuma.ToString()),
                                //                Valor = valorDemandaJudicialEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialEmpresasComparacion
                                //            });
                                //            if (valorDemandaJudicialEmpresas.Excepcional && !valorDemandaJudicialEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaEmpresasComparacion = valorCarteraCastigadaEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaEmpresas.Id,
                                //                Politica = valorCarteraCastigadaEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaEmpresasSuma.ToString()),
                                //                Valor = valorCarteraCastigadaEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaEmpresasComparacion
                                //            });
                                //            if (valorCarteraCastigadaEmpresas.Excepcional && !valorCarteraCastigadaEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.DiasVencido.HasValue).Max(m => m.DiasVencido.Value);
                                //            var diasMorosidadEmpresasComparacion = diasMorosidadEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadEmpresas.Id,
                                //                Politica = diasMorosidadEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadEmpresasSuma.ToString()),
                                //                Valor = diasMorosidadEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadEmpresasComparacion
                                //            });
                                //            if (diasMorosidadEmpresas.Excepcional && !diasMorosidadEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalEmpresas.Id,
                                //            Politica = valorVencidoTotalEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialEmpresas.Id,
                                //            Politica = valorDemandaJudicialEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaEmpresas.Id,
                                //            Politica = valorCarteraCastigadaEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadEmpresas.Id,
                                //            Politica = diasMorosidadEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadEmpresas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Empresas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //operaciones vigentes servicios
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesServicio != null && r_burocredito.Result.OperacionesVigentesServicio.Any())
                                //    {
                                //        if (valorVencidoVigentesServicios != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoVigentesServiciosSuma = r_burocredito.Result.OperacionesVigentesServicio.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                //            var valorVencidoVigentesServiciosComparacion = valorVencidoVigentesServiciosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoVigentesServicios.Id,
                                //                Politica = valorVencidoVigentesServicios.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoVigentesServiciosSuma.ToString()),
                                //                Valor = valorVencidoVigentesServiciosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoVigentesServiciosComparacion
                                //            });
                                //            if (valorVencidoVigentesServicios.Excepcional && !valorVencidoVigentesServiciosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoVigentesServicios.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (numeroDiasVencidoVigentesServicios != null)
                                //        {
                                //            minimo = 0;
                                //            var numeroDiasVencidoVigentesServiciosSuma = r_burocredito.Result.OperacionesVigentesServicio.Where(m => m.NumeroDiasVencido.HasValue).Max(m => m.NumeroDiasVencido.Value);
                                //            var numeroDiasVencidoVigentesServiciosComparacion = numeroDiasVencidoVigentesServiciosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = numeroDiasVencidoVigentesServicios.Id,
                                //                Politica = numeroDiasVencidoVigentesServicios.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, numeroDiasVencidoVigentesServiciosSuma.ToString()),
                                //                Valor = numeroDiasVencidoVigentesServiciosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = numeroDiasVencidoVigentesServiciosComparacion
                                //            });
                                //            if (numeroDiasVencidoVigentesServicios.Excepcional && !numeroDiasVencidoVigentesServiciosComparacion)
                                //            {
                                //                observacionesBuro.Add(numeroDiasVencidoVigentesServicios.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoVigentesServicios.Id,
                                //            Politica = valorVencidoVigentesServicios.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoVigentesServicios.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = numeroDiasVencidoVigentesServicios.Id,
                                //            Politica = numeroDiasVencidoVigentesServicios.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, numeroDiasVencidoVigentesServicios.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Servicios. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes cobranzas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                //    {
                                //        if (valorVencidoVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                //            var valorVencidoVigentesCobranzasComparacion = valorVencidoVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoVigentesCobranzas.Id,
                                //                Politica = valorVencidoVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoVigentesCobranzasSuma.ToString()),
                                //                Valor = valorVencidoVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoVigentesCobranzasComparacion
                                //            });
                                //            if (valorVencidoVigentesCobranzas.Excepcional && !valorVencidoVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (demandaJudicialVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var demandaJudicialVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.DemandaJudicial.HasValue).Sum(m => m.DemandaJudicial.Value);
                                //            var demandaJudicialVigentesCobranzasComparacion = demandaJudicialVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = demandaJudicialVigentesCobranzas.Id,
                                //                Politica = demandaJudicialVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", demandaJudicialVigentesCobranzasSuma.ToString()),
                                //                Valor = demandaJudicialVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = demandaJudicialVigentesCobranzasComparacion
                                //            });
                                //            if (demandaJudicialVigentesCobranzas.Excepcional && !demandaJudicialVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(demandaJudicialVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (carteraCastigadaVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var carteraCastigadaVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var carteraCastigadaVigentesCobranzasComparacion = carteraCastigadaVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = carteraCastigadaVigentesCobranzas.Id,
                                //                Politica = carteraCastigadaVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaVigentesCobranzasSuma.ToString()),
                                //                Valor = carteraCastigadaVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = carteraCastigadaVigentesCobranzasComparacion
                                //            });
                                //            if (carteraCastigadaVigentesCobranzas.Excepcional && !carteraCastigadaVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(carteraCastigadaVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (numeroDiasVencidoVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var numeroDiasVencidoVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.NumeroDiasVencido.HasValue).Max(m => m.NumeroDiasVencido.Value);
                                //            var numeroDiasVencidoVigentesCobranzasComparacion = numeroDiasVencidoVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = numeroDiasVencidoVigentesCobranzas.Id,
                                //                Politica = numeroDiasVencidoVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, numeroDiasVencidoVigentesCobranzasSuma.ToString()),
                                //                Valor = numeroDiasVencidoVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = numeroDiasVencidoVigentesCobranzasComparacion
                                //            });
                                //            if (numeroDiasVencidoVigentesCobranzas.Excepcional && !numeroDiasVencidoVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(numeroDiasVencidoVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoVigentesCobranzas.Id,
                                //            Politica = valorVencidoVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = demandaJudicialVigentesCobranzas.Id,
                                //            Politica = demandaJudicialVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, demandaJudicialVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = carteraCastigadaVigentesCobranzas.Id,
                                //            Politica = carteraCastigadaVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, carteraCastigadaVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = numeroDiasVencidoVigentesCobranzas.Id,
                                //            Politica = numeroDiasVencidoVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, numeroDiasVencidoVigentesCobranzas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cobranzas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Indicadores deuda
                                //try
                                //{
                                //    if (mayorSaldoVencido36Meses != null && r_burocredito.Result.IndicadoresDeuda != null && r_burocredito.Result.IndicadoresDeuda.Any())
                                //    {
                                //        minimo = 0;
                                //        var mayorSaldoVencido36MesesSuma = r_burocredito.Result.IndicadoresDeuda.Where(m => m.MaySaldoVencDirecta36M.HasValue).Sum(m => m.MaySaldoVencDirecta36M.Value);
                                //        var mayorSaldoVencido36MesesComparacion = mayorSaldoVencido36MesesSuma <= minimo;

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = mayorSaldoVencido36Meses.Id,
                                //            Politica = mayorSaldoVencido36Meses.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", mayorSaldoVencido36MesesSuma.ToString()),
                                //            Valor = mayorSaldoVencido36MesesSuma.ToString(),
                                //            Parametro = minimo.ToString(),
                                //            ResultadoPolitica = mayorSaldoVencido36MesesComparacion,
                                //            FechaCreacion = DateTime.Now
                                //        });
                                //        if (mayorSaldoVencido36Meses.Excepcional && !mayorSaldoVencido36MesesComparacion)
                                //        {
                                //            observacionesBuro.Add(mayorSaldoVencido36Meses.Nombre);
                                //            aprobacionAdicionalBuro = true;
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = mayorSaldoVencido36Meses.Id,
                                //            Politica = mayorSaldoVencido36Meses.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, mayorSaldoVencido36Meses.Nombre),
                                //            FechaCreacion = DateTime.Now
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Indicadores Deudas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones históricas tarjetas                             
                                try
                                {
                                    if (valorVencidoHistoricoTarjetas != null && r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoTarjetasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasTarjeta.Where(m => m.SaldoVencido.HasValue).Sum(m => m.SaldoVencido.Value), 2);
                                        var valorVencidoHistoricoTarjetasComparacion = valorVencidoHistoricoTarjetasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoTarjetasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasTarjeta.Where(m => m.SaldoVencido.HasValue && m.SaldoVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.SaldoVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoTarjetas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoTarjetas.Id,
                                            Politica = valorVencidoHistoricoTarjetas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoTarjetasSuma.ToString()),
                                            Valor = valorVencidoHistoricoTarjetasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoTarjetasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoTarjetas.Excepcional && !valorVencidoHistoricoTarjetasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoTarjetas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoTarjetas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoTarjetas.Id,
                                            Politica = valorVencidoHistoricoTarjetas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoTarjetas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Tarjetas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas bancos                            
                                try
                                {
                                    if (valorVencidoHistoricoBancos != null && r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoBancosSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasBanco.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoBancosComparacion = valorVencidoHistoricoBancosSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoBancosComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasBanco.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoBancos.Excepcional,
                                            IdPolitica = valorVencidoHistoricoBancos.Id,
                                            Politica = valorVencidoHistoricoBancos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoBancosSuma.ToString()),
                                            Valor = valorVencidoHistoricoBancosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoBancosComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoBancos.Excepcional && !valorVencidoHistoricoBancosComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoBancos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoBancos.Excepcional,
                                            IdPolitica = valorVencidoHistoricoBancos.Id,
                                            Politica = valorVencidoHistoricoBancos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoBancos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Bancos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas cooperativas                            
                                try
                                {
                                    if (valorVencidoHistoricoCooperativas != null && r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoCooperativasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasCooperativa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoCooperativasComparacion = valorVencidoHistoricoCooperativasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoCooperativasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasCooperativa.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCooperativas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCooperativas.Id,
                                            Politica = valorVencidoHistoricoCooperativas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoCooperativasSuma.ToString()),
                                            Valor = valorVencidoHistoricoCooperativasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoCooperativasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoCooperativas.Excepcional && !valorVencidoHistoricoCooperativasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoCooperativas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCooperativas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCooperativas.Id,
                                            Politica = valorVencidoHistoricoCooperativas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoCooperativas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas empresas                            
                                try
                                {
                                    if (valorVencidoHistoricoEmpresas != null && r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoEmpresasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasEmpresa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoEmpresasComparacion = valorVencidoHistoricoEmpresasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoEmpresasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasEmpresa.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoEmpresas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoEmpresas.Id,
                                            Politica = valorVencidoHistoricoEmpresas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoEmpresasSuma.ToString()),
                                            Valor = valorVencidoHistoricoEmpresasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoEmpresasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoEmpresas.Excepcional && !valorVencidoHistoricoEmpresasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoEmpresas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoEmpresas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoEmpresas.Id,
                                            Politica = valorVencidoHistoricoEmpresas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoEmpresas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Empresas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas servicio                            
                                try
                                {
                                    if (valorVencidoHistoricoServicio != null && r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoServicioSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasServicio.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value), 2);
                                        var valorVencidoHistoricoServicioComparacion = valorVencidoHistoricoServicioSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoServicioComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasServicio.Where(m => m.ValorVencido.HasValue && m.ValorVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoServicio.Excepcional,
                                            IdPolitica = valorVencidoHistoricoServicio.Id,
                                            Politica = valorVencidoHistoricoServicio.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoServicioSuma.ToString()),
                                            Valor = valorVencidoHistoricoServicioSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoServicioComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoServicio.Excepcional && !valorVencidoHistoricoServicioComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoServicio.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoServicio.Excepcional,
                                            IdPolitica = valorVencidoHistoricoServicio.Id,
                                            Politica = valorVencidoHistoricoServicio.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoServicio.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Servicios. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas cobranza                            
                                try
                                {
                                    if (valorVencidoHistoricoCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoCobranzaSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasCobranza.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value), 2);
                                        var valorVencidoHistoricoCobranzaComparacion = valorVencidoHistoricoCobranzaSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoCobranzaComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasCobranza.Where(m => m.ValorVencido.HasValue && m.ValorVencido.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCobranza.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCobranza.Id,
                                            Politica = valorVencidoHistoricoCobranza.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoCobranzaSuma.ToString()),
                                            Valor = valorVencidoHistoricoCobranzaSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoCobranzaComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoCobranza.Excepcional && !valorVencidoHistoricoCobranzaComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoCobranza.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCobranza.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCobranza.Id,
                                            Politica = valorVencidoHistoricoCobranza.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoCobranza.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Cobranzas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //GastosFinancieros e ingresos
                                try
                                {
                                    if (r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any() && r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any())
                                    {
                                        var valorRangoIngreso = double.Parse(!string.IsNullOrEmpty(r_burocredito.Result.Ingreso.Select(m => m.RangoIngreso).FirstOrDefault()) ? r_burocredito.Result.Ingreso.Select(m => m.RangoIngreso).FirstOrDefault() : "0");
                                        var valorGastosFinancieros = r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular).FirstOrDefault() != null && r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular).FirstOrDefault() > 0 ? r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular).FirstOrDefault() : 0;
                                        var valorGastosFinancierosTotal = valorGastosFinancieros + valorMensualPAlimenticia;
                                        var ingresoEstimado = valorGastosFinancieros * 1.40;
                                        var saldoFinanciero = true;
                                        var deudaSuma = 0.00;
                                        if ((r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any()) || valorMensualPAlimenticia > 0)
                                        {
                                            var deudaVencido = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorVencido);
                                            var deudaDemandaJudicial = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorDemandaJudicial);
                                            var deudaCarteraCastigada = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.CarteraCastigada);
                                            deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + valorMensualPAlimenticia);
                                        }

                                        if (deudaSuma == 0)
                                        {
                                            if (ingresoEstimado > valorRangoIngreso)
                                            {
                                                saldoFinanciero = valorGastosFinancierosTotal < (ingresoEstimado * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (ingresoEstimado * 0.80).Value.ToString("N", culture), ingresoEstimado.Value.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastosFinancierosTotal.Value.ToString("N", culture)),
                                                    Valor = valorGastosFinancierosTotal.ToString(),
                                                    Parametro = (ingresoEstimado * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                            {
                                                if (valorRangoIngreso >= 0 && gastosFinancieros != null)
                                                {
                                                    saldoFinanciero = valorGastosFinancierosTotal < (valorRangoIngreso * 0.80);
                                                    detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                    {
                                                        Excepcional = gastosFinancieros.Excepcional,
                                                        IdPolitica = gastosFinancieros.Id,
                                                        Politica = gastosFinancieros.Nombre,
                                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorRangoIngreso * 0.80).ToString("N", culture), valorRangoIngreso.ToString("N", culture)),
                                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastosFinancierosTotal.Value.ToString("N", culture)),
                                                        Valor = valorGastosFinancierosTotal.ToString(),
                                                        Parametro = (valorRangoIngreso * 0.80).ToString(),
                                                        ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                        FechaCreacion = DateTime.Now
                                                    });
                                                    if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                    {
                                                        observacionesBuro.Add(gastosFinancieros.Nombre);
                                                        aprobacionAdicionalBuro = true;
                                                    }
                                                }

                                            }
                                        }
                                        else if (deudaSuma > 0)
                                        {
                                            if (valorRangoIngreso >= 0 && gastosFinancieros != null)
                                            {
                                                saldoFinanciero = valorGastosFinancierosTotal < (valorRangoIngreso * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorRangoIngreso * 0.80).ToString("N", culture), valorRangoIngreso.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastosFinancierosTotal.Value.ToString("N", culture)),
                                                    Valor = valorGastosFinancierosTotal.ToString(),
                                                    Parametro = (valorRangoIngreso * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = gastosFinancieros.Excepcional,
                                            IdPolitica = gastosFinancieros.Id,
                                            Politica = gastosFinancieros.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, "0", "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? true : false,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, gastosFinancieros.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros e Ingresos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }
                                #endregion Procesamiento Políticas AVAL

                                #region AYASA
                                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1792899036001)
                                {
                                    datosPersonaBuro.ModeloAutomotrizaAyasa = r_burocredito.Result.ModeloAutomotrizAyasa.FirstOrDefault();
                                    datosPersonaBuro.CalificacionClienteAyasa = true;
                                }
                                #endregion AYASA

                                #region BCapital
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                                {
                                    if (r_burocredito.Result != null)
                                        datosPersonaBuro.ModeloBCapital = r_burocredito;

                                    datosPersonaBuro.CalificacionBCapital = true;
                                }
                                #endregion BCapital

                                #region Cooperativas
                                if (planBuroCredito.ModeloCooperativas)
                                {
                                    if (r_burocredito.Result != null)
                                        datosPersonaBuro.ModeloCooperativas = r_burocredito;

                                    datosPersonaBuro.CalificacionCooperativas = true;
                                }
                                #endregion Cooperativas

                                #region Calificación
                                datosPersonaBuro.Score = 0;
                                if (r_burocredito.Result.Score != null && r_burocredito.Result.Score.Any())
                                    datosPersonaBuro.Score = r_burocredito.Result.Score.Select(m => m.Score).FirstOrDefault();

                                datosPersonaBuro.CupoEstimado = 0;
                                if (r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any() && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                {
                                    var rangoIngreso = double.Parse(!string.IsNullOrEmpty(r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso) ? r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso : "0");
                                    var cuotaEstimada = r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular != null && r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular > 0 ? r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular : 0;
                                    var cuotaEstimadaTotal = cuotaEstimada + valorMensualPAlimenticia;
                                    var ingresoEstimado = cuotaEstimadaTotal * 1.40;
                                    var deudaSuma = 0.00;
                                    if ((r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any()) || valorMensualPAlimenticia > 0)
                                    {
                                        var deudaVencido = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorVencido);
                                        var deudaDemandaJudicial = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorDemandaJudicial);
                                        var deudaCarteraCastigada = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.CarteraCastigada);
                                        deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + valorMensualPAlimenticia);
                                    }
                                    if (deudaSuma == 0)
                                    {
                                        if (rangoIngreso != 0)
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimadaTotal) * 0.45;
                                        else
                                            datosPersonaBuro.CupoEstimado = (ingresoEstimado - cuotaEstimadaTotal) * 0.45;
                                    }
                                    else if (deudaSuma > 0)
                                    {
                                        if (rangoIngreso >= 0)
                                        {
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimadaTotal) * 0.45;
                                        }
                                    }
                                }

                                tipoFuenteBuro = Dominio.Tipos.FuentesBuro.Aval;
                                datosPersonaBuro.RangoIngreso = string.Empty;
                                if (r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any() && !string.IsNullOrEmpty(r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso))
                                    datosPersonaBuro.RangoIngreso = r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso;

                                datosPersonaBuro.GastoFinanciero = 0;
                                if (r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                    datosPersonaBuro.GastoFinanciero = r_burocredito.Result.GastoFinanciero.Select(x => x.CuotaEstimadaTitular)?.FirstOrDefault();

                                datosPersonaBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero + valorMensualPAlimenticia;

                                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                                    datosPersonaBuro.Score = r_burocredito?.Result?.ScoreFinanciero?.FirstOrDefault()?.Score;
                                else if (planBuroCredito.ModeloCooperativas)
                                    datosPersonaBuro.Score = r_burocredito?.Result?.ScoreFinanciero?.FirstOrDefault()?.Score;

                                if (datosPersonaBuro.Score < Dominio.Constantes.ConstantesCalificacion.MinimoScoreBuro)
                                {
                                    observacionesBuro.Add("Score");
                                    aprobacionAdicionalBuro = true;
                                }

                                if (detalleCalificacionBuro != null && detalleCalificacionBuro.Any())
                                {
                                    datosPersonaBuro.Identificacion = identificacionOriginal;
                                    datosPersonaBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                    datosPersonaBuro.TipoFuente = tipoFuenteBuro;
                                    datosPersonaBuro.TotalValidados = detalleCalificacionBuro.Count;
                                    datosPersonaBuro.TotalAprobados = detalleCalificacionBuro.Count(m => m.ResultadoPolitica);
                                    datosPersonaBuro.TotalRechazados = detalleCalificacionBuro.Count(m => !m.ResultadoPolitica);

                                    if (datosPersonaBuro.TotalValidados > 0) datosPersonaBuro.Calificacion = Math.Round((decimal)datosPersonaBuro.TotalAprobados * 100 / datosPersonaBuro.TotalValidados, 2, MidpointRounding.AwayFromZero);
                                    datosPersonaBuro.Aprobado = datosPersonaBuro.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                                    datosPersonaBuro.DetalleCalificacion = detalleCalificacionBuro;

                                    if (aprobacionAdicionalBuro)
                                    {
                                        datosPersonaBuro.Observaciones = string.Join(". ", observacionesBuro);
                                        datosPersonaBuro.Aprobado = false;
                                    }

                                    var calificacionesDetalleBuro = datosPersonaBuro.DetalleCalificacion.Select(m => new DetalleCalificacion
                                    {
                                        IdPolitica = m.IdPolitica,
                                        Valor = m.Valor,
                                        Parametro = m.Parametro,
                                        Aprobado = m.ResultadoPolitica,
                                        Datos = m.ValorResultado,
                                        ReferenciaMinima = m.ReferenciaMinima,
                                        UsuarioCreacion = idUsuario,
                                        FechaCreacion = m.FechaCreacion,
                                        Instituciones = m.Instituciones
                                    }).ToList();

                                    if (actualizarBuro)
                                    {
                                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnteriorBuro);
                                        calificacionAnteriorBuro.DetalleCalificacion = calificacionesDetalleBuro;
                                        calificacionAnteriorBuro.Puntaje = datosPersonaBuro.Calificacion;
                                        calificacionAnteriorBuro.Aprobado = datosPersonaBuro.Aprobado;
                                        calificacionAnteriorBuro.NumeroAprobados = datosPersonaBuro.TotalAprobados;
                                        calificacionAnteriorBuro.NumeroRechazados = datosPersonaBuro.TotalRechazados;
                                        calificacionAnteriorBuro.TotalVerificados = datosPersonaBuro.TotalValidados;
                                        calificacionAnteriorBuro.Observaciones = datosPersonaBuro.Observaciones;
                                        calificacionAnteriorBuro.UsuarioModificacion = idUsuario;
                                        calificacionAnteriorBuro.FechaModificacion = DateTime.Now;
                                        calificacionAnteriorBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                        calificacionAnteriorBuro.Score = datosPersonaBuro.Score;
                                        calificacionAnteriorBuro.CupoEstimado = datosPersonaBuro.CupoEstimado;
                                        calificacionAnteriorBuro.RangoIngreso = datosPersonaBuro.RangoIngreso;
                                        calificacionAnteriorBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero;
                                        calificacionAnteriorBuro.TipoFuenteBuro = tipoFuenteBuro;
                                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnteriorBuro);
                                        datosPersonaBuro.IdCalificacion = calificacionAnteriorBuro.Id;
                                    }
                                    else
                                    {
                                        datosPersonaBuro.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                                        {
                                            IdHistorial = modelo.IdHistorial,
                                            Puntaje = datosPersonaBuro.Calificacion,
                                            Aprobado = datosPersonaBuro.Aprobado,
                                            NumeroAprobados = datosPersonaBuro.TotalAprobados,
                                            NumeroRechazados = datosPersonaBuro.TotalRechazados,
                                            TotalVerificados = datosPersonaBuro.TotalValidados,
                                            Observaciones = datosPersonaBuro.Observaciones,
                                            UsuarioCreacion = idUsuario,
                                            TipoCalificacion = datosPersonaBuro.TipoCalificacion,
                                            Score = datosPersonaBuro.Score,
                                            CupoEstimado = datosPersonaBuro.CupoEstimado,
                                            RangoIngreso = datosPersonaBuro.RangoIngreso,
                                            GastoFinanciero = datosPersonaBuro.GastoFinanciero,
                                            TipoFuenteBuro = tipoFuenteBuro,
                                            DetalleCalificacion = calificacionesDetalleBuro,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                    datosPersonaLista.Add(datosPersonaBuro);
                                }
                                #endregion Calificación
                            }
                            else
                            {
                                ViewBag.VisualizarBuro = true;
                                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                            }
                        }
                        else if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                        {
                            //TODO: analizar si hacer con data de datarespaldo
                            r_burocredito_equifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(detalleHistorial.Datos);
                            if (r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.ResultadoConsulta)
                            {
                                ViewBag.EvaluarBuro = true;
                                ViewBag.VisualizarBuro = true;
                                #region Procesamiento Políticas EQUIFAX
                                //Manejo de cuentas corrientes
                                try
                                {
                                    if (manejoCuentasCorrientes != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito_equifax.Resultados.PersonasInhabilitadas.OrderByDescending(x => x.FechaInhabilitacion).Select(x => new { x.FechaInhabilitacion, x.TiempoInhabilitacion }).FirstOrDefault();
                                        if (fechaCumplimiento != null && fechaCumplimiento.FechaInhabilitacion != default && fechaCumplimiento.TiempoInhabilitacion > 0)
                                        {
                                            var manejoCuentasCorrientesComparacion = DateTime.Now.Date >= fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = manejoCuentasCorrientes.Excepcional,
                                                IdPolitica = manejoCuentasCorrientes.Id,
                                                Politica = manejoCuentasCorrientes.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFechaSansion, fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"), fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = manejoCuentasCorrientesComparacion,
                                                FechaCreacion = DateTime.Now
                                            });

                                            if (manejoCuentasCorrientes.Excepcional && !manejoCuentasCorrientesComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Manejo Cuentas Corrientes. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Fecha Cumplimiento Sancion
                                try
                                {
                                    if (FechaCumplimientoSancion != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito_equifax.Resultados.PersonasInhabilitadas.OrderByDescending(x => x.FechaInhabilitacion).Select(x => new { x.FechaInhabilitacion, x.TiempoInhabilitacion }).FirstOrDefault();
                                        if (fechaCumplimiento != null && fechaCumplimiento.FechaInhabilitacion != default && fechaCumplimiento.TiempoInhabilitacion > 0)
                                        {
                                            var fechaSansion = fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date <= DateTime.Now.Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = FechaCumplimientoSancion.Excepcional,
                                                IdPolitica = FechaCumplimientoSancion.Id,
                                                Politica = FechaCumplimientoSancion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFecha, fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = fechaSansion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (FechaCumplimientoSancion.Excepcional && !fechaSansion)
                                            {
                                                observacionesBuro.Add(FechaCumplimientoSancion.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Fecha Cumplimiento Sanción. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor vencido vigente total
                                try
                                {
                                    if (deudaVigenteTotal != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var deudaVigenteTotalSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.Vencido);
                                            var deudaVigenteTotalComparacion = deudaVigenteTotalSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!deudaVigenteTotalComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());
                                            }


                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", deudaVigenteTotalSuma.ToString()),
                                                Valor = deudaVigenteTotalSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = deudaVigenteTotalComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (deudaVigenteTotal.Excepcional && !deudaVigenteTotalComparacion)
                                            {
                                                observacionesBuro.Add(deudaVigenteTotal.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, deudaVigenteTotal.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor demanda judicial
                                try
                                {
                                    if (valorDemandaJudicial != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var demandaJudicialSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.DemandaJudicial);
                                            var demandaJudicialComparacion = demandaJudicialSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!demandaJudicialComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", demandaJudicialSuma.ToString()),
                                                Valor = demandaJudicialSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = demandaJudicialComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (valorDemandaJudicial.Excepcional && !demandaJudicialComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicial.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cartera castigada
                                try
                                {
                                    if (valorCarteraCastigada != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var carteraCastigadaSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.CarteraCastigada);
                                            var carteraCastigadaComparacion = carteraCastigadaSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!carteraCastigadaComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaSuma.ToString()),
                                                Valor = carteraCastigadaSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigadaComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (valorCarteraCastigada.Excepcional && !carteraCastigadaComparacion)
                                            {
                                                observacionesBuro.Add(valorCarteraCastigada.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigada.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses Vencido
                                try
                                {
                                    var historicoVencido = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && !string.IsNullOrEmpty(x.OpcionParam) && x.OpcionParam.Trim() == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        Vencido0 = new { Name = "Vencido 0 a 1", Valor = new[] { x.Vencido0a1 }.Max() },
                                        Vencido1 = new { Name = "Vencido 1 a 2", Valor = new[] { x.Vencido1a2 }.Max() },
                                        Vencido2 = new { Name = "Vencido 2 a 3", Valor = new[] { x.Vencido2a3 }.Max() },
                                        Vencido3 = new { Name = "Vencido 3 a 6", Valor = new[] { x.Vencido3a6 }.Max() },
                                        Vencido4 = new { Name = "Vencido 6 a 9", Valor = new[] { x.Vencido6a9 }.Max() },
                                        Vencido5 = new { Name = "Vencido 9 a 12", Valor = new[] { x.Vencido9a12 }.Max() },
                                        Vencido6 = new { Name = "Vencido 12 a 24", Valor = new[] { x.Vencido12a24 }.Max() },
                                        Vencido7 = new { Name = "Vencido 24", Valor = new[] { x.Vencido24 }.Max() },
                                        Vencido8 = new { Name = "Vencido 36", Valor = new[] { x.Vencido36 }.Max() },
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();

                                    if (historicoVencido != null && historicoVencido.Any())
                                    {
                                        var lstVencido = new List<HistoricoVencidoViewModel>();
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido0.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido0.Name, Valor = x.Vencido0.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido1.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido1.Name, Valor = x.Vencido1.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido2.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido2.Name, Valor = x.Vencido2.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido3.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido3.Name, Valor = x.Vencido3.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido4.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido4.Name, Valor = x.Vencido4.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido5.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido5.Name, Valor = x.Vencido5.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido6.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido6.Name, Valor = x.Vencido6.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido7.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido7.Name, Valor = x.Vencido7.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido8.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido8.Name, Valor = x.Vencido8.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());

                                        if (lstVencido != null && lstVencido.Any())
                                        {
                                            if (valorVencido12Meses != null)
                                            {
                                                minimo = 0;
                                                var detalleVencido = lstVencido.OrderByDescending(x => x.FechaCorte).Where(x => x.Valor == lstVencido.Max(y => y.Valor)).Select(x => new { x.NmbVencimiento, x.Valor, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                                var valorVencido12MesesComparacion = detalleVencido.Valor <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleVencido.Valor.ToString()),
                                                    Valor = detalleVencido.Valor.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencido12MesesComparacion,
                                                    FechaCorte = detalleVencido.FechaCorte.Date != default ? detalleVencido.FechaCorte.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencido12MesesComparacion && detalleVencido != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencido.SistemaFinanciero, Valor = detalleVencido.Valor, NmbVencimiento = detalleVencido.NmbVencimiento } }) : null
                                                });
                                                if (valorVencido12Meses.Excepcional && !valorVencido12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencido12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorVencido12Meses.Excepcional,
                                                IdPolitica = valorVencido12Meses.Id,
                                                Politica = valorVencido12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                FechaCorte = null,
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencido12Meses.Excepcional,
                                            IdPolitica = valorVencido12Meses.Id,
                                            Politica = valorVencido12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses Vencido. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses
                                try
                                {
                                    var historico = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && !string.IsNullOrEmpty(x.OpcionParam) && x.OpcionParam.Trim() == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        DemandaJudicial = x.DemandaJudicial,
                                        CarteraCastigada = x.CarteraCastigada,
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();
                                    if (historico != null && historico.Any())
                                    {
                                        if (valorDemandaJudicial12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicial = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historico.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var valorDemandaJudicial12MesesComparacion = detalleDemandaJudicial.DemandaJudicial <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                IdPolitica = valorDemandaJudicial12Meses.Id,
                                                Politica = valorDemandaJudicial12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleDemandaJudicial.DemandaJudicial.ToString()),
                                                Valor = detalleDemandaJudicial.DemandaJudicial.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicial12MesesComparacion,
                                                FechaCorte = detalleDemandaJudicial.FechaCorte.Date != default ? detalleDemandaJudicial.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !valorDemandaJudicial12MesesComparacion && detalleDemandaJudicial != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicial.SistemaFinanciero, Valor = detalleDemandaJudicial.DemandaJudicial } }) : null
                                            });
                                            if (valorDemandaJudicial12Meses.Excepcional && !valorDemandaJudicial12MesesComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        if (carteraCastigada12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigada = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historico.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var carteraCastigada12MesesComparacion = detalleCarteraCastigada.CarteraCastigada <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = carteraCastigada12Meses.Excepcional,
                                                IdPolitica = carteraCastigada12Meses.Id,
                                                Politica = carteraCastigada12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleCarteraCastigada.CarteraCastigada.ToString()),
                                                Valor = detalleCarteraCastigada.CarteraCastigada.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigada12MesesComparacion,
                                                FechaCorte = detalleCarteraCastigada.FechaCorte.Date != default ? detalleCarteraCastigada.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !carteraCastigada12MesesComparacion && detalleCarteraCastigada != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigada.SistemaFinanciero, Valor = detalleCarteraCastigada.CarteraCastigada } }) : null
                                            });
                                            if (carteraCastigada12Meses.Excepcional && !carteraCastigada12MesesComparacion)
                                            {
                                                observacionesBuro.Add(carteraCastigada12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicial12Meses.Id,
                                            Politica = valorDemandaJudicial12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigada12Meses.Excepcional,
                                            IdPolitica = carteraCastigada12Meses.Id,
                                            Politica = carteraCastigada12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses Vencido
                                try
                                {
                                    var historicoVencido = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && x.OpcionParam == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        Vencido0 = new { Name = "Vencido 0 a 1", Valor = new[] { x.Vencido0a1 }.Max() },
                                        Vencido1 = new { Name = "Vencido 1 a 2", Valor = new[] { x.Vencido1a2 }.Max() },
                                        Vencido2 = new { Name = "Vencido 2 a 3", Valor = new[] { x.Vencido2a3 }.Max() },
                                        Vencido3 = new { Name = "Vencido 3 a 6", Valor = new[] { x.Vencido3a6 }.Max() },
                                        Vencido4 = new { Name = "Vencido 6 a 9", Valor = new[] { x.Vencido6a9 }.Max() },
                                        Vencido5 = new { Name = "Vencido 9 a 12", Valor = new[] { x.Vencido9a12 }.Max() },
                                        Vencido6 = new { Name = "Vencido 12 a 24", Valor = new[] { x.Vencido12a24 }.Max() },
                                        Vencido7 = new { Name = "Vencido 24", Valor = new[] { x.Vencido24 }.Max() },
                                        Vencido8 = new { Name = "Vencido 36", Valor = new[] { x.Vencido36 }.Max() },
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();

                                    if (historicoVencido != null && historicoVencido.Any())
                                    {
                                        var lstVencido = new List<HistoricoVencidoViewModel>();
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido0.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido0.Name, Valor = x.Vencido0.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido1.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido1.Name, Valor = x.Vencido1.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido2.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido2.Name, Valor = x.Vencido2.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido3.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido3.Name, Valor = x.Vencido3.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido4.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido4.Name, Valor = x.Vencido4.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido5.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido5.Name, Valor = x.Vencido5.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido6.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido6.Name, Valor = x.Vencido6.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido7.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido7.Name, Valor = x.Vencido7.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido8.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido8.Name, Valor = x.Vencido8.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());

                                        if (lstVencido != null && lstVencido.Any())
                                        {
                                            if (valorVencidoMayor12Meses != null)
                                            {
                                                minimo = 0;
                                                var detalleVencidoMayor12Meses = lstVencido.OrderByDescending(x => x.FechaCorte).Where(x => x.Valor == lstVencido.Max(y => y.Valor)).Select(x => new { x.NmbVencimiento, x.Valor, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                                var valorVencidoMayor12MesesComparacion = detalleVencidoMayor12Meses.Valor <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleVencidoMayor12Meses.Valor.ToString()),
                                                    Valor = detalleVencidoMayor12Meses.Valor.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencidoMayor12MesesComparacion,
                                                    FechaCorte = detalleVencidoMayor12Meses.FechaCorte.Date != default ? detalleVencidoMayor12Meses.FechaCorte.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencidoMayor12MesesComparacion && detalleVencidoMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencidoMayor12Meses.SistemaFinanciero, Valor = detalleVencidoMayor12Meses.Valor, NmbVencimiento = detalleVencidoMayor12Meses.NmbVencimiento } }) : null
                                                });
                                                if (valorVencidoMayor12Meses.Excepcional && !valorVencidoMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencidoMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                IdPolitica = valorVencidoMayor12Meses.Id,
                                                Politica = valorVencidoMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                FechaCorte = null,
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoMayor12Meses.Excepcional,
                                            IdPolitica = valorVencidoMayor12Meses.Id,
                                            Politica = valorVencidoMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses Vencido. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses
                                try
                                {
                                    var historicoMayor12Meses = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && x.OpcionParam == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        DemandaJudicial = x.DemandaJudicial,
                                        CarteraCastigada = x.CarteraCastigada,
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();
                                    if (historicoMayor12Meses != null && historicoMayor12Meses.Any())
                                    {
                                        if (valorDemandaJudicialMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicialMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historicoMayor12Meses.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var valorDemandaJudicialMayor12MesesComparacion = detalleDemandaJudicialMayor12Meses.DemandaJudicial <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleDemandaJudicialMayor12Meses.DemandaJudicial.ToString()),
                                                Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicialMayor12MesesComparacion,
                                                FechaCorte = detalleDemandaJudicialMayor12Meses.FechaCorte.Date != default ? detalleDemandaJudicialMayor12Meses.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !valorDemandaJudicialMayor12MesesComparacion && detalleDemandaJudicialMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicialMayor12Meses.SistemaFinanciero, Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial } }) : null

                                            });
                                            if (valorDemandaJudicialMayor12Meses.Excepcional && !valorDemandaJudicialMayor12MesesComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicialMayor12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        if (carteraCastigadaMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigadaMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historicoMayor12Meses.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var carteraCastigadaMayor12MesesComparacion = detalleCarteraCastigadaMayor12Meses.CarteraCastigada <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                Politica = carteraCastigadaMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleCarteraCastigadaMayor12Meses.CarteraCastigada.ToString()),
                                                Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigadaMayor12MesesComparacion,
                                                FechaCorte = detalleCarteraCastigadaMayor12Meses.FechaCorte.Date != default ? detalleCarteraCastigadaMayor12Meses.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !carteraCastigadaMayor12MesesComparacion && detalleCarteraCastigadaMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigadaMayor12Meses.SistemaFinanciero, Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada } }) : null
                                            });
                                            if (carteraCastigadaMayor12Meses.Excepcional && !carteraCastigadaMayor12MesesComparacion)
                                            {
                                                observacionesBuro.Add(carteraCastigadaMayor12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                            Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                            IdPolitica = carteraCastigadaMayor12Meses.Id,
                                            Politica = carteraCastigadaMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cuota vencidos
                                try
                                {
                                    if (valorCuotaVencidos != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                    {
                                        minimo = 0;
                                        var valorCuotaVencidosSuma = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.TotalVencido;
                                        var valorCuotaVencidosComparacion = valorCuotaVencidosSuma <= minimo;

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCuotaVencidosSuma.ToString()),
                                            Valor = valorCuotaVencidosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorCuotaVencidosComparacion,
                                            FechaCreacion = DateTime.Now
                                        });
                                        if (valorCuotaVencidos.Excepcional && !valorCuotaVencidosComparacion)
                                        {
                                            observacionesBuro.Add(valorCuotaVencidos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCuotaVencidos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //GastosFinancieros e Ingresos
                                try
                                {
                                    if (r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.IndicadorCOVID0 != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                    {
                                        var valorIngreso = (double)r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor;
                                        var valorGastoFinanciero = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago + valorMensualPAlimenticia;
                                        var ingresoEstimado = valorGastoFinanciero * 1.40;
                                        var saldoFinanciero = true;
                                        var deudaSuma = 0.00;
                                        if ((r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any()) || valorMensualPAlimenticia > 0)
                                        {
                                            var deudaVencido = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.Vencido);
                                            var deudaDemandaJudicial = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.DemandaJudicial);
                                            var deudaCarteraCastigada = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.CarteraCastigada);
                                            deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + (decimal)valorMensualPAlimenticia);
                                        }

                                        if (deudaSuma == 0)
                                        {
                                            if (ingresoEstimado > valorIngreso)
                                            {
                                                saldoFinanciero = valorGastoFinanciero < (ingresoEstimado * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (ingresoEstimado * 0.80).ToString("N", culture), ingresoEstimado.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastoFinanciero.ToString("N", culture)),
                                                    Valor = valorGastoFinanciero.ToString(),
                                                    Parametro = (ingresoEstimado * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                            {
                                                if (valorIngreso >= 0 && gastosFinancieros != null)
                                                {
                                                    saldoFinanciero = valorGastoFinanciero < (valorIngreso * 0.80);
                                                    detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                    {
                                                        Excepcional = gastosFinancieros.Excepcional,
                                                        IdPolitica = gastosFinancieros.Id,
                                                        Politica = gastosFinancieros.Nombre,
                                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorIngreso * 0.80).ToString("N", culture), valorIngreso.ToString("N", culture)),
                                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastoFinanciero.ToString("N", culture)),
                                                        Valor = valorGastoFinanciero.ToString(),
                                                        Parametro = (valorIngreso * 0.80).ToString(),
                                                        ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                        FechaCreacion = DateTime.Now
                                                    });
                                                    if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                    {
                                                        observacionesBuro.Add(gastosFinancieros.Nombre);
                                                        aprobacionAdicionalBuro = true;
                                                    }
                                                }

                                            }
                                        }
                                        else if (deudaSuma > 0)
                                        {
                                            if (valorIngreso >= 0 && gastosFinancieros != null)
                                            {
                                                saldoFinanciero = valorGastoFinanciero < (valorIngreso * 0.80);
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = gastosFinancieros.Excepcional,
                                                    IdPolitica = gastosFinancieros.Id,
                                                    Politica = gastosFinancieros.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, (valorIngreso * 0.80).ToString("N", culture), valorIngreso.ToString("N", culture)),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorGastoFinanciero.ToString("N", culture)),
                                                    Valor = valorGastoFinanciero.ToString(),
                                                    Parametro = (valorGastoFinanciero * 0.80).ToString(),
                                                    ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? saldoFinanciero : false,
                                                    FechaCreacion = DateTime.Now
                                                });
                                                if (gastosFinancieros.Excepcional && !saldoFinanciero)
                                                {
                                                    observacionesBuro.Add(gastosFinancieros.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = gastosFinancieros.Excepcional,
                                            IdPolitica = gastosFinancieros.Id,
                                            Politica = gastosFinancieros.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosFinanciero, "0", "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = detalleCalificacionBuro.FirstOrDefault(x => x.IdPolitica == deudaVigenteTotal.Id).ResultadoPolitica ? true : false,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, gastosFinancieros.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros e Ingresos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }
                                #endregion Procesamiento Políticas EQUIFAX

                                #region Calificación
                                tipoFuenteBuro = Dominio.Tipos.FuentesBuro.Equifax;
                                datosPersonaBuro.Score = 0;
                                if (r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.ScoreV4V10 != null)
                                    datosPersonaBuro.Score = r_burocredito_equifax.Resultados.ScoreV4V10.Score;

                                datosPersonaBuro.RangoIngreso = string.Empty;
                                datosPersonaBuro.GastoFinanciero = 0;
                                datosPersonaBuro.CupoEstimado = 0;

                                if (r_burocredito_equifax.Resultados.IndicadorCOVID0 != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                {
                                    var rangoIngreso = (double)r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor;
                                    var cuotaEstimada = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago + valorMensualPAlimenticia;
                                    var ingresoEstimado = cuotaEstimada * 1.40;
                                    var deudaSuma = 0.00;
                                    if ((r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any()) || valorMensualPAlimenticia > 0)
                                    {
                                        var deudaVencido = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.Vencido);
                                        var deudaDemandaJudicial = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.DemandaJudicial);
                                        var deudaCarteraCastigada = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != string.Empty).Sum(x => x.CarteraCastigada);
                                        deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada + (decimal)valorMensualPAlimenticia);
                                    }
                                    if (deudaSuma == 0)
                                    {
                                        if (rangoIngreso != 0)
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimada) * 0.45;
                                        else
                                            datosPersonaBuro.CupoEstimado = (ingresoEstimado - cuotaEstimada) * 0.45;
                                    }
                                    else if (deudaSuma > 0)
                                    {
                                        if (rangoIngreso >= 0)
                                        {
                                            datosPersonaBuro.CupoEstimado = (rangoIngreso - cuotaEstimada) * 0.45;
                                        }
                                    }
                                }

                                if (r_burocredito_equifax.Resultados.IndicadorCOVID0 != null && r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor > 0)
                                    datosPersonaBuro.RangoIngreso = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0,0.00}", r_burocredito_equifax.Resultados.IndicadorCOVID0.IncomePredictor);

                                if (r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago > 0)
                                    datosPersonaBuro.GastoFinanciero = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.Pago;

                                datosPersonaBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero + valorMensualPAlimenticia;

                                if (datosPersonaBuro.Score < Dominio.Constantes.ConstantesCalificacion.MinimoScoreBuro)
                                {
                                    observacionesBuro.Add("Score");
                                    aprobacionAdicionalBuro = true;
                                }

                                if (detalleCalificacionBuro != null && detalleCalificacionBuro.Any())
                                {
                                    datosPersonaBuro.Identificacion = identificacionOriginal;
                                    datosPersonaBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                    datosPersonaBuro.TipoFuente = tipoFuenteBuro;
                                    datosPersonaBuro.TotalValidados = detalleCalificacionBuro.Count;
                                    datosPersonaBuro.TotalAprobados = detalleCalificacionBuro.Count(m => m.ResultadoPolitica);
                                    datosPersonaBuro.TotalRechazados = detalleCalificacionBuro.Count(m => !m.ResultadoPolitica);

                                    if (datosPersonaBuro.TotalValidados > 0) datosPersonaBuro.Calificacion = Math.Round((decimal)datosPersonaBuro.TotalAprobados * 100 / datosPersonaBuro.TotalValidados, 2, MidpointRounding.AwayFromZero);
                                    datosPersonaBuro.Aprobado = datosPersonaBuro.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                                    datosPersonaBuro.DetalleCalificacion = detalleCalificacionBuro;

                                    if (aprobacionAdicionalBuro)
                                    {
                                        datosPersonaBuro.Observaciones = string.Join(". ", observacionesBuro);
                                        datosPersonaBuro.Aprobado = false;
                                    }

                                    var calificacionesDetalleBuro = datosPersonaBuro.DetalleCalificacion.Select(m => new DetalleCalificacion
                                    {
                                        IdPolitica = m.IdPolitica,
                                        Valor = m.Valor,
                                        Parametro = m.Parametro,
                                        Aprobado = m.ResultadoPolitica,
                                        Datos = m.ValorResultado,
                                        ReferenciaMinima = m.ReferenciaMinima,
                                        FechaCorte = m.FechaCorte,
                                        UsuarioCreacion = idUsuario,
                                        FechaCreacion = m.FechaCreacion,
                                        Instituciones = m.Instituciones
                                    }).ToList();

                                    if (actualizarBuro)
                                    {
                                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnteriorBuro);
                                        calificacionAnteriorBuro.DetalleCalificacion = calificacionesDetalleBuro;
                                        calificacionAnteriorBuro.Puntaje = datosPersonaBuro.Calificacion;
                                        calificacionAnteriorBuro.Aprobado = datosPersonaBuro.Aprobado;
                                        calificacionAnteriorBuro.NumeroAprobados = datosPersonaBuro.TotalAprobados;
                                        calificacionAnteriorBuro.NumeroRechazados = datosPersonaBuro.TotalRechazados;
                                        calificacionAnteriorBuro.TotalVerificados = datosPersonaBuro.TotalValidados;
                                        calificacionAnteriorBuro.Observaciones = datosPersonaBuro.Observaciones;
                                        calificacionAnteriorBuro.UsuarioModificacion = idUsuario;
                                        calificacionAnteriorBuro.FechaModificacion = DateTime.Now;
                                        calificacionAnteriorBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                        calificacionAnteriorBuro.Score = datosPersonaBuro.Score;
                                        calificacionAnteriorBuro.CupoEstimado = datosPersonaBuro.CupoEstimado;
                                        calificacionAnteriorBuro.RangoIngreso = datosPersonaBuro.RangoIngreso;
                                        calificacionAnteriorBuro.GastoFinanciero = datosPersonaBuro.GastoFinanciero;
                                        calificacionAnteriorBuro.TipoFuenteBuro = tipoFuenteBuro;
                                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnteriorBuro);
                                        datosPersonaBuro.IdCalificacion = calificacionAnteriorBuro.Id;
                                    }
                                    else
                                    {
                                        datosPersonaBuro.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                                        {
                                            IdHistorial = modelo.IdHistorial,
                                            Puntaje = datosPersonaBuro.Calificacion,
                                            Aprobado = datosPersonaBuro.Aprobado,
                                            NumeroAprobados = datosPersonaBuro.TotalAprobados,
                                            NumeroRechazados = datosPersonaBuro.TotalRechazados,
                                            TotalVerificados = datosPersonaBuro.TotalValidados,
                                            Observaciones = datosPersonaBuro.Observaciones,
                                            UsuarioCreacion = idUsuario,
                                            TipoCalificacion = datosPersonaBuro.TipoCalificacion,
                                            Score = datosPersonaBuro.Score,
                                            CupoEstimado = datosPersonaBuro.CupoEstimado,
                                            RangoIngreso = datosPersonaBuro.RangoIngreso,
                                            GastoFinanciero = datosPersonaBuro.GastoFinanciero,
                                            TipoFuenteBuro = tipoFuenteBuro,
                                            DetalleCalificacion = calificacionesDetalleBuro,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                    datosPersonaLista.Add(datosPersonaBuro);
                                }
                                #endregion Calificación
                            }
                            else
                            {
                                ViewBag.VisualizarBuro = true;
                                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas BURÓ.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de BURÓ. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Buró

                #region Procesamiento Calificación de Evaluación
                if (detalleCalificacion != null && detalleCalificacion.Any())
                {
                    datosPersona.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Evaluacion;
                    datosPersona.TotalValidados = detalleCalificacion.Count;
                    datosPersona.TotalAprobados = detalleCalificacion.Count(m => m.ResultadoPolitica);
                    datosPersona.TotalRechazados = detalleCalificacion.Count(m => !m.ResultadoPolitica);

                    if (datosPersona.TotalValidados > 0) datosPersona.Calificacion = Math.Round((decimal)datosPersona.TotalAprobados * 100 / datosPersona.TotalValidados, 2, MidpointRounding.AwayFromZero);
                    datosPersona.Aprobado = datosPersona.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                    datosPersona.DetalleCalificacion = detalleCalificacion;

                    if (aprobacionAdicional)
                    {
                        datosPersona.Observaciones = string.Join(". ", observaciones);
                        datosPersona.Aprobado = false;
                    }

                    var calificacionesDetalle = datosPersona.DetalleCalificacion.Select(m => new DetalleCalificacion
                    {
                        IdPolitica = m.IdPolitica,
                        Valor = m.Valor,
                        Parametro = m.Parametro,
                        Aprobado = m.ResultadoPolitica,
                        Datos = m.ValorResultado,
                        ReferenciaMinima = m.ReferenciaMinima,
                        FechaCorte = m.FechaCorte,
                        UsuarioCreacion = idUsuario,
                        Observacion = m.Observacion,
                        FechaCreacion = m.FechaCreacion
                    }).ToList();

                    if (actualizar)
                    {
                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnterior);
                        calificacionAnterior.DetalleCalificacion = calificacionesDetalle;
                        calificacionAnterior.Puntaje = datosPersona.Calificacion;
                        calificacionAnterior.Aprobado = datosPersona.Aprobado;
                        calificacionAnterior.NumeroAprobados = datosPersona.TotalAprobados;
                        calificacionAnterior.NumeroRechazados = datosPersona.TotalRechazados;
                        calificacionAnterior.TotalVerificados = datosPersona.TotalValidados;
                        calificacionAnterior.Observaciones = datosPersona.Observaciones;
                        calificacionAnterior.UsuarioModificacion = idUsuario;
                        calificacionAnterior.FechaModificacion = DateTime.Now;
                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnterior);
                        datosPersona.IdCalificacion = calificacionAnterior.Id;
                    }
                    else
                    {
                        datosPersona.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                        {
                            IdHistorial = modelo.IdHistorial,
                            Puntaje = datosPersona.Calificacion,
                            Aprobado = datosPersona.Aprobado,
                            NumeroAprobados = datosPersona.TotalAprobados,
                            NumeroRechazados = datosPersona.TotalRechazados,
                            TotalVerificados = datosPersona.TotalValidados,
                            Observaciones = datosPersona.Observaciones,
                            UsuarioCreacion = idUsuario,
                            TipoCalificacion = datosPersona.TipoCalificacion,
                            DetalleCalificacion = calificacionesDetalle,
                            FechaCreacion = DateTime.Now
                        });
                    }
                    datosPersonaLista.Add(datosPersona);
                }
                if ((detalleCalificacion != null && detalleCalificacion.Any()) || (detalleCalificacionBuro != null && detalleCalificacionBuro.Any()))
                {
                    var historialAnterior = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null);
                    var historialConsolidado = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial, null);
                    historialAnterior.IdPlanEvaluacion = dataPlanEvaluacion.Id;
                    await _historiales.UpdateAsync(historialAnterior);
                    if (historialConsolidado != null)
                    {
                        var historialEvaluacionBuro = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == TiposCalificaciones.Buro, null);
                        if (historialEvaluacionBuro != null)
                            historialConsolidado.AprobadoEvaluacion = datosPersona.Aprobado && historialEvaluacionBuro.Aprobado;
                        else
                            historialConsolidado.AprobadoEvaluacion = datosPersona.Aprobado;
                        historialConsolidado.ConsultaEvaluacion = historialAnterior.IdPlanEvaluacion.HasValue && historialAnterior.IdPlanEvaluacion.Value > 0;
                        await _reporteConsolidado.UpdateAsync(historialConsolidado);
                    }
                }
                #endregion Procesamiento Calificación de Evaluación

                _logger.LogInformation($"Fin de procesamiento RUC Natural {modelo.IdHistorial}");
                return PartialView($"../Shared/Fuentes/_FuenteCalificacion", datosPersonaLista);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteCalificacion", null);
            }
        }

        [HttpPost]
        [Route("ObtenerCalificacionRucJuridico")]
        public async Task<IActionResult> ObtenerCalificacionRucJuridico(ReporteCalificacionViewModel modelo)
        {
            try
            {
                _logger.LogInformation($"Procesando informacion RUC JurÍdico del Historial {modelo.IdHistorial}");
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (modelo.IdHistorial == 0)
                    throw new Exception("No se encontró el Historial.");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva actualizar la página por favor.");

                #region Inicialización
                var datosPersonaLista = new List<CalificacionViewModel>();
                var datosPersona = new CalificacionViewModel();
                var datosPersonaBuro = new CalificacionViewModel();
                var detalleCalificacion = new List<DetalleCalificacionViewModel>();
                var detalleCalificacionBuro = new List<DetalleCalificacionViewModel>();
                var detalleSimple = new DetalleCalificacionViewModel();
                var datosHistorial = new SRIViewModel();
                var datosSocietario = new BalancesViewModel();
                var detalleHistorial = new DatosJsonViewModel();
                var calificacionAnterior = new Calificacion();
                var calificacionAnteriorBuro = new Calificacion();
                var detalleCalificacionAnterior = new List<DetalleCalificacion>();
                var detalleCalificacionAnteriorBuro = new List<DetalleCalificacion>();
                var datosHistorialBuro = new BuroCreditoViewModel();
                var observaciones = new List<string>();
                var observacionesBuro = new List<string>();
                int minimo;
                var actualizar = false;
                var actualizarBuro = false;
                var culture = System.Globalization.CultureInfo.CurrentCulture;
                Dominio.Tipos.FuentesBuro? tipoFuenteBuro = null;
                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                ViewBag.EvaluarBuro = false;
                ViewBag.VisualizarBuro = false;

                var identificacionOriginal = await _historiales.FirstOrDefaultAsync(m => m.Identificacion, m => m.Id == modelo.IdHistorial, null, null, true);
                modelo.IdEmpresa = usuarioActual.IdEmpresa;

                //Planes Activos
                var resultadoPermiso = Dominio.Tipos.EstadosPlanesEvaluaciones.Activo;
                var dataPlanEvaluacion = await _planesEvaluaciones.FirstOrDefaultAsync(s => s, s => s.IdEmpresa == modelo.IdEmpresa && s.Estado == Dominio.Tipos.EstadosPlanesEvaluaciones.Activo);
                if (dataPlanEvaluacion == null)
                    throw new Exception("No se encontró un plan de evaluación Activo.");

                var dataUsuario = await _accesos.AnyAsync(s => s.IdUsuario == idUsuario && s.Estado == Dominio.Tipos.EstadosAccesos.Activo && s.Acceso == Dominio.Tipos.TiposAccesos.Evaluacion);
                if (!dataUsuario)
                    throw new Exception("El usuario no tiene permisos para la evaluación.");

                var fechaActual = DateTime.Now;
                var primerDiadelMes = new DateTime(fechaActual.Year, fechaActual.Month, 1);
                var ultimoDiadelMes = primerDiadelMes.AddMonths(1).AddDays(-1);
                var numeroHistorialEvaluacion = await _historiales.CountAsync(s => s.Id != modelo.IdHistorial && s.IdPlanEvaluacion == dataPlanEvaluacion.Id && s.Fecha.Date >= primerDiadelMes.Date && s.Fecha.Date <= ultimoDiadelMes.Date);

                if (dataPlanEvaluacion.BloquearConsultas)
                    resultadoPermiso = dataPlanEvaluacion.NumeroConsultas > numeroHistorialEvaluacion ? Dominio.Tipos.EstadosPlanesEvaluaciones.Activo : Dominio.Tipos.EstadosPlanesEvaluaciones.Inactivo;
                if (resultadoPermiso != Dominio.Tipos.EstadosPlanesEvaluaciones.Activo)
                    throw new Exception("No es posible realizar esta consulta ya que excedió el límite de consultas del plan Evaluación.");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);

                //Políticas
                var politicasActuales = await _politicas.ReadAsync(m => m, m => m.IdEmpresa == modelo.IdEmpresa);
                if (!politicasActuales.Any())
                    throw new Exception("La empresa actual no tiene registrada políticas.");

                ViewBag.Historial = false;
                int demandadoEspecificoJudicial = 0;
                int demandadoEspecificoEmpresa = 0;
                bool aprobacionAdicional = false;
                bool aprobacionAdicionalBuro = false;
                #endregion Inicialización

                #region Políticas Evaluaciones
                _logger.LogInformation("Obteniendo políticas para procesamiento...");

                var antiguedadRuc = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.AntiguedadRucJuridico);
                var impuestoRenta = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ImpuestoRentaJuridico);
                var isd = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ISDJuridico);
                var deudaFirme = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DeudaFirmeJuridico);
                var civil = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CivilJuridico);
                var iessMoraPatronal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.IessMoraPatronalJuridico);
                var iessAfiliacion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.IessAfiliacionJuridico);
                //var nivelEstudios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NivelEstudiosJuridico);
                var legalPersona = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalPersonaJuridico);
                var legalPersonaEmpresa = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalPersonaJuridicoEmpresa);
                //var legalDemandante = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalDemandanteJuridico);
                //var legalDemandanteEmpresa = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.LegalDemandanteJuridicoEmpresa);
                var sercop = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SercopJuridico);
                var pagoMultasPendiente = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PagoMultasPendienteJuridico);
                var prediosRepLegal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PrediosPersonalRepLegal);
                var prediosEmpresa = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PrediosEmpresariales);
                var antecedentesPenales = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.AntecedentesPenalesJuridico);
                var noticiaDelito = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NoticiasDelitoJuridico);
                var noticiaDelitoEmpresa = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NoticiasDelitoEmpresaJuridico);
                var superBancosCedula = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosCJuridico);
                var superBancosNatural = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosRNJuridico);
                var superBancosJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SuperintendenciaBancosJuridico);
                var tituloNivelSuperior = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.TituloNivelSuperiorJuridico);

                var societarioAnioConstitucionJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioAnioConstitucionJuridico);
                var societarioCapitalSuscritoJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioCapitalSuscritoJuridico);
                var societarioEstadoJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioEstadoJuridico);
                var societarioIndicesLiquidezCorrienteJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIndicesLiquidezCorrienteJuridico);
                var societarioIndicesPeriodoMedioCobranzaJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIndicesPeriodoMedioCobranzaJuridico);
                var societarioBalancesTotalActivosJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioBalancesTotalActivosJuridico);
                var societarioBalancesTotalPasivosJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioBalancesTotalPasivosJuridico);
                var societarioBalancesPatrimonioNetoJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioBalancesPatrimonioNetoJuridico);
                var societarioIngresosyGastosEfectivoCajaJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIngresosyGastosEfectivoCajaJuridico);
                var societarioIngresosyGastosTotalIngresosJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIngresosyGastosTotalIngresosJuridico);
                var societarioIngresosyGastosGastosOperacionalesJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIngresosyGastosGastosOperacionalesJuridico);
                var societarioIngresosyGastos15TrabajadoresJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIngresosyGastos15TrabajadoresJuridico);
                var societarioIngresosyCuentasxPagarProveedoresTercerosJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIngresosyCuentasxPagarProveedoresTercerosJuridico);
                var societarioIngresosyUtilidadEjercicioJuridico = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioIngresosyUtilidadEjercicioJuridico);
                var societarioUltimoAnioBalance = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SocietarioUltimoAnioBalance);

                var contactarmeDirecciones = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeDireccionesJuridico);
                var contactarmeTelefonos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeTelefonosJuridico);
                var contactarmeEmails = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ContactarmeEmailsJuridico);

                var estadoTributario = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.EstadoTributarioJuridico);
                var permisoFacturacion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PermisoFacturacionJuridico);
                var deudaPensionAlimenticia = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.PagoPendientePensionAlimenticiaJuridico);

                //Politicas Buro
                var manejoCuentasCorrientes = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ManejodeCuentasCorrientesJuridico);
                var FechaCumplimientoSancion = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.FechaCumplimientoSancionJuridico);
                var deudaVigenteTotal = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DeudaVigenteTotalJuridico);
                var valorDemandaJudicial = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialJuridico);
                var valorCarteraCastigada = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaJuridico);
                var valorCuotaVencidos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCuotaVencidosJuridico);
                var saldoVencidoTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.SaldoVencidoTarjetasJuridico);
                var valorDemandaJudicialTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialTarjetasJuridico);
                var carteraCastigadaTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaTarjetasJuridico);
                var diasMorosidadTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadTarjetasJuridico);
                var valorVencidoTotalBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalBancosJuridico);
                var valorDemandaJudicialBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialBancosJuridico);
                var valorCarteraCastigadaBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaBancosJuridico);
                var diasMorosidadBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadBancosJuridico);
                var valorVencidoTotalCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalCooperativasJuridico);
                var valorDemandaJudicialCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialCooperativasJuridico);
                var valorCarteraCastigadaCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaCooperativasJuridico);
                var diasMorosidadCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadCooperativasJuridico);
                var valorVencidoTotalEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoTotalEmpresasJuridico);
                var valorDemandaJudicialEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialEmpresasJuridico);
                var valorCarteraCastigadaEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorCarteraCastigadaEmpresasJuridico);
                var diasMorosidadEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DiasMorosidadEmpresasJuridico);
                var valorVencidoVigentesServicios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoVigentesServiciosJuridico);
                var numeroDiasVencidoVigentesServicios = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NumeroDiasVencidoVigentesServiciosJuridico);
                var valorVencidoVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoVigentesCobranzasJuridico);
                var demandaJudicialVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.DemandaJudicialVigentesCobranzasJuridico);
                var carteraCastigadaVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaVigentesCobranzasJuridico);
                var numeroDiasVencidoVigentesCobranzas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.NumeroDiasVencidoVigentesCobranzasJuridico);
                var mayorSaldoVencido36Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.MayorSaldoVencido36MesesJuridico);
                var valorVencidoHistoricoTarjetas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoTarjetasJuridico);
                var valorVencidoHistoricoBancos = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoBancosJuridico);
                var valorVencidoHistoricoCooperativas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoCooperativasJuridico);
                var valorVencidoHistoricoEmpresas = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoEmpresasJuridico);
                var valorVencidoHistoricoServicio = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoServicioJuridico);
                var valorVencidoHistoricoCobranza = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoHistoricoCobranzaJuridico);
                var valorVencido12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencido12MesesJuridico);
                var valorDemandaJudicial12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicial12MesesJuridico);
                var carteraCastigada12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigada12MesesJuridico);
                var valorVencidoMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorVencidoMayor12MesesJuridico);
                var valorDemandaJudicialMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.ValorDemandaJudicialMayor12MesesJuridico);
                var carteraCastigadaMayor12Meses = politicasActuales.FirstOrDefault(m => m.Tipo == Dominio.Tipos.Politicas.CarteraCastigadaMayor12MesesJuridico);
                _logger.LogInformation("Fin Obtención de políticas para procesamiento.");
                #endregion Políticas Evaluaciones

                #region Re-procesamiento
                _logger.LogInformation($"Obteniento la calificación anterior {modelo.IdCalificacion}");

                calificacionAnterior = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Evaluacion, null, i => i.Include(m => m.DetalleCalificacion));
                if (calificacionAnterior != null)
                {
                    actualizar = true;
                    detalleCalificacionAnterior = calificacionAnterior.DetalleCalificacion.ToList();
                }
                _logger.LogInformation($"Finalizando la obtención de la calificación anterior {modelo.IdCalificacion}");

                _logger.LogInformation($"Obteniento la calificación anterior Buró {modelo.IdCalificacionBuro}");

                calificacionAnteriorBuro = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Buro, null, i => i.Include(m => m.DetalleCalificacion));
                if (calificacionAnteriorBuro != null)
                {
                    actualizarBuro = true;
                    detalleCalificacionAnteriorBuro = calificacionAnteriorBuro.DetalleCalificacion.ToList();
                }
                _logger.LogInformation($"Finalizando la obtención de la calificación anterior Buró {modelo.IdCalificacionBuro}");
                #endregion Re-procesamiento

                #region Evaluación SRI
                try
                {
                    _logger.LogInformation("Procesando políticas SRI...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Sri && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosHistorial.Sri = JsonConvert.DeserializeObject<Contribuyente>(detalleHistorial.Datos);

                        datosPersona.FechaInicio = datosHistorial.Sri.FechaInicio;
                        detalleSimple.Politica = antiguedadRuc.Nombre;
                        var diferenciaAnios = DateTime.Today.Year - datosPersona.FechaInicio.Date.Year;
                        if (datosPersona.FechaInicio.Date > DateTime.Today.AddYears(-diferenciaAnios))
                            diferenciaAnios--;

                        minimo = 2;
                        var estadoRuc = Dominio.Constantes.Politicas.RucActivo;
                        var resultadoComparacion = diferenciaAnios >= minimo && estadoRuc == datosHistorial.Sri.Estado;
                        if (!string.IsNullOrEmpty(datosHistorial.Sri.EstadoContribuyente) && datosHistorial.Sri.EstadoContribuyente == "SUSPENDIDO" && datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado) && datosHistorial.Sri.EstadoTributario.Estado != "OBLIGACIONES TRIBUTARIAS PENDIENTES")
                        {
                            resultadoComparacion = diferenciaAnios >= minimo;
                            if (antiguedadRuc != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antiguedadRuc.Excepcional,
                                    IdPolitica = antiguedadRuc.Id,
                                    Politica = antiguedadRuc.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAniosRuc, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, datosPersona.FechaInicio.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = diferenciaAnios.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antiguedadRuc.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antiguedadRuc.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else
                        {
                            if (antiguedadRuc != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antiguedadRuc.Excepcional,
                                    IdPolitica = antiguedadRuc.Id,
                                    Politica = antiguedadRuc.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAniosRuc, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, datosPersona.FechaInicio.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = diferenciaAnios.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antiguedadRuc.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antiguedadRuc.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        minimo = 0;
                        if (datosHistorial.Sri.Anexos != null && datosHistorial.Sri.Anexos.Any())
                        {
                            var datosRenta = datosHistorial.Sri.Anexos.OrderByDescending(x => x.Periodo).Select(x => new { x.Periodo, x.Causado }).ToList().Take(2);
                            int periodo = 0;
                            double causado = 0;
                            var impuestoMensaje = string.Empty;
                            if (datosRenta != null && datosRenta.Any())
                            {
                                if (datosRenta.Count() == 2 && datosRenta.First().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.First().Periodo;
                                    causado = (double)datosRenta.First().Causado;
                                }
                                else if (datosRenta.Count() == 2 && datosRenta.Last().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.Last().Periodo;
                                    causado = (double)datosRenta.Last().Causado;
                                }
                                else if (datosRenta.Count() == 1 && datosRenta.First().Periodo == DateTime.Now.AddYears(-1).Year)
                                {
                                    periodo = datosRenta.First().Periodo;
                                    causado = (double)datosRenta.First().Causado;
                                }
                                else
                                {
                                    periodo = DateTime.Now.AddYears(-1).Year;
                                    impuestoMensaje = $"No presenta valor en el año {periodo}";
                                }
                            }
                            else
                            {
                                periodo = DateTime.Now.AddYears(-1).Year;
                                impuestoMensaje = $"No presenta valor en el año {periodo}";
                            }

                            if (string.IsNullOrEmpty(impuestoMensaje))
                            {
                                resultadoComparacion = causado > minimo;
                                if (impuestoRenta != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = impuestoRenta.Excepcional,
                                        IdPolitica = impuestoRenta.Id,
                                        Politica = $"{impuestoRenta.Nombre} {periodo}",
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", causado >= 0 ? causado.ToString("N", culture) : "0.00"),
                                        Valor = causado >= 0 ? causado.ToString("N", culture) : "0.00",
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        Observacion = $"Periodo {periodo}",
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (impuestoRenta.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(impuestoRenta.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = false;
                                if (impuestoRenta != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = impuestoRenta.Excepcional,
                                        IdPolitica = impuestoRenta.Id,
                                        Politica = $"{impuestoRenta.Nombre} {periodo}",
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                        ValorResultado = impuestoMensaje,
                                        Valor = impuestoMensaje,
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        Observacion = $"Periodo {periodo}",
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (impuestoRenta.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(impuestoRenta.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }

                        //minimo = 0;
                        //if (datosHistorial.Sri.UltimoValorDivisa != null)
                        //{
                        //    resultadoComparacion = datosHistorial.Sri.UltimoValorDivisa > minimo;

                        //    if (isd != null)
                        //    {
                        //        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        //        {
                        //            IdPolitica = isd.Id,
                        //            Politica = isd.Nombre,
                        //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                        //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosHistorial.Sri.UltimoValorDivisa.ToString()),
                        //            Valor = datosHistorial.Sri.UltimoValorDivisa.ToString(),
                        //            Parametro = minimo.ToString(),
                        //            ResultadoPolitica = resultadoComparacion
                        //        });
                        //        if (isd.Excepcional && !resultadoComparacion)
                        //        {
                        //            observaciones.Add(isd.Nombre);
                        //            aprobacionAdicional = true;
                        //        }
                        //    }
                        //}

                        minimo = 40;
                        if (datosHistorial.Sri.Deudas != null && datosHistorial.Sri.Deudas.Any() && datosHistorial.Sri.Deudas.ContainsKey("Firmes"))
                        {
                            resultadoComparacion = datosHistorial.Sri.Deudas["Firmes"].Valor.Value < minimo;
                            if (deudaFirme != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = deudaFirme.Excepcional,
                                    IdPolitica = deudaFirme.Id,
                                    Politica = deudaFirme.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosHistorial.Sri.Deudas["Firmes"].Valor.Value),
                                    Valor = datosHistorial.Sri.Deudas["Firmes"].Valor.Value.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (deudaFirme.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(deudaFirme.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else
                        {
                            if (deudaFirme != null)
                            {
                                resultadoComparacion = true;
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = deudaFirme.Excepcional,
                                    IdPolitica = deudaFirme.Id,
                                    Politica = deudaFirme.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                    Valor = "0.00",
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (deudaFirme.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(deudaFirme.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        if (datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado))
                        {
                            resultadoComparacion = datosHistorial.Sri.EstadoTributario.Estado != "OBLIGACIONES TRIBUTARIAS PENDIENTES";
                            if (estadoTributario != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = estadoTributario.Excepcional,
                                    IdPolitica = estadoTributario.Id,
                                    Politica = estadoTributario.Nombre,
                                    ReferenciaMinima = Dominio.Constantes.TextoReferencia.EstadoTributario,
                                    ValorResultado = datosHistorial.Sri.EstadoTributario.Estado,
                                    Valor = datosHistorial.Sri.EstadoTributario.Estado,
                                    Parametro = Dominio.Constantes.TextoReferencia.EstadoTributario,
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (estadoTributario.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(estadoTributario.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }

                        if ((!string.IsNullOrEmpty(datosHistorial.Sri.EstadoContribuyente) && datosHistorial.Sri.EstadoContribuyente != "SUSPENDIDO") || (datosHistorial.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datosHistorial.Sri.EstadoTributario.Estado) && datosHistorial.Sri.EstadoTributario.Estado == "OBLIGACIONES TRIBUTARIAS PENDIENTES"))
                        {
                            if (datosHistorial.Sri.PermisoFacturacion != null && !string.IsNullOrEmpty(datosHistorial.Sri.PermisoFacturacion.Vigencia))
                            {
                                var valorVigencia = Regex.Matches(datosHistorial.Sri.PermisoFacturacion.Vigencia, @"[0-9]+");
                                if (valorVigencia != null && int.TryParse(valorVigencia[0].ToString(), out _))
                                {
                                    var valorFacturacion = int.Parse(valorVigencia[0].ToString());
                                    minimo = 12;
                                    if (valorFacturacion <= 3)
                                    {
                                        resultadoComparacion = valorFacturacion > minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (!resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                    else if (valorFacturacion > 3 && valorFacturacion < 12)
                                    {
                                        resultadoComparacion = valorFacturacion > minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (permisoFacturacion.Excepcional && !resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                    else if (valorFacturacion >= 12)
                                    {
                                        resultadoComparacion = valorFacturacion >= minimo;
                                        if (permisoFacturacion != null)
                                        {
                                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = permisoFacturacion.Excepcional,
                                                IdPolitica = permisoFacturacion.Id,
                                                Politica = permisoFacturacion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMeses, minimo),
                                                ValorResultado = $"{valorVigencia[0]} meses",
                                                Valor = valorVigencia[0].ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = resultadoComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (permisoFacturacion.Excepcional && !resultadoComparacion)
                                            {
                                                observaciones.Add(permisoFacturacion.Nombre);
                                                aprobacionAdicional = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas SRI.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SRI. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación SRI

                #region Evaluación Civil
                try
                {
                    var direccionesAdicionales = new List<string>();
                    Externos.Logica.Garancheck.Modelos.Persona personaTemp = null;
                    _logger.LogInformation("Procesando políticas Civil...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                    var resultadoComparacion = false;

                    var edad = -1;
                    if (detalleHistorial != null)
                    {
                        //Civil En Línea
                        var persona = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(detalleHistorial.Datos);
                        if (persona != null && persona.FechaNacimiento != default)
                        {
                            edad = DateTime.Today.Year - persona.FechaNacimiento.Year;
                            if (persona.FechaNacimiento.Date > DateTime.Today.AddYears(-edad))
                                edad--;
                        }

                        if (persona != null)
                        {
                            var direccionTempRegCivil = string.Join("/", new[] { persona.LugarDomicilio?.Trim(), persona.CalleDomicilio?.Trim(), persona.NumeracionDomicilio?.Trim() }.Where(m => !string.IsNullOrEmpty(m)).ToArray());
                            if (!string.IsNullOrEmpty(direccionTempRegCivil))
                                direccionesAdicionales.Add(direccionTempRegCivil);
                        }
                    }
                    else
                    {
                        //Civil Histórico
                        detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                        {
                            Datos = m.Data
                        }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);

                        if (detalleHistorial != null)
                        {
                            var persona = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(detalleHistorial.Datos);
                            if (persona != null && !string.IsNullOrEmpty(persona.FechaNacimiento.Value.ToString()))
                            {
                                edad = DateTime.Today.Year - persona.FechaNacimiento.Value.Year;
                                if (persona.FechaNacimiento.Value.Date > DateTime.Today.AddYears(-edad))
                                    edad--;
                            }
                            personaTemp = persona;
                        }
                    }

                    //Edad
                    if (edad >= 0)
                    {
                        resultadoComparacion = (edad > 25 && edad <= 80);
                        if (civil != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = civil.Excepcional,
                                IdPolitica = civil.Id,
                                Politica = civil.Nombre,
                                ReferenciaMinima = "Mayor a 25 años y Menor o igual a 80 años",
                                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Edad, edad.ToString()),
                                Valor = edad.ToString(),
                                Parametro = "[25,80]",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (civil.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(civil.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                    //Contactos
                    var detalleHistorialPersonal = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Personales && m.Generado);

                    Externos.Logica.Garancheck.Modelos.Personal personalTemp = null;
                    if (detalleHistorialPersonal != null)
                        personalTemp = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(detalleHistorialPersonal.Datos);

                    if (personaTemp == null)
                    {
                        var detalleHistorialCiudadano = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                        {
                            Datos = m.Data
                        }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);

                        if (detalleHistorialCiudadano != null)
                            personaTemp = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(detalleHistorialCiudadano.Datos);
                    }

                    if (personalTemp != null && !string.IsNullOrEmpty(personalTemp.NombreCalle?.Trim()) && !string.IsNullOrEmpty(personalTemp.NumeroCasa?.Trim()))
                    {
                        if (personaTemp != null && !string.IsNullOrEmpty(personaTemp.Provincia?.Trim()) && !string.IsNullOrEmpty(personaTemp.Canton?.Trim()) && !string.IsNullOrEmpty(personaTemp.Parroquia?.Trim()))
                            direccionesAdicionales.Add($"{personaTemp.Provincia} / {personaTemp.Canton} / {personaTemp.Parroquia} / {personalTemp.NombreCalle} {personalTemp.NumeroCasa}");
                        else
                            direccionesAdicionales.Add($"{personalTemp.NombreCalle} {personalTemp.NumeroCasa}");
                    }

                    var contactosPersona = new Contacto();
                    var direccionesContacto = 0;
                    var telefonosContacto = 0;
                    var emailsContacto = 0;
                    var detalleContactos = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Contactos && m.Generado);

                    if (detalleContactos != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactos.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    var detalleContactosEmpresa = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa && m.Generado);

                    if (detalleContactosEmpresa != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactosEmpresa.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    var detalleContactosIess = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosIess && m.Generado);

                    if (detalleContactosIess != null)
                    {
                        contactosPersona = JsonConvert.DeserializeObject<Contacto>(detalleContactosIess.Datos);
                        direccionesContacto += contactosPersona.Direcciones.Count;
                        telefonosContacto += contactosPersona.Telefonos.Count;
                        emailsContacto += contactosPersona.Correos.Count;
                    }

                    if (direccionesAdicionales.Any())
                        direccionesContacto += direccionesAdicionales.Count;

                    minimo = 2;
                    resultadoComparacion = direccionesContacto >= minimo;
                    if (contactarmeDirecciones != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeDirecciones.Excepcional,
                            IdPolitica = contactarmeDirecciones.Id,
                            Politica = contactarmeDirecciones.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = direccionesContacto.ToString(),
                            Valor = direccionesContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeDirecciones.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeDirecciones.Nombre);
                            aprobacionAdicional = true;
                        }
                    }
                    resultadoComparacion = telefonosContacto >= minimo;
                    if (contactarmeTelefonos != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeTelefonos.Excepcional,
                            IdPolitica = contactarmeTelefonos.Id,
                            Politica = contactarmeTelefonos.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = telefonosContacto.ToString(),
                            Valor = telefonosContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeTelefonos.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeTelefonos.Nombre);
                            aprobacionAdicional = true;
                        }
                    }

                    resultadoComparacion = emailsContacto >= minimo;
                    if (contactarmeEmails != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = contactarmeEmails.Excepcional,
                            IdPolitica = contactarmeEmails.Id,
                            Politica = contactarmeEmails.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgual, minimo),
                            ValorResultado = emailsContacto.ToString(),
                            Valor = emailsContacto.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (contactarmeEmails.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(contactarmeEmails.Nombre);
                            aprobacionAdicional = true;
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas Civil.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Civil. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Civil

                #region Evaluación IESS
                try
                {
                    _logger.LogInformation("Procesando políticas IESS...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Iess && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var iess = JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Persona>(detalleHistorial.Datos);

                        if (iess != null)
                        {
                            var mora = Convert.ToDouble(iess.Mora);
                            minimo = 50;

                            var resultadoComparacion = mora < minimo;

                            if (iessMoraPatronal != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = iessMoraPatronal.Excepcional,
                                    IdPolitica = iessMoraPatronal.Id,
                                    Politica = iessMoraPatronal.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", mora.ToString()),
                                    Valor = mora.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (iessMoraPatronal.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(iessMoraPatronal.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas IESS.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de IESS. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación IESS

                #region Evaluación Afiliado
                try
                {
                    _logger.LogInformation("Procesando políticas AFILIADO...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var afiliado = JsonConvert.DeserializeObject<Afiliacion>(detalleHistorial.Datos);
                        var estadoAfiliadoIess = new[] { "ACTIVO/A", "JUBILADO/A", "AFILIADO ACTIVO" };
                        var resultadoComparacion = false;
                        var estadoAfiliado = "N/A";
                        if (!string.IsNullOrEmpty(afiliado.Estado))
                        {
                            estadoAfiliado = afiliado.Estado;
                            resultadoComparacion = estadoAfiliadoIess.Contains(afiliado.Estado);
                        }
                        if (iessAfiliacion != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = iessAfiliacion.Excepcional,
                                IdPolitica = iessAfiliacion.Id,
                                Politica = iessAfiliacion.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoAfiliacion, "ACTIVO/A, JUBILADO/A"),
                                ValorResultado = estadoAfiliado,
                                Valor = estadoAfiliado,
                                Parametro = "ACTIVO/A, JUBILADO/A, AFILIADO ACTIVO",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (iessAfiliacion.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(iessAfiliacion.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                    _logger.LogInformation("Fin procesamiento políticas AFILIADO.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de AFILIADO. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Afiliado

                #region Senescyt
                try
                {
                    _logger.LogInformation("Procesando políticas SENECYT...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt && m.Generado);
                    var resultadoComparacion = false;
                    if (detalleHistorial != null)
                    {
                        var senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(detalleHistorial.Datos);
                        if (senescyt != null)
                            resultadoComparacion = senescyt.TotalTitulos > 0;

                        if (tituloNivelSuperior != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = tituloNivelSuperior.Excepcional,
                                IdPolitica = tituloNivelSuperior.Id,
                                Politica = tituloNivelSuperior.Nombre,
                                ReferenciaMinima = "SI",
                                ValorResultado = resultadoComparacion ? "SI" : "NO",
                                Valor = resultadoComparacion ? "SI" : "NO",
                                Parametro = "SI",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(tituloNivelSuperior.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                    else
                    {
                        var datosCivil = new CivilViewModel();
                        var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                        var detallesCivil = await _detalleHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);

                        var civilHistorial = detallesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado && !string.IsNullOrEmpty(m.Data));
                        if (civilHistorial != null)
                            datosCivil.RegistroCivil = JsonConvert.DeserializeObject<RegistroCivil>(civilHistorial.Data);

                        if (datosCivil != null && datosCivil.RegistroCivil == null)
                        {
                            civilHistorial = detallesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado && !string.IsNullOrEmpty(m.Data));
                            if (civilHistorial != null)
                                datosCivil.Ciudadano = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(civilHistorial.Data);
                        }

                        if (datosCivil != null && datosCivil.RegistroCivil != null)
                        {
                            if (!string.IsNullOrEmpty(datosCivil.RegistroCivil.Instruccion?.Trim()) && datosCivil.RegistroCivil.Instruccion.Trim().ToUpper() == "SUPERIOR")
                                resultadoComparacion = true;

                            if (tituloNivelSuperior != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = tituloNivelSuperior.Excepcional,
                                    IdPolitica = tituloNivelSuperior.Id,
                                    Politica = tituloNivelSuperior.Nombre,
                                    ReferenciaMinima = "SI",
                                    ValorResultado = resultadoComparacion ? "SI" : "NO",
                                    Valor = resultadoComparacion ? "SI" : "NO",
                                    Parametro = "SI",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(tituloNivelSuperior.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                        else if (datosCivil != null && datosCivil.RegistroCivil == null && datosCivil.Ciudadano != null)
                        {
                            if (!string.IsNullOrEmpty(datosCivil.Ciudadano.Instruccion?.Trim()) && datosCivil.Ciudadano.Instruccion.Trim().ToUpper() == "SUPERIOR")
                                resultadoComparacion = true;

                            if (tituloNivelSuperior != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = tituloNivelSuperior.Excepcional,
                                    IdPolitica = tituloNivelSuperior.Id,
                                    Politica = tituloNivelSuperior.Nombre,
                                    ReferenciaMinima = "SI",
                                    ValorResultado = resultadoComparacion ? "SI" : "NO",
                                    Valor = resultadoComparacion ? "SI" : "NO",
                                    Parametro = "SI",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (tituloNivelSuperior.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(tituloNivelSuperior.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }

                    //if (detalleHistorial != null)
                    //{
                    //    var senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(detalleHistorial.Datos);
                    //    minimo = 0;

                    //    var resultadoComparacion = senescyt.TotalTitulos > 0;

                    //    if (nivelEstudios != null)
                    //    {
                    //        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                    //        {
                    //            IdPolitica = nivelEstudios.Id,
                    //            Politica = nivelEstudios.Nombre,
                    //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                    //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Titulos, senescyt.TotalTitulos.ToString()),
                    //            Valor = senescyt.TotalTitulos.ToString(),
                    //            Parametro = 0.ToString(),
                    //            ResultadoPolitica = resultadoComparacion,
                    //            FechaCreacion = DateTime.Now
                    //        });
                    //        if (nivelEstudios.Excepcional && !resultadoComparacion)
                    //        {
                    //            observaciones.Add(nivelEstudios.Nombre);
                    //            aprobacionAdicional = true;
                    //        }
                    //    }
                    //}
                    _logger.LogInformation("Fin procesamiento políticas SENECYT.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SENECYT. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Senescyt

                #region Evaluación Legal
                try
                {
                    _logger.LogInformation("Procesando políticas LEGAL...");
                    //int? procesosActor = null;
                    int? procesosDemandado = null;
                    var pathProcesosLegales = Path.Combine("wwwroot", "data", "dataProcesosLegales.json");
                    var lstProcesos = JsonConvert.DeserializeObject<List<ProcesoLegal>>(System.IO.File.ReadAllText(pathProcesosLegales));
                    var lstCadena = lstProcesos.Select(x => x.Proceso.ToUpper()).ToList();
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado);

                    if (detalleHistorial != null)
                    {
                        procesosDemandado = 0;
                        var fJudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(detalleHistorial.Datos);
                        var fechaTope = DateTime.Now.AddYears(-6);
                        demandadoEspecificoJudicial = fJudicial.Demandado.Values.Count(m => lstCadena.Any(n => m.Descripcion.ToUpper().Contains(n)) && (m.Fecha.HasValue ? m.Fecha.Value.Date >= fechaTope.Date : false));
                        procesosDemandado += demandadoEspecificoJudicial;
                    }
                    //else
                    //{
                    //    procesosDemandado = 0;
                    //}

                    minimo = 0;
                    var resultadoComparacion = !(procesosDemandado > minimo);

                    if (legalPersona != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = legalPersona.Excepcional,
                            IdPolitica = legalPersona.Id,
                            Politica = legalPersona.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximo, minimo),
                            ValorResultado = procesosDemandado.ToString(),
                            Valor = procesosDemandado.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (legalPersona.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(legalPersona.Nombre);
                            aprobacionAdicional = true;
                        }
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FJEmpresa && m.Generado);

                    if (detalleHistorial != null)
                    {
                        procesosDemandado = 0;

                        var fechaTope = DateTime.Now.AddYears(-6);
                        var fJEmpresa = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(detalleHistorial.Datos);
                        demandadoEspecificoEmpresa = fJEmpresa.Demandado.Values.Count(m => lstCadena.Any(n => m.Descripcion.ToUpper().Contains(n)) && (m.Fecha.HasValue ? m.Fecha.Value.Date >= fechaTope.Date : false));

                        procesosDemandado += demandadoEspecificoEmpresa;
                    }
                    //else
                    //{
                    //    procesosDemandado = 0;
                    //}

                    minimo = 0;
                    resultadoComparacion = !(procesosDemandado > minimo);

                    if (legalPersonaEmpresa != null)
                    {
                        detalleCalificacion.Add(new DetalleCalificacionViewModel()
                        {
                            Excepcional = legalPersonaEmpresa.Excepcional,
                            IdPolitica = legalPersonaEmpresa.Id,
                            Politica = legalPersonaEmpresa.Nombre,
                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximo, minimo),
                            ValorResultado = procesosDemandado.ToString(),
                            Valor = procesosDemandado.ToString(),
                            Parametro = minimo.ToString(),
                            ResultadoPolitica = resultadoComparacion,
                            FechaCreacion = DateTime.Now
                        });
                        if (legalPersonaEmpresa.Excepcional && !resultadoComparacion)
                        {
                            observaciones.Add(legalPersonaEmpresa.Nombre);
                            aprobacionAdicional = true;
                        }
                    }


                    _logger.LogInformation("Fin procesamiento políticas LEGAL.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de LEGAL. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Legal

                #region Evaluación SERCOP
                try
                {
                    _logger.LogInformation("Procesando políticas SERCOP...");
                    int? contadorSercop = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Proveedor && m.Generado);

                    if (detalleHistorial != null)
                    {
                        var proveedor = JsonConvert.DeserializeObject<Externos.Logica.SERCOP.Modelos.ProveedorIncumplido>(detalleHistorial.Datos);
                        contadorSercop = 0;
                        if (proveedor.ProveedoresIncop != null && proveedor.ProveedoresIncop.Any()) contadorSercop += proveedor.ProveedoresIncop.Count;
                        if (proveedor.ProveedoresContraloria != null && proveedor.ProveedoresContraloria.Any()) contadorSercop += proveedor.ProveedoresContraloria.Count;
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.ProveedorContraloria && m.Generado);

                    if (detalleHistorial != null)
                    {
                        if (contadorSercop == null) contadorSercop = 0;
                        var proveedorContraloria = JsonConvert.DeserializeObject<List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria>>(detalleHistorial.Datos);
                        if (proveedorContraloria != null && proveedorContraloria.Any()) contadorSercop += proveedorContraloria.Count;
                    }
                    if (contadorSercop == null) contadorSercop = 0;

                    if (contadorSercop != null)
                    {
                        minimo = 0;
                        var resultadoComparacion = contadorSercop == minimo;

                        if (sercop != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = sercop.Excepcional,
                                IdPolitica = sercop.Id,
                                Politica = sercop.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximo, minimo),
                                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Procesos, contadorSercop),
                                Valor = contadorSercop.ToString(),
                                Parametro = minimo.ToString(),
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (sercop.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(sercop.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas SERCOP.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SERCOP. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación SERCOP

                #region Evaluación Societario
                try
                {
                    _logger.LogInformation("Procesando políticas SOCIETARIO...");
                    //Societario
                    datosSocietario.HistorialCabecera = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial);
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Balance && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosSocietario.Balance = JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.BalanceEmpresa>(detalleHistorial.Datos);
                        datosSocietario.PeriodoBusqueda = datosSocietario.Balance.Periodo;
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Balances && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosSocietario.Balances = JsonConvert.DeserializeObject<List<BalanceEmpresa>>(detalleHistorial.Datos);
                        datosSocietario.Balance = datosSocietario.Balances.OrderByDescending(m => m.Periodo).FirstOrDefault();
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DirectorioCompanias && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosSocietario.DirectorioCompania = JsonConvert.DeserializeObject<DirectorioCompania>(detalleHistorial.Datos);
                    }
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Sri && m.Generado);

                    if (detalleHistorial != null)
                    {
                        datosSocietario.Sri = JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(detalleHistorial.Datos);
                    }

                    if (datosSocietario != null)
                    {
                        if (datosSocietario.DirectorioCompania != null)
                        {
                            minimo = 2;

                            var fechaConstitucion = datosSocietario.DirectorioCompania.FechaConstitucion.Value;
                            var diferenciaAnios = DateTime.Today.Year - fechaConstitucion.Date.Year;

                            if (fechaConstitucion.Date > DateTime.Today.AddYears(-diferenciaAnios))
                                diferenciaAnios--;

                            var resultadoComparacion = diferenciaAnios >= minimo;

                            if (societarioAnioConstitucionJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioAnioConstitucionJuridico.Excepcional,
                                    IdPolitica = societarioAnioConstitucionJuridico.Id,
                                    Politica = societarioAnioConstitucionJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualAnios, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.FechaAnios, fechaConstitucion.ToString("yyyy/MM/dd"), diferenciaAnios),
                                    Valor = fechaConstitucion.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioAnioConstitucionJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioAnioConstitucionJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            if (datosSocietario.DirectorioCompania.CapitalSuscrito != null)
                            {
                                minimo = 800;
                                resultadoComparacion = datosSocietario.DirectorioCompania.CapitalSuscrito >= minimo;

                                if (societarioCapitalSuscritoJuridico != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = societarioCapitalSuscritoJuridico.Excepcional,
                                        IdPolitica = societarioCapitalSuscritoJuridico.Id,
                                        Politica = societarioCapitalSuscritoJuridico.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorIgualMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", datosSocietario.DirectorioCompania.CapitalSuscrito),
                                        Valor = datosSocietario.DirectorioCompania.CapitalSuscrito.ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (societarioCapitalSuscritoJuridico.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(societarioCapitalSuscritoJuridico.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            if (datosSocietario.DirectorioCompania.SituacionLegal != null)
                            {
                                resultadoComparacion = datosSocietario.DirectorioCompania.SituacionLegal == "ACTIVA";

                                if (societarioEstadoJuridico != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = societarioEstadoJuridico.Excepcional,
                                        IdPolitica = societarioEstadoJuridico.Id,
                                        Politica = societarioEstadoJuridico.Nombre,
                                        ReferenciaMinima = "ACTIVA",
                                        ValorResultado = datosSocietario.DirectorioCompania.SituacionLegal,
                                        Valor = datosSocietario.DirectorioCompania.SituacionLegal,
                                        Parametro = "ACTIVA",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (societarioEstadoJuridico.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(societarioEstadoJuridico.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                        if (datosSocietario.Balances != null || datosSocietario.Balance != null)
                        {
                            decimal sumaLiquidezCorriente = 0;
                            sumaLiquidezCorriente = Math.Round(datosSocietario.Balance.Indices.LiquidezCorriente, 2, MidpointRounding.AwayFromZero);

                            minimo = 1;
                            var resultadoComparacion = sumaLiquidezCorriente > minimo;

                            if (societarioIndicesLiquidezCorrienteJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIndicesLiquidezCorrienteJuridico.Excepcional,
                                    IdPolitica = societarioIndicesLiquidezCorrienteJuridico.Id,
                                    Politica = societarioIndicesLiquidezCorrienteJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                                    ValorResultado = sumaLiquidezCorriente.ToString(),
                                    Valor = sumaLiquidezCorriente.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIndicesLiquidezCorrienteJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIndicesLiquidezCorrienteJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaPromedioMedioCobro = 0;
                            sumaPromedioMedioCobro = Math.Round(datosSocietario.Balance.Indices.PeriodoPromCobro, 2, MidpointRounding.AwayFromZero);

                            minimo = 60;
                            resultadoComparacion = sumaPromedioMedioCobro <= minimo;

                            if (societarioIndicesPeriodoMedioCobranzaJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIndicesPeriodoMedioCobranzaJuridico.Excepcional,
                                    IdPolitica = societarioIndicesPeriodoMedioCobranzaJuridico.Id,
                                    Politica = societarioIndicesPeriodoMedioCobranzaJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualDias, minimo),
                                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, sumaPromedioMedioCobro.ToString()),
                                    Valor = sumaPromedioMedioCobro.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIndicesPeriodoMedioCobranzaJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIndicesPeriodoMedioCobranzaJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaTotalActivosJuridico = 0;
                            sumaTotalActivosJuridico = Math.Round(datosSocietario.Balance.Activos.TotalActivo, 2, MidpointRounding.AwayFromZero);

                            minimo = 10000;
                            resultadoComparacion = sumaTotalActivosJuridico > minimo;

                            if (societarioBalancesTotalActivosJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioBalancesTotalActivosJuridico.Excepcional,
                                    IdPolitica = societarioBalancesTotalActivosJuridico.Id,
                                    Politica = societarioBalancesTotalActivosJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaTotalActivosJuridico),
                                    Valor = sumaTotalActivosJuridico.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioBalancesTotalActivosJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioBalancesTotalActivosJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaTotalPasivos = 0;
                            sumaTotalPasivos = Math.Round(datosSocietario.Balance.Pasivos.TotalPasivo, 2, MidpointRounding.AwayFromZero);

                            resultadoComparacion = sumaTotalPasivos <= (sumaTotalActivosJuridico * 8 / 10);

                            if (societarioBalancesTotalPasivosJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioBalancesTotalPasivosJuridico.Excepcional,
                                    IdPolitica = societarioBalancesTotalPasivosJuridico.Id,
                                    Politica = societarioBalancesTotalPasivosJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Pasivos, (sumaTotalActivosJuridico * 8 / 10)),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaTotalPasivos),
                                    Valor = sumaTotalPasivos.ToString(),
                                    Parametro = (sumaTotalActivosJuridico * 8 / 10).ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioBalancesTotalPasivosJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioBalancesTotalPasivosJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaTotalPatrimonioNeto = 0;
                            sumaTotalPatrimonioNeto = Math.Round(datosSocietario.Balance.Patrimonio.PatrimonioNeto, 2, MidpointRounding.AwayFromZero);

                            minimo = 15000;
                            resultadoComparacion = sumaTotalPatrimonioNeto > minimo;

                            if (societarioBalancesPatrimonioNetoJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioBalancesPatrimonioNetoJuridico.Excepcional,
                                    IdPolitica = societarioBalancesPatrimonioNetoJuridico.Id,
                                    Politica = societarioBalancesPatrimonioNetoJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaTotalPatrimonioNeto),
                                    Valor = sumaTotalPatrimonioNeto.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioBalancesPatrimonioNetoJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioBalancesPatrimonioNetoJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaTotalEfectivoCaja = 0;
                            sumaTotalEfectivoCaja = Math.Round(datosSocietario.Balance.Otros.EfectivoYCaja, 2, MidpointRounding.AwayFromZero);

                            minimo = 10000;
                            resultadoComparacion = sumaTotalEfectivoCaja > minimo;

                            if (societarioIngresosyGastosEfectivoCajaJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIngresosyGastosEfectivoCajaJuridico.Excepcional,
                                    IdPolitica = societarioIngresosyGastosEfectivoCajaJuridico.Id,
                                    Politica = societarioIngresosyGastosEfectivoCajaJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaTotalEfectivoCaja),
                                    Valor = sumaTotalEfectivoCaja.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIngresosyGastosEfectivoCajaJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIngresosyGastosEfectivoCajaJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaTotalIngresos = 0;
                            sumaTotalIngresos = Math.Round(datosSocietario.Balance.Otros.TotalIngresos, 2, MidpointRounding.AwayFromZero);

                            minimo = 100000;
                            resultadoComparacion = sumaTotalIngresos > minimo;

                            if (societarioIngresosyGastosTotalIngresosJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIngresosyGastosTotalIngresosJuridico.Excepcional,
                                    IdPolitica = societarioIngresosyGastosTotalIngresosJuridico.Id,
                                    Politica = societarioIngresosyGastosTotalIngresosJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaTotalIngresos),
                                    Valor = sumaTotalIngresos.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIngresosyGastosTotalIngresosJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIngresosyGastosTotalIngresosJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaGastosOperacionales = 0;
                            sumaGastosOperacionales = Math.Round(datosSocietario.Balance.Otros.GastosOperacionales, 2, MidpointRounding.AwayFromZero);

                            resultadoComparacion = sumaGastosOperacionales <= (sumaTotalIngresos * 8 / 10);

                            if (societarioIngresosyGastosGastosOperacionalesJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIngresosyGastosGastosOperacionalesJuridico.Excepcional,
                                    IdPolitica = societarioIngresosyGastosGastosOperacionalesJuridico.Id,
                                    Politica = societarioIngresosyGastosGastosOperacionalesJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.GastosOperacionales, sumaTotalIngresos * 8 / 10),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaGastosOperacionales),
                                    Valor = sumaGastosOperacionales.ToString(),
                                    Parametro = (sumaTotalIngresos * 8 / 10).ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIngresosyGastosGastosOperacionalesJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIngresosyGastosGastosOperacionalesJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            decimal sumaTrabajadores15 = 0;
                            sumaTrabajadores15 = Math.Round(datosSocietario.Balance.Otros.P15x100Trabajadores, 2, MidpointRounding.AwayFromZero);

                            minimo = 1000;
                            resultadoComparacion = sumaTrabajadores15 >= minimo;

                            if (societarioIngresosyGastos15TrabajadoresJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIngresosyGastos15TrabajadoresJuridico.Excepcional,
                                    IdPolitica = societarioIngresosyGastos15TrabajadoresJuridico.Id,
                                    Politica = societarioIngresosyGastos15TrabajadoresJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MinimoMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaTrabajadores15),
                                    Valor = sumaTrabajadores15.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIngresosyGastos15TrabajadoresJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIngresosyGastos15TrabajadoresJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }

                            }

                            decimal sumaCxPProveedoresTerceros = 0;
                            sumaCxPProveedoresTerceros = Math.Round(datosSocietario.Balance.Otros.CxPProveedoresTerceros, 2, MidpointRounding.AwayFromZero);

                            decimal sumaCxCProveedoresTerceros = 0;
                            sumaCxCProveedoresTerceros = Math.Round(datosSocietario.Balance.Otros.CxCComercialesTerceros, 2, MidpointRounding.AwayFromZero);

                            resultadoComparacion = sumaCxPProveedoresTerceros <= sumaCxCProveedoresTerceros;

                            if (societarioIngresosyCuentasxPagarProveedoresTercerosJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIngresosyCuentasxPagarProveedoresTercerosJuridico.Excepcional,
                                    IdPolitica = societarioIngresosyCuentasxPagarProveedoresTercerosJuridico.Id,
                                    Politica = societarioIngresosyCuentasxPagarProveedoresTercerosJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.CuentasXPagar, sumaCxCProveedoresTerceros),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaCxPProveedoresTerceros),
                                    Valor = sumaCxPProveedoresTerceros.ToString(),
                                    Parametro = sumaCxCProveedoresTerceros.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIngresosyCuentasxPagarProveedoresTercerosJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIngresosyCuentasxPagarProveedoresTercerosJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }


                            decimal sumaUtilidadEjercicio = 0;
                            sumaUtilidadEjercicio = Math.Round(datosSocietario.Balance.Otros.UtilidadEjercicio, 2, MidpointRounding.AwayFromZero);

                            minimo = 10000;
                            resultadoComparacion = sumaUtilidadEjercicio > minimo;

                            if (societarioIngresosyUtilidadEjercicioJuridico != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = societarioIngresosyUtilidadEjercicioJuridico.Excepcional,
                                    IdPolitica = societarioIngresosyUtilidadEjercicioJuridico.Id,
                                    Politica = societarioIngresosyUtilidadEjercicioJuridico.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", sumaUtilidadEjercicio),
                                    Valor = sumaUtilidadEjercicio.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (societarioIngresosyUtilidadEjercicioJuridico.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(societarioIngresosyUtilidadEjercicioJuridico.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }

                            datosPersonaBuro.VentasEmpresa = 0;
                            if (datosSocietario.Balance.Otros.Ventas != 0)
                                datosPersonaBuro.VentasEmpresa = (double?)datosSocietario.Balance.Otros.Ventas;

                            datosPersonaBuro.PatrimonioEmpresa = 0;
                            if (datosSocietario.Balance.Patrimonio.PatrimonioNeto != 0)
                                datosPersonaBuro.PatrimonioEmpresa = (double?)datosSocietario.Balance.Patrimonio.PatrimonioNeto;

                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas SOCIETARIO.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SOCIETARIO. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Societario

                #region Evaluación Ant
                try
                {
                    _logger.LogInformation("Procesando políticas ANT...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Ant && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var fuenteAnt = JsonConvert.DeserializeObject<Externos.Logica.ANT.Modelos.Licencia>(detalleHistorial.Datos);
                        if (fuenteAnt != null)
                        {
                            minimo = 150;
                            var autos = fuenteAnt.Autos != null && fuenteAnt.Autos.Any() ? fuenteAnt.Autos.Where(m => (!string.IsNullOrEmpty(m.Placa) && m.Placa.Length > 1 && m.Placa != "SIN/PLACA") && (string.IsNullOrEmpty(m.NombrePropietario) || m.NombrePropietario == fuenteAnt.Titular)).ToList() : new List<Externos.Logica.ANT.Modelos.Auto>();
                            if (fuenteAnt.Multas != null && fuenteAnt.Multas.Any())
                                fuenteAnt.Multas = fuenteAnt.Multas.Where(m => autos.Select(m => m.Placa).Contains(m.Placa) || m.Placa == "-" || m.Placa == "SIN/PLACA" || m.Placa.Length == 1 || m.Placa?.Trim() == string.Empty).ToList();

                            var totalMultas = fuenteAnt.Multas.Sum(x => (!x.Pagada.HasValue || (x.Pagada.HasValue && !x.Pagada.Value)) && (!x.Reclamo.HasValue || (x.Reclamo.HasValue && !x.Reclamo.Value))
                                              && (!x.Anulada.HasValue || (x.Anulada.HasValue && !x.Anulada.Value)) ? x.Saldo : 0);
                            var resultadoComparacion = totalMultas < minimo;
                            if (pagoMultasPendiente != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = pagoMultasPendiente.Excepcional,
                                    IdPolitica = pagoMultasPendiente.Id,
                                    Politica = pagoMultasPendiente.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MayorMoneda, minimo),
                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", totalMultas.ToString("N", culture)),
                                    Valor = totalMultas.ToString(),
                                    Parametro = minimo.ToString(),
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (pagoMultasPendiente.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(pagoMultasPendiente.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de ANT. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Ant

                #region PensionAlimenticia
                try
                {
                    _logger.LogInformation("Procesando políticas Pensión Alimenticia...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PensionAlimenticia && m.Generado);
                    var resultadoComparacion = false;

                    if (detalleHistorial != null)
                    {
                        var pensionAlimenticia = JsonConvert.DeserializeObject<Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia>(detalleHistorial.Datos);
                        double totalDeudaAlimenticia = 0;
                        minimo = 500;

                        if (pensionAlimenticia != null && pensionAlimenticia.Resultados != null && pensionAlimenticia.Resultados.Any())
                        {
                            var valorDeudaPension = new List<List<Externos.Logica.PensionesAlimenticias.Modelos.Movimiento>>();
                            var resultadoPension = pensionAlimenticia.Resultados;
                            var nombreHistorial = resultadoPension.FirstOrDefault().Nombre;
                            var movimientosPension = resultadoPension.Select(x => new { x.Movimientos, x.Intervinientes }).ToList();
                            if (movimientosPension != null && movimientosPension.Any() && !string.IsNullOrEmpty(nombreHistorial))
                            {
                                var nombreDivido = nombreHistorial.Split(' ');
                                foreach (var item in movimientosPension)
                                {
                                    var obligadoNombre = item.Intervinientes.Where(x => x.Tipo.ToUpper() == "OBLIGADO PRINCIPAL").Select(x => x.Nombre).ToList();
                                    if (obligadoNombre != null && obligadoNombre.Any())
                                    {
                                        var listaNombre = new List<bool>();
                                        foreach (var item1 in obligadoNombre)
                                        {
                                            var nombreSeparado = item1.Split(' ');
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (nombreHistorial.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (listaNombre.Count(x => x) == nombreDivido.Length)
                                                valorDeudaPension.Add(item.Movimientos);
                                        }
                                    }
                                }
                            }

                            if (valorDeudaPension != null && valorDeudaPension.Any())
                            {
                                totalDeudaAlimenticia = valorDeudaPension.Sum(x => x.Sum(m => double.Parse(!string.IsNullOrEmpty(m.ValorDeudaOriginal) ? m.ValorDeudaOriginal.Replace(",", ".") : "0"))) - valorDeudaPension.Sum(x => x.Sum(m => double.Parse(!string.IsNullOrEmpty(m.ValorPagadoOriginal) ? m.ValorPagadoOriginal.Replace(",", ".") : "0")));
                                resultadoComparacion = totalDeudaAlimenticia <= minimo;
                                if (deudaPensionAlimenticia != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = deudaPensionAlimenticia.Excepcional,
                                        IdPolitica = deudaPensionAlimenticia.Id,
                                        Politica = deudaPensionAlimenticia.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", totalDeudaAlimenticia.ToString("N", culture)),
                                        Valor = totalDeudaAlimenticia.ToString("N", culture),
                                        Parametro = minimo.ToString("N", culture),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });

                                    if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(deudaPensionAlimenticia.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (deudaPensionAlimenticia != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = deudaPensionAlimenticia.Excepcional,
                                        IdPolitica = deudaPensionAlimenticia.Id,
                                        Politica = deudaPensionAlimenticia.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo),
                                        ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                        Valor = "0.00",
                                        Parametro = minimo.ToString("N", culture),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });

                                    if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(deudaPensionAlimenticia.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        resultadoComparacion = true;
                        if (deudaPensionAlimenticia != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = deudaPensionAlimenticia.Excepcional,
                                IdPolitica = deudaPensionAlimenticia.Id,
                                Politica = deudaPensionAlimenticia.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "500.00"),
                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0.00"),
                                Valor = "0.00",
                                Parametro = "500.00",
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });

                            if (deudaPensionAlimenticia.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(deudaPensionAlimenticia.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Pensión Alimenticia. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region SuperintendenciaBancos
                try
                {
                    _logger.LogInformation("Procesando políticas SuperintendenciaBancos...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancos = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancos != null)
                        {
                            var estadoBancos = superBancos.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosCedula != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosCedula.Excepcional,
                                        IdPolitica = superBancosCedula.Id,
                                        Politica = superBancosCedula.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosCedula.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosCedula.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancosRucNatural = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancosRucNatural != null)
                        {
                            var estadoBancos = superBancosRucNatural.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosNatural != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosNatural.Excepcional,
                                        IdPolitica = superBancosNatural.Id,
                                        Politica = superBancosNatural.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosNatural.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosNatural.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosEmpresa && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var superBancosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(detalleHistorial.Datos);
                        if (superBancosEmpresa != null)
                        {
                            var estadoBancos = superBancosEmpresa.Estado;
                            if (!string.IsNullOrEmpty(estadoBancos))
                            {
                                var resultadoComparacion = estadoBancos.ToUpper().Equals("HABILITADO");
                                if (superBancosJuridico != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = superBancosJuridico.Excepcional,
                                        IdPolitica = superBancosJuridico.Id,
                                        Politica = superBancosJuridico.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.EstadoSuperBancos, "HABILITADO"),
                                        ValorResultado = estadoBancos.ToUpper(),
                                        Valor = estadoBancos.ToUpper(),
                                        Parametro = "HABILITADO",
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (superBancosJuridico.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(superBancosJuridico.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de SuperintendenciaBancos. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                //#region Predios
                //try
                //{
                //    _logger.LogInformation("Procesando políticas Predios...");
                //    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                //    {
                //        Datos = m.Data
                //    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio && m.Generado);
                //    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                //    {
                //        var predioMunicipio = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(detalleHistorial.Datos);
                //        if (predioMunicipio != null)
                //        {
                //            var nroPredios = predioMunicipio.Detalle.Where(m => m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("CEM")).GroupBy(m => m.Numero).Count();
                //            minimo = 1;
                //            var resultadoComparacion = nroPredios > minimo;
                //            if (prediosRepLegal != null)
                //            {
                //                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                //                {
                //                    IdPolitica = prediosRepLegal.Id,
                //                    Politica = prediosRepLegal.Nombre,
                //                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                //                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Predios, nroPredios.ToString()),
                //                    Valor = nroPredios.ToString(),
                //                    Parametro = minimo.ToString(),
                //                    ResultadoPolitica = resultadoComparacion,
                //                    FechaCreacion = DateTime.Now
                //                });
                //                if (prediosRepLegal.Excepcional && !resultadoComparacion)
                //                {
                //                    observaciones.Add(prediosRepLegal.Nombre);
                //                    aprobacionAdicional = true;
                //                }
                //            }
                //        }
                //    }

                //    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                //    {
                //        Datos = m.Data
                //    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresa && m.Generado);
                //    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                //    {
                //        var predioMunicipioEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(detalleHistorial.Datos);
                //        if (predioMunicipioEmpresa != null)
                //        {
                //            var nroPrediosEmpresa = predioMunicipioEmpresa.Detalle.Where(m => m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("CEM")).GroupBy(m => m.Numero).Count();
                //            minimo = 1;
                //            var resultadoComparacion = nroPrediosEmpresa > minimo;
                //            if (prediosEmpresa != null)
                //            {
                //                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                //                {
                //                    IdPolitica = prediosEmpresa.Id,
                //                    Politica = prediosEmpresa.Nombre,
                //                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Mayor, minimo),
                //                    ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Predios, nroPrediosEmpresa.ToString()),
                //                    Valor = nroPrediosEmpresa.ToString(),
                //                    Parametro = minimo.ToString(),
                //                    ResultadoPolitica = resultadoComparacion,
                //                    FechaCreacion = DateTime.Now
                //                });
                //                if (prediosEmpresa.Excepcional && !resultadoComparacion)
                //                {
                //                    observaciones.Add(prediosEmpresa.Nombre);
                //                    aprobacionAdicional = true;
                //                }
                //            }
                //        }
                //    }
                //}
                //catch (Exception ex)
                //{
                //    _logger.LogError($"Error al procesar políticas de Predios. {ex.Message}");
                //    _logger.LogError(ex, ex.Message);
                //}
                //#endregion

                #region AntecedentesPenales
                try
                {
                    _logger.LogInformation("Procesando políticas Antecedentes Penales...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.AntecedentesPenales && m.Generado);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos))
                    {
                        var antecedentes = JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.Resultado>(detalleHistorial.Datos);
                        if (antecedentes != null && !string.IsNullOrEmpty(antecedentes.Antecedente))
                        {
                            var resultadoComparacion = !antecedentes.Antecedente.ToUpper().Equals("SI");
                            if (antecedentesPenales != null)
                            {
                                detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                {
                                    Excepcional = antecedentesPenales.Excepcional,
                                    IdPolitica = antecedentesPenales.Id,
                                    Politica = antecedentesPenales.Nombre,
                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.AntecedentesPenales, "NO"),
                                    ValorResultado = antecedentes.Antecedente.ToUpper(),
                                    Valor = antecedentes.Antecedente.ToUpper(),
                                    Parametro = "NO",
                                    ResultadoPolitica = resultadoComparacion,
                                    FechaCreacion = DateTime.Now
                                });
                                if (antecedentesPenales.Excepcional && !resultadoComparacion)
                                {
                                    observaciones.Add(antecedentesPenales.Nombre);
                                    aprobacionAdicional = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Antecedentes Penales. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region NoticiaDelito
                try
                {
                    _logger.LogInformation("Procesando políticas Noticias del Delito...");
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosPersona && m.Generado);
                    var entidad = await _historiales.FirstOrDefaultAsync(m => new { m.IdentificacionSecundaria, m.NombresPersona }, m => m.Id == modelo.IdHistorial, null);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos) && entidad != null)
                    {
                        var delitoNoticia = JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(detalleHistorial.Datos);
                        if (delitoNoticia != null)
                        {
                            minimo = 0;
                            var resultadoComparacion = false;
                            var cantidadSujeto = new List<string>();
                            var sujetos = delitoNoticia.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                            if (sujetos != null && sujetos.Any())
                            {
                                var nombreDivido = entidad.NombresPersona?.Split(' ');
                                var listaNombre = new List<bool>();

                                foreach (var item1 in sujetos.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                                {
                                    if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                    {
                                        if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(entidad.IdentificacionSecundaria) && entidad.IdentificacionSecundaria == item1.Cedula)
                                            cantidadSujeto.Add(item1.Numero);
                                        else
                                        {
                                            var nombreSeparado = item1.NombresCompletos.Split(' ');
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (!string.IsNullOrEmpty(entidad.NombresPersona) && entidad.NombresPersona.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                                                cantidadSujeto.Add(item1.Numero);
                                        }
                                    }
                                }
                                cantidadSujeto = cantidadSujeto.Distinct().ToList();
                            }

                            if (cantidadSujeto.Count() > 0)
                            {
                                resultadoComparacion = minimo > cantidadSujeto.Count();
                                if (noticiaDelito != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelito.Excepcional,
                                        IdPolitica = noticiaDelito.Id,
                                        Politica = noticiaDelito.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelito.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelito.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (noticiaDelito != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelito.Excepcional,
                                        IdPolitica = noticiaDelito.Id,
                                        Politica = noticiaDelito.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelito.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelito.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }

                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa && m.Generado);
                    var empresaFiscalia = await _historiales.FirstOrDefaultAsync(m => new { m.Identificacion, m.RazonSocialEmpresa }, m => m.Id == modelo.IdHistorial, null);
                    if (detalleHistorial != null && !string.IsNullOrEmpty(detalleHistorial.Datos) && empresaFiscalia != null)
                    {
                        var delitosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(detalleHistorial.Datos);
                        if (delitosEmpresa != null)
                        {
                            minimo = 0;
                            var resultadoComparacion = false;
                            var cantidadSujeto = new List<string>();
                            var sujetos = delitosEmpresa.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                            if (sujetos != null && sujetos.Any())
                            {
                                foreach (var item1 in sujetos.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                                {
                                    if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                    {
                                        if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(empresaFiscalia.Identificacion) && empresaFiscalia.Identificacion == item1.Cedula)
                                            cantidadSujeto.Add(item1.Numero);
                                        else if (!string.IsNullOrEmpty(item1.NombresCompletos) && !string.IsNullOrEmpty(empresaFiscalia.RazonSocialEmpresa) && empresaFiscalia.RazonSocialEmpresa == item1.NombresCompletos)
                                            cantidadSujeto.Add(item1.Numero);
                                    }
                                }
                                cantidadSujeto = cantidadSujeto.Distinct().ToList();
                            }

                            if (cantidadSujeto.Count() > 0)
                            {
                                resultadoComparacion = minimo > cantidadSujeto.Count();
                                if (noticiaDelitoEmpresa != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelitoEmpresa.Excepcional,
                                        IdPolitica = noticiaDelitoEmpresa.Id,
                                        Politica = noticiaDelitoEmpresa.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelitoEmpresa.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelitoEmpresa.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                            else
                            {
                                resultadoComparacion = true;
                                if (noticiaDelitoEmpresa != null)
                                {
                                    detalleCalificacion.Add(new DetalleCalificacionViewModel()
                                    {
                                        Excepcional = noticiaDelitoEmpresa.Excepcional,
                                        IdPolitica = noticiaDelitoEmpresa.Id,
                                        Politica = noticiaDelitoEmpresa.Nombre,
                                        ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.NoticiaDelito, minimo.ToString()),
                                        ValorResultado = cantidadSujeto.Count().ToString(),
                                        Valor = cantidadSujeto.Count().ToString(),
                                        Parametro = minimo.ToString(),
                                        ResultadoPolitica = resultadoComparacion,
                                        FechaCreacion = DateTime.Now
                                    });
                                    if (noticiaDelitoEmpresa.Excepcional && !resultadoComparacion)
                                    {
                                        observaciones.Add(noticiaDelitoEmpresa.Nombre);
                                        aprobacionAdicional = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de Noticias del Delito. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion

                #region UltimoAnioBalance
                try
                {
                    if (datosSocietario != null && datosSocietario.DirectorioCompania != null && datosSocietario.DirectorioCompania.UltimoBalance != 0)
                    {
                        var fechaActualAnio = DateTime.Now;
                        if (fechaActualAnio.Date >= new DateTime(fechaActualAnio.Year, 7, 1))
                            minimo = fechaActualAnio.Year - 1;
                        else
                            minimo = fechaActualAnio.Year - 2;

                        var resultadoComparacion = datosSocietario.DirectorioCompania.UltimoBalance >= minimo;
                        if (societarioUltimoAnioBalance != null)
                        {
                            detalleCalificacion.Add(new DetalleCalificacionViewModel()
                            {
                                Excepcional = societarioUltimoAnioBalance.Excepcional,
                                IdPolitica = societarioUltimoAnioBalance.Id,
                                Politica = societarioUltimoAnioBalance.Nombre,
                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.IgualAnio, minimo),
                                ValorResultado = datosSocietario.DirectorioCompania.UltimoBalance.ToString(),
                                Valor = datosSocietario.DirectorioCompania.UltimoBalance.ToString(),
                                Parametro = minimo.ToString(),
                                ResultadoPolitica = resultadoComparacion,
                                FechaCreacion = DateTime.Now
                            });
                            if (societarioUltimoAnioBalance.Excepcional && !resultadoComparacion)
                            {
                                observaciones.Add(societarioUltimoAnioBalance.Nombre);
                                aprobacionAdicional = true;
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar política Último Año Balance. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion UltimoAnioBalance

                #region Evaluación Buró
                try
                {
                    _logger.LogInformation("Procesando políticas BURÓ...");
                    Externos.Logica.BuroCredito.Modelos.CreditoRespuesta r_burocredito = null;
                    Externos.Logica.Equifax.Modelos.Resultado r_burocredito_equifax = null;
                    detalleHistorial = await _detalleHistorial.FirstOrDefaultAsync(m => new DatosJsonViewModel
                    {
                        Datos = m.Data
                    }, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito && m.Generado);

                    if (detalleHistorial != null && planBuroCredito != null)
                    {
                        if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                        {
                            r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(detalleHistorial.Datos);
                            if (r_burocredito != null && r_burocredito.Result != null)
                            {
                                ViewBag.EvaluarBuro = true;
                                ViewBag.VisualizarBuro = true;
                                #region Procesamiento Políticas AVAL
                                //Manejo de cuentas corrientes
                                try
                                {
                                    if (manejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito.Result.ManejoCuentasCorrientes.OrderByDescending(x => x.FechaCumplimientoSancion).FirstOrDefault().FechaCumplimientoSancion;
                                        if (fechaCumplimiento != null && fechaCumplimiento != default)
                                        {
                                            var manejoCuentasCorrientesComparacion = DateTime.Now.Date >= fechaCumplimiento.Value.AddYears(+1).Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = manejoCuentasCorrientes.Excepcional,
                                                IdPolitica = manejoCuentasCorrientes.Id,
                                                Politica = manejoCuentasCorrientes.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFechaSansion, fechaCumplimiento.Value.AddYears(+1).Date.ToString("yyyy/MM/dd"), fechaCumplimiento.Value.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.Value.AddYears(+1).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = manejoCuentasCorrientesComparacion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (manejoCuentasCorrientes.Excepcional && !manejoCuentasCorrientesComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Manejo Cuentas Corrientes. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Fecha Cumplimiento Sancion
                                try
                                {
                                    if (FechaCumplimientoSancion != null && r_burocredito.Result.ManejoCuentasCorrientes != null && r_burocredito.Result.ManejoCuentasCorrientes.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito.Result.ManejoCuentasCorrientes.OrderByDescending(x => x.FechaCumplimientoSancion).FirstOrDefault().FechaCumplimientoSancion;
                                        if (fechaCumplimiento != null && fechaCumplimiento != default)
                                        {
                                            var fechaSansion = fechaCumplimiento.Value.Date <= DateTime.Now.Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = FechaCumplimientoSancion.Excepcional,
                                                IdPolitica = FechaCumplimientoSancion.Id,
                                                Politica = FechaCumplimientoSancion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFecha, fechaCumplimiento.Value.Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.Value.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = fechaSansion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (FechaCumplimientoSancion.Excepcional && !fechaSansion)
                                            {
                                                observacionesBuro.Add(FechaCumplimientoSancion.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Fecha Cumplimiento Sanción. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Deuda vigente total
                                try
                                {
                                    if (r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any())
                                    {
                                        //Valor vencido
                                        if (deudaVigenteTotal != null)
                                        {
                                            minimo = 0;
                                            decimal deudaVigenteTotalSuma = (decimal)r_burocredito.Result.DeudaVigenteTotal.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                            var deudaVigenteTotalComparacion = deudaVigenteTotalSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!deudaVigenteTotalComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.SaldoVencido.HasValue && x.SaldoVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.SaldoVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.ValorVencido.HasValue && x.ValorVencido.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesServicio != null && r_burocredito.Result.OperacionesVigentesServicio.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesServicio.Where(x => x.ValorVencido.HasValue && x.ValorVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.ValorVencidoTotal.HasValue && x.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", deudaVigenteTotalSuma.ToString()),
                                                Valor = deudaVigenteTotalSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = deudaVigenteTotalComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (deudaVigenteTotal.Excepcional && !deudaVigenteTotalComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        //Demanda judicial
                                        if (valorDemandaJudicial != null)
                                        {
                                            minimo = 0;
                                            var valorDemandaJudicialSuma = r_burocredito.Result.DeudaVigenteTotal.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                            var valorDemandaJudicialComparacion = valorDemandaJudicialSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!valorDemandaJudicialComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.DemandaJudicial.HasValue && x.DemandaJudicial.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.DemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.ValorDemandaJudicial.HasValue && x.ValorDemandaJudicial.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorDemandaJudicial.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialSuma.ToString()),
                                                Valor = valorDemandaJudicialSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicialComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (valorDemandaJudicial.Excepcional && !valorDemandaJudicialComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        //Cartera castigada
                                        if (valorCarteraCastigada != null)
                                        {
                                            minimo = 0;
                                            var valorCarteraCastigadaSuma = r_burocredito.Result.DeudaVigenteTotal.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                            var valorCarteraCastigadaComparacion = valorCarteraCastigadaSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!valorCarteraCastigadaComparacion)
                                            {
                                                if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesTarjeta.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesBanco.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCobranza.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesCooperativa.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());

                                                if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                                    institucionesBuro.AddRange(r_burocredito.Result.OperacionesVigentesEmpresa.Where(x => x.CarteraCastigada.HasValue && x.CarteraCastigada.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.CarteraCastigada.Value) }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaSuma.ToString()),
                                                Valor = valorCarteraCastigadaSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorCarteraCastigadaComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                            });
                                            if (valorCarteraCastigada.Excepcional && !valorCarteraCastigadaComparacion)
                                            {
                                                observacionesBuro.Add(valorCarteraCastigada.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = deudaVigenteTotal.Excepcional,
                                            IdPolitica = deudaVigenteTotal.Id,
                                            Politica = deudaVigenteTotal.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, deudaVigenteTotal.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial.Excepcional,
                                            IdPolitica = valorDemandaJudicial.Id,
                                            Politica = valorDemandaJudicial.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicial.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCarteraCastigada.Excepcional,
                                            IdPolitica = valorCarteraCastigada.Id,
                                            Politica = valorCarteraCastigada.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigada.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Deuda Vigente Total. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses
                                try
                                {
                                    var historicoTarjeta = r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any() ? r_burocredito.Result.OperacionesHistoricasTarjeta.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.SaldoVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoBanco = r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any() ? r_burocredito.Result.OperacionesHistoricasBanco.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCobranza = r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any() ? r_burocredito.Result.OperacionesHistoricasCobranza.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.DemandaJudicial, RazonSocial = x.NombreCasaCobranza }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCooperativa = r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any() ? r_burocredito.Result.OperacionesHistoricasCooperativa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoEmpresa = r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any() ? r_burocredito.Result.OperacionesHistoricasEmpresa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoServicio = r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any() ? r_burocredito.Result.OperacionesHistoricasServicio.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = (double?)0, DemandaJudicial = (double?)0, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();

                                    if (historicoTarjeta.Any() || historicoBanco.Any() || historicoCobranza.Any() ||
                                        historicoCooperativa.Any() || historicoEmpresa.Any() || historicoServicio.Any())
                                    {
                                        var historico = historicoTarjeta.Concat(historicoBanco).Concat(historicoCobranza).Concat(historicoCooperativa).Concat(historicoEmpresa).Concat(historicoServicio).ToList();

                                        if (valorVencido12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleVencido = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.Vencido == historico.Max(y => y.Vencido)).Select(x => new { x.Vencido, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleVencido != null && detalleVencido.Vencido.HasValue)
                                            {
                                                var valorVencido12MesesComparacion = detalleVencido.Vencido.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleVencido.Vencido.Value, 2).ToString()),
                                                    Valor = detalleVencido.Vencido.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencido12MesesComparacion,
                                                    FechaCorte = detalleVencido.FechaCorte.HasValue && detalleVencido.FechaCorte.Value.Date != default ? detalleVencido.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencido12MesesComparacion && detalleVencido != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencido.RazonSocial, Valor = detalleVencido.Vencido.HasValue ? (decimal)detalleVencido.Vencido.Value : 0 } }) : null
                                                });
                                                if (valorVencido12Meses.Excepcional && !valorVencido12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencido12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (valorDemandaJudicial12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicial = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historico.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleDemandaJudicial != null && detalleDemandaJudicial.DemandaJudicial.HasValue)
                                            {
                                                var valorDemandaJudicial12MesesComparacion = detalleDemandaJudicial.DemandaJudicial.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicial12Meses.Id,
                                                    Politica = valorDemandaJudicial12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleDemandaJudicial.DemandaJudicial.Value, 2).ToString()),
                                                    Valor = detalleDemandaJudicial.DemandaJudicial.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorDemandaJudicial12MesesComparacion,
                                                    FechaCorte = detalleDemandaJudicial.FechaCorte.HasValue && detalleDemandaJudicial.FechaCorte.Value.Date != default ? detalleDemandaJudicial.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorDemandaJudicial12MesesComparacion && detalleDemandaJudicial != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicial.RazonSocial, Valor = detalleDemandaJudicial.DemandaJudicial.HasValue ? (decimal)detalleDemandaJudicial.DemandaJudicial.Value : 0 } }) : null
                                                });
                                                if (valorDemandaJudicial12Meses.Excepcional && !valorDemandaJudicial12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorDemandaJudicial12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicial12Meses.Id,
                                                    Politica = valorDemandaJudicial12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (carteraCastigada12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigada = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historico.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleCarteraCastigada != null && detalleCarteraCastigada.CarteraCastigada.HasValue)
                                            {
                                                var carteraCastigada12MesesComparacion = detalleCarteraCastigada.CarteraCastigada.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigada12Meses.Excepcional,
                                                    IdPolitica = carteraCastigada12Meses.Id,
                                                    Politica = carteraCastigada12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleCarteraCastigada.CarteraCastigada.Value, 2).ToString()),
                                                    Valor = detalleCarteraCastigada.CarteraCastigada.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = carteraCastigada12MesesComparacion,
                                                    FechaCorte = detalleCarteraCastigada.FechaCorte.HasValue && detalleCarteraCastigada.FechaCorte.Value.Date != default ? detalleCarteraCastigada.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !carteraCastigada12MesesComparacion && detalleCarteraCastigada != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigada.RazonSocial, Valor = detalleCarteraCastigada.CarteraCastigada.HasValue ? (decimal)detalleCarteraCastigada.CarteraCastigada : 0 } }) : null
                                                });
                                                if (carteraCastigada12Meses.Excepcional && !carteraCastigada12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(carteraCastigada12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigada12Meses.Excepcional,
                                                    IdPolitica = carteraCastigada12Meses.Id,
                                                    Politica = carteraCastigada12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencido12Meses.Excepcional,
                                            IdPolitica = valorVencido12Meses.Id,
                                            Politica = valorVencido12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicial12Meses.Id,
                                            Politica = valorDemandaJudicial12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigada12Meses.Excepcional,
                                            IdPolitica = carteraCastigada12Meses.Id,
                                            Politica = carteraCastigada12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses
                                try
                                {
                                    var historicoTarjetaMayor12Meses = r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any() ? r_burocredito.Result.OperacionesHistoricasTarjeta.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.SaldoVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoBancoMayor12Meses = r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any() ? r_burocredito.Result.OperacionesHistoricasBanco.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCobranzaMayor12Meses = r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any() ? r_burocredito.Result.OperacionesHistoricasCobranza.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.DemandaJudicial, RazonSocial = x.NombreCasaCobranza }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoCooperativaMayor12Meses = r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any() ? r_burocredito.Result.OperacionesHistoricasCooperativa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoEmpresaMayor12Meses = r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any() ? r_burocredito.Result.OperacionesHistoricasEmpresa.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencidoTotal, CarteraCastigada = x.CarteraCastigada, DemandaJudicial = x.ValorDemandaJudicial, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();
                                    var historicoServicioMayor12Meses = r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any() ? r_burocredito.Result.OperacionesHistoricasServicio.Where(x => new DateTime(x.FechaCorte.Value.Year, x.FechaCorte.Value.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1)).Select(x => new OperacionHistoricaViewModel { FechaCorte = x.FechaCorte, Vencido = x.ValorVencido, CarteraCastigada = (double?)0, DemandaJudicial = (double?)0, RazonSocial = x.RazonSocial }).ToList() : new List<OperacionHistoricaViewModel>();

                                    if (historicoTarjetaMayor12Meses.Any() || historicoBancoMayor12Meses.Any() || historicoCobranzaMayor12Meses.Any() ||
                                        historicoCooperativaMayor12Meses.Any() || historicoEmpresaMayor12Meses.Any() || historicoServicioMayor12Meses.Any())
                                    {
                                        var historicoMayor12Meses = historicoTarjetaMayor12Meses.Concat(historicoBancoMayor12Meses).Concat(historicoCobranzaMayor12Meses).Concat(historicoCooperativaMayor12Meses).Concat(historicoEmpresaMayor12Meses).Concat(historicoServicioMayor12Meses).ToList();

                                        if (valorVencidoMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleVencidoMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.Vencido == historicoMayor12Meses.Max(y => y.Vencido)).Select(x => new { x.Vencido, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleVencidoMayor12Meses != null && detalleVencidoMayor12Meses.Vencido.HasValue)
                                            {
                                                var valorVencidoMayor12MesesComparacion = detalleVencidoMayor12Meses.Vencido.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleVencidoMayor12Meses.Vencido.Value, 2).ToString()),
                                                    Valor = detalleVencidoMayor12Meses.Vencido.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencidoMayor12MesesComparacion,
                                                    FechaCorte = detalleVencidoMayor12Meses.FechaCorte.HasValue && detalleVencidoMayor12Meses.FechaCorte.Value.Date != default ? detalleVencidoMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencidoMayor12MesesComparacion && detalleVencidoMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencidoMayor12Meses.RazonSocial, Valor = detalleVencidoMayor12Meses.Vencido.HasValue ? (decimal)detalleVencidoMayor12Meses.Vencido.Value : 0 } }) : null
                                                });
                                                if (valorVencidoMayor12Meses.Excepcional && !valorVencidoMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencidoMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }

                                        if (valorDemandaJudicialMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicialMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historicoMayor12Meses.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleDemandaJudicialMayor12Meses != null && detalleDemandaJudicialMayor12Meses.DemandaJudicial.HasValue)
                                            {
                                                var valorDemandaJudicialMayor12MesesComparacion = detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                    Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value, 2).ToString()),
                                                    Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorDemandaJudicialMayor12MesesComparacion,
                                                    FechaCorte = detalleDemandaJudicialMayor12Meses.FechaCorte.HasValue && detalleDemandaJudicialMayor12Meses.FechaCorte.Value.Date != default ? detalleDemandaJudicialMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorDemandaJudicialMayor12MesesComparacion && detalleDemandaJudicialMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicialMayor12Meses.RazonSocial, Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.HasValue ? (decimal)detalleDemandaJudicialMayor12Meses.DemandaJudicial.Value : 0 } }) : null
                                                });
                                                if (valorDemandaJudicialMayor12Meses.Excepcional && !valorDemandaJudicialMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorDemandaJudicialMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                    IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                    Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });

                                        }

                                        if (carteraCastigadaMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigadaMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historicoMayor12Meses.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.RazonSocial }).ToList().FirstOrDefault();
                                            if (detalleCarteraCastigadaMayor12Meses != null && detalleCarteraCastigadaMayor12Meses.CarteraCastigada.HasValue)
                                            {
                                                var carteraCastigadaMayor12MesesComparacion = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                    IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                    Politica = carteraCastigadaMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", Math.Round(detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value, 2).ToString()),
                                                    Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = carteraCastigadaMayor12MesesComparacion,
                                                    FechaCorte = detalleCarteraCastigadaMayor12Meses.FechaCorte.HasValue && detalleCarteraCastigadaMayor12Meses.FechaCorte.Value.Date != default ? detalleCarteraCastigadaMayor12Meses.FechaCorte.Value.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !carteraCastigadaMayor12MesesComparacion && detalleCarteraCastigadaMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigadaMayor12Meses.RazonSocial, Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.HasValue ? (decimal)detalleCarteraCastigadaMayor12Meses.CarteraCastigada.Value : 0 } }) : null
                                                });
                                                if (carteraCastigadaMayor12Meses.Excepcional && !carteraCastigadaMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(carteraCastigadaMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                            else
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                    IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                    Politica = carteraCastigadaMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                    Valor = "0",
                                                    Parametro = "0",
                                                    ResultadoPolitica = true,
                                                    FechaCorte = null,
                                                    FechaCreacion = DateTime.Now
                                                });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoMayor12Meses.Excepcional,
                                            IdPolitica = valorVencidoMayor12Meses.Id,
                                            Politica = valorVencidoMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                            Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                            IdPolitica = carteraCastigadaMayor12Meses.Id,
                                            Politica = carteraCastigadaMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cuota vencidos
                                try
                                {
                                    if (valorCuotaVencidos != null && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any())
                                    {
                                        minimo = 0;
                                        var valorCuotaVencidosSuma = r_burocredito.Result.GastoFinanciero.Where(m => m.CuotaVencidos.HasValue).Sum(m => m.CuotaVencidos.Value);
                                        var valorCuotaVencidosComparacion = valorCuotaVencidosSuma <= minimo;

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCuotaVencidosSuma.ToString()),
                                            Valor = valorCuotaVencidosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorCuotaVencidosComparacion,
                                            FechaCreacion = DateTime.Now
                                        });
                                        if (valorCuotaVencidos.Excepcional && !valorCuotaVencidosComparacion)
                                        {
                                            observacionesBuro.Add(valorCuotaVencidos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCuotaVencidos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones vigentes tarjetas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesTarjeta != null && r_burocredito.Result.OperacionesVigentesTarjeta.Any())
                                //    {
                                //        if (saldoVencidoTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var saldoVencidoTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Where(m => m.SaldoVencido.HasValue).Sum(m => m.SaldoVencido.Value);
                                //            var saldoVencidoTarjetasComparacion = saldoVencidoTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = saldoVencidoTarjetas.Id,
                                //                Politica = saldoVencidoTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", saldoVencidoTarjetasSuma.ToString()),
                                //                Valor = saldoVencidoTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = saldoVencidoTarjetasComparacion
                                //            });
                                //            if (saldoVencidoTarjetas.Excepcional && !saldoVencidoTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(saldoVencidoTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialTarjetasComparacion = valorDemandaJudicialTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialTarjetas.Id,
                                //                Politica = valorDemandaJudicialTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialTarjetasSuma.ToString()),
                                //                Valor = valorDemandaJudicialTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialTarjetasComparacion
                                //            });
                                //            if (valorDemandaJudicialTarjetas.Excepcional && !valorDemandaJudicialTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (carteraCastigadaTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var carteraCastigadaTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Sum(m => m.CarteraCastigada ?? 0);
                                //            var carteraCastigadaTarjetasComparacion = carteraCastigadaTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = carteraCastigadaTarjetas.Id,
                                //                Politica = carteraCastigadaTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaTarjetasSuma.ToString()),
                                //                Valor = carteraCastigadaTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = carteraCastigadaTarjetasComparacion
                                //            });
                                //            if (carteraCastigadaTarjetas.Excepcional && !carteraCastigadaTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(carteraCastigadaTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadTarjetas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadTarjetasSuma = r_burocredito.Result.OperacionesVigentesTarjeta.Max(m => m.DiasMorosidad) ?? 0;
                                //            var diasMorosidadTarjetasComparacion = diasMorosidadTarjetasSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadTarjetas.Id,
                                //                Politica = diasMorosidadTarjetas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadTarjetasSuma.ToString()),
                                //                Valor = diasMorosidadTarjetasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadTarjetasComparacion
                                //            });
                                //            if (diasMorosidadTarjetas.Excepcional && !diasMorosidadTarjetasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadTarjetas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = saldoVencidoTarjetas.Id,
                                //            Politica = saldoVencidoTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, saldoVencidoTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialTarjetas.Id,
                                //            Politica = valorDemandaJudicialTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = carteraCastigadaTarjetas.Id,
                                //            Politica = carteraCastigadaTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, carteraCastigadaTarjetas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadTarjetas.Id,
                                //            Politica = diasMorosidadTarjetas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadTarjetas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Tarjetas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes bancos                            
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesBanco != null && r_burocredito.Result.OperacionesVigentesBanco.Any())
                                //    {
                                //        if (valorVencidoTotalBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalBancosComparacion = valorVencidoTotalBancosSuma <= minimo;
                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalBancos.Id,
                                //                Politica = valorVencidoTotalBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalBancosSuma.ToString()),
                                //                Valor = valorVencidoTotalBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalBancosComparacion
                                //            });
                                //            if (valorVencidoTotalBancos.Excepcional && !valorVencidoTotalBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialBancosComparacion = valorDemandaJudicialBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialBancos.Id,
                                //                Politica = valorDemandaJudicialBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialBancosSuma.ToString()),
                                //                Valor = valorDemandaJudicialBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialBancosComparacion
                                //            });
                                //            if (valorDemandaJudicialBancos.Excepcional && !valorDemandaJudicialBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaBancosComparacion = valorCarteraCastigadaBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaBancos.Id,
                                //                Politica = valorCarteraCastigadaBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaBancosSuma.ToString()),
                                //                Valor = valorCarteraCastigadaBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaBancosComparacion
                                //            });
                                //            if (valorCarteraCastigadaBancos.Excepcional && !valorCarteraCastigadaBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadBancos != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadBancosSuma = r_burocredito.Result.OperacionesVigentesBanco.Where(m => m.DiasMorosidad.HasValue).Max(m => m.DiasMorosidad.Value);
                                //            var diasMorosidadBancosComparacion = diasMorosidadBancosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadBancos.Id,
                                //                Politica = diasMorosidadBancos.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadBancosSuma.ToString()),
                                //                Valor = diasMorosidadBancosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadBancosComparacion
                                //            });
                                //            if (diasMorosidadBancos.Excepcional && !diasMorosidadBancosComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadBancos.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalBancos.Id,
                                //            Politica = valorVencidoTotalBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalBancos.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialBancos.Id,
                                //            Politica = valorDemandaJudicialBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialBancos.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaBancos.Id,
                                //            Politica = valorCarteraCastigadaBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaBancos.Nombre)

                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadBancos.Id,
                                //            Politica = diasMorosidadBancos.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadBancos.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Bancos. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes cooperativas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesCooperativa != null && r_burocredito.Result.OperacionesVigentesCooperativa.Any())
                                //    {
                                //        if (valorVencidoTotalCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalCooperativasComparacion = valorVencidoTotalCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalCooperativas.Id,
                                //                Politica = valorVencidoTotalCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalCooperativasSuma.ToString()),
                                //                Valor = valorVencidoTotalCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalCooperativasComparacion
                                //            });
                                //            if (valorVencidoTotalCooperativas.Excepcional && !valorVencidoTotalCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialCooperativasComparacion = valorDemandaJudicialCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialCooperativas.Id,
                                //                Politica = valorDemandaJudicialCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialCooperativasSuma.ToString()),
                                //                Valor = valorDemandaJudicialCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialCooperativasComparacion
                                //            });
                                //            if (valorDemandaJudicialCooperativas.Excepcional && !valorDemandaJudicialCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaCooperativasComparacion = valorCarteraCastigadaCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaCooperativas.Id,
                                //                Politica = valorCarteraCastigadaCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaCooperativasSuma.ToString()),
                                //                Valor = valorCarteraCastigadaCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaCooperativasComparacion
                                //            });
                                //            if (valorCarteraCastigadaCooperativas.Excepcional && !valorCarteraCastigadaCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadCooperativas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadCooperativasSuma = r_burocredito.Result.OperacionesVigentesCooperativa.Where(m => m.DiasMorosidad.HasValue).Max(m => m.DiasMorosidad.Value);
                                //            var diasMorosidadCooperativasComparacion = diasMorosidadCooperativasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadCooperativas.Id,
                                //                Politica = diasMorosidadCooperativas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadCooperativasSuma.ToString()),
                                //                Valor = diasMorosidadCooperativasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadCooperativasComparacion
                                //            });
                                //            if (diasMorosidadCooperativas.Excepcional && !diasMorosidadCooperativasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadCooperativas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalCooperativas.Id,
                                //            Politica = valorVencidoTotalCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialCooperativas.Id,
                                //            Politica = valorDemandaJudicialCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaCooperativas.Id,
                                //            Politica = valorCarteraCastigadaCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaCooperativas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadCooperativas.Id,
                                //            Politica = diasMorosidadCooperativas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadCooperativas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes empresas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesEmpresa != null && r_burocredito.Result.OperacionesVigentesEmpresa.Any())
                                //    {
                                //        if (valorVencidoTotalEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoTotalEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value);
                                //            var valorVencidoTotalEmpresasComparacion = valorVencidoTotalEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoTotalEmpresas.Id,
                                //                Politica = valorVencidoTotalEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoTotalEmpresasSuma.ToString()),
                                //                Valor = valorVencidoTotalEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoTotalEmpresasComparacion
                                //            });
                                //            if (valorVencidoTotalEmpresas.Excepcional && !valorVencidoTotalEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoTotalEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorDemandaJudicialEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorDemandaJudicialEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.ValorDemandaJudicial.HasValue).Sum(m => m.ValorDemandaJudicial.Value);
                                //            var valorDemandaJudicialEmpresasComparacion = valorDemandaJudicialEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorDemandaJudicialEmpresas.Id,
                                //                Politica = valorDemandaJudicialEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorDemandaJudicialEmpresasSuma.ToString()),
                                //                Valor = valorDemandaJudicialEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorDemandaJudicialEmpresasComparacion
                                //            });
                                //            if (valorDemandaJudicialEmpresas.Excepcional && !valorDemandaJudicialEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorDemandaJudicialEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (valorCarteraCastigadaEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorCarteraCastigadaEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var valorCarteraCastigadaEmpresasComparacion = valorCarteraCastigadaEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorCarteraCastigadaEmpresas.Id,
                                //                Politica = valorCarteraCastigadaEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCarteraCastigadaEmpresasSuma.ToString()),
                                //                Valor = valorCarteraCastigadaEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorCarteraCastigadaEmpresasComparacion
                                //            });
                                //            if (valorCarteraCastigadaEmpresas.Excepcional && !valorCarteraCastigadaEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorCarteraCastigadaEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (diasMorosidadEmpresas != null)
                                //        {
                                //            minimo = 0;
                                //            var diasMorosidadEmpresasSuma = r_burocredito.Result.OperacionesVigentesEmpresa.Where(m => m.DiasVencido.HasValue).Max(m => m.DiasVencido.Value);
                                //            var diasMorosidadEmpresasComparacion = diasMorosidadEmpresasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = diasMorosidadEmpresas.Id,
                                //                Politica = diasMorosidadEmpresas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, diasMorosidadEmpresasSuma.ToString()),
                                //                Valor = diasMorosidadEmpresasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = diasMorosidadEmpresasComparacion
                                //            });
                                //            if (diasMorosidadEmpresas.Excepcional && !diasMorosidadEmpresasComparacion)
                                //            {
                                //                observacionesBuro.Add(diasMorosidadEmpresas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoTotalEmpresas.Id,
                                //            Politica = valorVencidoTotalEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoTotalEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorDemandaJudicialEmpresas.Id,
                                //            Politica = valorDemandaJudicialEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicialEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorCarteraCastigadaEmpresas.Id,
                                //            Politica = valorCarteraCastigadaEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigadaEmpresas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = diasMorosidadEmpresas.Id,
                                //            Politica = diasMorosidadEmpresas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, diasMorosidadEmpresas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Empresas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes servicios
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesServicio != null && r_burocredito.Result.OperacionesVigentesServicio.Any())
                                //    {
                                //        if (valorVencidoVigentesServicios != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoVigentesServiciosSuma = r_burocredito.Result.OperacionesVigentesServicio.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                //            var valorVencidoVigentesServiciosComparacion = valorVencidoVigentesServiciosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoVigentesServicios.Id,
                                //                Politica = valorVencidoVigentesServicios.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoVigentesServiciosSuma.ToString()),
                                //                Valor = valorVencidoVigentesServiciosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoVigentesServiciosComparacion
                                //            });
                                //            if (valorVencidoVigentesServicios.Excepcional && !valorVencidoVigentesServiciosComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoVigentesServicios.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (numeroDiasVencidoVigentesServicios != null)
                                //        {
                                //            minimo = 0;
                                //            var numeroDiasVencidoVigentesServiciosSuma = r_burocredito.Result.OperacionesVigentesServicio.Where(m => m.NumeroDiasVencido.HasValue).Max(m => m.NumeroDiasVencido.Value);
                                //            var numeroDiasVencidoVigentesServiciosComparacion = numeroDiasVencidoVigentesServiciosSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = numeroDiasVencidoVigentesServicios.Id,
                                //                Politica = numeroDiasVencidoVigentesServicios.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, numeroDiasVencidoVigentesServiciosSuma.ToString()),
                                //                Valor = numeroDiasVencidoVigentesServiciosSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = numeroDiasVencidoVigentesServiciosComparacion
                                //            });
                                //            if (numeroDiasVencidoVigentesServicios.Excepcional && !numeroDiasVencidoVigentesServiciosComparacion)
                                //            {
                                //                observacionesBuro.Add(numeroDiasVencidoVigentesServicios.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoVigentesServicios.Id,
                                //            Politica = valorVencidoVigentesServicios.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoVigentesServicios.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = numeroDiasVencidoVigentesServicios.Id,
                                //            Politica = numeroDiasVencidoVigentesServicios.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, numeroDiasVencidoVigentesServicios.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Servicios. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones vigentes cobranzas
                                //try
                                //{
                                //    if (r_burocredito.Result.OperacionesVigentesCobranza != null && r_burocredito.Result.OperacionesVigentesCobranza.Any())
                                //    {
                                //        if (valorVencidoVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var valorVencidoVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value);
                                //            var valorVencidoVigentesCobranzasComparacion = valorVencidoVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = valorVencidoVigentesCobranzas.Id,
                                //                Politica = valorVencidoVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoVigentesCobranzasSuma.ToString()),
                                //                Valor = valorVencidoVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = valorVencidoVigentesCobranzasComparacion
                                //            });
                                //            if (valorVencidoVigentesCobranzas.Excepcional && !valorVencidoVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(valorVencidoVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (demandaJudicialVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var demandaJudicialVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.DemandaJudicial.HasValue).Sum(m => m.DemandaJudicial.Value);
                                //            var demandaJudicialVigentesCobranzasComparacion = demandaJudicialVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = demandaJudicialVigentesCobranzas.Id,
                                //                Politica = demandaJudicialVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", demandaJudicialVigentesCobranzasSuma.ToString()),
                                //                Valor = demandaJudicialVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = demandaJudicialVigentesCobranzasComparacion
                                //            });
                                //            if (demandaJudicialVigentesCobranzas.Excepcional && !demandaJudicialVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(demandaJudicialVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (carteraCastigadaVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var carteraCastigadaVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.CarteraCastigada.HasValue).Sum(m => m.CarteraCastigada.Value);
                                //            var carteraCastigadaVigentesCobranzasComparacion = carteraCastigadaVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = carteraCastigadaVigentesCobranzas.Id,
                                //                Politica = carteraCastigadaVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaVigentesCobranzasSuma.ToString()),
                                //                Valor = carteraCastigadaVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = carteraCastigadaVigentesCobranzasComparacion
                                //            });
                                //            if (carteraCastigadaVigentesCobranzas.Excepcional && !carteraCastigadaVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(carteraCastigadaVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }

                                //        if (numeroDiasVencidoVigentesCobranzas != null)
                                //        {
                                //            minimo = 0;
                                //            var numeroDiasVencidoVigentesCobranzasSuma = r_burocredito.Result.OperacionesVigentesCobranza.Where(m => m.NumeroDiasVencido.HasValue).Max(m => m.NumeroDiasVencido.Value);
                                //            var numeroDiasVencidoVigentesCobranzasComparacion = numeroDiasVencidoVigentesCobranzasSuma <= minimo;

                                //            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //            {
                                //                IdPolitica = numeroDiasVencidoVigentesCobranzas.Id,
                                //                Politica = numeroDiasVencidoVigentesCobranzas.Nombre,
                                //                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, minimo.ToString()),
                                //                ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, numeroDiasVencidoVigentesCobranzasSuma.ToString()),
                                //                Valor = numeroDiasVencidoVigentesCobranzasSuma.ToString(),
                                //                Parametro = minimo.ToString(),
                                //                ResultadoPolitica = numeroDiasVencidoVigentesCobranzasComparacion
                                //            });
                                //            if (numeroDiasVencidoVigentesCobranzas.Excepcional && !numeroDiasVencidoVigentesCobranzasComparacion)
                                //            {
                                //                observacionesBuro.Add(numeroDiasVencidoVigentesCobranzas.Nombre);
                                //                aprobacionAdicionalBuro = true;
                                //            }
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = valorVencidoVigentesCobranzas.Id,
                                //            Politica = valorVencidoVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = demandaJudicialVigentesCobranzas.Id,
                                //            Politica = demandaJudicialVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, demandaJudicialVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = carteraCastigadaVigentesCobranzas.Id,
                                //            Politica = carteraCastigadaVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, carteraCastigadaVigentesCobranzas.Nombre)
                                //        });

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = numeroDiasVencidoVigentesCobranzas.Id,
                                //            Politica = numeroDiasVencidoVigentesCobranzas.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.Maximodias, "0"),
                                //            ValorResultado = string.Format(Dominio.Constantes.TextoReferencia.Dias, "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, numeroDiasVencidoVigentesCobranzas.Nombre)
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cobranzas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Indicadores deuda
                                //try
                                //{
                                //    if (mayorSaldoVencido36Meses != null && r_burocredito.Result.IndicadoresDeuda != null && r_burocredito.Result.IndicadoresDeuda.Any())
                                //    {
                                //        minimo = 0;
                                //        var mayorSaldoVencido36MesesSuma = r_burocredito.Result.IndicadoresDeuda.Where(m => m.MaySaldoVencDirecta36M.HasValue).Sum(m => m.MaySaldoVencDirecta36M.Value);
                                //        var mayorSaldoVencido36MesesComparacion = mayorSaldoVencido36MesesSuma <= minimo;

                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = mayorSaldoVencido36Meses.Id,
                                //            Politica = mayorSaldoVencido36Meses.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", mayorSaldoVencido36MesesSuma.ToString()),
                                //            Valor = mayorSaldoVencido36MesesSuma.ToString(),
                                //            Parametro = minimo.ToString(),
                                //            ResultadoPolitica = mayorSaldoVencido36MesesComparacion,
                                //            FechaCreacion = DateTime.Now
                                //        });
                                //        if (mayorSaldoVencido36Meses.Excepcional && !mayorSaldoVencido36MesesComparacion)
                                //        {
                                //            observacionesBuro.Add(mayorSaldoVencido36Meses.Nombre);
                                //            aprobacionAdicionalBuro = true;
                                //        }
                                //    }
                                //    else
                                //    {
                                //        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                //        {
                                //            IdPolitica = mayorSaldoVencido36Meses.Id,
                                //            Politica = mayorSaldoVencido36Meses.Nombre,
                                //            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                //            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                //            Valor = "0",
                                //            Parametro = "0",
                                //            ResultadoPolitica = true,
                                //            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, mayorSaldoVencido36Meses.Nombre),
                                //            FechaCreacion = DateTime.Now
                                //        });
                                //    }
                                //}
                                //catch (Exception ex)
                                //{
                                //    _logger.LogError($"Error al procesar políticas Indicadores Deudas. {ex.Message}");
                                //    _logger.LogError(ex, ex.Message);
                                //}

                                //Operaciones históricas tarjetas                             
                                try
                                {
                                    if (valorVencidoHistoricoTarjetas != null && r_burocredito.Result.OperacionesHistoricasTarjeta != null && r_burocredito.Result.OperacionesHistoricasTarjeta.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoTarjetasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasTarjeta.Where(m => m.SaldoVencido.HasValue).Sum(m => m.SaldoVencido.Value), 2);
                                        var valorVencidoHistoricoTarjetasComparacion = valorVencidoHistoricoTarjetasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoTarjetasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasTarjeta.Where(m => m.SaldoVencido.HasValue && m.SaldoVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.SaldoVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoTarjetas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoTarjetas.Id,
                                            Politica = valorVencidoHistoricoTarjetas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoTarjetasSuma.ToString()),
                                            Valor = valorVencidoHistoricoTarjetasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoTarjetasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoTarjetas.Excepcional && !valorVencidoHistoricoTarjetasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoTarjetas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoTarjetas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoTarjetas.Id,
                                            Politica = valorVencidoHistoricoTarjetas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoTarjetas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Tarjetas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas bancos                            
                                try
                                {
                                    if (valorVencidoHistoricoBancos != null && r_burocredito.Result.OperacionesHistoricasBanco != null && r_burocredito.Result.OperacionesHistoricasBanco.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoBancosSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasBanco.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoBancosComparacion = valorVencidoHistoricoBancosSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoBancosComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasBanco.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoBancos.Excepcional,
                                            IdPolitica = valorVencidoHistoricoBancos.Id,
                                            Politica = valorVencidoHistoricoBancos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoBancosSuma.ToString()),
                                            Valor = valorVencidoHistoricoBancosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoBancosComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoBancos.Excepcional && !valorVencidoHistoricoBancosComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoBancos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoBancos.Excepcional,
                                            IdPolitica = valorVencidoHistoricoBancos.Id,
                                            Politica = valorVencidoHistoricoBancos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoBancos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Bancos. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas cooperativas                            
                                try
                                {
                                    if (valorVencidoHistoricoCooperativas != null && r_burocredito.Result.OperacionesHistoricasCooperativa != null && r_burocredito.Result.OperacionesHistoricasCooperativa.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoCooperativasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasCooperativa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoCooperativasComparacion = valorVencidoHistoricoCooperativasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoCooperativasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasCooperativa.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCooperativas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCooperativas.Id,
                                            Politica = valorVencidoHistoricoCooperativas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoCooperativasSuma.ToString()),
                                            Valor = valorVencidoHistoricoCooperativasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoCooperativasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoCooperativas.Excepcional && !valorVencidoHistoricoCooperativasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoCooperativas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCooperativas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCooperativas.Id,
                                            Politica = valorVencidoHistoricoCooperativas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoCooperativas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas empresas                            
                                try
                                {
                                    if (valorVencidoHistoricoEmpresas != null && r_burocredito.Result.OperacionesHistoricasEmpresa != null && r_burocredito.Result.OperacionesHistoricasEmpresa.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoEmpresasSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasEmpresa.Where(m => m.ValorVencidoTotal.HasValue).Sum(m => m.ValorVencidoTotal.Value), 2);
                                        var valorVencidoHistoricoEmpresasComparacion = valorVencidoHistoricoEmpresasSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoEmpresasComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasEmpresa.Where(m => m.ValorVencidoTotal.HasValue && m.ValorVencidoTotal.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencidoTotal.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoEmpresas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoEmpresas.Id,
                                            Politica = valorVencidoHistoricoEmpresas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoEmpresasSuma.ToString()),
                                            Valor = valorVencidoHistoricoEmpresasSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoEmpresasComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoEmpresas.Excepcional && !valorVencidoHistoricoEmpresasComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoEmpresas.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoEmpresas.Excepcional,
                                            IdPolitica = valorVencidoHistoricoEmpresas.Id,
                                            Politica = valorVencidoHistoricoEmpresas.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoEmpresas.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Empresas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas servicio                            
                                try
                                {
                                    if (valorVencidoHistoricoServicio != null && r_burocredito.Result.OperacionesHistoricasServicio != null && r_burocredito.Result.OperacionesHistoricasServicio.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoServicioSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasServicio.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value), 2);
                                        var valorVencidoHistoricoServicioComparacion = valorVencidoHistoricoServicioSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoServicioComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasServicio.Where(m => m.ValorVencido.HasValue && m.ValorVencido.Value != 0).GroupBy(m => m.RazonSocial).Select(m => new InstitucionViewModel { Nombre = m.First().RazonSocial, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoServicio.Excepcional,
                                            IdPolitica = valorVencidoHistoricoServicio.Id,
                                            Politica = valorVencidoHistoricoServicio.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoServicioSuma.ToString()),
                                            Valor = valorVencidoHistoricoServicioSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoServicioComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoServicio.Excepcional && !valorVencidoHistoricoServicioComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoServicio.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoServicio.Excepcional,
                                            IdPolitica = valorVencidoHistoricoServicio.Id,
                                            Politica = valorVencidoHistoricoServicio.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoServicio.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Servicios. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones históricas cobranza                            
                                try
                                {
                                    if (valorVencidoHistoricoCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza != null && r_burocredito.Result.OperacionesHistoricasCobranza.Any())
                                    {
                                        minimo = 0;
                                        var valorVencidoHistoricoCobranzaSuma = Math.Round(r_burocredito.Result.OperacionesHistoricasCobranza.Where(m => m.ValorVencido.HasValue).Sum(m => m.ValorVencido.Value), 2);
                                        var valorVencidoHistoricoCobranzaComparacion = valorVencidoHistoricoCobranzaSuma <= minimo;
                                        var institucionesBuro = new List<InstitucionViewModel>();
                                        if (!valorVencidoHistoricoCobranzaComparacion)
                                            institucionesBuro.AddRange(r_burocredito.Result.OperacionesHistoricasCobranza.Where(m => m.ValorVencido.HasValue && m.ValorVencido.Value != 0).GroupBy(m => m.NombreCasaCobranza).Select(m => new InstitucionViewModel { Nombre = m.First().NombreCasaCobranza, Valor = (decimal)m.Sum(n => n.ValorVencido.Value) }).ToList());

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCobranza.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCobranza.Id,
                                            Politica = valorVencidoHistoricoCobranza.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorVencidoHistoricoCobranzaSuma.ToString()),
                                            Valor = valorVencidoHistoricoCobranzaSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorVencidoHistoricoCobranzaComparacion,
                                            FechaCreacion = DateTime.Now,
                                            Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro) : null
                                        });
                                        if (valorVencidoHistoricoCobranza.Excepcional && !valorVencidoHistoricoCobranzaComparacion)
                                        {
                                            observacionesBuro.Add(valorVencidoHistoricoCobranza.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoHistoricoCobranza.Excepcional,
                                            IdPolitica = valorVencidoHistoricoCobranza.Id,
                                            Politica = valorVencidoHistoricoCobranza.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorVencidoHistoricoCobranza.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Cobranzas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }
                                #endregion Procesamiento Políticas AVAL

                                #region AYASA
                                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1792899036001)
                                {
                                    datosPersonaBuro.ModeloAutomotrizaAyasa = r_burocredito.Result.ModeloAutomotrizAyasa.FirstOrDefault();
                                    datosPersonaBuro.CalificacionClienteAyasa = true;
                                }
                                #endregion AYASA

                                #region BCapital
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                                {
                                    if (r_burocredito.Result != null)
                                        datosPersonaBuro.ModeloBCapital = r_burocredito;

                                    datosPersonaBuro.CalificacionBCapital = true;
                                }
                                #endregion BCapital

                                #region Cooperativas
                                if (planBuroCredito.ModeloCooperativas)
                                {
                                    if (r_burocredito.Result != null)
                                        datosPersonaBuro.ModeloCooperativas = r_burocredito;

                                    datosPersonaBuro.CalificacionCooperativas = true;
                                }
                                #endregion Cooperativas

                                #region Calificación
                                datosPersonaBuro.Score = 0;
                                if (r_burocredito.Result.ScoreEmpresa != null && r_burocredito.Result.ScoreEmpresa.Any())
                                    datosPersonaBuro.Score = r_burocredito.Result.ScoreEmpresa.Select(m => m.ScoreEmpresa).FirstOrDefault();

                                tipoFuenteBuro = Dominio.Tipos.FuentesBuro.Aval;
                                if (datosPersonaBuro.Score < Dominio.Constantes.ConstantesCalificacion.MinimoScoreBuro)
                                {
                                    observacionesBuro.Add("Score");
                                    aprobacionAdicionalBuro = true;
                                }

                                if (detalleCalificacionBuro != null && detalleCalificacionBuro.Any())
                                {
                                    datosPersonaBuro.Identificacion = identificacionOriginal;
                                    datosPersonaBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                    datosPersonaBuro.TipoFuente = tipoFuenteBuro;
                                    datosPersonaBuro.TotalValidados = detalleCalificacionBuro.Count;
                                    datosPersonaBuro.TotalAprobados = detalleCalificacionBuro.Count(m => m.ResultadoPolitica);
                                    datosPersonaBuro.TotalRechazados = detalleCalificacionBuro.Count(m => !m.ResultadoPolitica);

                                    if (datosPersonaBuro.TotalValidados > 0) datosPersonaBuro.Calificacion = Math.Round((decimal)datosPersonaBuro.TotalAprobados * 100 / datosPersonaBuro.TotalValidados, 2, MidpointRounding.AwayFromZero);
                                    datosPersonaBuro.Aprobado = datosPersonaBuro.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                                    datosPersonaBuro.DetalleCalificacion = detalleCalificacionBuro;

                                    if (aprobacionAdicionalBuro)
                                    {
                                        datosPersonaBuro.Observaciones = string.Join(". ", observacionesBuro);
                                        datosPersonaBuro.Aprobado = false;
                                    }

                                    var calificacionesDetalleBuro = datosPersonaBuro.DetalleCalificacion.Select(m => new DetalleCalificacion
                                    {
                                        IdPolitica = m.IdPolitica,
                                        Valor = m.Valor,
                                        Parametro = m.Parametro,
                                        Aprobado = m.ResultadoPolitica,
                                        Datos = m.ValorResultado,
                                        ReferenciaMinima = m.ReferenciaMinima,
                                        UsuarioCreacion = idUsuario,
                                        FechaCorte = m.FechaCorte,
                                        FechaCreacion = m.FechaCreacion,
                                        Instituciones = m.Instituciones
                                    }).ToList();

                                    if (actualizarBuro)
                                    {
                                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnteriorBuro);
                                        calificacionAnteriorBuro.DetalleCalificacion = calificacionesDetalleBuro;
                                        calificacionAnteriorBuro.Puntaje = datosPersonaBuro.Calificacion;
                                        calificacionAnteriorBuro.Aprobado = datosPersonaBuro.Aprobado;
                                        calificacionAnteriorBuro.NumeroAprobados = datosPersonaBuro.TotalAprobados;
                                        calificacionAnteriorBuro.NumeroRechazados = datosPersonaBuro.TotalRechazados;
                                        calificacionAnteriorBuro.TotalVerificados = datosPersonaBuro.TotalValidados;
                                        calificacionAnteriorBuro.Observaciones = datosPersonaBuro.Observaciones;
                                        calificacionAnteriorBuro.UsuarioModificacion = idUsuario;
                                        calificacionAnteriorBuro.FechaModificacion = DateTime.Now;
                                        calificacionAnteriorBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                        calificacionAnteriorBuro.Score = datosPersonaBuro.Score;
                                        calificacionAnteriorBuro.TipoFuenteBuro = tipoFuenteBuro;
                                        calificacionAnterior.VentasEmpresa = datosPersonaBuro.VentasEmpresa;
                                        calificacionAnterior.PatrimonioEmpresa = datosPersonaBuro.PatrimonioEmpresa;
                                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnteriorBuro);
                                        datosPersonaBuro.IdCalificacion = calificacionAnteriorBuro.Id;
                                    }
                                    else
                                    {
                                        datosPersonaBuro.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                                        {
                                            IdHistorial = modelo.IdHistorial,
                                            Puntaje = datosPersonaBuro.Calificacion,
                                            Aprobado = datosPersonaBuro.Aprobado,
                                            NumeroAprobados = datosPersonaBuro.TotalAprobados,
                                            NumeroRechazados = datosPersonaBuro.TotalRechazados,
                                            TotalVerificados = datosPersonaBuro.TotalValidados,
                                            Observaciones = datosPersonaBuro.Observaciones,
                                            UsuarioCreacion = idUsuario,
                                            TipoCalificacion = datosPersonaBuro.TipoCalificacion,
                                            Score = datosPersonaBuro.Score,
                                            VentasEmpresa = datosPersonaBuro.VentasEmpresa,
                                            PatrimonioEmpresa = datosPersonaBuro.PatrimonioEmpresa,
                                            TipoFuenteBuro = tipoFuenteBuro,
                                            DetalleCalificacion = calificacionesDetalleBuro,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                    datosPersonaLista.Add(datosPersonaBuro);
                                }
                                #endregion Calificación
                            }
                            else
                            {
                                ViewBag.VisualizarBuro = true;
                                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                            }
                        }
                        else if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                        {
                            //TODO: analizar si hacer con data de datarespaldo
                            r_burocredito_equifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(detalleHistorial.Datos);
                            if (r_burocredito_equifax != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.ResultadoConsulta)
                            {
                                ViewBag.EvaluarBuro = true;
                                ViewBag.VisualizarBuro = true;
                                #region Procesamiento Políticas EQUIFAX
                                //Manejo de cuentas corrientes
                                try
                                {
                                    if (manejoCuentasCorrientes != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito_equifax.Resultados.PersonasInhabilitadas.OrderByDescending(x => x.FechaInhabilitacion).Select(x => new { x.FechaInhabilitacion, x.TiempoInhabilitacion }).FirstOrDefault();
                                        if (fechaCumplimiento != null && fechaCumplimiento.FechaInhabilitacion != default && fechaCumplimiento.TiempoInhabilitacion > 0)
                                        {
                                            var manejoCuentasCorrientesComparacion = DateTime.Now.Date >= fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = manejoCuentasCorrientes.Excepcional,
                                                IdPolitica = manejoCuentasCorrientes.Id,
                                                Politica = manejoCuentasCorrientes.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFechaSansion, fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"), fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.FechaInhabilitacion.AddYears(+1).AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = manejoCuentasCorrientesComparacion,
                                                FechaCreacion = DateTime.Now
                                            });

                                            if (manejoCuentasCorrientes.Excepcional && !manejoCuentasCorrientesComparacion)
                                            {
                                                observacionesBuro.Add(manejoCuentasCorrientes.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Manejo Cuentas Corrientes. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Fecha Cumplimiento Sancion
                                try
                                {
                                    if (FechaCumplimientoSancion != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas != null && r_burocredito_equifax.Resultados.PersonasInhabilitadas.Any())
                                    {
                                        var fechaCumplimiento = r_burocredito_equifax.Resultados.PersonasInhabilitadas.OrderByDescending(x => x.FechaInhabilitacion).Select(x => new { x.FechaInhabilitacion, x.TiempoInhabilitacion }).FirstOrDefault();
                                        if (fechaCumplimiento != null && fechaCumplimiento.FechaInhabilitacion != default && fechaCumplimiento.TiempoInhabilitacion > 0)
                                        {
                                            var fechaSansion = fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date <= DateTime.Now.Date;

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = FechaCumplimientoSancion.Excepcional,
                                                IdPolitica = FechaCumplimientoSancion.Id,
                                                Politica = FechaCumplimientoSancion.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MenorIgualFecha, fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd")),
                                                ValorResultado = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Valor = DateTime.Now.Date.ToString("yyyy/MM/dd"),
                                                Parametro = fechaCumplimiento.FechaInhabilitacion.AddMonths(fechaCumplimiento.TiempoInhabilitacion).Date.ToString("yyyy/MM/dd"),
                                                ResultadoPolitica = fechaSansion,
                                                FechaCreacion = DateTime.Now
                                            });
                                            if (FechaCumplimientoSancion.Excepcional && !fechaSansion)
                                            {
                                                observacionesBuro.Add(FechaCumplimientoSancion.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Fecha Cumplimiento Sanción. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor vencido vigente total
                                try
                                {
                                    if (deudaVigenteTotal != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var deudaVigenteTotalSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.Vencido);
                                            var deudaVigenteTotalComparacion = deudaVigenteTotalSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!deudaVigenteTotalComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.TotalVencido != 0).Select(x => new InstitucionViewModel() { Nombre = x.Institucion, Valor = x.TotalVencido }).ToList());
                                            }


                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", deudaVigenteTotalSuma.ToString()),
                                                Valor = deudaVigenteTotalSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = deudaVigenteTotalComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (deudaVigenteTotal.Excepcional && !deudaVigenteTotalComparacion)
                                            {
                                                observacionesBuro.Add(deudaVigenteTotal.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = deudaVigenteTotal.Excepcional,
                                                IdPolitica = deudaVigenteTotal.Id,
                                                Politica = deudaVigenteTotal.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, deudaVigenteTotal.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor demanda judicial
                                try
                                {
                                    if (valorDemandaJudicial != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var demandaJudicialSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.DemandaJudicial);
                                            var demandaJudicialComparacion = demandaJudicialSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!demandaJudicialComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.DemJud != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.DemJud }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", demandaJudicialSuma.ToString()),
                                                Valor = demandaJudicialSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = demandaJudicialComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (valorDemandaJudicial.Excepcional && !demandaJudicialComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial.Excepcional,
                                                IdPolitica = valorDemandaJudicial.Id,
                                                Politica = valorDemandaJudicial.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorDemandaJudicial.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cartera castigada
                                try
                                {
                                    if (valorCarteraCastigada != null)
                                    {
                                        if (r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                                        {
                                            minimo = 0;
                                            var carteraCastigadaSuma = r_burocredito_equifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(m => !string.IsNullOrEmpty(m.Titulo)).Sum(m => m.CarteraCastigada);
                                            var carteraCastigadaComparacion = carteraCastigadaSuma <= minimo;
                                            var institucionesBuro = new List<InstitucionViewModel>();
                                            if (!carteraCastigadaComparacion)
                                            {
                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSBS360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaRFR360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());

                                                if (r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any())
                                                    institucionesBuro.AddRange(r_burocredito_equifax.Resultados.DetalleDeudaActualReportadaSICOM360.Where(x => x.CartCast != 0).Select(x => new InstitucionViewModel { Nombre = x.Institucion, Valor = x.CartCast }).ToList());
                                            }

                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", carteraCastigadaSuma.ToString()),
                                                Valor = carteraCastigadaSuma.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigadaComparacion,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = institucionesBuro != null && institucionesBuro.Any() ? JsonConvert.SerializeObject(institucionesBuro.GroupBy(m => m.Nombre).Select(m => new InstitucionViewModel { Nombre = m.First().Nombre, Valor = m.Sum(n => n.Valor) }).ToList()) : null
                                            });
                                            if (valorCarteraCastigada.Excepcional && !carteraCastigadaComparacion)
                                            {
                                                observacionesBuro.Add(valorCarteraCastigada.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorCarteraCastigada.Excepcional,
                                                IdPolitica = valorCarteraCastigada.Id,
                                                Politica = valorCarteraCastigada.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCarteraCastigada.Nombre),
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Vigentes Cooperativas. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses Vencido
                                try
                                {
                                    var historicoVencido = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && !string.IsNullOrEmpty(x.OpcionParam) && x.OpcionParam.Trim() == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        Vencido0 = new { Name = "Vencido 0 a 1", Valor = new[] { x.Vencido0a1 }.Max() },
                                        Vencido1 = new { Name = "Vencido 1 a 2", Valor = new[] { x.Vencido1a2 }.Max() },
                                        Vencido2 = new { Name = "Vencido 2 a 3", Valor = new[] { x.Vencido2a3 }.Max() },
                                        Vencido3 = new { Name = "Vencido 3 a 6", Valor = new[] { x.Vencido3a6 }.Max() },
                                        Vencido4 = new { Name = "Vencido 6 a 9", Valor = new[] { x.Vencido6a9 }.Max() },
                                        Vencido5 = new { Name = "Vencido 9 a 12", Valor = new[] { x.Vencido9a12 }.Max() },
                                        Vencido6 = new { Name = "Vencido 12 a 24", Valor = new[] { x.Vencido12a24 }.Max() },
                                        Vencido7 = new { Name = "Vencido 24", Valor = new[] { x.Vencido24 }.Max() },
                                        Vencido8 = new { Name = "Vencido 36", Valor = new[] { x.Vencido36 }.Max() },
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();

                                    if (historicoVencido != null && historicoVencido.Any())
                                    {
                                        var lstVencido = new List<HistoricoVencidoViewModel>();
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido0.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido0.Name, Valor = x.Vencido0.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido1.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido1.Name, Valor = x.Vencido1.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido2.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido2.Name, Valor = x.Vencido2.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido3.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido3.Name, Valor = x.Vencido3.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido4.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido4.Name, Valor = x.Vencido4.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido5.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido5.Name, Valor = x.Vencido5.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido6.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido6.Name, Valor = x.Vencido6.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido7.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido7.Name, Valor = x.Vencido7.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido8.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido8.Name, Valor = x.Vencido8.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());

                                        if (lstVencido != null && lstVencido.Any())
                                        {
                                            if (valorVencido12Meses != null)
                                            {
                                                minimo = 0;
                                                var detalleVencido = lstVencido.OrderByDescending(x => x.FechaCorte).Where(x => x.Valor == lstVencido.Max(y => y.Valor)).Select(x => new { x.NmbVencimiento, x.Valor, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                                var valorVencido12MesesComparacion = detalleVencido.Valor <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencido12Meses.Excepcional,
                                                    IdPolitica = valorVencido12Meses.Id,
                                                    Politica = valorVencido12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleVencido.Valor.ToString()),
                                                    Valor = detalleVencido.Valor.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencido12MesesComparacion,
                                                    FechaCorte = detalleVencido.FechaCorte.Date != default ? detalleVencido.FechaCorte.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencido12MesesComparacion && detalleVencido != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencido.SistemaFinanciero, Valor = detalleVencido.Valor, NmbVencimiento = detalleVencido.NmbVencimiento } }) : null
                                                });
                                                if (valorVencido12Meses.Excepcional && !valorVencido12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencido12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorVencido12Meses.Excepcional,
                                                IdPolitica = valorVencido12Meses.Id,
                                                Politica = valorVencido12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                FechaCorte = null,
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencido12Meses.Excepcional,
                                            IdPolitica = valorVencido12Meses.Id,
                                            Politica = valorVencido12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses Vencido. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas 12 Meses
                                try
                                {
                                    var historico = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) >= new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && !string.IsNullOrEmpty(x.OpcionParam) && x.OpcionParam.Trim() == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        DemandaJudicial = x.DemandaJudicial,
                                        CarteraCastigada = x.CarteraCastigada,
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();
                                    if (historico != null && historico.Any())
                                    {
                                        if (valorDemandaJudicial12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicial = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historico.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var valorDemandaJudicial12MesesComparacion = detalleDemandaJudicial.DemandaJudicial <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                                IdPolitica = valorDemandaJudicial12Meses.Id,
                                                Politica = valorDemandaJudicial12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleDemandaJudicial.DemandaJudicial.ToString()),
                                                Valor = detalleDemandaJudicial.DemandaJudicial.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicial12MesesComparacion,
                                                FechaCorte = detalleDemandaJudicial.FechaCorte.Date != default ? detalleDemandaJudicial.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !valorDemandaJudicial12MesesComparacion && detalleDemandaJudicial != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicial.SistemaFinanciero, Valor = detalleDemandaJudicial.DemandaJudicial } }) : null
                                            });
                                            if (valorDemandaJudicial12Meses.Excepcional && !valorDemandaJudicial12MesesComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicial12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        if (carteraCastigada12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigada = historico.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historico.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var carteraCastigada12MesesComparacion = detalleCarteraCastigada.CarteraCastigada <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = carteraCastigada12Meses.Excepcional,
                                                IdPolitica = carteraCastigada12Meses.Id,
                                                Politica = carteraCastigada12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleCarteraCastigada.CarteraCastigada.ToString()),
                                                Valor = detalleCarteraCastigada.CarteraCastigada.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigada12MesesComparacion,
                                                FechaCorte = detalleCarteraCastigada.FechaCorte.Date != default ? detalleCarteraCastigada.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !carteraCastigada12MesesComparacion && detalleCarteraCastigada != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigada.SistemaFinanciero, Valor = detalleCarteraCastigada.CarteraCastigada } }) : null
                                            });
                                            if (carteraCastigada12Meses.Excepcional && !carteraCastigada12MesesComparacion)
                                            {
                                                observacionesBuro.Add(carteraCastigada12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicial12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicial12Meses.Id,
                                            Politica = valorDemandaJudicial12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigada12Meses.Excepcional,
                                            IdPolitica = carteraCastigada12Meses.Id,
                                            Politica = carteraCastigada12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses Vencido
                                try
                                {
                                    var historicoVencido = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && x.OpcionParam == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        Vencido0 = new { Name = "Vencido 0 a 1", Valor = new[] { x.Vencido0a1 }.Max() },
                                        Vencido1 = new { Name = "Vencido 1 a 2", Valor = new[] { x.Vencido1a2 }.Max() },
                                        Vencido2 = new { Name = "Vencido 2 a 3", Valor = new[] { x.Vencido2a3 }.Max() },
                                        Vencido3 = new { Name = "Vencido 3 a 6", Valor = new[] { x.Vencido3a6 }.Max() },
                                        Vencido4 = new { Name = "Vencido 6 a 9", Valor = new[] { x.Vencido6a9 }.Max() },
                                        Vencido5 = new { Name = "Vencido 9 a 12", Valor = new[] { x.Vencido9a12 }.Max() },
                                        Vencido6 = new { Name = "Vencido 12 a 24", Valor = new[] { x.Vencido12a24 }.Max() },
                                        Vencido7 = new { Name = "Vencido 24", Valor = new[] { x.Vencido24 }.Max() },
                                        Vencido8 = new { Name = "Vencido 36", Valor = new[] { x.Vencido36 }.Max() },
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();

                                    if (historicoVencido != null && historicoVencido.Any())
                                    {
                                        var lstVencido = new List<HistoricoVencidoViewModel>();
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido0.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido0.Name, Valor = x.Vencido0.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido1.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido1.Name, Valor = x.Vencido1.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido2.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido2.Name, Valor = x.Vencido2.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido3.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido3.Name, Valor = x.Vencido3.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido4.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido4.Name, Valor = x.Vencido4.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido5.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido5.Name, Valor = x.Vencido5.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido6.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido6.Name, Valor = x.Vencido6.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido7.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido7.Name, Valor = x.Vencido7.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());
                                        lstVencido.AddRange(historicoVencido.Where(x => x.Vencido8.Valor != 0).Select(x => new HistoricoVencidoViewModel { FechaCorte = x.FechaCorte, NmbVencimiento = x.Vencido8.Name, Valor = x.Vencido8.Valor, SistemaFinanciero = x.SistemaFinanciero }).ToList());

                                        if (lstVencido != null && lstVencido.Any())
                                        {
                                            if (valorVencidoMayor12Meses != null)
                                            {
                                                minimo = 0;
                                                var detalleVencidoMayor12Meses = lstVencido.OrderByDescending(x => x.FechaCorte).Where(x => x.Valor == lstVencido.Max(y => y.Valor)).Select(x => new { x.NmbVencimiento, x.Valor, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                                var valorVencidoMayor12MesesComparacion = detalleVencidoMayor12Meses.Valor <= minimo;
                                                detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                                {
                                                    Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                    IdPolitica = valorVencidoMayor12Meses.Id,
                                                    Politica = valorVencidoMayor12Meses.Nombre,
                                                    ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                    ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleVencidoMayor12Meses.Valor.ToString()),
                                                    Valor = detalleVencidoMayor12Meses.Valor.ToString(),
                                                    Parametro = minimo.ToString(),
                                                    ResultadoPolitica = valorVencidoMayor12MesesComparacion,
                                                    FechaCorte = detalleVencidoMayor12Meses.FechaCorte.Date != default ? detalleVencidoMayor12Meses.FechaCorte.Date : null,
                                                    FechaCreacion = DateTime.Now,
                                                    Instituciones = !valorVencidoMayor12MesesComparacion && detalleVencidoMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleVencidoMayor12Meses.SistemaFinanciero, Valor = detalleVencidoMayor12Meses.Valor, NmbVencimiento = detalleVencidoMayor12Meses.NmbVencimiento } }) : null
                                                });
                                                if (valorVencidoMayor12Meses.Excepcional && !valorVencidoMayor12MesesComparacion)
                                                {
                                                    observacionesBuro.Add(valorVencidoMayor12Meses.Nombre);
                                                    aprobacionAdicionalBuro = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorVencidoMayor12Meses.Excepcional,
                                                IdPolitica = valorVencidoMayor12Meses.Id,
                                                Politica = valorVencidoMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                                Valor = "0",
                                                Parametro = "0",
                                                ResultadoPolitica = true,
                                                FechaCorte = null,
                                                FechaCreacion = DateTime.Now
                                            });
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorVencidoMayor12Meses.Excepcional,
                                            IdPolitica = valorVencidoMayor12Meses.Id,
                                            Politica = valorVencidoMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses Vencido. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Operaciones Históricas Mayor a 12 Meses
                                try
                                {
                                    var historicoMayor12Meses = r_burocredito_equifax.Resultados.RecursivoDeudaHistorica3601.Where(x => new DateTime(x.FechaCorte.Year, x.FechaCorte.Month, 1) < new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddYears(-1) && x.OpcionParam == "CONS").Select(x => new
                                    {
                                        FechaCorte = x.FechaCorte.Date,
                                        DemandaJudicial = x.DemandaJudicial,
                                        CarteraCastigada = x.CarteraCastigada,
                                        SistemaFinanciero = x.Opcion
                                    }).ToList();
                                    if (historicoMayor12Meses != null && historicoMayor12Meses.Any())
                                    {
                                        if (valorDemandaJudicialMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleDemandaJudicialMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.DemandaJudicial == historicoMayor12Meses.Max(y => y.DemandaJudicial)).Select(x => new { x.DemandaJudicial, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var valorDemandaJudicialMayor12MesesComparacion = detalleDemandaJudicialMayor12Meses.DemandaJudicial <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                                IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                                Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleDemandaJudicialMayor12Meses.DemandaJudicial.ToString()),
                                                Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = valorDemandaJudicialMayor12MesesComparacion,
                                                FechaCorte = detalleDemandaJudicialMayor12Meses.FechaCorte.Date != default ? detalleDemandaJudicialMayor12Meses.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !valorDemandaJudicialMayor12MesesComparacion && detalleDemandaJudicialMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleDemandaJudicialMayor12Meses.SistemaFinanciero, Valor = detalleDemandaJudicialMayor12Meses.DemandaJudicial } }) : null

                                            });
                                            if (valorDemandaJudicialMayor12Meses.Excepcional && !valorDemandaJudicialMayor12MesesComparacion)
                                            {
                                                observacionesBuro.Add(valorDemandaJudicialMayor12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }

                                        if (carteraCastigadaMayor12Meses != null)
                                        {
                                            minimo = 0;
                                            var detalleCarteraCastigadaMayor12Meses = historicoMayor12Meses.OrderByDescending(x => x.FechaCorte).Where(x => x.CarteraCastigada == historicoMayor12Meses.Max(y => y.CarteraCastigada)).Select(x => new { x.CarteraCastigada, x.FechaCorte, x.SistemaFinanciero }).ToList().FirstOrDefault();
                                            var carteraCastigadaMayor12MesesComparacion = detalleCarteraCastigadaMayor12Meses.CarteraCastigada <= minimo;
                                            detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                            {
                                                Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                                IdPolitica = carteraCastigadaMayor12Meses.Id,
                                                Politica = carteraCastigadaMayor12Meses.Nombre,
                                                ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                                ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", detalleCarteraCastigadaMayor12Meses.CarteraCastigada.ToString()),
                                                Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada.ToString(),
                                                Parametro = minimo.ToString(),
                                                ResultadoPolitica = carteraCastigadaMayor12MesesComparacion,
                                                FechaCorte = detalleCarteraCastigadaMayor12Meses.FechaCorte.Date != default ? detalleCarteraCastigadaMayor12Meses.FechaCorte.Date : null,
                                                FechaCreacion = DateTime.Now,
                                                Instituciones = !carteraCastigadaMayor12MesesComparacion && detalleCarteraCastigadaMayor12Meses != null ? JsonConvert.SerializeObject(new List<InstitucionViewModel>() { new InstitucionViewModel { Nombre = detalleCarteraCastigadaMayor12Meses.SistemaFinanciero, Valor = detalleCarteraCastigadaMayor12Meses.CarteraCastigada } }) : null
                                            });
                                            if (carteraCastigadaMayor12Meses.Excepcional && !carteraCastigadaMayor12MesesComparacion)
                                            {
                                                observacionesBuro.Add(carteraCastigadaMayor12Meses.Nombre);
                                                aprobacionAdicionalBuro = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorDemandaJudicialMayor12Meses.Excepcional,
                                            IdPolitica = valorDemandaJudicialMayor12Meses.Id,
                                            Politica = valorDemandaJudicialMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = carteraCastigadaMayor12Meses.Excepcional,
                                            IdPolitica = carteraCastigadaMayor12Meses.Id,
                                            Politica = carteraCastigadaMayor12Meses.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            FechaCorte = null,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Operaciones Históricas Mayores a 12 Meses. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }

                                //Valor cuota vencidos
                                try
                                {
                                    if (valorCuotaVencidos != null && r_burocredito_equifax.Resultados != null && r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb != null)
                                    {
                                        minimo = 0;
                                        var valorCuotaVencidosSuma = r_burocredito_equifax.Resultados.CuotaEstimadaMensualWeb.TotalVencido;
                                        var valorCuotaVencidosComparacion = valorCuotaVencidosSuma <= minimo;

                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, minimo.ToString()),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", valorCuotaVencidosSuma.ToString()),
                                            Valor = valorCuotaVencidosSuma.ToString(),
                                            Parametro = minimo.ToString(),
                                            ResultadoPolitica = valorCuotaVencidosComparacion,
                                            FechaCreacion = DateTime.Now
                                        });
                                        if (valorCuotaVencidos.Excepcional && !valorCuotaVencidosComparacion)
                                        {
                                            observacionesBuro.Add(valorCuotaVencidos.Nombre);
                                            aprobacionAdicionalBuro = true;
                                        }
                                    }
                                    else
                                    {
                                        detalleCalificacionBuro.Add(new DetalleCalificacionViewModel()
                                        {
                                            Excepcional = valorCuotaVencidos.Excepcional,
                                            IdPolitica = valorCuotaVencidos.Id,
                                            Politica = valorCuotaVencidos.Nombre,
                                            ReferenciaMinima = string.Format(Dominio.Constantes.TextoReferencia.MaximoMoneda, "0"),
                                            ValorResultado = string.Format(System.Globalization.CultureInfo.InvariantCulture, "${0:0,0.00}", "0"),
                                            Valor = "0",
                                            Parametro = "0",
                                            ResultadoPolitica = true,
                                            Observacion = string.Format(Dominio.Constantes.TextoReferencia.Observacion, valorCuotaVencidos.Nombre),
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al procesar políticas Gastos Financieros. {ex.Message}");
                                    _logger.LogError(ex, ex.Message);
                                }
                                #endregion Procesamiento Políticas EQUIFAX

                                #region Calificación
                                datosPersonaBuro.Score = 0;
                                if (r_burocredito_equifax.ResultadosNivelIndexPymes != null && r_burocredito_equifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes != null)
                                    datosPersonaBuro.Score = r_burocredito_equifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes.Score;

                                tipoFuenteBuro = Dominio.Tipos.FuentesBuro.Equifax;
                                if (datosPersonaBuro.Score < Dominio.Constantes.ConstantesCalificacion.MinimoScoreBuro)
                                {
                                    observacionesBuro.Add("Score");
                                    aprobacionAdicionalBuro = true;
                                }

                                if (detalleCalificacionBuro != null && detalleCalificacionBuro.Any())
                                {
                                    datosPersonaBuro.Identificacion = identificacionOriginal;
                                    datosPersonaBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                    datosPersonaBuro.TipoFuente = tipoFuenteBuro;
                                    datosPersonaBuro.TotalValidados = detalleCalificacionBuro.Count;
                                    datosPersonaBuro.TotalAprobados = detalleCalificacionBuro.Count(m => m.ResultadoPolitica);
                                    datosPersonaBuro.TotalRechazados = detalleCalificacionBuro.Count(m => !m.ResultadoPolitica);

                                    if (datosPersonaBuro.TotalValidados > 0) datosPersonaBuro.Calificacion = Math.Round((decimal)datosPersonaBuro.TotalAprobados * 100 / datosPersonaBuro.TotalValidados, 2, MidpointRounding.AwayFromZero);
                                    datosPersonaBuro.Aprobado = datosPersonaBuro.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                                    datosPersonaBuro.DetalleCalificacion = detalleCalificacionBuro;

                                    if (aprobacionAdicionalBuro)
                                    {
                                        datosPersonaBuro.Observaciones = string.Join(". ", observacionesBuro);
                                        datosPersonaBuro.Aprobado = false;
                                    }

                                    var calificacionesDetalleBuro = datosPersonaBuro.DetalleCalificacion.Select(m => new DetalleCalificacion
                                    {
                                        IdPolitica = m.IdPolitica,
                                        Valor = m.Valor,
                                        Parametro = m.Parametro,
                                        Aprobado = m.ResultadoPolitica,
                                        Datos = m.ValorResultado,
                                        ReferenciaMinima = m.ReferenciaMinima,
                                        FechaCorte = m.FechaCorte,
                                        UsuarioCreacion = idUsuario,
                                        FechaCreacion = m.FechaCreacion,
                                        Instituciones = m.Instituciones
                                    }).ToList();

                                    if (actualizarBuro)
                                    {
                                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnteriorBuro);
                                        calificacionAnteriorBuro.DetalleCalificacion = calificacionesDetalleBuro;
                                        calificacionAnteriorBuro.Puntaje = datosPersonaBuro.Calificacion;
                                        calificacionAnteriorBuro.Aprobado = datosPersonaBuro.Aprobado;
                                        calificacionAnteriorBuro.NumeroAprobados = datosPersonaBuro.TotalAprobados;
                                        calificacionAnteriorBuro.NumeroRechazados = datosPersonaBuro.TotalRechazados;
                                        calificacionAnteriorBuro.TotalVerificados = datosPersonaBuro.TotalValidados;
                                        calificacionAnteriorBuro.Observaciones = datosPersonaBuro.Observaciones;
                                        calificacionAnteriorBuro.UsuarioModificacion = idUsuario;
                                        calificacionAnteriorBuro.FechaModificacion = DateTime.Now;
                                        calificacionAnteriorBuro.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Buro;
                                        calificacionAnteriorBuro.Score = datosPersonaBuro.Score;
                                        calificacionAnteriorBuro.TipoFuenteBuro = tipoFuenteBuro;
                                        //calificacionAnterior.VentasEmpresa = datosPersonaBuro.VentasEmpresa;
                                        //calificacionAnterior.PatrimonioEmpresa = datosPersonaBuro.PatrimonioEmpresa;
                                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnteriorBuro);
                                        datosPersonaBuro.IdCalificacion = calificacionAnteriorBuro.Id;
                                    }
                                    else
                                    {
                                        datosPersonaBuro.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                                        {
                                            IdHistorial = modelo.IdHistorial,
                                            Puntaje = datosPersonaBuro.Calificacion,
                                            Aprobado = datosPersonaBuro.Aprobado,
                                            NumeroAprobados = datosPersonaBuro.TotalAprobados,
                                            NumeroRechazados = datosPersonaBuro.TotalRechazados,
                                            TotalVerificados = datosPersonaBuro.TotalValidados,
                                            Observaciones = datosPersonaBuro.Observaciones,
                                            UsuarioCreacion = idUsuario,
                                            TipoCalificacion = datosPersonaBuro.TipoCalificacion,
                                            Score = datosPersonaBuro.Score,
                                            VentasEmpresa = datosPersonaBuro.VentasEmpresa,
                                            PatrimonioEmpresa = datosPersonaBuro.PatrimonioEmpresa,
                                            TipoFuenteBuro = tipoFuenteBuro,
                                            DetalleCalificacion = calificacionesDetalleBuro,
                                            FechaCreacion = DateTime.Now
                                        });
                                    }
                                    datosPersonaLista.Add(datosPersonaBuro);
                                }
                                #endregion Calificación
                            }
                            else
                            {
                                ViewBag.VisualizarBuro = true;
                                ViewBag.MensajeEvaluarBuro = Dominio.Constantes.PlanesBuroEstados.InformacionBuro;
                            }
                        }
                    }
                    _logger.LogInformation("Fin procesamiento políticas BURÓ.");
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar políticas de BURÓ. {ex.Message}");
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Evaluación Buró

                #region Procesamiento Calificación de Evaluación
                if (detalleCalificacion != null && detalleCalificacion.Any())
                {
                    datosPersona.TipoCalificacion = Dominio.Tipos.TiposCalificaciones.Evaluacion;
                    datosPersona.TotalValidados = detalleCalificacion.Count;
                    datosPersona.TotalAprobados = detalleCalificacion.Count(m => m.ResultadoPolitica);
                    datosPersona.TotalRechazados = detalleCalificacion.Count(m => !m.ResultadoPolitica);

                    if (datosPersona.TotalValidados > 0) datosPersona.Calificacion = Math.Round((decimal)datosPersona.TotalAprobados * 100 / datosPersona.TotalValidados, 2, MidpointRounding.AwayFromZero);
                    datosPersona.Aprobado = datosPersona.Calificacion >= Dominio.Constantes.ConstantesCalificacion.MinimoCalificacion;
                    datosPersona.DetalleCalificacion = detalleCalificacion;

                    if (aprobacionAdicional)
                    {
                        datosPersona.Observaciones = string.Join(". ", observaciones);
                        datosPersona.Aprobado = false;
                    }

                    var calificacionesDetalle = datosPersona.DetalleCalificacion.Select(m => new DetalleCalificacion
                    {
                        IdPolitica = m.IdPolitica,
                        Valor = m.Valor,
                        Parametro = m.Parametro,
                        Aprobado = m.ResultadoPolitica,
                        Datos = m.ValorResultado,
                        ReferenciaMinima = m.ReferenciaMinima,
                        UsuarioCreacion = idUsuario,
                        Observacion = m.Observacion,
                        FechaCorte = m.FechaCorte,
                        FechaCreacion = m.FechaCreacion
                    }).ToList();

                    if (actualizar)
                    {
                        await _detalleCalificaciones.EliminarDetalleCalificacionAsync(detalleCalificacionAnterior);
                        calificacionAnterior.DetalleCalificacion = calificacionesDetalle;
                        calificacionAnterior.Puntaje = datosPersona.Calificacion;
                        calificacionAnterior.Aprobado = datosPersona.Aprobado;
                        calificacionAnterior.NumeroAprobados = datosPersona.TotalAprobados;
                        calificacionAnterior.NumeroRechazados = datosPersona.TotalRechazados;
                        calificacionAnterior.TotalVerificados = datosPersona.TotalValidados;
                        calificacionAnterior.Observaciones = datosPersona.Observaciones;
                        calificacionAnterior.UsuarioModificacion = idUsuario;
                        calificacionAnterior.FechaModificacion = DateTime.Now;
                        await _calificaciones.ActualizarCalificacionAsync(calificacionAnterior);
                        datosPersona.IdCalificacion = calificacionAnterior.Id;
                    }
                    else
                    {
                        datosPersona.IdCalificacion = await _calificaciones.GuardarCalificacionAsync(new Calificacion()
                        {
                            IdHistorial = modelo.IdHistorial,
                            Puntaje = datosPersona.Calificacion,
                            Aprobado = datosPersona.Aprobado,
                            NumeroAprobados = datosPersona.TotalAprobados,
                            NumeroRechazados = datosPersona.TotalRechazados,
                            TotalVerificados = datosPersona.TotalValidados,
                            Observaciones = datosPersona.Observaciones,
                            UsuarioCreacion = idUsuario,
                            TipoCalificacion = datosPersona.TipoCalificacion,
                            DetalleCalificacion = calificacionesDetalle,
                            FechaCreacion = DateTime.Now
                        });
                    }
                    datosPersonaLista.Add(datosPersona);
                }
                if ((detalleCalificacion != null && detalleCalificacion.Any()) || (detalleCalificacionBuro != null && detalleCalificacionBuro.Any()))
                {
                    var historialAnterior = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null);
                    var historialConsolidado = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial, null);

                    historialAnterior.IdPlanEvaluacion = dataPlanEvaluacion.Id;
                    await _historiales.UpdateAsync(historialAnterior);
                    if (historialConsolidado != null)
                    {
                        var historialEvaluacionBuro = await _calificaciones.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoCalificacion == TiposCalificaciones.Buro, null);
                        if (historialEvaluacionBuro != null)
                            historialConsolidado.AprobadoEvaluacion = datosPersona.Aprobado && historialEvaluacionBuro.Aprobado;
                        else
                            historialConsolidado.AprobadoEvaluacion = datosPersona.Aprobado;
                        historialConsolidado.ConsultaEvaluacion = historialAnterior.IdPlanEvaluacion.HasValue && historialAnterior.IdPlanEvaluacion.Value > 0;
                        await _reporteConsolidado.UpdateAsync(historialConsolidado);
                    }
                }
                #endregion Procesamiento Calificación de Evaluación

                _logger.LogInformation($"Fin de procesamiento RUC Jurídico {modelo.IdHistorial}");
                return PartialView($"../Shared/Fuentes/_FuenteCalificacion", datosPersonaLista);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteCalificacion", null);
            }
        }

        [HttpPost]
        [Route("PermisoEvaluacionUsuario")]
        public async Task<IActionResult> PermisoEvaluacionUsuario()
        {
            try
            {
                var idUsuario = 0;
                var idEmpresa = 0;
                idUsuario = User.GetUserId<int>();
                var resultadoPermiso = Dominio.Tipos.EstadosPlanesEvaluaciones.Desconocido;
                var numeroHistorialEvaluacion = 0;
                var numeroConsultasContratadas = 0;

                if (idUsuario == 0)
                    throw new Exception("No se encontró el usuario.");

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva actualizar la página por favor.");
                idEmpresa = usuarioActual.IdEmpresa;

                if (idEmpresa == 0)
                    throw new Exception("No se encontró la empresa.");

                var dataPlanEvaluacion = await _planesEvaluaciones.FirstOrDefaultAsync(s => s, s => s.IdEmpresa == idEmpresa && s.Estado == Dominio.Tipos.EstadosPlanesEvaluaciones.Activo);
                if (dataPlanEvaluacion != null)
                {
                    numeroConsultasContratadas = dataPlanEvaluacion.NumeroConsultas;
                    var dataUsuario = await _accesos.AnyAsync(s => s.IdUsuario == idUsuario && s.Estado == Dominio.Tipos.EstadosAccesos.Activo && s.Acceso == Dominio.Tipos.TiposAccesos.Evaluacion);
                    if (!dataUsuario)
                        resultadoPermiso = Dominio.Tipos.EstadosPlanesEvaluaciones.Bloqueado;

                    numeroHistorialEvaluacion = await _historiales.CountAsync(s => s.IdPlanEvaluacion == dataPlanEvaluacion.Id && s.Fecha.Month == DateTime.Today.Month && s.Fecha.Year == DateTime.Today.Year);
                    if (resultadoPermiso == 0)
                    {
                        resultadoPermiso = Dominio.Tipos.EstadosPlanesEvaluaciones.Activo;

                        if (dataPlanEvaluacion.BloquearConsultas)
                            resultadoPermiso = dataPlanEvaluacion.NumeroConsultas > numeroHistorialEvaluacion ? Dominio.Tipos.EstadosPlanesEvaluaciones.Activo : Dominio.Tipos.EstadosPlanesEvaluaciones.Inactivo;
                    }
                }

                return Ok(new
                {
                    IdEmpresa = idEmpresa,
                    ResultadoPermiso = resultadoPermiso,
                    NumeroConsultasRealizadas = numeroHistorialEvaluacion,
                    NumeroConsultasContratadas = numeroConsultasContratadas
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(CalificacionController), StatusCodes.Status500InternalServerError);
            }
        }
    }
}
