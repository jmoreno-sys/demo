// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Web.Models;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using System.Data;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Xsl;
using System.Text.RegularExpressions;
using Web.Areas.Consultas.Models;
using Dominio.Entidades.Balances;
using Persistencia.Repositorios.Balance;
using Microsoft.AspNetCore.Identity;
using Persistencia.Repositorios.Identidad;
using Microsoft.EntityFrameworkCore;
using Infraestructura.Servicios;
using QuickChart;
using Microsoft.AspNetCore.Http.Extensions;
using Dominio.Entidades.Identidad;
using Externos.Logica.Garancheck.Modelos;
using Dominio.Tipos;
using Externos.Logica.Balances.Modelos;
using Externos.Logica.IESS.Modelos;
using Externos.Logica.AntecedentesPenales.Modelos;
using Externos.Logica.PensionesAlimenticias.Modelos;
using static Externos.Logica.ANT.Modelos.Licencia;
using Externos.Logica.SRi.Modelos;
using Microsoft.Extensions.Caching.Memory;

namespace Web.Areas.Consultas.Controllers
{
    [Area("Consultas")]
    [Route("Consultas/Principal")]
    [Authorize(Policy = "Consultas")]
    public class PrincipalController : Controller
    {
        private readonly ILogger _logger;
        private readonly IConfiguration _configuration;
        private readonly Externos.Logica.SRi.Controlador _sri;
        private readonly Externos.Logica.Balances.Controlador _balances;
        private readonly Externos.Logica.IESS.Controlador _iess;
        private readonly Externos.Logica.FJudicial.Controlador _fjudicial;
        private readonly Externos.Logica.ANT.Controlador _ant;
        private readonly Externos.Logica.PensionesAlimenticias.Controlador _pension;
        private readonly Externos.Logica.Garancheck.Controlador _garancheck;
        private readonly Externos.Logica.SERCOP.Controlador _sercop;
        private readonly Externos.Logica.BuroCredito.Controlador _burocredito;
        private readonly Externos.Logica.FiscaliaDelitos.Controlador _fiscaliaDelitos;
        private readonly Externos.Logica.Equifax.Controlador _buroCreditoEquifax;
        private readonly Externos.Logica.SuperBancos.Controlador _superBancos;
        private readonly Externos.Logica.AntecedentesPenales.Controlador _antecedentes;
        private readonly Externos.Logica.PredioMunicipio.Controlador _predios;
        private readonly Externos.Logica.UAFE.Controlador _uafe;
        private readonly Externos.Logica.RegistroCivilWS.Controlador _registroWS;
        private readonly IHistoriales _historiales;
        private readonly IDetallesHistorial _detallesHistorial;
        private readonly IUsuarios _usuarios;
        private readonly IConsultaService _consulta;
        private readonly ICalificaciones _calificaciones;
        private readonly IPlanesBuroCredito _planesBuroCredito;
        private readonly IAccesos _accesos;
        private readonly ICredencialesBuro _credencialesBuro;
        private readonly IPlanesEvaluaciones _planesEvaluaciones;
        private readonly IParametrosClientesHistoriales _parametrosClientesHistoriales;
        private readonly IReportesConsolidados _reporteConsolidado;
        private readonly IEmailService _emailSender;
        private readonly bool _cache = false;
        private readonly IMemoryCache _MemoryCache;

        public PrincipalController(IConfiguration configuration,
            ILoggerFactory loggerFactory,
            Externos.Logica.SRi.Controlador sri,
            Externos.Logica.Balances.Controlador balances,
            Externos.Logica.IESS.Controlador iess,
            Externos.Logica.FJudicial.Controlador fjudicial,
            Externos.Logica.ANT.Controlador ant,
            Externos.Logica.PensionesAlimenticias.Controlador pension,
            Externos.Logica.Garancheck.Controlador garancheck,
            Externos.Logica.SERCOP.Controlador sercop,
            Externos.Logica.BuroCredito.Controlador burocredito,
            Externos.Logica.FiscaliaDelitos.Controlador fiscaliaDelitos,
            Externos.Logica.Equifax.Controlador buroCreditoEquifax,
            Externos.Logica.SuperBancos.Controlador superBancos,
            Externos.Logica.AntecedentesPenales.Controlador antecedentes,
            Externos.Logica.PredioMunicipio.Controlador predios,
            Externos.Logica.UAFE.Controlador uafe,
            Externos.Logica.RegistroCivilWS.Controlador registroWS,
            IHistoriales historiales,
            IDetallesHistorial detallehistoriales,
            IUsuarios usuarios,
            IConsultaService consulta,
            ICalificaciones calificaciones,
            IPlanesBuroCredito planesBuroCredito,
            IPlanesEvaluaciones planesEvaluaciones,
            IAccesos accesos,
            ICredencialesBuro credencialesBuro,
            IParametrosClientesHistoriales parametrosClientesHistoriales,
            IEmailService emailSender,
            IReportesConsolidados reportesConsolidados,
            IMemoryCache memoryCache)
        {
            _configuration = configuration;
            _logger = loggerFactory.CreateLogger(GetType());
            _sri = sri;
            _balances = balances;
            _iess = iess;
            _fjudicial = fjudicial;
            _ant = ant;
            _pension = pension;
            _garancheck = garancheck;
            _sercop = sercop;
            _burocredito = burocredito;
            _fiscaliaDelitos = fiscaliaDelitos;
            _buroCreditoEquifax = buroCreditoEquifax;
            _superBancos = superBancos;
            _antecedentes = antecedentes;
            _predios = predios;
            _uafe = uafe;
            _registroWS = registroWS;
            _historiales = historiales;
            _detallesHistorial = detallehistoriales;
            _usuarios = usuarios;
            _consulta = consulta;
            _calificaciones = calificaciones;
            _planesBuroCredito = planesBuroCredito;
            _accesos = accesos;
            _credencialesBuro = credencialesBuro;
            _planesEvaluaciones = planesEvaluaciones;
            _parametrosClientesHistoriales = parametrosClientesHistoriales;
            _emailSender = emailSender;
            _cache = _configuration.GetSection("AppSettings:Consultas:Cache").Get<bool>();
            _reporteConsolidado = reportesConsolidados;
            this._MemoryCache = memoryCache;
        }

        public async Task<IActionResult> Inicio(string identificacion = null)
        {
            try
            {
                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                if (string.IsNullOrEmpty(usuarioActual.Empresa.Identificacion))
                    throw new Exception("No se encontró el RUC de la empresa.");

                if (usuarioActual.Empresa.VistaPersonalizada)
                    return View($"../Clientes/Inicio{usuarioActual.Empresa.Identificacion.Trim()}");
                else
                {
                    ViewBag.Identificacion = identificacion;
                    if (User.IsInRole(Dominio.Tipos.Roles.VendedorEmpresa))
                        return View("InicioVendedor");
                    if (usuarioActual.Id == Dominio.Constantes.General.IdUsuarioDemo)
                        return RedirectToAction("Inicio", "PrincipalDemo");
                    else if (User.IsInRole(Dominio.Tipos.Roles.ContactabilidadEmpresa))
                        return View("InicioContactabilidad");
                    else
                        return View();
                }
            }
            catch (Exception ex)
            {
                ViewBag.Identificacion = identificacion;
                _logger.LogError(ex, ex.Message);
                return View();
            }
        }

        #region Busqueda
        [HttpPost]
        [Route("BuscarNombre")]
        public async Task<IActionResult> BuscarNombre([FromBody] NombreFiltroViewModel model)
        {
            try
            {
                var total = 0;
                var stotal = 0;
                if (model == null)
                    throw new Exception("No se han ingresado los parametros para la consulta.");

                if (string.IsNullOrEmpty(model.Nombre))
                    throw new Exception("No se ha ingresado un nombre en la consulta.");

                if (model.Nombre.Length <= 2)
                    throw new Exception("EL nombre ingresado es muy corto.");

                Externos.Logica.Garancheck.Modelos.Sujeto r_sujeto = null;
                r_sujeto = await _garancheck.GetCoincidenciasNombresAsync(model.Nombre);
                if (r_sujeto == null)
                    throw new Exception("No se ha generado elementos en la búsqueda.");
                else
                {
                    if (r_sujeto.SujetosIdentificaciones != null && r_sujeto.SujetosIdentificaciones.Any())
                    {
                        var rows = r_sujeto.SujetosIdentificaciones.Select(m => new { m.Cedula, m.Nombre }).AsQueryable();
                        total = r_sujeto.SujetosIdentificaciones.Count();
                        //rows = rows.Skip(model.Start).Take(model.Length);
                        return Json(new
                        {
                            iTotalRecords = total,
                            iTotalDisplayRecords = stotal > 0 ? stotal : total,
                            Data = rows
                        });
                    }
                    else
                        throw new Exception("No se ha generado elementos en la búsqueda.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Json(new List<dynamic>());
            }
        }

        [HttpPost]
        [Route("ListadoNombres")]
        public async Task<IActionResult> ListadoNombres([FromBody] NombreFiltroViewModel filtros)
        {
            try
            {
                if (filtros == null)
                    throw new Exception("No se han ingresado los parametros para la consulta.");

                var data = await BuscarPersonaCoincidencia(filtros.Nombre);
                if (data != null && data.Any())
                    return Json(data);
                else
                    throw new Exception("No se ha generado elementos en la búsqueda.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Json(new List<dynamic>());
            }
        }

        private async Task<List<Externos.Logica.Garancheck.Modelos.DatoSujeto>> BuscarPersonaCoincidencia(string nombre)
        {
            try
            {
                if (string.IsNullOrEmpty(nombre))
                    throw new Exception("No se ha ingresado un nombre en la consulta.");

                if (nombre.Length <= 2)
                    throw new Exception("EL nombre ingresado es muy corto.");

                Regex r = new Regex(@"(?:[a-zA-ZÀ-ÿ\u00f1\u00d1]+\s){1}[a-zA-ZÀ-ÿ\u00f1\u00d1]+");
                if (!r.IsMatch(nombre))
                    throw new Exception("Es necesario ingresar al menos dos palabras para la búsqueda.");

                Externos.Logica.Garancheck.Modelos.Sujeto r_sujeto = null;
                r_sujeto = await _garancheck.GetCoincidenciasNombresAsync(nombre);

                if (r_sujeto == null)
                    throw new Exception("No se ha generado elementos en la búsqueda.");
                else
                {
                    if (r_sujeto.SujetosIdentificaciones != null && r_sujeto.SujetosIdentificaciones.Any())
                        return r_sujeto.SujetosIdentificaciones;
                    else
                        throw new Exception("No se ha generado elementos en la búsqueda.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return null;
            }
        }

        [HttpPost]
        [Route("BuscarPropietarioAuto")]
        public async Task<IActionResult> BuscarPropietarioAuto(string placa)
        {
            try
            {
                if (string.IsNullOrEmpty(placa?.Trim()))
                    throw new Exception("No se ha ingresado una placa en la consulta.");

                if (placa.Length < 7)
                    throw new Exception("Faltan caracteres en la placa del vehículo.");

                Regex r = new Regex(@"^[A-Za-z0-9]+$");
                if (!r.IsMatch(placa))
                    throw new Exception("El formato de la placa es incorrecto.");

                //var propietarioVehiculo = _ant.ObtenerPropietarioAutoApiston(placa);
                //if (!string.IsNullOrEmpty(propietarioVehiculo))
                //{
                //    var nombrePropietario = await BuscarPersonaCoincidencia(propietarioVehiculo);
                //    if (nombrePropietario != null && nombrePropietario.Any())
                //        return Json(new PropietarioViewModel()
                //        {
                //            Cedula = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Cedula?.Trim()) ? nombrePropietario.FirstOrDefault().Cedula : string.Empty,
                //            Nombre = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Nombre?.Trim()) ? nombrePropietario.FirstOrDefault().Nombre : string.Empty,
                //            Tipo = Dominio.Constantes.General.Cedula,
                //        });
                //    else
                //        return Json(new PropietarioViewModel()
                //        {
                //            Cedula = string.Empty,
                //            Nombre = propietarioVehiculo,
                //            Tipo = Dominio.Constantes.General.Cedula,
                //        });
                //}

                //var propietarioVehiculo = _ant.ObtenerPropietarioAutoCEBrasil(placa);
                //if (propietarioVehiculo != null && !string.IsNullOrEmpty(propietarioVehiculo.Nombre))
                //{
                //    var nombrePropietario = await BuscarPersonaCoincidencia(propietarioVehiculo.Nombre);
                //    if (nombrePropietario != null && nombrePropietario.Any())
                //        return Json(new PropietarioViewModel()
                //        {
                //            Cedula = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Cedula?.Trim()) ? nombrePropietario.FirstOrDefault().Cedula : string.Empty,
                //            Nombre = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Nombre?.Trim()) ? nombrePropietario.FirstOrDefault().Nombre : string.Empty,
                //            Tipo = propietarioVehiculo.TipoIdentificacion == "C" ? Dominio.Constantes.General.Cedula : Dominio.Constantes.General.Ruc,
                //        });
                //    else
                //        return Json(new PropietarioViewModel()
                //        {
                //            Cedula = string.Empty,
                //            Nombre = propietarioVehiculo.Nombre,
                //            Tipo = propietarioVehiculo.TipoIdentificacion == "C" ? Dominio.Constantes.General.Cedula : Dominio.Constantes.General.Ruc,
                //        });
                //}

                var propietarioAuto = _ant.ObtenerPropietarioAutoEcuadorLegal(placa);
                if (propietarioAuto != null && !string.IsNullOrEmpty(propietarioAuto.Nombre) && !string.IsNullOrEmpty(propietarioAuto.TipoIdentificacion?.Trim()) && propietarioAuto.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                {
                    var nombrePropietario = await BuscarPersonaCoincidencia(propietarioAuto.Nombre);
                    if (nombrePropietario != null && nombrePropietario.Any())
                        return Json(new PropietarioViewModel()
                        {
                            Cedula = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Cedula?.Trim()) ? nombrePropietario.FirstOrDefault().Cedula : string.Empty,
                            Nombre = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Nombre?.Trim()) ? nombrePropietario.FirstOrDefault().Nombre : string.Empty,
                            Tipo = !string.IsNullOrEmpty(propietarioAuto.TipoIdentificacion?.Trim()) ? propietarioAuto.TipoIdentificacion.Trim() : string.Empty,
                        });
                    else
                        return Json(new PropietarioViewModel()
                        {
                            Cedula = string.Empty,
                            Nombre = propietarioAuto.Nombre,
                            Tipo = !string.IsNullOrEmpty(propietarioAuto.TipoIdentificacion?.Trim()) ? propietarioAuto.TipoIdentificacion.Trim() : string.Empty,
                        });
                }
                else if (propietarioAuto != null && !string.IsNullOrEmpty(propietarioAuto.Nombre) && !string.IsNullOrEmpty(propietarioAuto.TipoIdentificacion?.Trim()) && propietarioAuto.TipoIdentificacion == Dominio.Constantes.General.Ruc)
                {
                    var nombrePropietario = await BuscarPersonaCoincidencia(propietarioAuto.Nombre);
                    if (nombrePropietario != null && nombrePropietario.Any())
                        return Json(new PropietarioViewModel()
                        {
                            Cedula = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Cedula?.Trim()) ? nombrePropietario.FirstOrDefault().Cedula : string.Empty,
                            Nombre = !string.IsNullOrEmpty(nombrePropietario.FirstOrDefault().Nombre?.Trim()) ? nombrePropietario.FirstOrDefault().Nombre : string.Empty,
                            Tipo = Dominio.Constantes.General.Cedula,
                        });
                    else
                        return Json(new PropietarioViewModel()
                        {
                            Cedula = string.Empty,
                            Nombre = propietarioAuto.Nombre,
                            Tipo = !string.IsNullOrEmpty(propietarioAuto.TipoIdentificacion?.Trim()) ? propietarioAuto.TipoIdentificacion.Trim() : string.Empty,
                        });
                }
                else
                {
                    var propietarioAutoHistorico = await _ant.ObtenerInformacionPropietarioHistorico(placa);
                    if (propietarioAutoHistorico != null)
                    {
                        return Json(new PropietarioViewModel()
                        {
                            Cedula = !string.IsNullOrEmpty(propietarioAutoHistorico.Identificacion?.Trim()) ? propietarioAutoHistorico.Identificacion.Trim().ToUpper() : string.Empty,
                            Nombre = !string.IsNullOrEmpty(propietarioAutoHistorico.NombrePropietario?.Trim()) ? propietarioAutoHistorico.NombrePropietario.Trim().ToUpper() : string.Empty,
                            Tipo = Dominio.Constantes.General.Cedula,
                            Historico = true
                        });
                    }
                    else
                        throw new Exception("No se encontró nombre del propietario del vehículo.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Json(null);
            }
        }
        #endregion Busqueda

        #region Historiales
        [HttpPost]
        [Route("GuardarHistorial")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> GuardarHistorial(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han ingresado los datos de la consulta.");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("La identificación ingresada no es válida.");

                var idUsuario = User.GetUserId<int>();
                var identificacionOriginal = modelo.Identificacion?.Trim();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                if (!usuarioActual.Empresa.PlanesEmpresas.Any(m => m.Estado == Dominio.Tipos.EstadosPlanesEmpresas.Activo))
                    throw new Exception("No es posible realizar esta consulta ya que no tiene planes activos vigentes.");

                if (usuarioActual.Empresa.VistaPersonalizada)
                    ValidarEmpresaPersonalizada(new ParametroClienteViewModel()
                    {
                        IdentificacionEmpresa = usuarioActual.Empresa.Identificacion,
                        Identificacion = modelo.Identificacion.Trim(),
                        Valor_1790325083001 = modelo.Valor_1790325083001
                    });

                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1790221806001)
                {
                    var pathEmpleadosBancoAmazonas = Path.Combine("wwwroot", "data", "dataEmpleadosBancoAmazonas.json");
                    var lstEmpleadosBAmazonas = JsonConvert.DeserializeObject<List<EmpleadoBAmazonasViewModel>>(System.IO.File.ReadAllText(pathEmpleadosBancoAmazonas));
                    if (lstEmpleadosBAmazonas != null && lstEmpleadosBAmazonas.Any() && lstEmpleadosBAmazonas.Any(x => x.Identificacion == modelo.Identificacion?.Trim()))
                        throw new Exception("No puede consultar empleados del BANCO AMAZONAS S.A.");
                }

                var idPlan = 0;
                var tipoIdentificacion = string.Empty;
                var parametros = string.Empty;
                if (ValidacionViewModel.ValidarCedula(identificacionOriginal))
                {
                    tipoIdentificacion = Dominio.Constantes.General.Cedula;
                    var planEmpresaCedula = usuarioActual.Empresa.PlanesEmpresas.FirstOrDefault(m => (m.NumeroConsultasCedula > 0 || (m.NumeroConsultas.HasValue && m.NumeroConsultas.Value > 0)) && m.Estado == Dominio.Tipos.EstadosPlanesEmpresas.Activo);
                    if (planEmpresaCedula == null)
                        throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo para cédulas.");

                    if (planEmpresaCedula.BloquearConsultas)
                    {
                        if (planEmpresaCedula.PlanDemostracion)
                        {
                            if (planEmpresaCedula.NumeroConsultas.HasValue && planEmpresaCedula.NumeroConsultas.Value > 0)
                            {
                                var historialUnificado = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaCedula.Id);
                                if (historialUnificado >= planEmpresaCedula.NumeroConsultas)
                                    throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas ({planEmpresaCedula.NumeroConsultas}) en su plan de demostración.");
                            }
                            else
                                throw new Exception("El plan contratado no tiene definido un número de consultas");
                        }
                        else
                        {
                            if (planEmpresaCedula.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Separado)
                            {
                                var fechaActual = DateTime.Today;
                                var historialCedulas = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaCedula.Id && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year && m.TipoIdentificacion == Dominio.Constantes.General.Cedula);
                                if (historialCedulas >= planEmpresaCedula.NumeroConsultasCedula)
                                    throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas para cédulas ({planEmpresaCedula.NumeroConsultasCedula}) en su plan.");
                            }
                            else if (planEmpresaCedula.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado)
                            {
                                if (planEmpresaCedula.NumeroConsultas.HasValue && planEmpresaCedula.NumeroConsultas.Value > 0)
                                {
                                    var fechaActual = DateTime.Today;
                                    var historialUnificado = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaCedula.Id && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year);
                                    if (historialUnificado >= planEmpresaCedula.NumeroConsultas)
                                        throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas ({planEmpresaCedula.NumeroConsultas}) en su plan.");
                                }
                                else
                                    throw new Exception("El plan contratado no tiene definido un número de consultas");
                            }
                            else
                                throw new Exception("El plan contratado no tiene definido un tipo de consultas");
                        }
                    }

                    idPlan = planEmpresaCedula.Id;
                }
                else if (ValidacionViewModel.ValidarRuc(identificacionOriginal) || ValidacionViewModel.ValidarRucJuridico(identificacionOriginal) || ValidacionViewModel.ValidarRucSectorPublico(identificacionOriginal))
                {
                    if (ValidacionViewModel.ValidarRuc(identificacionOriginal))
                        tipoIdentificacion = Dominio.Constantes.General.RucNatural;

                    if (ValidacionViewModel.ValidarRucJuridico(identificacionOriginal))
                        tipoIdentificacion = Dominio.Constantes.General.RucJuridico;

                    if (ValidacionViewModel.ValidarRucSectorPublico(identificacionOriginal))
                        tipoIdentificacion = Dominio.Constantes.General.SectorPublico;

                    var planEmpresaRucs = usuarioActual.Empresa.PlanesEmpresas.FirstOrDefault(m => (m.NumeroConsultasRuc > 0 || (m.NumeroConsultas.HasValue && m.NumeroConsultas.Value > 0)) && m.Estado == Dominio.Tipos.EstadosPlanesEmpresas.Activo);
                    if (planEmpresaRucs == null)
                        throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo para RUCs naturales o jurídicos.");

                    if (planEmpresaRucs.BloquearConsultas)
                    {
                        if (planEmpresaRucs.PlanDemostracion)
                        {
                            if (planEmpresaRucs.NumeroConsultas.HasValue && planEmpresaRucs.NumeroConsultas.Value > 0)
                            {
                                var historialUnificado = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaRucs.Id);
                                if (historialUnificado >= planEmpresaRucs.NumeroConsultas)
                                    throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas ({planEmpresaRucs.NumeroConsultas}) en su plan de demostración.");
                            }
                            else
                                throw new Exception("El plan contratado no tiene definido un número de consultas");
                        }
                        else
                        {
                            if (planEmpresaRucs.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Separado)
                            {
                                var fechaActual = DateTime.Today;
                                var historialCedulas = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaRucs.Id && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year && (m.TipoIdentificacion == Dominio.Constantes.General.RucNatural || m.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || m.TipoIdentificacion == Dominio.Constantes.General.SectorPublico));
                                if (historialCedulas >= planEmpresaRucs.NumeroConsultasRuc)
                                    throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas para RUCs ({planEmpresaRucs.NumeroConsultasRuc}) en su plan.");
                            }
                            else if (planEmpresaRucs.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado)
                            {
                                if (planEmpresaRucs.NumeroConsultas.HasValue && planEmpresaRucs.NumeroConsultas.Value > 0)
                                {
                                    var fechaActual = DateTime.Today;
                                    var historialUnificado = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaRucs.Id && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year);
                                    if (historialUnificado >= planEmpresaRucs.NumeroConsultas)
                                        throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas ({planEmpresaRucs.NumeroConsultas}) en su plan.");
                                }
                                else
                                    throw new Exception("El plan contratado no tiene definido un número de consultas");
                            }
                            else
                                throw new Exception("El plan contratado no tiene definido un tipo de consultas");
                        }
                    }
                    idPlan = planEmpresaRucs.Id;
                }
                else
                    throw new Exception("La identificación ingresada no corresponde ni a cédulas ni a RUCs");

                if (idPlan == 0)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene planes vigentes.");

                var ip = HttpContext.Connection.RemoteIpAddress?.ToString();
                _logger.LogInformation($"Procesando historial de usuario: {idUsuario}. Identificación: {identificacionOriginal}. IP: {ip}.");

                var periodoTemp = 0;
                if (ValidacionViewModel.ValidarRucJuridico(identificacionOriginal) || ValidacionViewModel.ValidarRucSectorPublico(identificacionOriginal))
                {
                    periodoTemp = 1;
                    parametros = JsonConvert.SerializeObject(new { Identificacion = identificacionOriginal, Periodos = new int[] { periodoTemp } });
                    var infoPeriodos = _configuration.GetSection("AppSettings:PeriodosDinamicos").Get<PeriodosDinamicosViewModel>();
                    if (infoPeriodos != null)
                    {
                        var ultimosPeriodos = infoPeriodos.Periodos.Select(m => m.Valor).ToList();
                        parametros = JsonConvert.SerializeObject(new { Identificacion = identificacionOriginal, Periodos = ultimosPeriodos });
                    }
                }
                else
                    parametros = JsonConvert.SerializeObject(new { Identificacion = identificacionOriginal, Periodos = new int[] { periodoTemp } });

                //var habilitarBuro = usuarioActual.Empresa.PlanesBuroCredito.Any(m => m.NumeroMaximoConsultas > 0 && m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);

                _logger.LogInformation("Registrando historial de usuarios en base de datos");
                var idHistorial = await _historiales.GuardarHistorialAsync(new Historial()
                {
                    IdUsuario = idUsuario,
                    DireccionIp = ip?.Trim().ToUpper(),
                    Identificacion = modelo.Identificacion?.Trim().ToUpper(),
                    Periodo = periodoTemp,
                    Fecha = DateTime.Now,
                    TipoConsulta = Dominio.Tipos.Consultas.Web,
                    ParametrosBusqueda = parametros,
                    IdPlanEmpresa = idPlan,
                    TipoIdentificacion = tipoIdentificacion
                });
                _logger.LogInformation($"Registro de historial exitoso. Id Historial: {idHistorial}");
                //Nueva tabla historial
                var idReporteConsolidado = await _reporteConsolidado.GuardarReporteConsolidadoAsync(new ReporteConsolidado()
                {
                    IdUsuario = idUsuario,
                    DireccionIp = ip?.Trim().ToUpper(),
                    Identificacion = modelo.Identificacion?.Trim().ToUpper(),
                    TipoIdentificacion = tipoIdentificacion,
                    TipoConsulta = Dominio.Tipos.Consultas.Web,
                    ParametrosBusqueda = parametros,
                    Fecha = DateTime.Now,
                    NombreUsuario = usuarioActual.NombreCompleto,
                    IdEmpresa = usuarioActual.IdEmpresa,
                    NombreEmpresa = usuarioActual.Empresa.RazonSocial,
                    IdentificacionEmpresa = usuarioActual.Empresa.Identificacion,
                    HistorialId = idHistorial
                });
                _logger.LogInformation($"Registro de Reporte consolidado exitoso. Id Historial: {idReporteConsolidado}");

                if (usuarioActual.Empresa.VistaPersonalizada)
                {
                    await GuardarParametroClienteHistorial(new ParametroClienteViewModel()
                    {
                        IdHistorial = idHistorial,
                        IdentificacionEmpresa = usuarioActual.Empresa.Identificacion,
                        Valor_1790325083001 = modelo.Valor_1790325083001,
                        IdUsuario = usuarioActual.Id
                    });
                }

                return Json(new { idHistorial, tipoIdentificacion = ValidacionViewModel.ObtenerTipoIdentificacion(identificacionOriginal) });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }

        private async Task GuardarParametroClienteHistorial(ParametroClienteViewModel parametro)
        {
            try
            {
                if (parametro == null)
                    throw new Exception("No se enviaron parametros para clientes personalizados");

                var parametroCliente = Dominio.Tipos.ParametrosClientes.Desconocido;
                var valor = string.Empty;

                switch (parametro.IdentificacionEmpresa)
                {
                    case Dominio.Constantes.Clientes.Cliente1790325083001:
                        parametroCliente = Dominio.Tipos.ParametrosClientes.SegmentoCartera;
                        valor = parametro.Valor_1790325083001 != Dominio.Tipos.Clientes.Cliente1790325083001.SegmentoCartera.Desconocido ? ((short)parametro.Valor_1790325083001).ToString() : string.Empty;
                        break;
                    default:
                        break;
                }

                if (parametroCliente != Dominio.Tipos.ParametrosClientes.Desconocido && !string.IsNullOrEmpty(valor))
                    await _parametrosClientesHistoriales.GuardarParametroClienteHistorialAsync(new ParametroClienteHistorial()
                    {
                        IdHistorial = parametro.IdHistorial,
                        Valor = valor,
                        Parametro = parametroCliente,
                        FechaCreacion = DateTime.Now,
                        UsuarioCreacion = parametro.IdUsuario
                    });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
            }
        }

        private void ValidarEmpresaPersonalizada(ParametroClienteViewModel parametro)
        {
            try
            {
                if (parametro == null)
                    throw new Exception("No se han ingresado los datos de la consulta.");

                switch (parametro.IdentificacionEmpresa)
                {
                    case Dominio.Constantes.Clientes.Cliente1790325083001:
                        if ((ValidacionViewModel.ValidarRucJuridico(parametro.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(parametro.Identificacion)) && parametro.Valor_1790325083001 == Dominio.Tipos.Clientes.Cliente1790325083001.SegmentoCartera.Consumo)
                            throw new Exception("No se puede consultar RUCS con la opción Consumo");

                        break;
                    default:
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                throw;
            }
        }

        [HttpPost]
        [Route("ObtenerResumenConsultas")]
        public async Task<IActionResult> ObtenerResumenConsultas()
        {
            try
            {
                _logger.LogInformation($"Obteniendo resumen de consultas...");
                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                _logger.LogInformation($"Obteniendo resumen de consultas para Usuario: {idUsuario}.");

                var planesVigentes = usuarioActual.Empresa.PlanesEmpresas.Where(m => m.Estado == Dominio.Tipos.EstadosPlanesEmpresas.Activo).ToList();
                if (!planesVigentes.Any())
                    throw new Exception("No es posible realizar esta consulta ya que no tiene planes activos.");

                var planesBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.Where(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo).ToList();
                var planesEvaluaciones = usuarioActual.Empresa.PlanesEvaluaciones.Where(m => m.Estado == Dominio.Tipos.EstadosPlanesEvaluaciones.Activo).ToList();

                var fechaActual = DateTime.Now;
                var idsPlanes = planesVigentes.Select(m => m.Id).ToArray();
                var idsPlanesBuroCredito = planesBuroCredito.Select(m => m.Id).ToArray();
                var idsPlanesEvaluaciones = planesEvaluaciones.Select(m => m.Id).ToArray();

                var historiales = await _historiales.ReadAsync(m => m, m => idsPlanes.Contains(m.IdPlanEmpresa) && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year, null, m => m.Include(x => x.PlanEmpresa));
                var historialesPlanesBuro = await _historiales.ReadAsync(m => m, m => idsPlanesBuroCredito.Contains(m.IdPlanBuroCredito ?? 0) && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year);
                var historialesPlanesEvaluaciones = await _historiales.ReadAsync(m => m, m => idsPlanesEvaluaciones.Contains(m.IdPlanEvaluacion ?? 0) && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year);

                if (historiales.Any())
                {
                    var data = new
                    {
                        Planes = planesVigentes.Select(m => new
                        {
                            IdPlanEmpresa = m.Id,
                            FechaInicioPlan = m.FechaInicioPlan.ToString("dd/MM/yyyy"),
                            FechaFinPlan = m.FechaFinPlan.ToString("dd/MM/yyyy"),
                            FechaCobroRecurrente = m.Empresa.FechaCobroRecurrente.HasValue ? m.Empresa.FechaCobroRecurrente.Value.ToString("dd/MM/yyyy") : "N/A",
                            m.Estado,
                            m.ValorPorConsultaRucs,
                            m.ValorPorConsultaCedulas,
                            ValorAnualRuc = m.ValorPlanAnualRuc,
                            ValorAnualCedula = m.ValorPlanAnualCedula,
                            m.ValorConsultaAdicionalRucs,
                            m.ValorConsultaAdicionalCedulas,
                            ValorMensualRuc = m.ValorPlanMensualRuc,
                            ValorMensualCedula = m.ValorPlanMensualCedula,
                            m.NombrePlan,
                            m.NumeroConsultasRuc,
                            m.NumeroConsultasCedula,
                            MaximoConsultasCedulas = m.NumeroConsultasCedula == int.MaxValue,
                            MaximoConsultasRucs = m.NumeroConsultasRuc == int.MaxValue,
                            EsUnificado = m.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado,
                            MaximoConsultas = m.NumeroConsultas.HasValue && m.NumeroConsultas.Value > 0 ? m.NumeroConsultas.Value == int.MaxValue : false,
                            m.NumeroConsultas,
                            m.ValorPlanAnual,
                            m.ValorPlanMensual,
                            m.ValorPorConsulta,
                            m.ValorConsultaAdicional
                        }),
                        PlanesBuroCredito = planesBuroCredito.Select(m => new
                        {
                            IdPlanBuroCredito = m.Id,
                            FechaInicioPlan = m.FechaInicioPlan.ToString("dd/MM/yyyy"),
                            FechaFinPlan = m.FechaFinPlan.ToString("dd/MM/yyyy"),
                            FechaCobroRecurrente = m.Empresa.FechaCobroRecurrente.HasValue ? m.Empresa.FechaCobroRecurrente.Value.ToString("dd/MM/yyyy") : "N/A",
                            m.Estado,
                            m.ValorConsulta,
                            m.PersistenciaCache,
                            NumeroMaximoConsultas = m.NumeroMaximoConsultas + (m.NumeroMaximoConsultasCompartidas.HasValue ? m.NumeroMaximoConsultasCompartidas.Value : 0),
                            MaximoNumeroConsultas = m.NumeroMaximoConsultas == int.MaxValue,
                            Fuente = m.Fuente.GetEnumDescription()
                        }),
                        PlanesEvaluaciones = planesEvaluaciones.Select(m => new
                        {
                            IdPlanEvaluaciones = m.Id,
                            FechaInicioPlan = m.FechaInicioPlan.ToString("dd/MM/yyyy"),
                            FechaFinPlan = m.FechaFinPlan.ToString("dd/MM/yyyy"),
                            FechaCobroRecurrente = m.Empresa.FechaCobroRecurrente.HasValue ? m.Empresa.FechaCobroRecurrente.Value.ToString("dd/MM/yyyy") : "N/A",
                            m.Estado,
                            m.ValorConsulta,
                            m.ValorConsultaAdicional,
                            NumeroMaximoConsultas = m.NumeroConsultas,
                            MaximoNumeroConsultas = m.NumeroConsultas == int.MaxValue
                        }),
                        Empresa = new
                        {
                            usuarioActual.Empresa.RazonSocial,
                            Ruc = usuarioActual.Empresa.Identificacion
                        },
                        ConsultasRealizadasEmpresa = historiales.GroupBy(m => m.IdPlanEmpresa).Select(m => new
                        {
                            IdPlanEmpresa = m.Key,
                            EsPlanUnificado = m.FirstOrDefault().PlanEmpresa.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado,
                            NumeroConsultasRucs = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.RucNatural || x.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || x.TipoIdentificacion == Dominio.Constantes.General.SectorPublico),
                            NumeroConsultasCedula = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.Cedula),
                            NumeroConsultas = m.Count()
                        }),
                        ConsultasRealizadasUsuario = historiales.Where(m => m.IdUsuario == idUsuario).GroupBy(m => m.IdPlanEmpresa).Select(m => new
                        {
                            IdPlanEmpresa = m.Key,
                            EsPlanUnificado = m.FirstOrDefault().PlanEmpresa.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado,
                            NumeroConsultasRucs = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.RucNatural || x.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || x.TipoIdentificacion == Dominio.Constantes.General.SectorPublico),
                            NumeroConsultasCedula = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.Cedula),
                            NumeroConsultas = m.Count()
                        }),
                        ConsultasRealizadasBuroEmpresa = historialesPlanesBuro.GroupBy(m => m.IdPlanBuroCredito).Select(m => new
                        {
                            IdPlanBuroCredito = m.Key,
                            NumeroConsultas = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.RucNatural || x.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || x.TipoIdentificacion == Dominio.Constantes.General.SectorPublico || x.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                        }),
                        ConsultasRealizadasBuroUsuario = historialesPlanesBuro.Where(m => m.IdUsuario == idUsuario).GroupBy(m => m.IdPlanBuroCredito).Select(m => new
                        {
                            IdPlanBuroCredito = m.Key,
                            NumeroConsultas = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.RucNatural || x.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || x.TipoIdentificacion == Dominio.Constantes.General.SectorPublico || x.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                        }),
                        ConsultasRealizadasEvaluacionesEmpresa = historialesPlanesEvaluaciones.GroupBy(m => m.IdPlanEvaluacion).Select(m => new
                        {
                            IdPlanEvaluaciones = m.Key,
                            NumeroConsultas = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.RucNatural || x.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || x.TipoIdentificacion == Dominio.Constantes.General.SectorPublico || x.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                        }),
                        ConsultasRealizadasEvaluacionesUsuario = historialesPlanesEvaluaciones.Where(m => m.IdUsuario == idUsuario).GroupBy(m => m.IdPlanEvaluacion).Select(m => new
                        {
                            IdPlanEvaluaciones = m.Key,
                            NumeroConsultas = m.Count(x => x.TipoIdentificacion == Dominio.Constantes.General.RucNatural || x.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || x.TipoIdentificacion == Dominio.Constantes.General.SectorPublico || x.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                        }),
                        UltimaConsulta = historiales.Where(s => s.IdUsuario == idUsuario).OrderByDescending(m => m.Id).FirstOrDefault()?.Fecha.ToString("dd/MM/yyyy HH:mm:ss"),
                    };
                    return Ok(data);
                }
                else
                {
                    var historial = (await _historiales.ReadAsync(m => m, m => idsPlanes.Contains(m.IdPlanEmpresa) && m.IdUsuario == idUsuario, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                    var historialBuro = (await _historiales.ReadAsync(m => m, m => idsPlanesBuroCredito.Contains(m.IdPlanBuroCredito ?? 0) && m.IdUsuario == idUsuario, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                    string ultimaConsulta = null;
                    if (historial != null)
                        ultimaConsulta = historial.Fecha.ToString("dd/MM/yyyy HH:mm:ss");

                    return Json(new
                    {
                        Planes = planesVigentes.Select(m => new
                        {
                            IdPlanEmpresa = m.Id,
                            FechaInicioPlan = m.FechaInicioPlan.ToString("dd/MM/yyyy"),
                            FechaFinPlan = m.FechaFinPlan.ToString("dd/MM/yyyy"),
                            FechaCobroRecurrente = m.Empresa.FechaCobroRecurrente.HasValue ? m.Empresa.FechaCobroRecurrente.Value.ToString("dd/MM/yyyy") : "N/A",
                            m.Estado,
                            m.ValorPorConsultaRucs,
                            m.ValorPorConsultaCedulas,
                            ValorAnualRuc = m.ValorPlanAnualRuc,
                            ValorAnualCedula = m.ValorPlanAnualCedula,
                            m.ValorConsultaAdicionalRucs,
                            m.ValorConsultaAdicionalCedulas,
                            ValorMensualRuc = m.ValorPlanMensualRuc,
                            ValorMensualCedula = m.ValorPlanMensualCedula,
                            m.NombrePlan,
                            m.NumeroConsultasRuc,
                            m.NumeroConsultasCedula,
                            MaximoConsultasCedulas = m.NumeroConsultasCedula == int.MaxValue,
                            MaximoConsultasRucs = m.NumeroConsultasRuc == int.MaxValue,
                            EsUnificado = m.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado,
                            MaximoConsultas = m.NumeroConsultas.HasValue && m.NumeroConsultas.Value > 0 ? m.NumeroConsultas.Value == int.MaxValue : false,
                            m.NumeroConsultas,
                            m.ValorPlanAnual,
                            m.ValorPlanMensual,
                            m.ValorPorConsulta,
                            m.ValorConsultaAdicional
                        }),
                        PlanesBuroCredito = planesBuroCredito.Select(m => new
                        {
                            IdPlanBuroCredito = m.Id,
                            FechaInicioPlan = m.FechaInicioPlan.ToString("dd/MM/yyyy"),
                            FechaFinPlan = m.FechaFinPlan.ToString("dd/MM/yyyy"),
                            FechaCobroRecurrente = m.Empresa.FechaCobroRecurrente.HasValue ? m.Empresa.FechaCobroRecurrente.Value.ToString("dd/MM/yyyy") : "N/A",
                            m.Estado,
                            m.ValorConsulta,
                            m.PersistenciaCache,
                            m.NumeroMaximoConsultas,
                            MaximoNumeroConsultas = m.NumeroMaximoConsultas == int.MaxValue,
                            Fuente = m.Fuente.GetEnumDescription()
                        }),
                        PlanesEvaluaciones = planesEvaluaciones.Select(m => new
                        {
                            IdPlanEvaluaciones = m.Id,
                            FechaInicioPlan = m.FechaInicioPlan.ToString("dd/MM/yyyy"),
                            FechaFinPlan = m.FechaFinPlan.ToString("dd/MM/yyyy"),
                            FechaCobroRecurrente = m.Empresa.FechaCobroRecurrente.HasValue ? m.Empresa.FechaCobroRecurrente.Value.ToString("dd/MM/yyyy") : "N/A",
                            m.Estado,
                            m.ValorConsulta,
                            m.ValorConsultaAdicional,
                            NumeroMaximoConsultas = m.NumeroConsultas,
                            MaximoNumeroConsultas = m.NumeroConsultas == int.MaxValue
                        }),
                        Empresa = new
                        {
                            usuarioActual.Empresa.RazonSocial,
                            Ruc = usuarioActual.Empresa.Identificacion
                        },
                        UltimaConsulta = ultimaConsulta,
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }
        #endregion Historiales

        #region Fuentes
        [HttpPost]
        [Route("ObtenerReporteSRI")]
        public async Task<IActionResult> ObtenerReporteSRI(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                var identificacionOriginal = modelo.Identificacion;
                Historial historialTemp = null;
                Externos.Logica.SRi.Modelos.Contribuyente r_sri = null;
                List<Externos.Logica.Balances.Modelos.Similares> r_similares = null;
                Externos.Logica.Garancheck.Modelos.Contacto contactosEmpresa = null;
                Externos.Logica.Balances.Modelos.CatastroFantasma catastroFantasma = null;
                var busquedaNuevaSri = false;
                var cacheSri = false;
                var cacheContactosEmpresa = false;
                var cacheEmpSimilares = false;
                var cacheCatastrosFantasmas = false;
                var cedulaEntidades = false;
                var consultaFantasma = false;
                var impuestosRenta = new List<Externos.Logica.SRi.Modelos.Anexo>();
                ResultadoContribuyente resultadoSri = null;
                var pathTipoFuente = Path.Combine("wwwroot", "data", "fuentesInternas.json");
                var tipoFuente = JsonConvert.DeserializeObject<ParametroFuentesInternasViewModel>(System.IO.File.ReadAllText(pathTipoFuente))?.FuentesInternas.Sri;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente SRI identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                switch (tipoFuente)
                                {
                                    case 1:
                                        resultadoSri = await _sri.GetRespuestaAsyncV2(modelo.Identificacion);
                                        r_sri = resultadoSri?.Contribuyente;
                                        break;
                                    case 2:
                                        r_sri = await _sri.GetCatastroAsync(modelo.Identificacion);
                                        if (r_sri != null)
                                            cacheSri = true;

                                        busquedaNuevaSri = true;
                                        break;
                                    case 3:
                                        r_sri = await _sri.GetEmpresaAccionistaAsync(modelo.Identificacion);
                                        if (r_sri != null && !string.IsNullOrEmpty(r_sri.AgenteRepresentante))
                                            r_sri.RepresentanteLegal = await _garancheck.GetCedulaRepresentanteAsync(r_sri.AgenteRepresentante);

                                        if (r_sri != null)
                                            cacheSri = true;

                                        busquedaNuevaSri = true;
                                        break;
                                    case 4:
                                        r_sri = await _sri.GetContribuyenteHistoricoAsync(modelo.Identificacion);
                                        if (r_sri != null)
                                            cacheSri = true;

                                        busquedaNuevaSri = true;
                                        break;
                                    default:
                                        resultadoSri = await _sri.GetRespuestaAsyncV2(modelo.Identificacion);
                                        r_sri = resultadoSri?.Contribuyente;
                                        break;
                                }
                                contactosEmpresa = await _garancheck.GetContactoAsync(modelo.Identificacion);
                                if (r_sri != null)
                                {
                                    r_similares = await _balances.GetEmpresasSimilaresAsync(modelo.Identificacion);
                                    if (r_sri.Fantasma)
                                    {
                                        catastroFantasma = await _balances.GetCatastrosFantasmasAsync(modelo.Identificacion);
                                        consultaFantasma = true;
                                    }
                                }
                            }
                            else
                            {
                                switch (tipoFuente)
                                {
                                    case 1:
                                        resultadoSri = await _sri.GetRespuestaAsyncV2(modelo.Identificacion);
                                        r_sri = resultadoSri?.Contribuyente;
                                        break;
                                    case 2:
                                        r_sri = await _sri.GetCatastroAsync(modelo.Identificacion);
                                        if (r_sri != null)
                                            cacheSri = true;

                                        busquedaNuevaSri = true;
                                        break;
                                    case 3:
                                        r_sri = await _sri.GetEmpresaAccionistaAsync(modelo.Identificacion);
                                        if (r_sri != null && !string.IsNullOrEmpty(r_sri.AgenteRepresentante))
                                            r_sri.RepresentanteLegal = await _garancheck.GetCedulaRepresentanteAsync(r_sri.AgenteRepresentante);

                                        if (r_sri != null)
                                            cacheSri = true;

                                        busquedaNuevaSri = true;
                                        break;
                                    case 4:
                                        r_sri = await _sri.GetContribuyenteHistoricoAsync(modelo.Identificacion);
                                        if (r_sri != null)
                                            cacheSri = true;

                                        busquedaNuevaSri = true;
                                        break;
                                    default:
                                        resultadoSri = await _sri.GetRespuestaAsyncV2(modelo.Identificacion);
                                        r_sri = resultadoSri?.Contribuyente;
                                        break;
                                }
                                contactosEmpresa = await _garancheck.GetContactoAsync(modelo.Identificacion);
                                if (r_sri != null)
                                {
                                    r_similares = await _balances.GetEmpresasSimilaresAsync(modelo.Identificacion);
                                    if (r_sri.Fantasma)
                                    {
                                        catastroFantasma = await _balances.GetCatastrosFantasmasAsync(modelo.Identificacion);
                                        consultaFantasma = true;
                                    }
                                }
                            }

                            if (r_sri != null && string.IsNullOrEmpty(r_sri.AgenteRepresentante) && string.IsNullOrEmpty(r_sri.RepresentanteLegal) && (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion)))
                            {
                                r_sri.AgenteRepresentante = await _balances.GetNombreRepresentanteCompaniasAsync(modelo.Identificacion);
                                if (string.IsNullOrEmpty(r_sri.AgenteRepresentante))
                                    r_sri.AgenteRepresentante = await _balances.GetRepresentanteLegalEmpresaAccionistaAsync(modelo.Identificacion);

                                if (!string.IsNullOrEmpty(r_sri.AgenteRepresentante))
                                    r_sri.RepresentanteLegal = await _garancheck.GetCedulaRepresentanteAsync(r_sri.AgenteRepresentante);
                            }
                        }

                        //if (r_sri != null) //borrar
                        //{
                        //    if (r_sri.Anexos != null && r_sri.Anexos.Any())
                        //        impuestosRenta.AddRange(r_sri.Anexos.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                        //        {
                        //            Causado = m.Causado.HasValue ? m.Causado.Value : 0d,
                        //            Divisas = m.Divisas.HasValue ? m.Divisas.Value : 0d,
                        //            Formulario = m.Formulario,
                        //            Periodo = m.Periodo
                        //        }).ToList());

                        //    if (r_sri.Rentas != null && r_sri.Rentas.Any())
                        //    {
                        //        if (impuestosRenta.Any())
                        //        {
                        //            foreach (var item in impuestosRenta)
                        //            {
                        //                var impuesto = r_sri.Rentas.FirstOrDefault(m => m.Periodo == item.Periodo);
                        //                if (impuesto != null && impuesto.Causado.HasValue && impuesto.Causado >= 0)
                        //                {
                        //                    item.Formulario = impuesto.Formulario;
                        //                    item.Causado = impuesto.Causado;
                        //                }

                        //                if (impuesto != null && impuesto.Formulario != item.Formulario)
                        //                    item.Formulario = impuesto.Formulario;
                        //            }
                        //        }
                        //        else
                        //        {
                        //            impuestosRenta.AddRange(r_sri.Rentas.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                        //            {
                        //                Causado = m.Causado.HasValue ? m.Causado.Value : 0d,
                        //                Divisas = m.Divisas.HasValue ? m.Divisas.Value : 0d,
                        //                Formulario = m.Formulario,
                        //                Periodo = m.Periodo
                        //            }).ToList());
                        //        }
                        //    }

                        //    if (r_sri.Divisas != null && r_sri.Divisas.Any())
                        //    {
                        //        if (impuestosRenta.Any())
                        //        {
                        //            foreach (var item in impuestosRenta)
                        //            {
                        //                var impuesto = r_sri.Divisas.FirstOrDefault(m => m.Periodo == item.Periodo);
                        //                if (impuesto != null && impuesto.Divisas.HasValue && impuesto.Divisas >= 0)
                        //                    item.Divisas = impuesto.Divisas;
                        //            }
                        //        }
                        //        else
                        //        {
                        //            impuestosRenta.AddRange(r_sri.Divisas.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                        //            {
                        //                Causado = m.Causado.HasValue ? m.Causado.Value : 0d,
                        //                Divisas = m.Divisas.HasValue ? m.Divisas.Value : 0d,
                        //                Formulario = m.Formulario,
                        //                Periodo = m.Periodo
                        //            }).ToList());
                        //        }
                        //    }

                        //    r_sri.Anexos = impuestosRenta.OrderByDescending(m => m.Periodo).ToList();
                        //}

                        if (r_sri == null && resultadoSri != null && !resultadoSri.FuenteActiva)
                        {
                            busquedaNuevaSri = true;
                            var datosDetalleSri = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == identificacionOriginal && m.TipoFuente == Dominio.Tipos.Fuentes.Sri && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleSri != null)
                            {
                                cacheSri = true;
                                r_sri = JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(datosDetalleSri);
                            }
                        }
                        //if (contactosEmpresa == null)//borrar
                        //{
                        //    var datosDetalleContEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == identificacionOriginal && m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //    if (datosDetalleContEmpresa != null)
                        //    {
                        //        cacheContactosEmpresa = true;
                        //        contactosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosDetalleContEmpresa);
                        //    }
                        //}
                        //if (r_similares == null)//borrar
                        //{
                        //    var datosDetalleEmpSimilares = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == identificacionOriginal && m.TipoFuente == Dominio.Tipos.Fuentes.EmpresasSimilares && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //    if (datosDetalleEmpSimilares != null)
                        //    {
                        //        cacheEmpSimilares = true;
                        //        r_similares = JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.Similares>>(datosDetalleEmpSimilares);
                        //    }
                        //}
                        //if (catastroFantasma == null && consultaFantasma)//borrar
                        //{
                        //    var datosDetalleCatastroFantasma = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == identificacionOriginal && m.TipoFuente == Dominio.Tipos.Fuentes.CatastroFantasma && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //    if (datosDetalleCatastroFantasma != null)
                        //    {
                        //        cacheCatastrosFantasmas = true;
                        //        catastroFantasma = JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.CatastroFantasma>(datosDetalleCatastroFantasma);
                        //    }
                        //}
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente SRI con identificación {modelo.Identificacion}: {ex.Message}");
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSri = Path.Combine(pathFuentes, "sriDemo.json");
                    var pathContactoEmpresa = Path.Combine(pathFuentes, "sriContactoEmpresaDemo.json");
                    var pathSimilares = Path.Combine(pathFuentes, "sriSimilaresDemo.json");
                    var pathCatastroFantasma = Path.Combine(pathFuentes, "sriCatastrosDemo.json");
                    r_sri = JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(System.IO.File.ReadAllText(pathSri));
                    r_similares = JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.Similares>>(System.IO.File.ReadAllText(pathSimilares));
                    contactosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(System.IO.File.ReadAllText(pathContactoEmpresa));
                    catastroFantasma = JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.CatastroFantasma>(System.IO.File.ReadAllText(pathCatastroFantasma));
                    busquedaNuevaSri = false;
                }
                if (r_sri != null && string.IsNullOrEmpty(r_sri.RUC))
                {
                    historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.Identificacion))
                        r_sri.RUC = historialTemp.Identificacion;
                    _logger.LogInformation($"historialTemp sri linea 1144 {modelo.Identificacion}");

                }

                var datos = new SRIViewModel()
                {
                    Sri = r_sri,
                    ContactosEmpresa = contactosEmpresa,
                    EmpresasSimilares = r_similares,
                    CatastroFantasma = catastroFantasma,
                    BusquedaNueva = busquedaNuevaSri
                };

                _logger.LogInformation("Fuente de SRI procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente SRI. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesEmpresas = new[] { Dominio.Tipos.Fuentes.Sri, Dominio.Tipos.Fuentes.ContactosEmpresa, Dominio.Tipos.Fuentes.EmpresasSimilares, Dominio.Tipos.Fuentes.CatastroFantasma };
                        var historialesEmpresa = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesEmpresas.Contains(m.TipoFuente));
                        var historialSri = historialesEmpresa.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Sri);
                        var historialContEmpresas = historialesEmpresa.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa);
                        var historialEmpSimilares = historialesEmpresa.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.EmpresasSimilares);
                        var historialCatastroFantasma = historialesEmpresa.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.CatastroFantasma);

                        var historial = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, p => p.Include(p => p.PlanEmpresa), true);
                        var historialConsolidado = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial);
                        if (historial != null)
                        {
                            if (r_sri != null && !string.IsNullOrEmpty(r_sri.RUC?.Trim()) && (!string.IsNullOrEmpty(r_sri.RazonSocial?.Trim()) || !string.IsNullOrEmpty(r_sri.NombreComercial?.Trim())))
                            {
                                historial.RazonSocialEmpresa = !string.IsNullOrEmpty(r_sri.RazonSocial?.Trim()) ? r_sri.RazonSocial?.Trim().ToUpper() : r_sri.NombreComercial?.Trim().ToUpper();
                                if (historial.TipoIdentificacion != Dominio.Constantes.General.RucJuridico && historial.TipoIdentificacion != Dominio.Constantes.General.RucNatural && historial.TipoIdentificacion != Dominio.Constantes.General.SectorPublico)
                                    historial.IdentificacionSecundaria = r_sri.RUC;
                            }
                            if (r_sri != null && !string.IsNullOrEmpty(r_sri.AgenteRepresentante?.Trim()) && !string.IsNullOrEmpty(r_sri.RepresentanteLegal?.Trim()) && string.IsNullOrEmpty(historial.NombresPersona?.Trim()))
                                historial.NombresPersona = r_sri.AgenteRepresentante.Trim().ToUpper();

                            if (r_sri != null && (historial.TipoIdentificacion == Dominio.Constantes.General.Cedula || historial.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historial.TipoIdentificacion == Dominio.Constantes.General.RucNatural) && !string.IsNullOrEmpty(r_sri.RepresentanteLegal?.Trim()) && string.IsNullOrEmpty(historial.IdentificacionSecundaria?.Trim()))
                            {
                                if (ValidacionViewModel.ValidarRuc(r_sri.RepresentanteLegal) && ValidacionViewModel.ValidarRuc(historial.Identificacion))
                                    historial.IdentificacionSecundaria = r_sri.RepresentanteLegal.Substring(0, 10).Trim();
                                else
                                    historial.IdentificacionSecundaria = r_sri.RepresentanteLegal.Trim();
                            }
                            else
                            {
                                if (r_sri != null && r_sri.PersonaSociedad == "SCD" && historial.TipoIdentificacion == Dominio.Constantes.General.Cedula && ValidacionViewModel.ValidarRuc(r_sri.RepresentanteLegal))
                                    historial.IdentificacionSecundaria = r_sri.RepresentanteLegal.Substring(0, 10).Trim();
                                else if (r_sri != null && ValidacionViewModel.ValidarRuc(r_sri.RUC) && string.IsNullOrEmpty(historial.IdentificacionSecundaria))
                                    historial.IdentificacionSecundaria = r_sri.RUC.Substring(0, 10);
                            }
                            await _historiales.UpdateAsync(historial);
                            if (historialConsolidado != null)
                            {
                                historialConsolidado.RazonSocial = historial.RazonSocialEmpresa;
                                historialConsolidado.NombrePersona = historial.NombresPersona;
                                await _reporteConsolidado.UpdateAsync(historialConsolidado);
                            }
                        }

                        if (historial.PlanEmpresa.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1792060346001)
                        {
                            if (ValidacionViewModel.ValidarRuc(historial.Identificacion.Trim()) && (ValidacionViewModel.ValidarRucJuridico(historial.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(historial.Identificacion.Trim())))
                            {
                                historial.IdentificacionSecundaria = null;
                                historial.NombresPersona = null;
                                await _historiales.UpdateAsync(historial);
                            }
                        }

                        if (historialSri != null && (!historialSri.Generado || !busquedaNuevaSri))
                        {
                            historialSri.IdHistorial = modelo.IdHistorial;
                            historialSri.TipoFuente = Dominio.Tipos.Fuentes.Sri;
                            historialSri.Generado = datos.Sri != null;
                            historialSri.Data = datos.Sri != null ? JsonConvert.SerializeObject(datos.Sri) : null;
                            historialSri.Cache = cacheSri;
                            historialSri.FechaRegistro = DateTime.Now;
                            historialSri.Reintento = true;
                            historialSri.DataError = resultadoSri != null ? resultadoSri.Error : null;
                            historialSri.FuenteActiva = resultadoSri != null ? resultadoSri.FuenteActiva : null;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSri);
                            _logger.LogInformation("Historial de la Fuente SRI actualizado correctamente");
                        }
                        else if (historialSri == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Sri,
                                Generado = datos.Sri != null,
                                Data = datos.Sri != null ? JsonConvert.SerializeObject(datos.Sri) : null,
                                Cache = cacheSri,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoSri != null ? resultadoSri.Error : null,
                                FuenteActiva = resultadoSri != null ? resultadoSri.FuenteActiva : null
                            });
                        }

                        if (historialContEmpresas != null && (!historialContEmpresas.Generado || !busquedaNuevaSri))
                        {
                            historialContEmpresas.IdHistorial = modelo.IdHistorial;
                            historialContEmpresas.TipoFuente = Dominio.Tipos.Fuentes.ContactosEmpresa;
                            historialContEmpresas.Generado = datos.ContactosEmpresa != null;
                            historialContEmpresas.Data = datos.ContactosEmpresa != null ? JsonConvert.SerializeObject(datos.ContactosEmpresa) : null;
                            historialContEmpresas.Cache = cacheContactosEmpresa;
                            historialContEmpresas.FechaRegistro = DateTime.Now;
                            historialContEmpresas.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialContEmpresas);
                            _logger.LogInformation("Historial de la Fuente Contactos Empresa actualizado correctamente");
                        }
                        else if (historialContEmpresas == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.ContactosEmpresa,
                                Generado = datos.ContactosEmpresa != null,
                                Data = datos.ContactosEmpresa != null ? JsonConvert.SerializeObject(datos.ContactosEmpresa) : null,
                                Cache = cacheContactosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (historialEmpSimilares != null && (!historialEmpSimilares.Generado || !busquedaNuevaSri))
                        {
                            historialEmpSimilares.IdHistorial = modelo.IdHistorial;
                            historialEmpSimilares.TipoFuente = Dominio.Tipos.Fuentes.EmpresasSimilares;
                            historialEmpSimilares.Generado = datos.EmpresasSimilares != null;
                            historialEmpSimilares.Data = datos.EmpresasSimilares != null ? JsonConvert.SerializeObject(datos.EmpresasSimilares) : null;
                            historialEmpSimilares.Cache = cacheEmpSimilares;
                            historialEmpSimilares.FechaRegistro = DateTime.Now;
                            historialEmpSimilares.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialEmpSimilares);
                            _logger.LogInformation("Historial de la Fuente Empresas Similares actualizado correctamente");
                        }
                        else if (historialEmpSimilares == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.EmpresasSimilares,
                                Generado = datos.EmpresasSimilares != null && datos.EmpresasSimilares.Any(),
                                Data = datos.EmpresasSimilares != null ? JsonConvert.SerializeObject(datos.EmpresasSimilares) : null,
                                Cache = cacheEmpSimilares,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (consultaFantasma)
                        {
                            if (historialCatastroFantasma != null && (!historialCatastroFantasma.Generado || !busquedaNuevaSri))
                            {
                                historialCatastroFantasma.IdHistorial = modelo.IdHistorial;
                                historialCatastroFantasma.TipoFuente = Dominio.Tipos.Fuentes.CatastroFantasma;
                                historialCatastroFantasma.Generado = datos.CatastroFantasma != null;
                                historialCatastroFantasma.Data = datos.CatastroFantasma != null ? JsonConvert.SerializeObject(datos.CatastroFantasma) : null;
                                historialCatastroFantasma.Cache = cacheCatastrosFantasmas;
                                historialCatastroFantasma.FechaRegistro = DateTime.Now;
                                historialCatastroFantasma.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialCatastroFantasma);
                                _logger.LogInformation("Historial de la Fuente Catastros Fantasmas actualizado correctamente");
                            }
                            else if (historialCatastroFantasma == null)
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.CatastroFantasma,
                                    Generado = datos.CatastroFantasma != null,
                                    Data = datos.CatastroFantasma != null ? JsonConvert.SerializeObject(datos.CatastroFantasma) : null,
                                    Cache = cacheCatastrosFantasmas,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });

                            }
                        }
                        _logger.LogInformation("Historial de la Fuente SRI procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteSri", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteSri", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteRentasSRI")]
        public async Task<IActionResult> ObtenerReporteRentasSRI(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                Externos.Logica.SRi.Modelos.Contribuyente r_sri = null;
                List<Externos.Logica.SRi.Resultados._Impuesto> r_impuestosRentas = null;
                var impuestosRenta = new List<Externos.Logica.SRi.Modelos.Anexo>();
                var hostRentas = string.Empty;

                var identificacionOriginal = modelo.Identificacion;
                var busquedaNuevaRentas = false;
                var cacheRentas = false;
                modelo.Identificacion = modelo.Identificacion.Trim();

                var detalleHistorialSri = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Sri && m.Generado, null, i => i.Include(m => m.Historial).ThenInclude(m => m.Usuario).ThenInclude(m => m.Empresa), true);
                hostRentas = !string.IsNullOrWhiteSpace(detalleHistorialSri.Historial.Usuario.Empresa.DireccionIp) ? detalleHistorialSri.Historial.Usuario.Empresa.DireccionIp : null;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Rentas SRI identificación: {modelo.Identificacion}");
                        if (detalleHistorialSri != null && !string.IsNullOrEmpty(detalleHistorialSri.Data))
                        {
                            r_sri = JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(detalleHistorialSri.Data);
                            if (r_sri != null)
                            {
                                if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    modelo.Identificacion = modelo.Identificacion.Substring(0, 10);

                                r_impuestosRentas = _sri.ObtenerImpuestoRentaCE(modelo.Identificacion, hostRentas);
                                if (r_impuestosRentas == null)
                                {
                                    busquedaNuevaRentas = true;
                                    var datosDetalleRentasSri = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == identificacionOriginal && m.TipoFuente == Dominio.Tipos.Fuentes.RentasSri && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                    if (datosDetalleRentasSri != null)
                                    {
                                        cacheRentas = true;
                                        r_impuestosRentas = JsonConvert.DeserializeObject<List<Externos.Logica.SRi.Resultados._Impuesto>>(datosDetalleRentasSri);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Rentas SRI con identificación {modelo.Identificacion}: {ex.Message}");
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathRentasSri = Path.Combine(pathFuentes, "sriRentasDemo.json");
                    var pathSri = Path.Combine(pathFuentes, "sriDemo.json");
                    r_impuestosRentas = JsonConvert.DeserializeObject<List<Externos.Logica.SRi.Resultados._Impuesto>>(System.IO.File.ReadAllText(pathRentasSri));
                    r_sri = JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(System.IO.File.ReadAllText(pathSri));
                    busquedaNuevaRentas = false;
                }

                try
                {
                    if (r_sri != null && r_impuestosRentas != null && r_impuestosRentas.Any())
                    {
                        if (r_sri.PersonaSociedad.Equals("SCD"))
                        {
                            r_sri.Anexos = r_impuestosRentas.Where(m => m.Fuente == Externos.Logica.SRi.Tipos.Fuente.Anexo).Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                            {
                                Causado = m.ImpuestoCausado,
                                Periodo = (short)m.AnioFiscal,
                                Divisas = m.SalidaDivisas
                            }).ToList();
                        }
                        else if (r_sri.PersonaSociedad.Equals("PNL"))
                        {
                            r_sri.Rentas = r_impuestosRentas.Where(m => m.Fuente == Externos.Logica.SRi.Tipos.Fuente.Renta_102).Select(m => new Externos.Logica.SRi.Modelos.Renta()
                            {
                                Causado = m.RentaCausadoRetenido,
                                Periodo = (short)m.AnioFiscal,
                                Divisas = m.SalidaDivisas
                            }).ToList();
                            r_sri.Anexos = r_impuestosRentas.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                            {
                                Causado = (m.RentaCausadoRetenidoRelacionDependencia < 0 && m.Fuente == Externos.Logica.SRi.Tipos.Fuente.Divisas) ? 0 : m.RentaCausadoRetenidoRelacionDependencia,
                                Periodo = (short)m.AnioFiscal,
                                Divisas = m.SalidaDivisas,
                                Formulario = m.Fuente == Externos.Logica.SRi.Tipos.Fuente.Divisas ? (short)0 : (short)107,
                            }).ToList();
                            r_sri.Divisas = r_impuestosRentas.Where(m => m.Fuente == Externos.Logica.SRi.Tipos.Fuente.Divisas).Select(m => new Externos.Logica.SRi.Modelos.Divisa()
                            {
                                Divisas = m.SalidaDivisas,
                                Periodo = (short)m.AnioFiscal
                            }).ToList();
                        }

                        if (r_sri.Anexos != null && r_sri.Anexos.Any())
                            impuestosRenta.AddRange(r_sri.Anexos.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                            {
                                Causado = m.Causado.HasValue ? m.Causado.Value : 0d,
                                Divisas = m.Divisas.HasValue ? m.Divisas.Value : 0d,
                                Formulario = m.Formulario,
                                Periodo = m.Periodo
                            }).ToList());

                        if (r_sri.Rentas != null && r_sri.Rentas.Any())
                        {
                            if (impuestosRenta.Any())
                            {
                                foreach (var item in impuestosRenta)
                                {
                                    var impuesto = r_sri.Rentas.FirstOrDefault(m => m.Periodo == item.Periodo);
                                    if (impuesto != null && impuesto.Causado.HasValue && impuesto.Causado >= 0)
                                    {
                                        item.Formulario = impuesto.Formulario;
                                        item.Causado = impuesto.Causado;
                                    }

                                    if (impuesto != null && impuesto.Formulario != item.Formulario)
                                        item.Formulario = impuesto.Formulario;
                                }
                            }
                            else
                            {
                                impuestosRenta.AddRange(r_sri.Rentas.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                                {
                                    Causado = m.Causado.HasValue ? m.Causado.Value : 0d,
                                    Divisas = m.Divisas.HasValue ? m.Divisas.Value : 0d,
                                    Formulario = m.Formulario,
                                    Periodo = m.Periodo
                                }).ToList());
                            }
                        }

                        if (r_sri.Divisas != null && r_sri.Divisas.Any())
                        {
                            if (impuestosRenta.Any())
                            {
                                foreach (var item in impuestosRenta)
                                {
                                    var impuesto = r_sri.Divisas.FirstOrDefault(m => m.Periodo == item.Periodo);
                                    if (impuesto != null && impuesto.Divisas.HasValue && impuesto.Divisas >= 0)
                                        item.Divisas = impuesto.Divisas;
                                }
                            }
                            else
                            {
                                impuestosRenta.AddRange(r_sri.Divisas.Select(m => new Externos.Logica.SRi.Modelos.Anexo()
                                {
                                    Causado = m.Causado.HasValue ? m.Causado.Value : 0d,
                                    Divisas = m.Divisas.HasValue ? m.Divisas.Value : 0d,
                                    Formulario = m.Formulario,
                                    Periodo = m.Periodo
                                }).ToList());
                            }
                        }

                        r_sri.Anexos = impuestosRenta.OrderByDescending(m => m.Periodo).ToList();
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al procesar la información de Rentas SRI con identificación {modelo.Identificacion}: {ex.Message}");
                }

                var datos = new SRIViewModel()
                {
                    Sri = r_sri,
                    BusquedaNueva = busquedaNuevaRentas
                };

                _logger.LogInformation("Fuente de Rentas SRI procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Rentas SRI. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialRentas = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Fuentes.RentasSri);
                        if (historialRentas != null && (!historialRentas.Generado || !busquedaNuevaRentas))
                        {
                            historialRentas.IdHistorial = modelo.IdHistorial;
                            historialRentas.TipoFuente = Dominio.Tipos.Fuentes.RentasSri;
                            historialRentas.Generado = r_impuestosRentas != null && r_impuestosRentas.Any();
                            historialRentas.Data = r_impuestosRentas != null && r_impuestosRentas.Any() ? JsonConvert.SerializeObject(r_impuestosRentas) : null;
                            historialRentas.Cache = cacheRentas;
                            historialRentas.FechaRegistro = DateTime.Now;
                            historialRentas.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialRentas);
                            _logger.LogInformation("Historial de la Fuente Rentas SRI actualizado correctamente");
                        }
                        else if (historialRentas == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.RentasSri,
                                Generado = r_impuestosRentas != null && r_impuestosRentas.Any(),
                                Data = r_impuestosRentas != null ? JsonConvert.SerializeObject(r_impuestosRentas) : null,
                                Cache = cacheRentas,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente Rentas SRI procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");

                    if (detalleHistorialSri != null && r_sri != null && r_impuestosRentas != null && r_impuestosRentas.Any())
                    {
                        detalleHistorialSri.Data = JsonConvert.SerializeObject(r_sri);
                        detalleHistorialSri.FechaRegistro = DateTime.Now;
                        detalleHistorialSri.Observacion = "ACTUALIZACION DE DATA JSON POR CONSULTA DE RUC";
                        await _detallesHistorial.ActualizarDetalleHistorialAsync(detalleHistorialSri);
                        _logger.LogInformation("Historial de la Fuente Rentas SRI actualizado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteRentasSri", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteRentasSri", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteCivil")]
        public async Task<IActionResult> ObtenerReporteCivil(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();

                Externos.Logica.Garancheck.Modelos.Persona r_garancheck = null;
                Externos.Logica.Garancheck.Modelos.Personal datosPersonal = null;
                Externos.Logica.Garancheck.Modelos.RegistroCivil registroCivil = null;
                Externos.Logica.RegistroCivilWS.Modelos.RegistroCivil r_registroWS = null;
                var datos = new CivilViewModel();
                Historial historialTemp = null;
                ReporteConsolidado historialConsolidadoTemp = null;
                var cedulaEntidades = false;
                var cacheCivil = false;
                var cachePersonal = false;
                var cacheRegistroCivil = false;
                var busquedaNuevaCivil = false;
                var consultaGenalogia = false;
                ViewBag.Contactabilidad = false;

                var pathTipoFuente = Path.Combine("wwwroot", "data", "fuentesInternas.json");
                var tipoFuente = JsonConvert.DeserializeObject<ParametroFuentesInternasViewModel>(System.IO.File.ReadAllText(pathTipoFuente))?.FuentesInternas.RegistroCivil;

                historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, n => n.Include(t => t.PlanEmpresa), true);
                historialConsolidadoTemp = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial);

                if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                    ViewBag.Contactabilidad = true;

                try
                {
                    var idEmpresasGenealogia = new List<int>();
                    var pathEmpresasGenealogia = Path.Combine("wwwroot", "data", "empresasGenealogiaCivil.json");
                    var archivoGenealogia = System.IO.File.ReadAllText(pathEmpresasGenealogia);
                    var empresasGenealogiaCivil = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoGenealogia);
                    if (empresasGenealogiaCivil != null && empresasGenealogiaCivil.Any())
                        idEmpresasGenealogia = empresasGenealogiaCivil.Select(m => m.Id).Distinct().ToList();
                    var idempresa = historialTemp.PlanEmpresa.IdEmpresa;
                    if (idEmpresasGenealogia.Contains(idempresa)) consultaGenalogia = true;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Civil identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        try
                        {
                            var idEmpresasConsultaHistorica = new List<int>();
                            var pathEmpresasConsultaHistorico = Path.Combine("wwwroot", "data", "empresasCivilHistorico.json");
                            var archivoHistorico = System.IO.File.ReadAllText(pathEmpresasConsultaHistorico);
                            var empresasConsultaHistorica = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoHistorico);
                            if (empresasConsultaHistorica != null && empresasConsultaHistorica.Any())
                                idEmpresasConsultaHistorica = empresasConsultaHistorica.Select(m => m.Id).Distinct().ToList();

                            if (idEmpresasConsultaHistorica.Contains(historialTemp.PlanEmpresa.IdEmpresa))
                            {
                                tipoFuente = 1;
                            }
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, ex.Message);
                        }

                        //CONSULTA CHEVYPLAN
                        if (historialTemp.PlanEmpresa.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1791927966001)
                        {
                            if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
                                        datosPersonal = await _garancheck.GetInformacionPersonalAsync(modelo.Identificacion);
                                        r_registroWS = await _registroWS.GetRespuestaChevyplan(modelo.Identificacion);

                                        if (r_registroWS != null)
                                            registroCivil = new Externos.Logica.Garancheck.Modelos.RegistroCivil()
                                            {
                                                Cedula = r_registroWS.Cedula,
                                                Nombre = r_registroWS.Nombre,
                                                Genero = r_registroWS.Genero,
                                                FechaNacimiento = r_registroWS.FechaNacimiento,
                                                EstadoCivil = r_registroWS.EstadoCivil,
                                                Conyuge = r_registroWS.Conyuge,
                                                CedulaConyuge = r_registroWS.CedulaConyuge,
                                                Nacionalidad = r_registroWS.Nacionalidad,
                                                FechaCedulacion = r_registroWS.FechaCedulacion,
                                                CedulaPadre = r_registroWS.CedulaPadre,
                                                NombrePadre = r_registroWS.NombrePadre,
                                                CedulaMadre = r_registroWS.CedulaMadre,
                                                NombreMadre = r_registroWS.NombreMadre,
                                                Instruccion = r_registroWS.Instruccion,
                                                Profesion = r_registroWS.Profesion
                                            };
                                    }
                                }
                                else
                                {
                                    if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                        {
                                            if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                            {
                                                datosPersonal = await _garancheck.GetInformacionPersonalAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                r_registroWS = await _registroWS.GetRespuestaChevyplan(historialTemp.IdentificacionSecundaria.Trim());

                                                if (r_registroWS != null)
                                                    registroCivil = new Externos.Logica.Garancheck.Modelos.RegistroCivil()
                                                    {
                                                        Cedula = r_registroWS.Cedula,
                                                        Nombre = r_registroWS.Nombre,
                                                        Genero = r_registroWS.Genero,
                                                        FechaNacimiento = r_registroWS.FechaNacimiento,
                                                        EstadoCivil = r_registroWS.EstadoCivil,
                                                        Conyuge = r_registroWS.Conyuge,
                                                        CedulaConyuge = r_registroWS.CedulaConyuge,
                                                        Nacionalidad = r_registroWS.Nacionalidad,
                                                        FechaCedulacion = r_registroWS.FechaCedulacion,
                                                        CedulaPadre = r_registroWS.CedulaPadre,
                                                        NombrePadre = r_registroWS.NombrePadre,
                                                        CedulaMadre = r_registroWS.CedulaMadre,
                                                        NombreMadre = r_registroWS.NombreMadre,
                                                        Instruccion = r_registroWS.Instruccion,
                                                        Profesion = r_registroWS.Profesion
                                                    };
                                            }
                                        }
                                    }
                                    else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                    {
                                        var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                        if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        {
                                            datosPersonal = await _garancheck.GetInformacionPersonalAsync(cedulaTemp);
                                            r_registroWS = await _registroWS.GetRespuestaChevyplan(cedulaTemp);

                                            if (r_registroWS != null)
                                                registroCivil = new Externos.Logica.Garancheck.Modelos.RegistroCivil()
                                                {
                                                    Cedula = r_registroWS.Cedula,
                                                    Nombre = r_registroWS.Nombre,
                                                    Genero = r_registroWS.Genero,
                                                    FechaNacimiento = r_registroWS.FechaNacimiento,
                                                    EstadoCivil = r_registroWS.EstadoCivil,
                                                    Conyuge = r_registroWS.Conyuge,
                                                    CedulaConyuge = r_registroWS.CedulaConyuge,
                                                    Nacionalidad = r_registroWS.Nacionalidad,
                                                    FechaCedulacion = r_registroWS.FechaCedulacion,
                                                    CedulaPadre = r_registroWS.CedulaPadre,
                                                    NombrePadre = r_registroWS.NombrePadre,
                                                    CedulaMadre = r_registroWS.CedulaMadre,
                                                    NombreMadre = r_registroWS.NombreMadre,
                                                    Instruccion = r_registroWS.Instruccion,
                                                    Profesion = r_registroWS.Profesion
                                                };
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
                                        datosPersonal = await _garancheck.GetInformacionPersonalAsync(modelo.Identificacion);

                                        switch (tipoFuente)
                                        {
                                            case 1:
                                                registroCivil = await _garancheck.GetRegistroCivilLineaAsync(modelo.Identificacion);
                                                if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()))
                                                {
                                                    registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                    registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                }
                                                else if (registroCivil != null && (string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) || string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim())))
                                                {
                                                    registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                    registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                    registroCivil.CedulaMadre = !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) ? registroCivil.CedulaMadre.Trim() : string.Empty;
                                                    registroCivil.NombreMadre = !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) ? registroCivil.NombreMadre.Trim() : string.Empty;
                                                    registroCivil.CedulaPadre = !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) ? registroCivil.CedulaPadre.Trim() : string.Empty;
                                                    registroCivil.NombrePadre = !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()) ? registroCivil.NombrePadre.Trim() : string.Empty;
                                                }

                                                if (registroCivil == null)
                                                    r_garancheck = await _garancheck.GetRespuestaAsync(modelo.Identificacion);
                                                break;
                                            case 2:
                                                r_garancheck = await _garancheck.GetRespuestaAsync(modelo.Identificacion);
                                                break;
                                            case 3:
                                                registroCivil = await _garancheck.GetRegistroCivilHistoricoAsync(modelo.Identificacion);
                                                if (registroCivil != null)
                                                    cacheCivil = true;

                                                busquedaNuevaCivil = true;
                                                break;
                                            case 4:
                                                registroCivil = await _garancheck.GetRegistroCivilLineaAsync(modelo.Identificacion);
                                                if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()))
                                                {
                                                    registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                    registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                }
                                                else if (registroCivil != null && (string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) || string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim())))
                                                {
                                                    registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                    registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                    registroCivil.CedulaMadre = !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) ? registroCivil.CedulaMadre.Trim() : string.Empty;
                                                    registroCivil.NombreMadre = !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) ? registroCivil.NombreMadre.Trim() : string.Empty;
                                                    registroCivil.CedulaPadre = !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) ? registroCivil.CedulaPadre.Trim() : string.Empty;
                                                    registroCivil.NombrePadre = !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()) ? registroCivil.NombrePadre.Trim() : string.Empty;
                                                }

                                                if (registroCivil == null)
                                                    r_garancheck = await _garancheck.GetRespuestaAsync(modelo.Identificacion);
                                                break;
                                            default:
                                                r_garancheck = await _garancheck.GetRespuestaAsync(modelo.Identificacion);
                                                break;
                                        }
                                    }
                                }
                                else
                                {

                                    if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                        {
                                            if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                            {
                                                datosPersonal = await _garancheck.GetInformacionPersonalAsync(historialTemp.IdentificacionSecundaria.Trim());

                                                switch (tipoFuente)
                                                {
                                                    case 1:
                                                        registroCivil = await _garancheck.GetRegistroCivilLineaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()))
                                                        {
                                                            registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                            registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                        }
                                                        else if (registroCivil != null && (string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) || string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim())))
                                                        {
                                                            registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                            registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                            registroCivil.CedulaMadre = !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) ? registroCivil.CedulaMadre.Trim() : string.Empty;
                                                            registroCivil.NombreMadre = !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) ? registroCivil.NombreMadre.Trim() : string.Empty;
                                                            registroCivil.CedulaPadre = !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) ? registroCivil.CedulaPadre.Trim() : string.Empty;
                                                            registroCivil.NombrePadre = !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()) ? registroCivil.NombrePadre.Trim() : string.Empty;
                                                        }

                                                        if (registroCivil == null)
                                                            r_garancheck = await _garancheck.GetRespuestaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        break;
                                                    case 2:
                                                        r_garancheck = await _garancheck.GetRespuestaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        break;
                                                    case 3:
                                                        registroCivil = await _garancheck.GetRegistroCivilHistoricoAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        if (registroCivil != null)
                                                            cacheCivil = true;

                                                        busquedaNuevaCivil = true;
                                                        break;
                                                    case 4:
                                                        registroCivil = await _garancheck.GetRegistroCivilLineaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()))
                                                        {
                                                            registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                            registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                        }
                                                        else if (registroCivil != null && (string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) || string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim())))
                                                        {
                                                            registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                            registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                            registroCivil.CedulaMadre = !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) ? registroCivil.CedulaMadre.Trim() : string.Empty;
                                                            registroCivil.NombreMadre = !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) ? registroCivil.NombreMadre.Trim() : string.Empty;
                                                            registroCivil.CedulaPadre = !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) ? registroCivil.CedulaPadre.Trim() : string.Empty;
                                                            registroCivil.NombrePadre = !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()) ? registroCivil.NombrePadre.Trim() : string.Empty;
                                                        }

                                                        if (registroCivil == null)
                                                            r_garancheck = await _garancheck.GetRespuestaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        break;
                                                    default:
                                                        r_garancheck = await _garancheck.GetRespuestaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                    else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                    {
                                        var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                        if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        {
                                            datosPersonal = await _garancheck.GetInformacionPersonalAsync(cedulaTemp);

                                            switch (tipoFuente)
                                            {
                                                case 1:
                                                    registroCivil = await _garancheck.GetRegistroCivilLineaAsync(cedulaTemp);
                                                    if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()))
                                                    {
                                                        registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                        registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                    }
                                                    else if (registroCivil != null && (string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) || string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim())))
                                                    {
                                                        registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                        registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                        registroCivil.CedulaMadre = !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) ? registroCivil.CedulaMadre.Trim() : string.Empty;
                                                        registroCivil.NombreMadre = !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) ? registroCivil.NombreMadre.Trim() : string.Empty;
                                                        registroCivil.CedulaPadre = !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) ? registroCivil.CedulaPadre.Trim() : string.Empty;
                                                        registroCivil.NombrePadre = !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()) ? registroCivil.NombrePadre.Trim() : string.Empty;
                                                    }

                                                    if (registroCivil == null)
                                                        r_garancheck = await _garancheck.GetRespuestaAsync(cedulaTemp);
                                                    break;
                                                case 2:
                                                    r_garancheck = await _garancheck.GetRespuestaAsync(cedulaTemp);
                                                    break;
                                                case 3:
                                                    registroCivil = await _garancheck.GetRegistroCivilHistoricoAsync(cedulaTemp);
                                                    if (registroCivil != null)
                                                        cacheCivil = true;

                                                    busquedaNuevaCivil = true;
                                                    break;
                                                case 4:
                                                    registroCivil = await _garancheck.GetRegistroCivilLineaAsync(cedulaTemp);
                                                    if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) && !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()))
                                                    {
                                                        registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                        registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                    }
                                                    else if (registroCivil != null && (string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) || string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) || !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim())))
                                                    {
                                                        registroCivil.CedulaConyuge = !string.IsNullOrEmpty(registroCivil.CedulaConyuge?.Trim()) ? registroCivil.CedulaConyuge.Trim() : string.Empty;
                                                        registroCivil.Conyuge = !string.IsNullOrEmpty(registroCivil.Conyuge?.Trim()) ? registroCivil.Conyuge.Trim() : string.Empty;
                                                        registroCivil.CedulaMadre = !string.IsNullOrEmpty(registroCivil.CedulaMadre?.Trim()) ? registroCivil.CedulaMadre.Trim() : string.Empty;
                                                        registroCivil.NombreMadre = !string.IsNullOrEmpty(registroCivil.NombreMadre?.Trim()) ? registroCivil.NombreMadre.Trim() : string.Empty;
                                                        registroCivil.CedulaPadre = !string.IsNullOrEmpty(registroCivil.CedulaPadre?.Trim()) ? registroCivil.CedulaPadre.Trim() : string.Empty;
                                                        registroCivil.NombrePadre = !string.IsNullOrEmpty(registroCivil.NombrePadre?.Trim()) ? registroCivil.NombrePadre.Trim() : string.Empty;
                                                    }

                                                    if (registroCivil == null)
                                                        r_garancheck = await _garancheck.GetRespuestaAsync(cedulaTemp);
                                                    break;
                                                default:
                                                    r_garancheck = await _garancheck.GetRespuestaAsync(cedulaTemp);
                                                    break;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (registroCivil == null && r_garancheck == null)
                        {
                            if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                            {
                                busquedaNuevaCivil = true;
                                var datosDetalleGarancheck = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                if (datosDetalleGarancheck != null)
                                {
                                    cacheCivil = true;
                                    r_garancheck = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(datosDetalleGarancheck);
                                }
                            }
                        }

                        var nacionalidades = new List<NacionalidadViewModel>();
                        var pathNacionalidades = Path.Combine("wwwroot", "data", "dataNacionalidades.json");
                        var nacMadre = new NacionalidadViewModel();
                        var nacPadre = new NacionalidadViewModel();
                        if (System.IO.File.Exists(pathNacionalidades))
                        {
                            nacionalidades = JsonConvert.DeserializeObject<List<NacionalidadViewModel>>(System.IO.File.ReadAllText(pathNacionalidades));
                            if (datosPersonal != null && nacionalidades != null && nacionalidades.Any())
                            {
                                nacMadre = nacionalidades.FirstOrDefault(x => x.Codigo?.Trim().ToUpper() == datosPersonal.NacMadre?.Trim().ToUpper());
                                nacPadre = nacionalidades.FirstOrDefault(x => x.Codigo?.Trim().ToUpper() == datosPersonal.NacPadre?.Trim().ToUpper());

                                datosPersonal.NacPadre = nacPadre != null ? nacPadre.Nacionalidad : "DESCONOCIDO";
                                datosPersonal.NacMadre = nacMadre != null ? nacMadre.Nacionalidad : "DESCONOCIDO";
                            }
                        }

                        if (datosPersonal != null)
                        {
                            if (!string.IsNullOrWhiteSpace(datosPersonal.FechaExpedicion?.Trim()))
                                datosPersonal.FechaExpedicion = DateTime.TryParse(datosPersonal.FechaExpedicion, out _) ? DateTime.Parse(datosPersonal.FechaExpedicion).ToString("dd/MM/yyyy") : string.Empty;

                            if (!string.IsNullOrWhiteSpace(datosPersonal.FechaDefuncion?.Trim()))
                                datosPersonal.FechaDefuncion = DateTime.TryParse(datosPersonal.FechaDefuncion, out _) ? DateTime.Parse(datosPersonal.FechaDefuncion).ToString("dd/MM/yyyy") : string.Empty;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Civil con identificación {modelo.Identificacion}: {ex.Message}");
                    }
                    datos = new CivilViewModel()
                    {
                        Ciudadano = r_garancheck,
                        Personales = datosPersonal,
                        BusquedaNueva = busquedaNuevaCivil,
                        RegistroCivil = registroCivil,
                        ConsultaGenealogia = consultaGenalogia
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathCivil = Path.Combine(pathFuentes, "civilDemo.json");
                    datos = JsonConvert.DeserializeObject<CivilViewModel>(System.IO.File.ReadAllText(pathCivil));
                }

                _logger.LogInformation("Fuente de Civil procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Civil. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesCivil = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.Personales, Dominio.Tipos.Fuentes.RegistroCivil };
                        var historialesCivil = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesCivil.Contains(m.TipoFuente));
                        var historialCiudadano = historialesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano);
                        var historialPersonal = historialesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Personales);
                        var historialRegCivil = historialesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil);

                        var historial = historialTemp;
                        if (historial != null)
                        {
                            if (registroCivil != null && !string.IsNullOrEmpty(registroCivil.Cedula?.Trim()) && !string.IsNullOrEmpty(registroCivil.Nombre?.Trim()) && string.IsNullOrEmpty(historial.NombresPersona?.Trim()))
                            {
                                historial.NombresPersona = registroCivil.Nombre?.Trim().ToUpper();
                                if (historial.TipoIdentificacion != Dominio.Constantes.General.Cedula && string.IsNullOrEmpty(historial.IdentificacionSecundaria?.Trim()))
                                    historial.IdentificacionSecundaria = registroCivil.Cedula?.Trim().ToUpper();
                                await _historiales.UpdateAsync(historial);
                            }

                            if (registroCivil != null && registroCivil.FechaCedulacion != default && string.IsNullOrEmpty(historial.FechaExpedicionCedula?.Trim()))
                            {
                                historial.FechaExpedicionCedula = registroCivil.FechaCedulacion.ToString("dd/MM/yyyy");
                                await _historiales.UpdateAsync(historial);
                            }
                            else if (datosPersonal != null && !string.IsNullOrWhiteSpace(datosPersonal.FechaExpedicion?.Trim()))
                            {
                                historial.FechaExpedicionCedula = datosPersonal.FechaExpedicion.Trim();
                                await _historiales.UpdateAsync(historial);
                            }

                            if (r_garancheck != null && !string.IsNullOrEmpty(r_garancheck.Identificacion?.Trim()) && !string.IsNullOrEmpty(r_garancheck.Nombres?.Trim()) && string.IsNullOrEmpty(historial.NombresPersona?.Trim()))
                            {
                                historial.NombresPersona = r_garancheck.Nombres?.Trim().ToUpper();
                                if (historial.TipoIdentificacion != Dominio.Constantes.General.Cedula && string.IsNullOrEmpty(historial.IdentificacionSecundaria?.Trim()))
                                    historial.IdentificacionSecundaria = r_garancheck.Identificacion?.Trim().ToUpper();
                                await _historiales.UpdateAsync(historial);
                            }
                            if (historialConsolidadoTemp != null)
                            {
                                historialConsolidadoTemp.NombrePersona = historial.NombresPersona;
                                await _reporteConsolidado.UpdateAsync(historialConsolidadoTemp);
                            }
                        }

                        if (historial.PlanEmpresa.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1792060346001)
                        {
                            if (ValidacionViewModel.ValidarRuc(historial.Identificacion.Trim()) && (ValidacionViewModel.ValidarRucJuridico(historial.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(historial.Identificacion.Trim())))
                            {
                                historial.IdentificacionSecundaria = null;
                                historial.NombresPersona = null;
                                await _historiales.UpdateAsync(historial);
                            }
                        }

                        if (historialCiudadano != null && (!historialCiudadano.Generado || !busquedaNuevaCivil))
                        {
                            historialCiudadano.IdHistorial = modelo.IdHistorial;
                            historialCiudadano.TipoFuente = Dominio.Tipos.Fuentes.Ciudadano;
                            historialCiudadano.Generado = r_garancheck != null;
                            historialCiudadano.Data = r_garancheck != null ? JsonConvert.SerializeObject(r_garancheck) : null;
                            historialCiudadano.Cache = cacheCivil;
                            historialCiudadano.FechaRegistro = DateTime.Now;
                            historialCiudadano.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialCiudadano);
                            _logger.LogInformation("Historial de la Fuente Garancheck para Civil se actualizado correctamente");
                        }
                        else if (historialCiudadano == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Ciudadano,
                                Generado = datos.Ciudadano != null,
                                Data = datos.Ciudadano != null ? JsonConvert.SerializeObject(datos.Ciudadano) : null,
                                Cache = cacheCivil,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (historialPersonal != null && (!historialPersonal.Generado || !busquedaNuevaCivil))
                        {
                            historialPersonal.IdHistorial = modelo.IdHistorial;
                            historialPersonal.TipoFuente = Dominio.Tipos.Fuentes.Personales;
                            historialPersonal.Generado = datosPersonal != null;
                            historialPersonal.Data = datosPersonal != null ? JsonConvert.SerializeObject(datosPersonal) : null;
                            historialPersonal.Cache = cachePersonal;
                            historialPersonal.FechaRegistro = DateTime.Now;
                            historialPersonal.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPersonal);
                            _logger.LogInformation("Historial de la Fuente Datos Personales para Civil se actualizado correctamente");
                        }
                        else if (historialPersonal == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Personales,
                                Generado = datos.Personales != null,
                                Data = datos.Personales != null ? JsonConvert.SerializeObject(datos.Personales) : null,
                                Cache = cachePersonal,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (historialRegCivil != null && (!historialRegCivil.Generado || !busquedaNuevaCivil))
                        {
                            historialRegCivil.IdHistorial = modelo.IdHistorial;
                            historialRegCivil.TipoFuente = Dominio.Tipos.Fuentes.RegistroCivil;
                            historialRegCivil.Generado = registroCivil != null;
                            historialRegCivil.Data = registroCivil != null ? JsonConvert.SerializeObject(registroCivil) : null;
                            historialRegCivil.Cache = cacheRegistroCivil;
                            historialRegCivil.FechaRegistro = DateTime.Now;
                            historialRegCivil.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialRegCivil);
                            _logger.LogInformation("Historial de la Fuente Reg. Civil para Civil se actualizado correctamente");
                        }
                        else if (historialRegCivil == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.RegistroCivil,
                                Generado = datos.RegistroCivil != null,
                                Data = datos.RegistroCivil != null ? JsonConvert.SerializeObject(datos.RegistroCivil) : null,
                                Cache = cacheRegistroCivil,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        _logger.LogInformation("Historial de la Fuente Civil procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuentePersona", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePersona", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteArbolFamiliar")]
        public async Task<IActionResult> ObtenerReporteArbolFamiliar(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (modelo.IdHistorial == 0)
                    throw new Exception("El campo IdHistorial es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                var Identificacion = string.Empty;
                Externos.Logica.Garancheck.Modelos.Familia familiares = null;
                Externos.Logica.Garancheck.Modelos.Persona registroCivilP = null;
                Externos.Logica.Garancheck.Modelos.Personal registroCivilH = null;
                var datos = new CivilViewModel();
                var cacheCivil = false;
                var busquedaNuevaFamilia = false;

                var idEmpresasGenealogia = new List<int>();
                try
                {
                    var pathEmpresasGenealogia = Path.Combine("wwwroot", "data", "empresasGenealogiaCivil.json");
                    var archivoGenealogia = System.IO.File.ReadAllText(pathEmpresasGenealogia);
                    var empresasGenealogiaCivil = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoGenealogia);
                    if (empresasGenealogiaCivil != null && empresasGenealogiaCivil.Any())
                        idEmpresasGenealogia = empresasGenealogiaCivil.Select(m => m.Id).Distinct().ToList();
                    var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, n => n.Include(t => t.PlanEmpresa), true);
                    var idempresa = historialTemp.PlanEmpresa.IdEmpresa;
                    if (!idEmpresasGenealogia.Contains(idempresa)) throw new Exception("no tiene acceso a esta función");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                    return Problem("no tiene acceso a esta función");
                }

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Árbol Familiar identificación: {modelo.Identificacion}");
                        var fuentesCivil = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.Personales };

                        //var historialCivil = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Personales && m.Generado, null, null, true);
                        var _historialCivil = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesCivil.Contains(m.TipoFuente) && m.Generado);

                        var historialPersona2 = _historialCivil.FirstOrDefault(m => m.TipoFuente == Fuentes.Ciudadano)?.Data;
                        if (historialPersona2 != null)
                        {
                            registroCivilP = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(historialPersona2);
                            Identificacion = registroCivilP.Identificacion;
                        }

                        var historialCivil = _historialCivil.FirstOrDefault(m => m.TipoFuente == Fuentes.Personales)?.Data;
                        if (historialCivil != null)
                        {
                            if (string.IsNullOrEmpty(Identificacion.Trim()))
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    Identificacion = await _historiales.FirstOrDefaultAsync(m => m.IdentificacionSecundaria, m => m.Id == modelo.IdHistorial, null, null, true);
                                else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    Identificacion = await _historiales.FirstOrDefaultAsync(m => m.Identificacion, m => m.Id == modelo.IdHistorial, null, null, true);
                                else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && (!ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion)))
                                    Identificacion = await _historiales.FirstOrDefaultAsync(m => m.Identificacion.Substring(0, 10), m => m.Id == modelo.IdHistorial, null, null, true);
                            }

                            registroCivilH = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(historialCivil);
                            if (registroCivilH != null)
                                familiares = await _garancheck.GetFamiliaLineaAsync(Identificacion, registroCivilH.CedulaConyuge, registroCivilH.NombreConyuge, registroCivilH.CedMadre, registroCivilH.NombreMadre, registroCivilH.CedPadre, registroCivilH.NombrePadre);

                            if (familiares == null)
                                familiares = await _garancheck.GetFamiliaAsync(Identificacion);
                        }
                        else
                        {
                            var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                            if (!string.IsNullOrEmpty(historialTemp.Identificacion) && ValidacionViewModel.ValidarCedula(historialTemp.Identificacion))
                                familiares = await _garancheck.GetFamiliaAsync(modelo.Identificacion);
                            else if (!string.IsNullOrEmpty(historialTemp.Identificacion) && ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion))
                                familiares = await _garancheck.GetFamiliaAsync(modelo.Identificacion.Substring(0, 10));
                            else if (!string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                familiares = await _garancheck.GetFamiliaAsync(historialTemp.IdentificacionSecundaria);
                        }

                        if (familiares == null)
                        {
                            busquedaNuevaFamilia = true;
                            var datosDetalleFamiliares = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Familiares && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleFamiliares != null)
                            {
                                cacheCivil = true;
                                familiares = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Familia>(datosDetalleFamiliares);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Árbol Familiar con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    datos = new CivilViewModel()
                    {
                        BusquedaNueva = busquedaNuevaFamilia,
                        Familiares = familiares,
                        //RegistroCivil = registroCivil
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathCivil = Path.Combine(pathFuentes, "civilDemo.json");
                    datos = JsonConvert.DeserializeObject<CivilViewModel>(System.IO.File.ReadAllText(pathCivil));
                }

                _logger.LogInformation("Fuente de Árbol Familiar procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Árbol Familiar. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialArbolFamiliar = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Familiares);
                        if (historialArbolFamiliar != null && (!historialArbolFamiliar.Generado || !busquedaNuevaFamilia))
                        {
                            historialArbolFamiliar.IdHistorial = modelo.IdHistorial;
                            historialArbolFamiliar.TipoFuente = Dominio.Tipos.Fuentes.Familiares;
                            historialArbolFamiliar.Generado = familiares != null;
                            historialArbolFamiliar.Data = familiares != null ? JsonConvert.SerializeObject(familiares) : null;
                            historialArbolFamiliar.Cache = cacheCivil;
                            historialArbolFamiliar.FechaRegistro = DateTime.Now;
                            historialArbolFamiliar.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialArbolFamiliar);
                            _logger.LogInformation("Historial de la Fuente Familiares para Civil se actualizado correctamente");
                        }
                        else if (historialArbolFamiliar == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Familiares,
                                Generado = datos.Familiares != null,
                                Data = datos.Familiares != null ? JsonConvert.SerializeObject(datos.Familiares) : null,
                                Cache = cacheCivil,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente Árbol Familiar procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteFamilia", datos);

            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteFamilia", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteContactos")]
        public async Task<IActionResult> ObtenerReporteContactos(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (modelo.IdHistorial == 0)
                    throw new Exception("El campo IdHistorial es obligatorio");

                Externos.Logica.Garancheck.Modelos.Persona r_garancheck = null;
                Externos.Logica.Garancheck.Modelos.Contacto contactos = null;
                Externos.Logica.Garancheck.Modelos.Contacto contactosEmpresa = null;
                Externos.Logica.Garancheck.Modelos.Contacto contactosIess = null;
                Externos.Logica.Garancheck.Modelos.Personal datosPersonal = null;
                Externos.Logica.Garancheck.Modelos.RegistroCivil registroCivil = null;
                var datos = new ContactoViewModel();
                Historial historialTemp = null;
                var cedulaEntidades = false;
                var cacheContactos = false;
                var cacheContactosIess = false;
                var cacheRegistroContactos = false;
                var busquedaNuevaContactos = false;

                historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, n => n.Include(t => t.PlanEmpresa), true);

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Contactos identificación: {modelo.IdHistorial}");
                        if (ValidacionViewModel.ValidarCedula(historialTemp.Identificacion))
                        {
                            cedulaEntidades = true;
                            historialTemp.Identificacion = $"{historialTemp.Identificacion}001";
                        }

                        //CONSULTA CHEVYPLAN
                        if (historialTemp.PlanEmpresa.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1791927966001)
                        {
                            if (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    historialTemp.Identificacion = historialTemp.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.Identificacion))
                                    {
                                        contactos = await _garancheck.GetContactoAsync(historialTemp.Identificacion);
                                        contactosIess = await _garancheck.GetContactoAfiliadoAsync(historialTemp.Identificacion);
                                    }
                                }
                                else
                                {
                                    if (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion))
                                    {
                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                        {
                                            if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                            {
                                                contactos = await _garancheck.GetContactoAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                contactosIess = await _garancheck.GetContactoAfiliadoAsync(historialTemp.IdentificacionSecundaria.Trim());
                                            }
                                        }
                                    }
                                    else if (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion))
                                    {
                                        var cedulaTemp = historialTemp.Identificacion.Substring(0, 10);
                                        if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        {
                                            contactos = await _garancheck.GetContactoAsync(cedulaTemp);
                                            contactosIess = await _garancheck.GetContactoAfiliadoAsync(cedulaTemp);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    historialTemp.Identificacion = historialTemp.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.Identificacion))
                                    {
                                        contactos = await _garancheck.GetContactoAsync(historialTemp.Identificacion);
                                        contactosIess = await _garancheck.GetContactoAfiliadoAsync(historialTemp.Identificacion);
                                    }
                                }
                                else
                                {

                                    if (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion))
                                    {
                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                        {
                                            if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                            {
                                                contactos = await _garancheck.GetContactoAsync(historialTemp.IdentificacionSecundaria.Trim());
                                                contactosIess = await _garancheck.GetContactoAfiliadoAsync(historialTemp.IdentificacionSecundaria.Trim());
                                            }
                                        }
                                    }
                                    else if (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion))
                                    {
                                        var cedulaTemp = historialTemp.Identificacion.Substring(0, 10);
                                        if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        {
                                            contactos = await _garancheck.GetContactoAsync(cedulaTemp);
                                            contactosIess = await _garancheck.GetContactoAfiliadoAsync(cedulaTemp);
                                        }
                                    }
                                }
                            }
                        }

                        var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.Personales, Dominio.Tipos.Fuentes.Familiares, Dominio.Tipos.Fuentes.RegistroCivil, Dominio.Tipos.Fuentes.ContactosEmpresa };
                        var detallesHistorial = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);

                        var datosDetalleGarancheck = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);
                        if (datosDetalleGarancheck != null)
                            r_garancheck = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(datosDetalleGarancheck.Data);

                        var datosDetallePersonales = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Personales && m.Generado);
                        if (datosDetallePersonales != null)
                            datosPersonal = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(datosDetallePersonales.Data);

                        var datosDetalleRegistroCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                        if (datosDetalleRegistroCivil != null)
                            registroCivil = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(datosDetalleRegistroCivil.Data);

                        var datosDetalleContactosEmpresas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa && m.Generado);
                        if (datosDetalleContactosEmpresas != null)
                            contactosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosDetalleContactosEmpresas.Data);

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Civil con identificación {modelo.IdHistorial}: {ex.Message}");
                    }

                    datos = new ContactoViewModel()
                    {
                        Ciudadano = r_garancheck,
                        Personales = datosPersonal,
                        Contactos = contactos,
                        RegistroCivil = registroCivil,
                        ContactosEmpresa = contactosEmpresa,
                        ContactosIess = contactosIess
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathCivil = Path.Combine(pathFuentes, "civilDemo.json");
                    datos = JsonConvert.DeserializeObject<ContactoViewModel>(System.IO.File.ReadAllText(pathCivil));
                }

                _logger.LogInformation("Fuente de Contactos procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Contactos. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesCivil = new[] { Dominio.Tipos.Fuentes.Contactos, Dominio.Tipos.Fuentes.ContactosIess };
                        var historialesCivil = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesCivil.Contains(m.TipoFuente));
                        var historialContactos = historialesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Contactos);
                        var historialContactosIess = historialesCivil.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosIess);


                        if (historialContactos != null && (!historialContactos.Generado || !busquedaNuevaContactos))
                        {
                            historialContactos.IdHistorial = modelo.IdHistorial;
                            historialContactos.TipoFuente = Dominio.Tipos.Fuentes.Contactos;
                            historialContactos.Generado = contactos != null;
                            historialContactos.Data = contactos != null ? JsonConvert.SerializeObject(contactos) : null;
                            historialContactos.Cache = cacheContactos;
                            historialContactos.FechaRegistro = DateTime.Now;
                            historialContactos.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialContactos);
                            _logger.LogInformation("Historial de la Fuente Contactos para Civil se actualizado correctamente");
                        }
                        else if (historialContactos == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Contactos,
                                Generado = datos.Contactos != null,
                                Data = datos.Contactos != null ? JsonConvert.SerializeObject(datos.Contactos) : null,
                                Cache = cacheContactos,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (historialContactosIess != null && (!historialContactosIess.Generado || !busquedaNuevaContactos))
                        {
                            historialContactosIess.IdHistorial = modelo.IdHistorial;
                            historialContactosIess.TipoFuente = Dominio.Tipos.Fuentes.ContactosIess;
                            historialContactosIess.Generado = contactosIess != null;
                            historialContactosIess.Data = contactosIess != null ? JsonConvert.SerializeObject(contactosIess) : null;
                            historialContactosIess.Cache = cacheContactosIess;
                            historialContactosIess.FechaRegistro = DateTime.Now;
                            historialContactosIess.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialContactosIess);
                            _logger.LogInformation("Historial de la Fuente Contactos Iess para Civil se actualizado correctamente");
                        }
                        else if (historialContactosIess == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.ContactosIess,
                                Generado = datos.ContactosIess != null,
                                Data = datos.ContactosIess != null ? JsonConvert.SerializeObject(datos.ContactosIess) : null,
                                Cache = cacheContactosIess,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente Contactos procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteContactos", datos);

            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteContactos", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteBalance")]
        public async Task<IActionResult> ObtenerReporteBalance(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var datos = new BalancesViewModel();
                var periodosBusqueda = new List<int>();
                var cacheBalance = false;
                //var cacheAccionistas = false;
                var busquedaNuevaBalance = false;
                var balancesMultiples = false;
                var soloEmpresasSimilares = false;
                var busquedaNoJuridico = false;
                modelo.Identificacion = modelo.Identificacion.Trim();
                var identificacionOriginal = modelo.Identificacion;
                Externos.Logica.Balances.Modelos.BalanceEmpresa r_balance = null;
                List<Externos.Logica.Balances.Modelos.BalanceEmpresa> r_balances = null;
                Externos.Logica.Balances.Modelos.DirectorioCompania directorioCompania = null;
                Externos.Logica.Balances.Modelos.IndicadoresCompania indicadoresCompania = null;
                List<AnalisisHorizontalViewModel> analisisHorizontal = null;
                List<Externos.Logica.Balances.Modelos.RepresentanteEmpresa> representantesEmpresas = null;
                //List<Externos.Logica.Balances.Modelos.Accionista> accionistas = null;
                List<Externos.Logica.Balances.Modelos.AccionistaEmpresa> empresasAccionista = null;
                ViewBag.Accionistas = false;

                var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, p => p.Include(p => p.PlanEmpresa), true);
                if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                    ViewBag.Accionistas = true;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Balances identificación: {modelo.Identificacion}");
                        if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                        {
                            _logger.LogInformation($"Procesando Empresas Representante identificación: {modelo.Identificacion}");
                            representantesEmpresas = await _balances.GetRepresentantesEmpresasAsync(historialTemp.NombresPersona);
                            _logger.LogInformation($"Procesando Empresas Accionistas identificación: {modelo.Identificacion}");
                            empresasAccionista = await _balances.GetAccionistaEmpresasAsync(historialTemp.NombresPersona);
                            busquedaNoJuridico = true;
                        }
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            directorioCompania = await _balances.GetDirectorioCompaniasAsync(modelo.Identificacion);
                            balancesMultiples = true;
                            var infoPeriodos = _configuration.GetSection("AppSettings:PeriodosDinamicos").Get<PeriodosDinamicosViewModel>();
                            if (infoPeriodos != null)
                            {
                                #region Consulta Balances
                                var ultimosPeriodos = infoPeriodos.Periodos.Select(m => m.Valor).ToList();
                                if (infoPeriodos.Activo)
                                {
                                    var periodoActual = DateTime.Now.Year;
                                    ultimosPeriodos = new List<int>();
                                    for (int i = 0; i < infoPeriodos.Frecuencia; i++)
                                        ultimosPeriodos.Add(periodoActual - i);
                                }
                                periodosBusqueda = ultimosPeriodos;

                                r_balances = new List<Externos.Logica.Balances.Modelos.BalanceEmpresa>();
                                foreach (var item in ultimosPeriodos)
                                {
                                    var periodoBalance = _balances.GetType().GetProperty("Periodo");
                                    if (periodoBalance != null)
                                        periodoBalance.SetValue(_balances, item);

                                    r_balance = await _balances.GetRespuestaAsync(modelo.Identificacion);
                                    if (r_balance != null)
                                    {
                                        indicadoresCompania = await _balances.GetIndicadoresCompaniasAsync(modelo.Identificacion, item);
                                        if (indicadoresCompania != null)
                                        {
                                            r_balance.Indices.LiquidezCorriente = indicadoresCompania.LiquidezCorriente != 0 || r_balance.Indices.LiquidezCorriente == indicadoresCompania.LiquidezCorriente ? (decimal)indicadoresCompania.LiquidezCorriente : r_balance.Indices.LiquidezCorriente;
                                            r_balance.Indices.PruebaAcida = indicadoresCompania.PruebaAcida != 0 || r_balance.Indices.PruebaAcida == indicadoresCompania.PruebaAcida ? (decimal)indicadoresCompania.PruebaAcida : r_balance.Indices.PruebaAcida;
                                            r_balance.Indices.EndeudamientoActivo = indicadoresCompania.EndeudamientoActivo != 0 || r_balance.Indices.EndeudamientoActivo == indicadoresCompania.EndeudamientoActivo ? (decimal)indicadoresCompania.EndeudamientoActivo : r_balance.Indices.EndeudamientoActivo;
                                            r_balance.Indices.CoberturaIntereses = indicadoresCompania.CoberturaInteres != 0 || r_balance.Indices.CoberturaIntereses == indicadoresCompania.CoberturaInteres ? (decimal)indicadoresCompania.CoberturaInteres : r_balance.Indices.CoberturaIntereses;
                                            r_balance.Indices.MargenBruto = indicadoresCompania.MargenBruto != 0 || r_balance.Indices.MargenBruto == indicadoresCompania.MargenBruto ? (decimal)indicadoresCompania.MargenBruto : r_balance.Indices.MargenBruto;
                                            r_balance.Indices.MargenOperacional = indicadoresCompania.MargenOperacional != 0 || r_balance.Indices.MargenOperacional == indicadoresCompania.MargenOperacional ? (decimal)indicadoresCompania.MargenOperacional : r_balance.Indices.MargenOperacional;
                                            r_balance.Indices.ROA = indicadoresCompania.Roa != 0 || r_balance.Indices.ROA == indicadoresCompania.Roa ? (decimal)indicadoresCompania.Roa : r_balance.Indices.ROA;
                                            r_balance.Indices.ROE = indicadoresCompania.Roe != 0 || r_balance.Indices.ROE == indicadoresCompania.Roe ? (decimal)indicadoresCompania.Roe : r_balance.Indices.ROE;
                                        }
                                        r_balances.Add(r_balance);
                                    }
                                }
                                #endregion Consulta Balances

                                #region Análisis Horizontal
                                analisisHorizontal = new List<AnalisisHorizontalViewModel>();
                                var analisisPeriodo = new List<AnalisisHorizontalViewModel>();
                                var agrupacion = r_balances.OrderByDescending(m => m.Periodo).GroupBy(m => m.Periodo).Take(3).ToList();
                                analisisPeriodo = agrupacion.Select(m => new { Analisis = m.FirstOrDefault() }).Select(item => new AnalisisHorizontalViewModel()
                                {
                                    Periodo = item.Analisis.Periodo,
                                    RUC = item.Analisis.RUC,
                                    RazonSocial = item.Analisis.RazonSocial,
                                    CodigoActividadEconomica = item.Analisis.CodigoActividadEconomica,
                                    ActividadEconomica = item.Analisis.ActividadEconomica,
                                    CIIU = item.Analisis.CIIU,
                                    Indices = new IndicesViewModel()
                                    {
                                        UtilidadBruta = item.Analisis.Indices.UtilidadBruta,
                                        UtilidadOperacional = item.Analisis.Indices.UtilidadOperacional,
                                        GananciaAntesDe15x100YImpuestos = item.Analisis.Indices.GananciaAntesDe15x100YImpuestos,
                                        GananciaAntesDeImpuestos = item.Analisis.Indices.GananciaAntesDeImpuestos,
                                        GananciaNeta = item.Analisis.Indices.GananciaNeta,
                                        EBITDA = item.Analisis.Indices.EBITDA,
                                        CapitalTrabajo = item.Analisis.Indices.CapitalTrabajo,
                                        MargenBruto = item.Analisis.Indices.MargenBruto,
                                        MargenOperacional = item.Analisis.Indices.MargenOperacional,
                                        MargenNeto = item.Analisis.Indices.MargenNeto,
                                        EndeudamientoActivo = item.Analisis.Indices.EndeudamientoActivo,
                                        ROA = item.Analisis.Indices.ROA,
                                        ROE = item.Analisis.Indices.ROE,
                                        CoberturaIntereses = item.Analisis.Indices.CoberturaIntereses,
                                        DiasInventario = item.Analisis.Indices.DiasInventario,
                                        PeriodoPromCobro = item.Analisis.Indices.PeriodoPromCobro,
                                        PeriodoPromPago = item.Analisis.Indices.PeriodoPromPago,
                                        PruebaAcida = item.Analisis.Indices.PruebaAcida,
                                        LiquidezCorriente = item.Analisis.Indices.LiquidezCorriente
                                    },
                                    Activos = new ActivosViewModel()
                                    {
                                        OtrosActivosCorrientes = item.Analisis.Activos.OtrosActivosCorrientes,
                                        OtrosActivosNoCorrientes = item.Analisis.Activos.OtrosActivosNoCorrientes,
                                        TotalActivoCorriente = item.Analisis.Activos.TotalActivoCorriente,
                                        TotalActivoNoCorriente = item.Analisis.Activos.TotalActivoNoCorriente,
                                        TotalActivo = item.Analisis.Activos.TotalActivo
                                    },
                                    Pasivos = new PasivosViewModel()
                                    {
                                        OtrosPasivosCorrientes = item.Analisis.Pasivos.OtrosPasivosCorrientes,
                                        OtrosPasivosNoCorrientes = item.Analisis.Pasivos.OtrosPasivosNoCorrientes,
                                        TotalPasivoCorriente = item.Analisis.Pasivos.TotalPasivoCorriente,
                                        TotalPasivoNoCorriente = item.Analisis.Pasivos.TotalPasivoNoCorriente,
                                        TotalPasivo = item.Analisis.Pasivos.TotalPasivo,
                                    },
                                    Patrimonio = new PatrimonioViewModel()
                                    {
                                        CapitalSuscrito = item.Analisis.Patrimonio.CapitalSuscrito,
                                        PatrimonioNeto = item.Analisis.Patrimonio.PatrimonioNeto,
                                        TotalPasivoPatrimonio = item.Analisis.Patrimonio.TotalPasivoPatrimonio,
                                    },
                                    Otros = new OtrosViewModel()
                                    {
                                        Inventarios = item.Analisis.Otros.Inventarios,
                                        EfectivoYCaja = item.Analisis.Otros.EfectivoYCaja,
                                        PropiedadPlantaEquipo = item.Analisis.Otros.PropiedadPlantaEquipo,
                                        AportesSociosFuturasCap = item.Analisis.Otros.AportesSociosFuturasCap,
                                        ReservaLegal = item.Analisis.Otros.ReservaLegal,
                                        Ventas = item.Analisis.Otros.Ventas,
                                        Servicios = item.Analisis.Otros.Servicios,
                                        TotalIngresos = item.Analisis.Otros.TotalIngresos,
                                        ImpuestoRenta = item.Analisis.Otros.ImpuestoRenta,
                                        CostoDeVentas = item.Analisis.Otros.CostoDeVentas,
                                        CostosOperacionales = item.Analisis.Otros.CostosOperacionales,
                                        IngresosOperacionales = item.Analisis.Otros.IngresosOperacionales,
                                        IngresosNoOperacionales = item.Analisis.Otros.IngresosNoOperacionales,
                                        OtrosIngresosNoOperacionales = item.Analisis.Otros.OtrosIngresosNoOperacionales,
                                        CxCComercialesTerceros = item.Analisis.Otros.CxCComercialesTerceros,
                                        CxCAccionistasYRelacionados = item.Analisis.Otros.CxCAccionistasYRelacionados,
                                        ProvisionesCorrientes = item.Analisis.Otros.ProvisionesCorrientes,
                                        ProvisionesNoCorrientes = item.Analisis.Otros.ProvisionesNoCorrientes,
                                        ProvisionesBeneficiosEmpleados = item.Analisis.Otros.ProvisionesBeneficiosEmpleados,
                                        GastosOperacionales = item.Analisis.Otros.GastosOperacionales,
                                        GastosFinancieros = item.Analisis.Otros.GastosFinancieros,
                                        P15x100Trabajadores = item.Analisis.Otros.P15x100Trabajadores,
                                        CxPProveedoresTerceros = item.Analisis.Otros.CxPProveedoresTerceros,
                                        CxPAccionistasYRelacionados = item.Analisis.Otros.CxPAccionistasYRelacionados,
                                        ObFinancierasCortoPlazo = item.Analisis.Otros.ObFinancierasCortoPlazo,
                                        OBFinancierasLargoPlazo = item.Analisis.Otros.OBFinancierasLargoPlazo,
                                        Depreciaciones = item.Analisis.Otros.Depreciaciones,
                                        UtilidadEjercicio = item.Analisis.Otros.UtilidadEjercicio,
                                        PerdidaEjercicio = item.Analisis.Otros.PerdidaEjercicio,
                                        ResultadosAcumulados = item.Analisis.Otros.ResultadosAcumulados,
                                    }
                                }).ToList();
                                var agrupacionAnalisis = analisisPeriodo.OrderByDescending(m => m.Periodo).GroupBy(m => m.Periodo).Take(3).ToList();
                                if (agrupacionAnalisis.Count() > 1)
                                {
                                    for (int i = agrupacionAnalisis.Count() - 1; i > 0; i--)
                                    {
                                        var anioUno = agrupacionAnalisis[i].Select(m => m).FirstOrDefault();
                                        var anioDos = agrupacionAnalisis[i - 1].Select(m => m).FirstOrDefault();
                                        var analisis = new AnalisisHorizontalViewModel()
                                        {
                                            Periodo = i,
                                            Indices = new IndicesViewModel()
                                            {
                                                UtilidadBruta = anioUno.Indices.UtilidadBruta == 0 && anioUno.Indices.UtilidadBruta != anioDos.Indices.UtilidadBruta ? 100 : anioUno.Indices.UtilidadBruta != 0 && anioUno.Indices.UtilidadBruta != anioDos.Indices.UtilidadBruta ? ((anioDos.Indices.UtilidadBruta - anioUno.Indices.UtilidadBruta) / Math.Abs(anioUno.Indices.UtilidadBruta.Value)) * 100 : null,
                                                UtilidadOperacional = anioUno.Indices.UtilidadOperacional == 0 && anioUno.Indices.UtilidadOperacional != anioDos.Indices.UtilidadOperacional ? 100 : anioUno.Indices.UtilidadOperacional != 0 && anioUno.Indices.UtilidadOperacional != anioDos.Indices.UtilidadOperacional ? ((anioDos.Indices.UtilidadOperacional - anioUno.Indices.UtilidadOperacional) / Math.Abs(anioUno.Indices.UtilidadOperacional.Value)) * 100 : null,
                                                GananciaAntesDe15x100YImpuestos = anioUno.Indices.GananciaAntesDe15x100YImpuestos == 0 && anioUno.Indices.GananciaAntesDe15x100YImpuestos != anioDos.Indices.GananciaAntesDe15x100YImpuestos ? 100 : anioUno.Indices.GananciaAntesDe15x100YImpuestos != 0 && anioUno.Indices.GananciaAntesDe15x100YImpuestos != anioDos.Indices.GananciaAntesDe15x100YImpuestos ? ((anioDos.Indices.GananciaAntesDe15x100YImpuestos - anioUno.Indices.GananciaAntesDe15x100YImpuestos) / Math.Abs(anioUno.Indices.GananciaAntesDe15x100YImpuestos.Value)) * 100 : null,
                                                GananciaAntesDeImpuestos = anioUno.Indices.GananciaAntesDeImpuestos == 0 && anioUno.Indices.GananciaAntesDeImpuestos != anioDos.Indices.GananciaAntesDeImpuestos ? 100 : anioUno.Indices.GananciaAntesDeImpuestos != 0 && anioUno.Indices.GananciaAntesDeImpuestos != anioDos.Indices.GananciaAntesDeImpuestos ? ((anioDos.Indices.GananciaAntesDeImpuestos - anioUno.Indices.GananciaAntesDeImpuestos) / Math.Abs(anioUno.Indices.GananciaAntesDeImpuestos.Value)) * 100 : null,
                                                GananciaNeta = anioUno.Indices.GananciaNeta == 0 && anioUno.Indices.GananciaNeta != anioDos.Indices.GananciaNeta ? 100 : anioUno.Indices.GananciaNeta != 0 && anioUno.Indices.GananciaNeta != anioDos.Indices.GananciaNeta ? ((anioDos.Indices.GananciaNeta - anioUno.Indices.GananciaNeta) / Math.Abs(anioUno.Indices.GananciaNeta.Value)) * 100 : null,
                                                EBITDA = anioUno.Indices.EBITDA == 0 && anioUno.Indices.EBITDA != anioDos.Indices.EBITDA ? 100 : anioUno.Indices.EBITDA != 0 && anioUno.Indices.EBITDA != anioDos.Indices.EBITDA ? ((anioDos.Indices.EBITDA - anioUno.Indices.EBITDA) / Math.Abs(anioUno.Indices.EBITDA.Value)) * 100 : null,
                                                CapitalTrabajo = anioUno.Indices.CapitalTrabajo == 0 && anioUno.Indices.CapitalTrabajo != anioDos.Indices.CapitalTrabajo ? 100 : anioUno.Indices.CapitalTrabajo != 0 && anioUno.Indices.CapitalTrabajo != anioDos.Indices.CapitalTrabajo ? ((anioDos.Indices.CapitalTrabajo - anioUno.Indices.CapitalTrabajo) / Math.Abs(anioUno.Indices.CapitalTrabajo.Value)) * 100 : null,
                                                MargenBruto = anioUno.Indices.MargenBruto == 0 && anioUno.Indices.MargenBruto != anioDos.Indices.MargenBruto ? 100 : anioUno.Indices.MargenBruto != 0 && anioUno.Indices.MargenBruto != anioDos.Indices.MargenBruto ? ((anioDos.Indices.MargenBruto - anioUno.Indices.MargenBruto) / Math.Abs(anioUno.Indices.MargenBruto.Value)) * 100 : null,
                                                MargenOperacional = anioUno.Indices.MargenOperacional == 0 && anioUno.Indices.MargenOperacional != anioDos.Indices.MargenOperacional ? 100 : anioUno.Indices.MargenOperacional != 0 && anioUno.Indices.MargenOperacional != anioDos.Indices.MargenOperacional ? ((anioDos.Indices.MargenOperacional - anioUno.Indices.MargenOperacional) / Math.Abs(anioUno.Indices.MargenOperacional.Value)) * 100 : null,
                                                MargenNeto = anioUno.Indices.MargenNeto == 0 && anioUno.Indices.MargenNeto != anioDos.Indices.MargenNeto ? 100 : anioUno.Indices.MargenNeto != 0 && anioUno.Indices.MargenNeto != anioDos.Indices.MargenNeto ? ((anioDos.Indices.MargenNeto - anioUno.Indices.MargenNeto) / Math.Abs(anioUno.Indices.MargenNeto.Value)) * 100 : null,
                                                EndeudamientoActivo = anioUno.Indices.EndeudamientoActivo == 0 && anioUno.Indices.EndeudamientoActivo != anioDos.Indices.EndeudamientoActivo ? 100 : anioUno.Indices.EndeudamientoActivo != 0 && anioUno.Indices.EndeudamientoActivo != anioDos.Indices.EndeudamientoActivo ? ((anioDos.Indices.EndeudamientoActivo - anioUno.Indices.EndeudamientoActivo) / Math.Abs(anioUno.Indices.EndeudamientoActivo.Value)) * 100 : null,
                                                ROA = anioUno.Indices.ROA == 0 && anioUno.Indices.ROA != anioDos.Indices.ROA ? 100 : anioUno.Indices.ROA != 0 && anioUno.Indices.ROA != anioDos.Indices.ROA ? ((anioDos.Indices.ROA - anioUno.Indices.ROA) / Math.Abs(anioUno.Indices.ROA.Value)) * 100 : null,
                                                ROE = anioUno.Indices.ROE == 0 && anioUno.Indices.ROE != anioDos.Indices.ROE ? 100 : anioUno.Indices.ROE != 0 && anioUno.Indices.ROE != anioDos.Indices.ROE ? ((anioDos.Indices.ROE - anioUno.Indices.ROE) / Math.Abs(anioUno.Indices.ROE.Value)) * 100 : null,
                                                CoberturaIntereses = anioUno.Indices.CoberturaIntereses == 0 && anioUno.Indices.CoberturaIntereses != anioDos.Indices.CoberturaIntereses ? 100 : anioUno.Indices.CoberturaIntereses != 0 && anioUno.Indices.CoberturaIntereses != anioDos.Indices.CoberturaIntereses ? ((anioDos.Indices.CoberturaIntereses - anioUno.Indices.CoberturaIntereses) / Math.Abs(anioUno.Indices.CoberturaIntereses.Value)) * 100 : null,
                                                DiasInventario = anioUno.Indices.DiasInventario == 0 && anioUno.Indices.DiasInventario != anioDos.Indices.DiasInventario ? 100 : anioUno.Indices.DiasInventario != 0 && anioUno.Indices.DiasInventario != anioDos.Indices.DiasInventario ? ((anioDos.Indices.DiasInventario - anioUno.Indices.DiasInventario) / Math.Abs(anioUno.Indices.DiasInventario.Value)) * 100 : null,
                                                PeriodoPromCobro = anioUno.Indices.PeriodoPromCobro == 0 && anioUno.Indices.PeriodoPromCobro != anioDos.Indices.PeriodoPromCobro ? 100 : anioUno.Indices.PeriodoPromCobro != 0 && anioUno.Indices.PeriodoPromCobro != anioDos.Indices.PeriodoPromCobro ? ((anioDos.Indices.PeriodoPromCobro - anioUno.Indices.PeriodoPromCobro) / Math.Abs(anioUno.Indices.PeriodoPromCobro.Value)) * 100 : null,
                                                PeriodoPromPago = anioUno.Indices.PeriodoPromPago == 0 && anioUno.Indices.PeriodoPromPago != anioDos.Indices.PeriodoPromPago ? 100 : anioUno.Indices.PeriodoPromPago != 0 && anioUno.Indices.PeriodoPromPago != anioDos.Indices.PeriodoPromPago ? ((anioDos.Indices.PeriodoPromPago - anioUno.Indices.PeriodoPromPago) / Math.Abs(anioUno.Indices.PeriodoPromPago.Value)) * 100 : null,
                                                PruebaAcida = anioUno.Indices.PruebaAcida == 0 && anioUno.Indices.PruebaAcida != anioDos.Indices.PruebaAcida ? 100 : anioUno.Indices.PruebaAcida != 0 && anioUno.Indices.PruebaAcida != anioDos.Indices.PruebaAcida ? ((anioDos.Indices.PruebaAcida - anioUno.Indices.PruebaAcida) / Math.Abs(anioUno.Indices.PruebaAcida.Value)) * 100 : null,
                                                LiquidezCorriente = anioUno.Indices.LiquidezCorriente == 0 && anioUno.Indices.LiquidezCorriente != anioDos.Indices.LiquidezCorriente ? 100 : anioUno.Indices.LiquidezCorriente != 0 && anioUno.Indices.LiquidezCorriente != anioDos.Indices.LiquidezCorriente ? ((anioDos.Indices.LiquidezCorriente - anioUno.Indices.LiquidezCorriente) / Math.Abs(anioUno.Indices.LiquidezCorriente.Value)) * 100 : null
                                            },
                                            Activos = new ActivosViewModel()
                                            {
                                                OtrosActivosCorrientes = anioUno.Activos.OtrosActivosCorrientes == 0 && anioUno.Activos.OtrosActivosCorrientes != anioDos.Activos.OtrosActivosCorrientes ? 100 : anioUno.Activos.OtrosActivosCorrientes != 0 && anioUno.Activos.OtrosActivosCorrientes != anioDos.Activos.OtrosActivosCorrientes ? ((anioDos.Activos.OtrosActivosCorrientes - anioUno.Activos.OtrosActivosCorrientes) / Math.Abs(anioUno.Activos.OtrosActivosCorrientes.Value)) * 100 : null,
                                                OtrosActivosNoCorrientes = anioUno.Activos.OtrosActivosNoCorrientes == 0 && anioUno.Activos.OtrosActivosNoCorrientes != anioDos.Activos.OtrosActivosNoCorrientes ? 100 : anioUno.Activos.OtrosActivosNoCorrientes != 0 && anioUno.Activos.OtrosActivosNoCorrientes != anioDos.Activos.OtrosActivosNoCorrientes ? ((anioDos.Activos.OtrosActivosNoCorrientes - anioUno.Activos.OtrosActivosNoCorrientes) / Math.Abs(anioUno.Activos.OtrosActivosNoCorrientes.Value)) * 100 : null,
                                                TotalActivoCorriente = anioUno.Activos.TotalActivoCorriente == 0 && anioUno.Activos.TotalActivoCorriente != anioDos.Activos.TotalActivoCorriente ? 100 : anioUno.Activos.TotalActivoCorriente != 0 && anioUno.Activos.TotalActivoCorriente != anioDos.Activos.TotalActivoCorriente ? ((anioDos.Activos.TotalActivoCorriente - anioUno.Activos.TotalActivoCorriente) / Math.Abs(anioUno.Activos.TotalActivoCorriente.Value)) * 100 : null,
                                                TotalActivoNoCorriente = anioUno.Activos.TotalActivoNoCorriente == 0 && anioUno.Activos.TotalActivoNoCorriente != anioDos.Activos.TotalActivoNoCorriente ? 100 : anioUno.Activos.TotalActivoNoCorriente != 0 && anioUno.Activos.TotalActivoNoCorriente != anioDos.Activos.TotalActivoNoCorriente ? ((anioDos.Activos.TotalActivoNoCorriente - anioUno.Activos.TotalActivoNoCorriente) / Math.Abs(anioUno.Activos.TotalActivoNoCorriente.Value)) * 100 : null,
                                                TotalActivo = anioUno.Activos.TotalActivo == 0 && anioUno.Activos.TotalActivo != anioDos.Activos.TotalActivo ? 100 : anioUno.Activos.TotalActivo != 0 && anioUno.Activos.TotalActivo != anioDos.Activos.TotalActivo ? ((anioDos.Activos.TotalActivo - anioUno.Activos.TotalActivo) / Math.Abs(anioUno.Activos.TotalActivo.Value)) * 100 : 0
                                            },
                                            Pasivos = new PasivosViewModel()
                                            {
                                                OtrosPasivosCorrientes = anioUno.Pasivos.OtrosPasivosCorrientes == 0 && anioUno.Pasivos.OtrosPasivosCorrientes != anioDos.Pasivos.OtrosPasivosCorrientes ? 100 : anioUno.Pasivos.OtrosPasivosCorrientes != 0 && anioUno.Pasivos.OtrosPasivosCorrientes != anioDos.Pasivos.OtrosPasivosCorrientes ? ((anioDos.Pasivos.OtrosPasivosCorrientes - anioUno.Pasivos.OtrosPasivosCorrientes) / Math.Abs(anioUno.Pasivos.OtrosPasivosCorrientes.Value)) * 100 : null,
                                                OtrosPasivosNoCorrientes = anioUno.Pasivos.OtrosPasivosNoCorrientes == 0 && anioUno.Pasivos.OtrosPasivosNoCorrientes != anioDos.Pasivos.OtrosPasivosNoCorrientes ? 100 : anioUno.Pasivos.OtrosPasivosNoCorrientes != 0 && anioUno.Pasivos.OtrosPasivosNoCorrientes != anioDos.Pasivos.OtrosPasivosNoCorrientes ? ((anioDos.Pasivos.OtrosPasivosNoCorrientes - anioUno.Pasivos.OtrosPasivosNoCorrientes) / Math.Abs(anioUno.Pasivos.OtrosPasivosNoCorrientes.Value)) * 100 : null,
                                                TotalPasivoCorriente = anioUno.Pasivos.TotalPasivoCorriente == 0 && anioUno.Pasivos.TotalPasivoCorriente != anioDos.Pasivos.TotalPasivoCorriente ? 100 : anioUno.Pasivos.TotalPasivoCorriente != 0 && anioUno.Pasivos.TotalPasivoCorriente != anioDos.Pasivos.TotalPasivoCorriente ? ((anioDos.Pasivos.TotalPasivoCorriente - anioUno.Pasivos.TotalPasivoCorriente) / Math.Abs(anioUno.Pasivos.TotalPasivoCorriente.Value)) * 100 : null,
                                                TotalPasivoNoCorriente = anioUno.Pasivos.TotalPasivoNoCorriente == 0 && anioUno.Pasivos.TotalPasivoNoCorriente != anioDos.Pasivos.TotalPasivoNoCorriente ? 100 : anioUno.Pasivos.TotalPasivoNoCorriente != 0 && anioUno.Pasivos.TotalPasivoNoCorriente != anioDos.Pasivos.TotalPasivoNoCorriente ? ((anioDos.Pasivos.TotalPasivoNoCorriente - anioUno.Pasivos.TotalPasivoNoCorriente) / Math.Abs(anioUno.Pasivos.TotalPasivoNoCorriente.Value)) * 100 : null,
                                                TotalPasivo = anioUno.Pasivos.TotalPasivo == 0 && anioUno.Pasivos.TotalPasivo != anioDos.Pasivos.TotalPasivo ? 100 : anioUno.Pasivos.TotalPasivo != 0 && anioUno.Pasivos.TotalPasivo != anioDos.Pasivos.TotalPasivo ? ((anioDos.Pasivos.TotalPasivo - anioUno.Pasivos.TotalPasivo) / Math.Abs(anioUno.Pasivos.TotalPasivo.Value)) * 100 : 0
                                            },
                                            Patrimonio = new PatrimonioViewModel()
                                            {
                                                CapitalSuscrito = anioUno.Patrimonio.CapitalSuscrito == 0 && anioUno.Patrimonio.CapitalSuscrito != anioDos.Patrimonio.CapitalSuscrito ? 100 : anioUno.Patrimonio.CapitalSuscrito != 0 && anioUno.Patrimonio.CapitalSuscrito != anioDos.Patrimonio.CapitalSuscrito ? ((anioDos.Patrimonio.CapitalSuscrito - anioUno.Patrimonio.CapitalSuscrito) / Math.Abs(anioUno.Patrimonio.CapitalSuscrito.Value)) * 100 : null,
                                                PatrimonioNeto = anioUno.Patrimonio.PatrimonioNeto == 0 && anioUno.Patrimonio.PatrimonioNeto != anioDos.Patrimonio.PatrimonioNeto ? 100 : anioUno.Patrimonio.PatrimonioNeto != 0 && anioUno.Patrimonio.PatrimonioNeto != anioDos.Patrimonio.PatrimonioNeto ? ((anioDos.Patrimonio.PatrimonioNeto - anioUno.Patrimonio.PatrimonioNeto) / Math.Abs(anioUno.Patrimonio.PatrimonioNeto.Value)) * 100 : null,
                                                TotalPasivoPatrimonio = anioUno.Patrimonio.TotalPasivoPatrimonio == 0 && anioUno.Patrimonio.TotalPasivoPatrimonio != anioDos.Patrimonio.TotalPasivoPatrimonio ? 100 : anioUno.Patrimonio.TotalPasivoPatrimonio != 0 && anioUno.Patrimonio.TotalPasivoPatrimonio != anioDos.Patrimonio.TotalPasivoPatrimonio ? ((anioDos.Patrimonio.TotalPasivoPatrimonio - anioUno.Patrimonio.TotalPasivoPatrimonio) / Math.Abs(anioUno.Patrimonio.TotalPasivoPatrimonio.Value)) * 100 : null,
                                            },
                                            Otros = new OtrosViewModel()
                                            {
                                                Inventarios = anioUno.Otros.Inventarios == 0 && anioUno.Otros.Inventarios != anioDos.Otros.Inventarios ? 100 : anioUno.Otros.Inventarios != 0 && anioUno.Otros.Inventarios != anioDos.Otros.Inventarios ? ((anioDos.Otros.Inventarios - anioUno.Otros.Inventarios) / Math.Abs(anioUno.Otros.Inventarios.Value)) * 100 : null,
                                                EfectivoYCaja = anioUno.Otros.EfectivoYCaja == 0 && anioUno.Otros.EfectivoYCaja != anioDos.Otros.EfectivoYCaja ? 100 : anioUno.Otros.EfectivoYCaja != 0 && anioUno.Otros.EfectivoYCaja != anioDos.Otros.EfectivoYCaja ? ((anioDos.Otros.EfectivoYCaja - anioUno.Otros.EfectivoYCaja) / Math.Abs(anioUno.Otros.EfectivoYCaja.Value)) * 100 : null,
                                                PropiedadPlantaEquipo = anioUno.Otros.PropiedadPlantaEquipo == 0 && anioUno.Otros.PropiedadPlantaEquipo != anioDos.Otros.PropiedadPlantaEquipo ? 100 : anioUno.Otros.PropiedadPlantaEquipo != 0 && anioUno.Otros.PropiedadPlantaEquipo != anioDos.Otros.PropiedadPlantaEquipo ? ((anioDos.Otros.PropiedadPlantaEquipo - anioUno.Otros.PropiedadPlantaEquipo) / Math.Abs(anioUno.Otros.PropiedadPlantaEquipo.Value)) * 100 : null,
                                                AportesSociosFuturasCap = anioUno.Otros.AportesSociosFuturasCap == 0 && anioUno.Otros.AportesSociosFuturasCap != anioDos.Otros.AportesSociosFuturasCap ? 100 : anioUno.Otros.AportesSociosFuturasCap != 0 && anioUno.Otros.AportesSociosFuturasCap != anioDos.Otros.AportesSociosFuturasCap ? ((anioDos.Otros.AportesSociosFuturasCap - anioUno.Otros.AportesSociosFuturasCap) / Math.Abs(anioUno.Otros.AportesSociosFuturasCap.Value)) * 100 : null,
                                                ReservaLegal = anioUno.Otros.ReservaLegal == 0 && anioUno.Otros.ReservaLegal != anioDos.Otros.ReservaLegal ? 100 : anioUno.Otros.ReservaLegal != 0 && anioUno.Otros.ReservaLegal != anioDos.Otros.ReservaLegal ? ((anioDos.Otros.ReservaLegal - anioUno.Otros.ReservaLegal) / Math.Abs(anioUno.Otros.ReservaLegal.Value)) * 100 : null,
                                                Ventas = anioUno.Otros.Ventas == 0 && anioUno.Otros.Ventas != anioDos.Otros.Ventas ? 100 : anioUno.Otros.Ventas != 0 && anioUno.Otros.Ventas != anioDos.Otros.Ventas ? ((anioDos.Otros.Ventas - anioUno.Otros.Ventas) / Math.Abs(anioUno.Otros.Ventas.Value)) * 100 : null,
                                                Servicios = anioUno.Otros.Servicios == 0 && anioUno.Otros.Servicios != anioDos.Otros.Servicios ? 100 : anioUno.Otros.Servicios != 0 && anioUno.Otros.Servicios != anioDos.Otros.Servicios ? ((anioDos.Otros.Servicios - anioUno.Otros.Servicios) / Math.Abs(anioUno.Otros.Servicios.Value)) * 100 : null,
                                                TotalIngresos = anioUno.Otros.TotalIngresos == 0 && anioUno.Otros.TotalIngresos != anioDos.Otros.TotalIngresos ? 100 : anioUno.Otros.TotalIngresos != 0 && anioUno.Otros.TotalIngresos != anioDos.Otros.TotalIngresos ? ((anioDos.Otros.TotalIngresos - anioUno.Otros.TotalIngresos) / Math.Abs(anioUno.Otros.TotalIngresos.Value)) * 100 : null,
                                                ImpuestoRenta = anioUno.Otros.ImpuestoRenta == 0 && anioUno.Otros.ImpuestoRenta != anioDos.Otros.ImpuestoRenta ? 100 : anioUno.Otros.ImpuestoRenta != 0 && anioUno.Otros.ImpuestoRenta != anioDos.Otros.ImpuestoRenta ? ((anioDos.Otros.ImpuestoRenta - anioUno.Otros.ImpuestoRenta) / Math.Abs(anioUno.Otros.ImpuestoRenta.Value)) * 100 : null,
                                                CostoDeVentas = anioUno.Otros.CostoDeVentas == 0 && anioUno.Otros.CostoDeVentas != anioDos.Otros.CostoDeVentas ? 100 : anioUno.Otros.CostoDeVentas != 0 && anioUno.Otros.CostoDeVentas != anioDos.Otros.CostoDeVentas ? ((anioDos.Otros.CostoDeVentas - anioUno.Otros.CostoDeVentas) / Math.Abs(anioUno.Otros.CostoDeVentas.Value)) * 100 : null,
                                                CostosOperacionales = anioUno.Otros.CostosOperacionales == 0 && anioUno.Otros.CostosOperacionales != anioDos.Otros.CostosOperacionales ? 100 : anioUno.Otros.CostosOperacionales != 0 && anioUno.Otros.CostosOperacionales != anioDos.Otros.CostosOperacionales ? ((anioDos.Otros.CostosOperacionales - anioUno.Otros.CostosOperacionales) / Math.Abs(anioUno.Otros.CostosOperacionales.Value)) * 100 : null,
                                                IngresosOperacionales = anioUno.Otros.IngresosOperacionales == 0 && anioUno.Otros.IngresosOperacionales != anioDos.Otros.IngresosOperacionales ? 100 : anioUno.Otros.IngresosOperacionales != 0 && anioUno.Otros.IngresosOperacionales != anioDos.Otros.IngresosOperacionales ? ((anioDos.Otros.IngresosOperacionales - anioUno.Otros.IngresosOperacionales) / Math.Abs(anioUno.Otros.IngresosOperacionales.Value)) * 100 : null,
                                                IngresosNoOperacionales = anioUno.Otros.IngresosNoOperacionales == 0 && anioUno.Otros.IngresosNoOperacionales != anioDos.Otros.IngresosNoOperacionales ? 100 : anioUno.Otros.IngresosNoOperacionales != 0 && anioUno.Otros.IngresosNoOperacionales != anioDos.Otros.IngresosNoOperacionales ? ((anioDos.Otros.IngresosNoOperacionales - anioUno.Otros.IngresosNoOperacionales) / Math.Abs(anioUno.Otros.IngresosNoOperacionales.Value)) * 100 : null,
                                                OtrosIngresosNoOperacionales = anioUno.Otros.OtrosIngresosNoOperacionales == 0 && anioUno.Otros.OtrosIngresosNoOperacionales != anioDos.Otros.OtrosIngresosNoOperacionales ? 100 : anioUno.Otros.OtrosIngresosNoOperacionales != 0 && anioUno.Otros.OtrosIngresosNoOperacionales != anioDos.Otros.OtrosIngresosNoOperacionales ? ((anioDos.Otros.OtrosIngresosNoOperacionales - anioUno.Otros.OtrosIngresosNoOperacionales) / Math.Abs(anioUno.Otros.OtrosIngresosNoOperacionales.Value)) * 100 : null,
                                                CxCComercialesTerceros = anioUno.Otros.CxCComercialesTerceros == 0 && anioUno.Otros.CxCComercialesTerceros != anioDos.Otros.CxCComercialesTerceros ? 100 : anioUno.Otros.CxCComercialesTerceros != 0 && anioUno.Otros.CxCComercialesTerceros != anioDos.Otros.CxCComercialesTerceros ? ((anioDos.Otros.CxCComercialesTerceros - anioUno.Otros.CxCComercialesTerceros) / Math.Abs(anioUno.Otros.CxCComercialesTerceros.Value)) * 100 : null,
                                                CxCAccionistasYRelacionados = anioUno.Otros.CxCAccionistasYRelacionados == 0 && anioUno.Otros.CxCAccionistasYRelacionados != anioDos.Otros.CxCAccionistasYRelacionados ? 100 : anioUno.Otros.CxCAccionistasYRelacionados != 0 && anioUno.Otros.CxCAccionistasYRelacionados != anioDos.Otros.CxCAccionistasYRelacionados ? ((anioDos.Otros.CxCAccionistasYRelacionados - anioUno.Otros.CxCAccionistasYRelacionados) / Math.Abs(anioUno.Otros.CxCAccionistasYRelacionados.Value)) * 100 : null,
                                                ProvisionesCorrientes = anioUno.Otros.ProvisionesCorrientes == 0 && anioUno.Otros.ProvisionesCorrientes != anioDos.Otros.ProvisionesCorrientes ? 100 : anioUno.Otros.ProvisionesCorrientes != 0 && anioUno.Otros.ProvisionesCorrientes != anioDos.Otros.ProvisionesCorrientes ? ((anioDos.Otros.ProvisionesCorrientes - anioUno.Otros.ProvisionesCorrientes) / Math.Abs(anioUno.Otros.ProvisionesCorrientes.Value)) * 100 : null,
                                                ProvisionesNoCorrientes = anioUno.Otros.ProvisionesNoCorrientes == 0 && anioUno.Otros.ProvisionesNoCorrientes != anioDos.Otros.ProvisionesNoCorrientes ? 100 : anioUno.Otros.ProvisionesNoCorrientes != 0 && anioUno.Otros.ProvisionesNoCorrientes != anioDos.Otros.ProvisionesNoCorrientes ? ((anioDos.Otros.ProvisionesNoCorrientes - anioUno.Otros.ProvisionesNoCorrientes) / Math.Abs(anioUno.Otros.ProvisionesNoCorrientes.Value)) * 100 : null,
                                                ProvisionesBeneficiosEmpleados = anioUno.Otros.ProvisionesBeneficiosEmpleados == 0 && anioUno.Otros.ProvisionesBeneficiosEmpleados != anioDos.Otros.ProvisionesBeneficiosEmpleados ? 100 : anioUno.Otros.ProvisionesBeneficiosEmpleados != 0 && anioUno.Otros.ProvisionesBeneficiosEmpleados != anioDos.Otros.ProvisionesBeneficiosEmpleados ? ((anioDos.Otros.ProvisionesBeneficiosEmpleados - anioUno.Otros.ProvisionesBeneficiosEmpleados) / Math.Abs(anioUno.Otros.ProvisionesBeneficiosEmpleados.Value)) * 100 : null,
                                                GastosOperacionales = anioUno.Otros.GastosOperacionales == 0 && anioUno.Otros.GastosOperacionales != anioDos.Otros.GastosOperacionales ? 100 : anioUno.Otros.GastosOperacionales != 0 && anioUno.Otros.GastosOperacionales != anioDos.Otros.GastosOperacionales ? ((anioDos.Otros.GastosOperacionales - anioUno.Otros.GastosOperacionales) / Math.Abs(anioUno.Otros.GastosOperacionales.Value)) * 100 : null,
                                                GastosFinancieros = anioUno.Otros.GastosFinancieros == 0 && anioUno.Otros.GastosFinancieros != anioDos.Otros.GastosFinancieros ? 100 : anioUno.Otros.GastosFinancieros != 0 && anioUno.Otros.GastosFinancieros != anioDos.Otros.GastosFinancieros ? ((anioDos.Otros.GastosFinancieros - anioUno.Otros.GastosFinancieros) / Math.Abs(anioUno.Otros.GastosFinancieros.Value)) * 100 : null,
                                                P15x100Trabajadores = anioUno.Otros.P15x100Trabajadores == 0 && anioUno.Otros.P15x100Trabajadores != anioDos.Otros.P15x100Trabajadores ? 100 : anioUno.Otros.P15x100Trabajadores != 0 && anioUno.Otros.P15x100Trabajadores != anioDos.Otros.P15x100Trabajadores ? ((anioDos.Otros.P15x100Trabajadores - anioUno.Otros.P15x100Trabajadores) / Math.Abs(anioUno.Otros.P15x100Trabajadores.Value)) * 100 : null,
                                                CxPProveedoresTerceros = anioUno.Otros.CxPProveedoresTerceros == 0 && anioUno.Otros.CxPProveedoresTerceros != anioDos.Otros.CxPProveedoresTerceros ? 100 : anioUno.Otros.CxPProveedoresTerceros != 0 && anioUno.Otros.CxPProveedoresTerceros != anioDos.Otros.CxPProveedoresTerceros ? ((anioDos.Otros.CxPProveedoresTerceros - anioUno.Otros.CxPProveedoresTerceros) / Math.Abs(anioUno.Otros.CxPProveedoresTerceros.Value)) * 100 : null,
                                                CxPAccionistasYRelacionados = anioUno.Otros.CxPAccionistasYRelacionados == 0 && anioUno.Otros.CxPAccionistasYRelacionados != anioDos.Otros.CxPAccionistasYRelacionados ? 100 : anioUno.Otros.CxPAccionistasYRelacionados != 0 && anioUno.Otros.CxPAccionistasYRelacionados != anioDos.Otros.CxPAccionistasYRelacionados ? ((anioDos.Otros.CxPAccionistasYRelacionados - anioUno.Otros.CxPAccionistasYRelacionados) / Math.Abs(anioUno.Otros.CxPAccionistasYRelacionados.Value)) * 100 : null,
                                                ObFinancierasCortoPlazo = anioUno.Otros.ObFinancierasCortoPlazo == 0 && anioUno.Otros.ObFinancierasCortoPlazo != anioDos.Otros.ObFinancierasCortoPlazo ? 100 : anioUno.Otros.ObFinancierasCortoPlazo != 0 && anioUno.Otros.ObFinancierasCortoPlazo != anioDos.Otros.ObFinancierasCortoPlazo ? ((anioDos.Otros.ObFinancierasCortoPlazo - anioUno.Otros.ObFinancierasCortoPlazo) / Math.Abs(anioUno.Otros.ObFinancierasCortoPlazo.Value)) * 100 : null,
                                                OBFinancierasLargoPlazo = anioUno.Otros.OBFinancierasLargoPlazo == 0 && anioUno.Otros.OBFinancierasLargoPlazo != anioDos.Otros.OBFinancierasLargoPlazo ? 100 : anioUno.Otros.OBFinancierasLargoPlazo != 0 && anioUno.Otros.OBFinancierasLargoPlazo != anioDos.Otros.OBFinancierasLargoPlazo ? ((anioDos.Otros.OBFinancierasLargoPlazo - anioUno.Otros.OBFinancierasLargoPlazo) / Math.Abs(anioUno.Otros.OBFinancierasLargoPlazo.Value)) * 100 : null,
                                                Depreciaciones = anioUno.Otros.Depreciaciones == 0 && anioUno.Otros.Depreciaciones != anioDos.Otros.Depreciaciones ? 100 : anioUno.Otros.Depreciaciones != 0 && anioUno.Otros.Depreciaciones != anioDos.Otros.Depreciaciones ? ((anioDos.Otros.Depreciaciones - anioUno.Otros.Depreciaciones) / Math.Abs(anioUno.Otros.Depreciaciones.Value)) * 100 : null,
                                                UtilidadEjercicio = anioUno.Otros.UtilidadEjercicio == 0 && anioUno.Otros.UtilidadEjercicio != anioDos.Otros.UtilidadEjercicio ? 100 : anioUno.Otros.UtilidadEjercicio != 0 && anioUno.Otros.UtilidadEjercicio != anioDos.Otros.UtilidadEjercicio ? ((anioDos.Otros.UtilidadEjercicio - anioUno.Otros.UtilidadEjercicio) / Math.Abs(anioUno.Otros.UtilidadEjercicio.Value)) * 100 : null,
                                                PerdidaEjercicio = anioUno.Otros.PerdidaEjercicio == 0 && anioUno.Otros.PerdidaEjercicio != anioDos.Otros.PerdidaEjercicio ? 100 : anioUno.Otros.PerdidaEjercicio != 0 && anioUno.Otros.PerdidaEjercicio != anioDos.Otros.PerdidaEjercicio ? ((anioDos.Otros.PerdidaEjercicio - anioUno.Otros.PerdidaEjercicio) / Math.Abs(anioUno.Otros.PerdidaEjercicio.Value)) * 100 : null,
                                                ResultadosAcumulados = anioUno.Otros.ResultadosAcumulados == 0 && anioUno.Otros.ResultadosAcumulados != anioDos.Otros.ResultadosAcumulados ? 100 : anioUno.Otros.ResultadosAcumulados != 0 && anioUno.Otros.ResultadosAcumulados != anioDos.Otros.ResultadosAcumulados ? ((anioDos.Otros.ResultadosAcumulados - anioUno.Otros.ResultadosAcumulados) / Math.Abs(anioUno.Otros.ResultadosAcumulados.Value)) * 100 : null
                                            }
                                        };
                                        analisisHorizontal.Add(agrupacionAnalisis[i].Select(m => m).FirstOrDefault());
                                        analisisHorizontal.Add(analisis);

                                        if (i == 1) analisisHorizontal.Add(agrupacionAnalisis[i - 1].Select(m => m).FirstOrDefault());
                                    }
                                }

                                r_balances = r_balances.Where(m => !string.IsNullOrEmpty(m.RUC) && !string.IsNullOrEmpty(m.RazonSocial) && m.Periodo != 0).ToList();
                                if (r_balances.Any())
                                    r_balance = r_balances.FirstOrDefault(m => !string.IsNullOrEmpty(m.RUC) && !string.IsNullOrEmpty(m.RazonSocial) && m.Periodo != 0);

                                #endregion Análisis Horizontal
                            }

                            _logger.LogInformation($"Procesando Empresas Representante identificación: {modelo.Identificacion}");
                            representantesEmpresas = await _balances.GetRepresentantesEmpresasAsync(historialTemp.NombresPersona);
                            //accionistas = await _balances.GetInformacionAccionistasAsync(modelo.Identificacion);
                            //if (accionistas != null && !accionistas.Any())
                            //    accionistas = null;

                            empresasAccionista = await _balances.GetAccionistaEmpresasAsync(historialTemp.NombresPersona);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Balances con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (directorioCompania == null && !busquedaNoJuridico)
                    {
                        busquedaNuevaBalance = true;
                        var datosDetalleDirectorio = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.DirectorioCompanias && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleDirectorio != null)
                        {
                            cacheBalance = true;
                            directorioCompania = JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.DirectorioCompania>(datosDetalleDirectorio);
                        }
                    }

                    if (analisisHorizontal == null && !busquedaNoJuridico)
                    {
                        busquedaNuevaBalance = true;
                        var datosDetalleAnalisis = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.AnalisisHorizontal && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleAnalisis != null)
                        {
                            cacheBalance = true;
                            analisisHorizontal = JsonConvert.DeserializeObject<List<AnalisisHorizontalViewModel>>(datosDetalleAnalisis);
                        }
                    }

                    if (r_balances == null && !busquedaNoJuridico)
                    {
                        var datosDetalleBalances = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Balances && m.Historial.Periodo == 1 && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleBalances != null)
                        {
                            cacheBalance = true;
                            busquedaNuevaBalance = true;
                            r_balances = JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.BalanceEmpresa>>(datosDetalleBalances);
                        }
                    }

                    //if (accionistas == null && !busquedaNoJuridico)
                    //{
                    //    var datosDetalleAccionistas = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Accionistas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                    //    if (datosDetalleAccionistas != null)
                    //    {
                    //        cacheAccionistas = true;
                    //        accionistas = JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.Accionista>>(datosDetalleAccionistas);
                    //    }
                    //}

                    //if (representantesEmpresas == null || (representantesEmpresas != null && !representantesEmpresas.Any()))
                    //{
                    //    var datosDetalleRepresentante = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == identificacionOriginal && m.TipoFuente == Dominio.Tipos.Fuentes.RepresentantesEmpresas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                    //    if (datosDetalleRepresentante != null)
                    //    {
                    //        cacheBalance = true;
                    //        representantesEmpresas = JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.RepresentanteEmpresa>>(datosDetalleRepresentante);
                    //    }
                    //}

                    datos = new BalancesViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        Balance = r_balance,
                        Balances = r_balances,
                        MultiplesPeriodos = balancesMultiples,
                        PeriodoBusqueda = historialTemp.Periodo.Value,
                        PeriodosBusqueda = periodosBusqueda,
                        SoloEmpresasSimilares = soloEmpresasSimilares,
                        DirectorioCompania = directorioCompania,
                        BusquedaNueva = busquedaNuevaBalance,
                        AnalisisHorizontal = analisisHorizontal,
                        RepresentantesEmpresas = representantesEmpresas,
                        //Accionistas = accionistas,
                        EmpresasAccionista = empresasAccionista
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathBalances = Path.Combine(pathFuentes, ValidacionViewModel.ValidarCedula(identificacionOriginal) ? "balancesPersonaDemo.json" : "balancesDemo.json");
                    datos = JsonConvert.DeserializeObject<BalancesViewModel>(System.IO.File.ReadAllText(pathBalances));
                    datos.Accionistas = null;
                }

                _logger.LogInformation("Fuente de Balances procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Balances. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuenteBalance = new[] { Dominio.Tipos.Fuentes.Balance, Dominio.Tipos.Fuentes.Balances, Dominio.Tipos.Fuentes.DirectorioCompanias, Dominio.Tipos.Fuentes.AnalisisHorizontal, Dominio.Tipos.Fuentes.RepresentantesEmpresas, Dominio.Tipos.Fuentes.Accionistas, Dominio.Tipos.Fuentes.EmpresasAccionista };
                        var historialesBalance = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuenteBalance.Contains(m.TipoFuente));
                        var historialBalance = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Balance);
                        var historialBalances = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Balances);
                        var historialDirectorio = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DirectorioCompanias);
                        var historialRepresentantesEmpresas = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.RepresentantesEmpresas);
                        var historialEmpresasAccionista = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.EmpresasAccionista);
                        var historialAnalisis = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.AnalisisHorizontal);
                        var historialAccionistas = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Accionistas);

                        var historial = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, p => p.Include(p => p.PlanEmpresa), true);

                        if (historialBalance != null && (!historialBalance.Generado || !busquedaNuevaBalance) && !busquedaNoJuridico)
                        {
                            historialBalance.IdHistorial = modelo.IdHistorial;
                            historialBalance.TipoFuente = Dominio.Tipos.Fuentes.Balances;
                            historialBalance.Generado = datos.Balances != null && datos.Balances.Any();
                            historialBalance.Data = datos.Balances != null && datos.Balances.Any() ? JsonConvert.SerializeObject(datos.Balances) : null;
                            historialBalance.Cache = cacheBalance;
                            historialBalance.FechaRegistro = DateTime.Now;
                            historialBalance.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialBalance);
                            _logger.LogInformation("Historial de la Fuente Balance actualizado correctamente");
                        }
                        else if ((historialBalance == null || historialBalances == null) && !busquedaNoJuridico)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Balances,
                                Generado = datos.Balances != null && datos.Balances.Any(),
                                Data = datos.Balances != null && datos.Balances.Any() ? JsonConvert.SerializeObject(datos.Balances) : null,
                                Cache = cacheBalance,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Balances procesado correctamente");
                        }

                        if (historialDirectorio != null && (!historialDirectorio.Generado || !busquedaNuevaBalance) && !busquedaNoJuridico)
                        {
                            historialDirectorio.IdHistorial = modelo.IdHistorial;
                            historialDirectorio.TipoFuente = Dominio.Tipos.Fuentes.DirectorioCompanias;
                            historialDirectorio.Generado = datos.DirectorioCompania != null;
                            historialDirectorio.Data = datos.DirectorioCompania != null ? JsonConvert.SerializeObject(datos.DirectorioCompania) : null;
                            historialDirectorio.Cache = cacheBalance;
                            historialDirectorio.FechaRegistro = DateTime.Now;
                            historialDirectorio.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialDirectorio);
                            _logger.LogInformation("Historial de la Fuente Directorio Compañias actualizado correctamente");
                        }
                        else if (historialDirectorio == null && !busquedaNoJuridico)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.DirectorioCompanias,
                                Generado = datos.DirectorioCompania != null,
                                Data = datos.DirectorioCompania != null ? JsonConvert.SerializeObject(datos.DirectorioCompania) : null,
                                Cache = cacheBalance,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Directorio Compañias procesado correctamente");
                        }

                        if (historialAnalisis != null && (!historialAnalisis.Generado || !busquedaNuevaBalance) && !busquedaNoJuridico)
                        {
                            historialAnalisis.IdHistorial = modelo.IdHistorial;
                            historialAnalisis.TipoFuente = Dominio.Tipos.Fuentes.AnalisisHorizontal;
                            historialAnalisis.Generado = datos.AnalisisHorizontal != null;
                            historialAnalisis.Data = datos.AnalisisHorizontal != null ? JsonConvert.SerializeObject(datos.AnalisisHorizontal) : null;
                            historialAnalisis.Cache = cacheBalance;
                            historialAnalisis.FechaRegistro = DateTime.Now;
                            historialAnalisis.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAnalisis);
                            _logger.LogInformation("Historial de la Fuente Análisis Horizontal actualizado correctamente");
                        }
                        else if (historialAnalisis == null && !busquedaNoJuridico)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.AnalisisHorizontal,
                                Generado = datos.AnalisisHorizontal != null,
                                Data = datos.AnalisisHorizontal != null ? JsonConvert.SerializeObject(datos.AnalisisHorizontal) : null,
                                Cache = cacheBalance,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Análisis Horizontal procesado correctamente");
                        }

                        if (historialRepresentantesEmpresas != null && (!historialRepresentantesEmpresas.Generado || !busquedaNuevaBalance))
                        {
                            historialRepresentantesEmpresas.IdHistorial = modelo.IdHistorial;
                            historialRepresentantesEmpresas.TipoFuente = Dominio.Tipos.Fuentes.RepresentantesEmpresas;
                            historialRepresentantesEmpresas.Generado = datos.RepresentantesEmpresas != null;
                            historialRepresentantesEmpresas.Data = datos.RepresentantesEmpresas != null && datos.RepresentantesEmpresas.Any() ? JsonConvert.SerializeObject(datos.RepresentantesEmpresas) : null;
                            historialRepresentantesEmpresas.Cache = cacheBalance;
                            historialRepresentantesEmpresas.FechaRegistro = DateTime.Now;
                            historialRepresentantesEmpresas.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialRepresentantesEmpresas);
                            _logger.LogInformation("Historial de la Fuente Representantes empresas actualizado correctamente");
                        }
                        else if (historialRepresentantesEmpresas == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.RepresentantesEmpresas,
                                Generado = datos.RepresentantesEmpresas != null,
                                Data = datos.RepresentantesEmpresas != null && datos.RepresentantesEmpresas.Any() ? JsonConvert.SerializeObject(datos.RepresentantesEmpresas) : null,
                                Cache = cacheBalance,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Representantes empresas procesado correctamente");
                        }

                        //if (historialAccionistas != null && (!historialAccionistas.Generado || !busquedaNuevaBalance) && !busquedaNoJuridico)
                        //{
                        //    historialAccionistas.IdHistorial = modelo.IdHistorial;
                        //    historialAccionistas.TipoFuente = Dominio.Tipos.Fuentes.Accionistas;
                        //    historialAccionistas.Generado = datos.Accionistas != null;
                        //    historialAccionistas.Data = datos.Accionistas != null ? JsonConvert.SerializeObject(datos.Accionistas) : null;
                        //    historialAccionistas.Cache = cacheAccionistas;
                        //    historialAccionistas.FechaRegistro = DateTime.Now;
                        //    historialAccionistas.Reintento = true;
                        //    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAccionistas);
                        //    _logger.LogInformation("Historial de la Fuente Accionistas Compañias actualizado correctamente");
                        //}
                        //else if (historialAccionistas == null && !busquedaNoJuridico)
                        //{
                        //    await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        //    {
                        //        IdHistorial = modelo.IdHistorial,
                        //        TipoFuente = Dominio.Tipos.Fuentes.Accionistas,
                        //        Generado = datos.Accionistas != null,
                        //        Data = datos.Accionistas != null ? JsonConvert.SerializeObject(datos.Accionistas) : null,
                        //        Cache = cacheAccionistas,
                        //        FechaRegistro = DateTime.Now,
                        //        Reintento = false
                        //    });
                        //    _logger.LogInformation("Historial de la Fuente Accionistas Compañias procesado correctamente");
                        //}

                        if (historialEmpresasAccionista != null && (!historialEmpresasAccionista.Generado || !busquedaNuevaBalance))
                        {
                            historialEmpresasAccionista.IdHistorial = modelo.IdHistorial;
                            historialEmpresasAccionista.TipoFuente = Dominio.Tipos.Fuentes.EmpresasAccionista;
                            historialEmpresasAccionista.Generado = datos.EmpresasAccionista != null;
                            historialEmpresasAccionista.Data = datos.EmpresasAccionista != null && datos.EmpresasAccionista.Any() ? JsonConvert.SerializeObject(datos.EmpresasAccionista) : null;
                            historialEmpresasAccionista.Cache = cacheBalance;
                            historialEmpresasAccionista.FechaRegistro = DateTime.Now;
                            historialEmpresasAccionista.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialEmpresasAccionista);
                            _logger.LogInformation("Historial de la Fuente Empresas Accionista actualizado correctamente");
                        }
                        else if (historialEmpresasAccionista == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.EmpresasAccionista,
                                Generado = datos.EmpresasAccionista != null,
                                Data = datos.EmpresasAccionista != null && datos.EmpresasAccionista.Any() ? JsonConvert.SerializeObject(datos.EmpresasAccionista) : null,
                                Cache = cacheBalance,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Empresas Accionista procesado correctamente");
                        }

                        if (historial != null)
                        {
                            var historialConsolidadoTemp = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial);
                            var parametros = string.Empty;
                            var periodoTemp = 0;
                            if (ValidacionViewModel.ValidarRucJuridico(identificacionOriginal) || ValidacionViewModel.ValidarRucSectorPublico(identificacionOriginal))
                            {
                                periodoTemp = 1;
                                if (r_balances != null)
                                {
                                    var ultimosPeriodos = r_balances.Select(m => m.Periodo).ToList();
                                    parametros = JsonConvert.SerializeObject(new { Identificacion = identificacionOriginal, Periodos = ultimosPeriodos });
                                }
                            }
                            else
                                parametros = JsonConvert.SerializeObject(new { Identificacion = identificacionOriginal, Periodos = new int[] { periodoTemp } });

                            historial.Periodo = periodoTemp;
                            if (!string.IsNullOrEmpty(parametros))
                                historial.ParametrosBusqueda = parametros;

                            if (directorioCompania != null && !string.IsNullOrEmpty(directorioCompania.Representante?.Trim()) && string.IsNullOrEmpty(historial.NombresPersona?.Trim()))
                                historial.NombresPersona = directorioCompania.Representante.Trim().ToUpper();

                            await _historiales.UpdateAsync(historial);
                            if (historialConsolidadoTemp != null)
                            {
                                historialConsolidadoTemp.NombrePersona = historial.NombresPersona;
                                await _reporteConsolidado.UpdateAsync(historialConsolidadoTemp);
                            }

                            if (historial.PlanEmpresa.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1792060346001)
                            {
                                if (ValidacionViewModel.ValidarRuc(historial.Identificacion.Trim()) && (ValidacionViewModel.ValidarRucJuridico(historial.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(historial.Identificacion.Trim())))
                                {
                                    historial.NombresPersona = null;
                                    await _historiales.UpdateAsync(historial);
                                }
                            }
                        }
                        _logger.LogInformation("Historial de la Fuente Balances procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteBalances", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteBalances", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteIESS")]
        public async Task<IActionResult> ObtenerReporteIESS(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var pathTipoFuente = Path.Combine("wwwroot", "data", "fuentesInternas.json");
                var tipoFuente = JsonConvert.DeserializeObject<ParametroFuentesInternasViewModel>(System.IO.File.ReadAllText(pathTipoFuente))?.FuentesInternas.Iess;

                var idEmpresasSalarios = new List<int>();
                try
                {
                    var pathEmpresasSalarioIess = Path.Combine("wwwroot", "data", "empresasSalarioIess.json");
                    var archivoSalarios = System.IO.File.ReadAllText(pathEmpresasSalarioIess);
                    var empresasSalariosIess = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoSalarios);
                    if (empresasSalariosIess != null && empresasSalariosIess.Any())
                        idEmpresasSalarios = empresasSalariosIess.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                var idEmpresasEmpleados = new List<int>();
                try
                {
                    var pathEmpresaEmpleadosIess = Path.Combine("wwwroot", "data", "empresasEmpleadosIess.json");
                    var archivoEmpleados = System.IO.File.ReadAllText(pathEmpresaEmpleadosIess);
                    var empresaEmpleadosIess = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoEmpleados);
                    if (empresaEmpleadosIess != null && empresaEmpleadosIess.Any())
                        idEmpresasEmpleados = empresaEmpleadosIess.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.IESS.Modelos.Persona r_iess = null;
                Externos.Logica.IESS.Modelos.Afiliacion r_afiliacion = null;
                List<Externos.Logica.IESS.Modelos.Afiliado> r_afiliado = null;
                ResultadoListAfiliado resultadoAfiliado = null;
                List<Externos.Logica.IESS.Modelos.Empleado> r_empleadosempresa = null;
                ResultadoListEmpleado resultadoListEmpleado = null;
                Externos.Logica.IESS.Modelos.ResultadoAfiliacion resultadoAfiliacion = null;
                Externos.Logica.IESS.Modelos.ResultadoPersona resultadoIess = null;
                var datos = new IessViewModel();
                Historial historialTemp = null;
                var busquedaNuevaIess = false;
                var busquedaNuevaAfiliado = false;
                var busquedaNuevaAfiliadoAdicional = false;
                var busquedaNuevaEmpresaEmpleados = false;
                var busquedaEmpresaEmpleados = false;
                var cacheIess = false;
                var cacheAfiliado = false;
                var cacheAfiliadoAdicional = false;
                var cacheEmpresaEmpleados = false;
                var cedulaEntidades = false;
                ViewBag.IessAfiliacion = false;

                historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, n => n.Include(t => t.PlanEmpresa), true);
                if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                    ViewBag.IessAfiliacion = true;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente IESS identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                if (tipoFuente != 5)
                                {
                                    resultadoIess = await _iess.GetRespuestaAsyncV2(modelo.Identificacion);
                                    r_iess = resultadoIess?.Persona;
                                }
                                if (r_iess != null)
                                {
                                    if (r_iess.Obligacion != null && !string.IsNullOrEmpty(r_iess.Obligacion.MoraOriginal) && r_iess.Obligacion.Mora.HasValue)
                                        r_iess.Obligacion.Mora = double.Parse(r_iess.Obligacion.MoraOriginal.Replace(",", ""));
                                }
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                    {
                                        resultadoAfiliacion = await ObtenerRAfiliacion(modelo, modelo.Identificacion, tipoFuente);
                                        r_afiliacion = resultadoAfiliacion?.Afiliacion;
                                        //resultadoAfiliado = await _iess.GetInformacionAfiliadoV2(modelo.Identificacion);
                                        //r_afiliado = resultadoAfiliado?.Afiliado;
                                    }
                                }
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                    {
                                        if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        {
                                            if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                            {
                                                resultadoAfiliacion = await ObtenerRAfiliacion(modelo, historialTemp.IdentificacionSecundaria.Trim(), tipoFuente);
                                                r_afiliacion = resultadoAfiliacion?.Afiliacion;
                                                //resultadoAfiliado = await _iess.GetInformacionAfiliadoV2(historialTemp.IdentificacionSecundaria.Trim());
                                                //r_afiliado = resultadoAfiliado?.Afiliado;
                                            }
                                        }
                                    }
                                    //if (idEmpresasEmpleados.Contains(usuarioActual.IdEmpresa))
                                    //{
                                    //    if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                    //    {
                                    //        resultadoListEmpleado = await _iess.GetInformacionEmpresaEmpleadosIessV2(modelo.Identificacion);
                                    //        r_empleadosempresa = resultadoListEmpleado?.Empleado;
                                    //        busquedaEmpresaEmpleados = true;
                                    //    }
                                    //}
                                }
                                else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    {
                                        if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                        {
                                            resultadoAfiliacion = await ObtenerRAfiliacion(modelo, cedulaTemp, tipoFuente);
                                            r_afiliacion = resultadoAfiliacion?.Afiliacion;
                                            //resultadoAfiliado = await _iess.GetInformacionAfiliadoV2(cedulaTemp);
                                            //r_afiliado = resultadoAfiliado?.Afiliado;
                                        }
                                    }
                                }
                                if (tipoFuente != 5)
                                    r_iess = await _iess.GetRespuestaAsync(modelo.Identificacion);
                                if (r_iess != null)
                                {
                                    if (r_iess.Obligacion != null && !string.IsNullOrEmpty(r_iess.Obligacion.MoraOriginal) && r_iess.Obligacion.Mora.HasValue)
                                        r_iess.Obligacion.Mora = double.Parse(r_iess.Obligacion.MoraOriginal.Replace(",", ""));
                                }
                            }
                        }

                        if (r_iess != null && r_iess.Obligacion != null && r_iess.Obligacion.Documento != null && r_iess.Obligacion.Documento.Length > 0)
                        {
                            try
                            {
                                var filePath = Path.GetTempFileName();
                                ViewBag.RutaArchivoCumplimiento = filePath;
                                System.IO.File.WriteAllBytes(filePath, r_iess.Obligacion.Documento);
                            }
                            catch (Exception ex)
                            {
                                ViewBag.RutaArchivoCumplimiento = string.Empty;
                                _logger.LogError($"Error al registrar certificado de cumplimiento {modelo.Identificacion}: {ex.Message}");
                            }
                        }

                        if (r_afiliacion != null)
                        {
                            var empresasAfiliacion = Regex.Matches(r_afiliacion.Empresa, "001").Count();
                            if (empresasAfiliacion > 1)
                            {
                                r_afiliacion.Empresa = r_afiliacion.Empresa.Replace("001", "001. ");
                            }
                            if (ViewBag.TipoFuente == 1)
                            {
                                if (r_afiliacion.ReportePdf.Length > 0)
                                {
                                    try
                                    {
                                        var pdf = r_afiliacion.ReportePdf;
                                        if (pdf != null && pdf.Length > 0)
                                        {
                                            var filePath = Path.GetTempFileName();
                                            ViewBag.RutaArchivo = filePath;
                                            System.IO.File.WriteAllBytes(filePath, pdf);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ViewBag.RutaArchivo = string.Empty;
                                        _logger.LogError($"Error al registrar certificado de afiliación {modelo.Identificacion}: {ex.Message}");
                                    }
                                    r_afiliacion.ReportePdf = null;
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(r_afiliacion.Reporte) && ViewBag.TipoFuente == 2)
                                {
                                    try
                                    {
                                        var pdf = await _consulta.ObtenerReportePdf(r_afiliacion.Reporte);
                                        if (pdf != null && pdf.Length > 0)
                                        {
                                            var filePath = Path.GetTempFileName();
                                            ViewBag.RutaArchivo = filePath;
                                            System.IO.File.WriteAllBytes(filePath, pdf);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ViewBag.RutaArchivo = string.Empty;
                                        _logger.LogError($"Error al registrar certificado de afiliación {modelo.Identificacion}: {ex.Message}");
                                    }
                                    r_afiliacion.Reporte = null;
                                }
                            }
                        }
                        if (r_afiliado != null && !r_afiliado.Any())
                            r_afiliado = null;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente IESS con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_iess == null)// borrar caches
                    {
                        busquedaNuevaIess = true;
                        //var datosDetalleIess = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Iess && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosDetalleIess != null)
                        //{
                        //    cacheIess = true;
                        //    r_iess = JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Persona>(datosDetalleIess);
                        //}
                    }
                    if (r_afiliacion == null)
                    {
                        busquedaNuevaAfiliado = true;
                        //var datosDetalleAfiliado = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosDetalleAfiliado != null)
                        //{
                        //    cacheAfiliado = true;
                        //    r_afiliacion = JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Afiliacion>(datosDetalleAfiliado);
                        //}
                    }
                    //if (r_afiliado == null)
                    //{
                    //    busquedaNuevaAfiliadoAdicional = true;
                    //    var datosDetalleAfiliado = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.AfiliadoAdicional && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                    //    if (datosDetalleAfiliado != null)
                    //    {
                    //        cacheAfiliadoAdicional = true;
                    //        r_afiliado = JsonConvert.DeserializeObject<List<Externos.Logica.IESS.Modelos.Afiliado>>(datosDetalleAfiliado);
                    //    }
                    //}
                    //if (r_empleadosempresa == null && busquedaEmpresaEmpleados)//borrar
                    //{

                    //    busquedaNuevaEmpresaEmpleados = true;
                    //    var datosDetalleEmpresaEmpleado = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.IessEmpresaEmpleados && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                    //    if (datosDetalleEmpresaEmpleado != null)
                    //    {
                    //        cacheEmpresaEmpleados = true;
                    //        r_empleadosempresa = JsonConvert.DeserializeObject<List<Externos.Logica.IESS.Modelos.Empleado>>(datosDetalleEmpresaEmpleado);
                    //    }
                    //}

                    if (r_afiliacion == null && r_afiliado != null)
                        ViewBag.TipoFuente = 5;

                    datos = new IessViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        Iess = r_iess,
                        Afiliado = r_afiliacion,
                        AfiliadoAdicional = r_afiliado,
                        EmpleadosEmpresa = r_empleadosempresa,
                        BusquedaNuevaIess = busquedaNuevaIess,
                        BusquedaNuevaAfiliado = busquedaNuevaAfiliado,
                        EmpresaConfiable = idEmpresasSalarios.Contains(usuarioActual.IdEmpresa)
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathIess = Path.Combine(pathFuentes, "iessDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathIess);
                    datos = JsonConvert.DeserializeObject<IessViewModel>(archivo);
                    datos.EmpresaConfiable = true;
                    ViewBag.TipoFuente = 1;

                    try
                    {
                        byte[] pdf = null;
                        //var pdf = await _consulta.ObtenerReportePdf(datos.Afiliado.Reporte);
                        if (pdf != null && pdf.Length > 0)
                        {
                            var filePath = Path.GetTempFileName();
                            ViewBag.RutaArchivo = filePath;
                            System.IO.File.WriteAllBytes(filePath, pdf);
                        }
                        datos.Afiliado.Reporte = null;
                    }
                    catch (Exception ex)
                    {
                        ViewBag.RutaArchivo = string.Empty;
                        _logger.LogError($"Error al registrar certificado de afiliación {modelo.Identificacion}: {ex.Message}");
                    }
                }

                try
                {
                    if (datos != null && datos.Afiliado != null && !string.IsNullOrEmpty(datos.Afiliado.Empresa))
                    {
                        var datosEmpresa = datos.Afiliado.Empresa;
                        var empresas = Regex.Matches(datosEmpresa, @": (\w+).")?.Select(m => m.ToString().Replace(":", "").Replace(".", "").Trim()).ToArray();
                        if (empresas != null && empresas.Any())
                        {
                            foreach (var item in empresas)
                            {
                                if (!string.IsNullOrEmpty(item) && item.Length >= 10)
                                {
                                    datosEmpresa = datosEmpresa.Replace(item, $"<a class=\"btnConsultarIdentificacion\" data-tippy-content=\"Consultar empresa\" target=\"_blank\"  href='{Url.Action("Inicio", "Principal", new { Area = "Consultas", Identificacion = item })}'>{item}</a>");
                                }
                            }
                            ViewBag.EmpresasFormato = datosEmpresa;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                _logger.LogInformation("Fuente de IESS procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente IESS. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesIess = new[] { Dominio.Tipos.Fuentes.Iess, Dominio.Tipos.Fuentes.Afiliado, Dominio.Tipos.Fuentes.AfiliadoAdicional, Dominio.Tipos.Fuentes.IessEmpresaEmpleados };
                        var historialesIess = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesIess.Contains(m.TipoFuente));
                        var historialObligacion = historialesIess.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Iess);
                        var historialAfiliado = historialesIess.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado);
                        var historialAfiliadoAdicional = historialesIess.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.AfiliadoAdicional);
                        var historialEmpresaEmpleados = historialesIess.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.IessEmpresaEmpleados);
                        if (historialObligacion != null && (!historialObligacion.Generado || !busquedaNuevaIess))
                        {
                            historialObligacion.IdHistorial = modelo.IdHistorial;
                            historialObligacion.TipoFuente = Dominio.Tipos.Fuentes.Iess;
                            historialObligacion.Generado = datos.Iess != null;
                            historialObligacion.Data = datos.Iess != null ? JsonConvert.SerializeObject(datos.Iess) : null;
                            historialObligacion.Cache = cacheIess;
                            historialObligacion.FechaRegistro = DateTime.Now;
                            historialObligacion.Reintento = true;
                            historialObligacion.DataError = resultadoIess?.Error;
                            historialObligacion.FuenteActiva = resultadoIess?.FuenteActiva;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialObligacion);
                            _logger.LogInformation("Historial de la Fuente Certificado Obligación actualizado correctamente");
                        }
                        else if (historialObligacion == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Iess,
                                Generado = datos.Iess != null,
                                Data = datos.Iess != null ? JsonConvert.SerializeObject(datos.Iess) : null,
                                Cache = cacheIess,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoIess?.Error,
                                FuenteActiva = resultadoIess?.FuenteActiva
                            });
                        }

                        if (historialAfiliado != null && (!historialAfiliado.Generado || !busquedaNuevaAfiliado))
                        {
                            historialAfiliado.IdHistorial = modelo.IdHistorial;
                            historialAfiliado.TipoFuente = Dominio.Tipos.Fuentes.Afiliado;
                            historialAfiliado.Generado = datos.Afiliado != null;
                            historialAfiliado.Data = datos.Afiliado != null ? JsonConvert.SerializeObject(datos.Afiliado) : null;
                            historialAfiliado.Cache = cacheAfiliado;
                            historialAfiliado.FechaRegistro = DateTime.Now;
                            historialAfiliado.Reintento = true;
                            historialAfiliado.DataError = resultadoAfiliacion?.Error;
                            historialAfiliado.FuenteActiva = resultadoAfiliacion?.FuenteActiva;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAfiliado);
                            _logger.LogInformation("Historial de la Fuente Certificado Afiliación actualizado correctamente");
                        }
                        else if (historialAfiliado == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Afiliado,
                                Generado = datos.Afiliado != null,
                                Data = datos.Afiliado != null ? JsonConvert.SerializeObject(datos.Afiliado) : null,
                                Cache = cacheAfiliado,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoAfiliacion?.Error,
                                FuenteActiva = resultadoAfiliacion?.FuenteActiva
                            });
                        }

                        //if (historialAfiliadoAdicional != null && (!historialAfiliadoAdicional.Generado || !busquedaNuevaAfiliadoAdicional))
                        //{
                        //    historialAfiliadoAdicional.IdHistorial = modelo.IdHistorial;
                        //    historialAfiliadoAdicional.TipoFuente = Dominio.Tipos.Fuentes.AfiliadoAdicional;
                        //    historialAfiliadoAdicional.Generado = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any();
                        //    historialAfiliadoAdicional.Data = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any() ? JsonConvert.SerializeObject(datos.AfiliadoAdicional) : null;
                        //    historialAfiliadoAdicional.Cache = cacheAfiliadoAdicional;
                        //    historialAfiliadoAdicional.FechaRegistro = DateTime.Now;
                        //    historialAfiliadoAdicional.Reintento = true;
                        //    historialAfiliadoAdicional.DataError = resultadoAfiliado?.Error;
                        //    historialAfiliadoAdicional.FuenteActiva = resultadoAfiliado?.FuenteActiva;
                        //    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAfiliadoAdicional);
                        //    _logger.LogInformation("Historial de la Fuente Afiliado Adicional actualizado correctamente");
                        //}
                        //else if (historialAfiliadoAdicional == null)
                        //{
                        //    await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        //    {
                        //        IdHistorial = modelo.IdHistorial,
                        //        TipoFuente = Dominio.Tipos.Fuentes.AfiliadoAdicional,
                        //        Generado = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any(),
                        //        Data = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any() ? JsonConvert.SerializeObject(datos.AfiliadoAdicional) : null,
                        //        Cache = cacheAfiliadoAdicional,
                        //        FechaRegistro = DateTime.Now,
                        //        Reintento = false,
                        //        DataError = resultadoAfiliado?.Error,
                        //        FuenteActiva = resultadoAfiliado?.FuenteActiva
                        //    });
                        //}

                        //if (historialEmpresaEmpleados != null && (!historialEmpresaEmpleados.Generado || !busquedaNuevaEmpresaEmpleados))
                        //{
                        //    historialEmpresaEmpleados.IdHistorial = modelo.IdHistorial;
                        //    historialEmpresaEmpleados.TipoFuente = Dominio.Tipos.Fuentes.IessEmpresaEmpleados;
                        //    historialEmpresaEmpleados.Generado = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any();
                        //    historialEmpresaEmpleados.Data = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any() ? JsonConvert.SerializeObject(datos.EmpleadosEmpresa) : null;
                        //    historialEmpresaEmpleados.Cache = cacheEmpresaEmpleados;
                        //    historialEmpresaEmpleados.FechaRegistro = DateTime.Now;
                        //    historialEmpresaEmpleados.Reintento = true;
                        //    historialEmpresaEmpleados.DataError = resultadoListEmpleado?.Error;
                        //    historialEmpresaEmpleados.FuenteActiva = resultadoListEmpleado?.FuenteActiva;
                        //    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialEmpresaEmpleados);
                        //    _logger.LogInformation("Historial de la Fuente Afiliado Adicional actualizado correctamente");
                        //}
                        //else if (historialEmpresaEmpleados == null)
                        //{
                        //    await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        //    {
                        //        IdHistorial = modelo.IdHistorial,
                        //        TipoFuente = Dominio.Tipos.Fuentes.IessEmpresaEmpleados,
                        //        Generado = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any(),
                        //        Data = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any() ? JsonConvert.SerializeObject(datos.EmpleadosEmpresa) : null,
                        //        Cache = cacheEmpresaEmpleados,
                        //        FechaRegistro = DateTime.Now,
                        //        Reintento = false,
                        //        DataError = resultadoListEmpleado?.Error,
                        //        FuenteActiva = resultadoListEmpleado?.FuenteActiva
                        //    });
                        //}
                        _logger.LogInformation("Historial de la Fuente IESS procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");

#if !DEBUG
                    if (!idEmpresasSalarios.Contains(usuarioActual.IdEmpresa))
                    {
                        if (datos != null && datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any())
                        {
                            foreach (var item in datos.AfiliadoAdicional)
                            {
                                item.SalarioAfiliado = null;
                                item.SalarioAfiliadoOriginal = null;
                                item.SalarioAfiliadoSuperior = null;
                                item.SalarioAfiliadoOriginalSuperior = null;
                            }
                        }
                    }
#endif
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteIess", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteIess", null);
            }
        }

        [HttpPost]
        public async Task<IActionResult> ObtenerHistorialIess(ReporteViewModel modelo)
        {
            try
            {
                var cacheKey = $"HistorialIess_{modelo.IdHistorial}";

                // Intentar recuperar desde caché
                if (_MemoryCache.TryGetValue<IessViewModel>(cacheKey, out var datosDesdeCache))
                {
                    _logger.LogInformation("Historial IESS obtenido desde caché.");
                    return PartialView("../Shared/Fuentes/_FuenteIessHistorial", datosDesdeCache);
                }

                #region ExisteClienteIessBuro

                var pathHistorialIess = Path.Combine("wwwroot", "data", "AdicionalInfo.json");
                var json = System.IO.File.ReadAllText(pathHistorialIess);

                //Deserializar como lista
                var listaUsuariosIess = JsonConvert.DeserializeObject<List<EmpresaIessHistorialViewModel>>(json)
                                        ?? new List<EmpresaIessHistorialViewModel>();

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                //Validar si el usuario existe en el JSON
                bool UsuarioIess = listaUsuariosIess.Any(e => e.Id == usuarioActual.IdEmpresa);

                #endregion


                var idEmpresasEmpleados = new List<int>();
                try
                {
                    var pathEmpresaEmpleadosIess = Path.Combine("wwwroot", "data", "empresasEmpleadosIess.json");
                    var archivoEmpleados = System.IO.File.ReadAllText(pathEmpresaEmpleadosIess);
                    var empresaEmpleadosIess = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoEmpleados);
                    if (empresaEmpleadosIess != null && empresaEmpleadosIess.Any())
                        idEmpresasEmpleados = empresaEmpleadosIess.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                List<Externos.Logica.IESS.Modelos.Afiliado> r_afiliado = null;
                ResultadoListAfiliado resultadoAfiliado = null;
                List<Externos.Logica.IESS.Modelos.Empleado> r_empleadosempresa = null;
                Historial historialTemp = null;
                var cedulaEntidades = false;
                ViewBag.IessAfiliacion = false;
                var datos = new IessViewModel();

                ResultadoListEmpleado resultadoListEmpleado = null;
                var busquedaEmpresaEmpleados = false;
                var busquedaNuevaAfiliadoAdicional = false;
                var idEmpresasSalarios = new List<int>();

                try
                {
                    var pathEmpresasSalarioIess = Path.Combine("wwwroot", "data", "empresasSalarioIess.json");
                    var archivoSalarios = System.IO.File.ReadAllText(pathEmpresasSalarioIess);
                    var empresasSalariosIess = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoSalarios);
                    if (empresasSalariosIess != null && empresasSalariosIess.Any())
                        idEmpresasSalarios = empresasSalariosIess.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, n => n.Include(t => t.PlanEmpresa), true);
                if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                    ViewBag.IessAfiliacion = true;

                if (!_cache) // Este es tu flag de si usar o no lógica de cache, mantenlo como lo tengas
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente IESS identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                    {
                                        resultadoAfiliado = await _iess.GetInformacionAfiliadoV2(modelo.Identificacion);
                                        r_afiliado = resultadoAfiliado?.Afiliado;
                                    }
                                }
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                    {
                                        if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        {
                                            if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                            {
                                                resultadoAfiliado = await _iess.GetInformacionAfiliadoV2(historialTemp.IdentificacionSecundaria.Trim());
                                                r_afiliado = resultadoAfiliado?.Afiliado;
                                            }
                                        }
                                    }

                                    if (idEmpresasEmpleados.Contains(usuarioActual.IdEmpresa))
                                    {
                                        if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                        {
                                            resultadoListEmpleado = await _iess.GetInformacionEmpresaEmpleadosIessV2(modelo.Identificacion);
                                            r_empleadosempresa = resultadoListEmpleado?.Empleado;
                                            busquedaEmpresaEmpleados = true;
                                        }
                                    }
                                }
                                else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    {
                                        if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                        {
                                            resultadoAfiliado = await _iess.GetInformacionAfiliadoV2(cedulaTemp);
                                            r_afiliado = resultadoAfiliado?.Afiliado;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente IESS con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    datos = new IessViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        AfiliadoAdicional = r_afiliado,
                        EmpleadosEmpresa = r_empleadosempresa,
                        EmpresaConfiable = idEmpresasSalarios.Contains(usuarioActual.IdEmpresa),
                        HistorialIess = UsuarioIess
                    };

                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesIess = new[] { Dominio.Tipos.Fuentes.AfiliadoAdicional, Dominio.Tipos.Fuentes.IessEmpresaEmpleados };
                        var historialesIess = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesIess.Contains(m.TipoFuente));

                        var historialAfiliadoAdicional = historialesIess.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Fuentes.AfiliadoAdicional);
                        var historialEmpresaEmpleados = historialesIess.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Fuentes.IessEmpresaEmpleados);

                        var cacheAfiliadoAdicional = false;
                        var cacheEmpresaEmpleados = false;
                        var busquedaNuevaEmpresaEmpleados = false;

                        if (historialAfiliadoAdicional != null && (!historialAfiliadoAdicional.Generado || !busquedaNuevaAfiliadoAdicional))
                        {
                            historialAfiliadoAdicional.IdHistorial = modelo.IdHistorial;
                            historialAfiliadoAdicional.TipoFuente = Dominio.Tipos.Fuentes.AfiliadoAdicional;
                            historialAfiliadoAdicional.Generado = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any();
                            historialAfiliadoAdicional.Data = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any() ? JsonConvert.SerializeObject(datos.AfiliadoAdicional) : null;
                            historialAfiliadoAdicional.Cache = cacheAfiliadoAdicional;
                            historialAfiliadoAdicional.FechaRegistro = DateTime.Now;
                            historialAfiliadoAdicional.Reintento = true;
                            historialAfiliadoAdicional.DataError = resultadoAfiliado?.Error;
                            historialAfiliadoAdicional.FuenteActiva = resultadoAfiliado?.FuenteActiva;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAfiliadoAdicional);
                        }
                        else if (historialAfiliadoAdicional == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.AfiliadoAdicional,
                                Generado = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any(),
                                Data = datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any() ? JsonConvert.SerializeObject(datos.AfiliadoAdicional) : null,
                                Cache = cacheAfiliadoAdicional,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoAfiliado?.Error,
                                FuenteActiva = resultadoAfiliado?.FuenteActiva
                            });
                        }

                        if (historialEmpresaEmpleados != null && (!historialEmpresaEmpleados.Generado || !busquedaNuevaEmpresaEmpleados))
                        {
                            historialEmpresaEmpleados.IdHistorial = modelo.IdHistorial;
                            historialEmpresaEmpleados.TipoFuente = Dominio.Tipos.Fuentes.IessEmpresaEmpleados;
                            historialEmpresaEmpleados.Generado = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any();
                            historialEmpresaEmpleados.Data = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any() ? JsonConvert.SerializeObject(datos.EmpleadosEmpresa) : null;
                            historialEmpresaEmpleados.Cache = cacheEmpresaEmpleados;
                            historialEmpresaEmpleados.FechaRegistro = DateTime.Now;
                            historialEmpresaEmpleados.Reintento = true;
                            historialEmpresaEmpleados.DataError = resultadoListEmpleado?.Error;
                            historialEmpresaEmpleados.FuenteActiva = resultadoListEmpleado?.FuenteActiva;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialEmpresaEmpleados);
                        }
                        else if (historialEmpresaEmpleados == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.IessEmpresaEmpleados,
                                Generado = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any(),
                                Data = datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any() ? JsonConvert.SerializeObject(datos.EmpleadosEmpresa) : null,
                                Cache = cacheEmpresaEmpleados,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoListEmpleado?.Error,
                                FuenteActiva = resultadoListEmpleado?.FuenteActiva
                            });
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");

#if !DEBUG
            if (!idEmpresasSalarios.Contains(usuarioActual.IdEmpresa))
            {
                if (datos != null && datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any())
                {
                    foreach (var item in datos.AfiliadoAdicional)
                    {
                        item.SalarioAfiliado = null;
                        item.SalarioAfiliadoOriginal = null;
                        item.SalarioAfiliadoSuperior = null;
                        item.SalarioAfiliadoOriginalSuperior = null;
                    }
                }
            }
#endif

                    _logger.LogInformation("Historial IESS procesado correctamente.");

                    // Guardar en cache por 30 minutos
                    _MemoryCache.Set(cacheKey, datos, TimeSpan.FromMinutes(30));

                    return PartialView("../Shared/Fuentes/_FuenteIessHistorial", datos);
                }

                return PartialView("../Shared/Fuentes/_FuenteIessHistorial", null);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return PartialView("../Shared/Fuentes/_FuenteIessHistorial", null);
            }
        }


        private async Task<Externos.Logica.IESS.Modelos.ResultadoAfiliacion> ObtenerRAfiliacion(ReporteViewModel modelo, string identificacion, int? tipoFuente)
        {
            try
            {
                Externos.Logica.IESS.Modelos.ResultadoAfiliacion r_afiliacion = null;
                DateTime? fechaNacimiento = null;
                var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                var detallesHistorial = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);
                if (detallesHistorial.Any())
                {
                    var registroCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                    if (registroCivil != null)
                    {
                        var dataRc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(registroCivil.Data);
                        if (dataRc != null)
                            fechaNacimiento = dataRc.FechaNacimiento;
                    }
                    else
                    {
                        var personaGc = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);
                        if (personaGc != null)
                        {
                            var dataGc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(personaGc.Data);
                            if (dataGc != null)
                                fechaNacimiento = dataGc.FechaNacimiento;
                        }
                    }
                }
                switch (tipoFuente)
                {
                    case 1:
                        if (fechaNacimiento.HasValue)
                        {
                            r_afiliacion = _iess.GetCertificadoAfiliacionOficialV2(identificacion, fechaNacimiento.Value);
                            ViewBag.TipoFuente = 1;
                        }
                        break;
                    case 2:
                        r_afiliacion = await _iess.GetAfiliacionCertificadoAsyncV2(identificacion);
                        ViewBag.TipoFuente = 2;
                        break;
                    case 3:
                        if (fechaNacimiento.HasValue)
                        {
                            r_afiliacion = _iess.GetCertificadoAfiliacionOficialV2(identificacion, fechaNacimiento.Value);
                            ViewBag.TipoFuente = 1;
                        }
                        if (r_afiliacion == null)
                        {
                            r_afiliacion = await _iess.GetAfiliacionCertificadoAsyncV2(identificacion);
                            ViewBag.TipoFuente = 2;
                        }
                        break;
                    case 4:
                        r_afiliacion = await _iess.GetAfiliacionCertificadoAsyncV2(identificacion);
                        ViewBag.TipoFuente = 2;
                        if (r_afiliacion == null && fechaNacimiento.HasValue)
                        {
                            r_afiliacion = _iess.GetCertificadoAfiliacionOficialV2(identificacion, fechaNacimiento.Value);
                            ViewBag.TipoFuente = 1;
                        }
                        break;
                    case 5:
                        ViewBag.TipoFuente = 5;
                        _logger.LogInformation("Historial de la Fuente IESS inactiva: 5");
                        break;
                    default:
                        ViewBag.TipoFuente = 2;
                        r_afiliacion = await _iess.GetAfiliacionCertificadoAsyncV2(identificacion);
                        break;
                }
                return r_afiliacion;
            }
            catch (Exception e)
            {

                _logger.LogError(e, e.Message);
                return null;
            }
        }

        //[HttpPost]
        //[Route("ObtenerReporteIESSJubilado")]
        //public async Task<IActionResult> ObtenerReporteIESSJubilado(ReporteViewModel modelo)
        //{
        //    try
        //    {
        //        if (modelo == null)
        //            throw new Exception("No se han enviado parámetros para obtener el reporte");

        //        if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
        //            throw new Exception("El campo RUC es obligatorio");

        //        modelo.Identificacion = modelo.Identificacion.Trim();
        //        Externos.Logica.IESS.Modelos.Jubilado r_jubilado = null;
        //        ViewBag.RutaArchivo = string.Empty;
        //        var datos = new IessJubiladoViewModel();
        //        Historial historialTemp = null;
        //        var busquedaNuevaIessJubilado = false;
        //        var cacheIessJubilado = false;
        //        ResultadoJubilado resultadoJubilado = null;

        //        if (!_cache)
        //        {
        //            try
        //            {
        //                _logger.LogInformation($"Procesando Fuente Iess Jubilado identificación: {modelo.Identificacion}");
        //                historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, m => m.Include(m => m.Usuario.Empresa), true);

        //                if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
        //                {
        //                    if (historialTemp != null && (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion)) && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
        //                    {
        //                        resultadoJubilado = await _iess.GetGetEsJubiladoV2(historialTemp.IdentificacionSecundaria);
        //                        r_jubilado = resultadoJubilado?.Jubilado;
        //                    }
        //                    else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
        //                    {
        //                        modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
        //                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
        //                        {
        //                            resultadoJubilado = await _iess.GetGetEsJubiladoV2(modelo.Identificacion);
        //                            r_jubilado = resultadoJubilado?.Jubilado;
        //                        }
        //                    }
        //                }
        //                else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
        //                {
        //                    resultadoJubilado = await _iess.GetGetEsJubiladoV2(modelo.Identificacion);
        //                    r_jubilado = resultadoJubilado?.Jubilado;
        //                }

        //                if (r_jubilado != null && r_jubilado.ReportePdf.Length > 0)
        //                {
        //                    try
        //                    {
        //                        var filePath = Path.GetTempFileName();
        //                        ViewBag.RutaArchivo = filePath;
        //                        System.IO.File.WriteAllBytes(filePath, r_jubilado.ReportePdf);
        //                    }
        //                    catch (Exception ex)
        //                    {
        //                        ViewBag.RutaArchivo = string.Empty;
        //                        _logger.LogError($"Error al registrar certificado de Iess Jubilado {modelo.Identificacion}: {ex.Message}");
        //                    }
        //                    r_jubilado.ReportePdf = null;
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                _logger.LogError($"Error al consultar fuente Iess Jubilado con identificación {modelo.Identificacion}: {ex.Message}");
        //            }

        //            if (r_jubilado == null)
        //            {
        //                busquedaNuevaIessJubilado = true;
        //                var datosIessJubilado = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.IessJubilado && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
        //                if (datosIessJubilado != null)
        //                {
        //                    cacheIessJubilado = true;
        //                    r_jubilado = JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Jubilado>(datosIessJubilado);
        //                }
        //            }

        //            datos = new IessJubiladoViewModel()
        //            {
        //                HistorialCabecera = historialTemp,
        //                IessJubilado = r_jubilado,
        //                BusquedaNuevaIessJubilado = busquedaNuevaIessJubilado,
        //            };
        //        }
        //        else
        //        {
        //            var pathBase = System.IO.Path.Combine("wwwroot", "data");
        //            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
        //            var pathIessJubilado = Path.Combine(pathFuentes, "iessJubiladoDemo.json");
        //            var archivo = System.IO.File.ReadAllText(pathIessJubilado);
        //            datos = JsonConvert.DeserializeObject<IessJubiladoViewModel>(archivo);

        //            try
        //            {
        //                var filePath = Path.GetTempFileName();
        //                ViewBag.RutaArchivo = filePath;
        //                System.IO.File.WriteAllBytes(filePath, datos.IessJubilado.ReportePdf);
        //                datos.IessJubilado.ReportePdf = null;
        //            }
        //            catch (Exception ex)
        //            {
        //                ViewBag.RutaArchivo = string.Empty;
        //                _logger.LogError($"Error al registrar certificado de Iess Jubilado {modelo.Identificacion}: {ex.Message}");
        //            }
        //        }

        //        _logger.LogInformation("Fuente de Iess Jubilado procesada correctamente");
        //        _logger.LogInformation($"Procesando registro de historiales de la fuente Iess Jubilado. Id Historial: {modelo.IdHistorial}");

        //        try
        //        {
        //            if (modelo.IdHistorial > 0)
        //            {
        //                var historialIessJubilado = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.IessJubilado);
        //                if (historialIessJubilado != null)
        //                {
        //                    if (!historialIessJubilado.Generado || !busquedaNuevaIessJubilado)
        //                    {
        //                        historialIessJubilado.IdHistorial = modelo.IdHistorial;
        //                        historialIessJubilado.TipoFuente = Dominio.Tipos.Fuentes.IessJubilado;
        //                        historialIessJubilado.Generado = r_jubilado != null;
        //                        historialIessJubilado.Data = r_jubilado != null ? JsonConvert.SerializeObject(r_jubilado) : null;
        //                        historialIessJubilado.Cache = cacheIessJubilado;
        //                        historialIessJubilado.FechaRegistro = DateTime.Now;
        //                        historialIessJubilado.Reintento = true;
        //                        historialIessJubilado.DataError = resultadoJubilado != null ? resultadoJubilado.Error : null;
        //                        historialIessJubilado.FuenteActiva = resultadoJubilado != null ? resultadoJubilado.FuenteActiva : null;
        //                        await _detallesHistorial.ActualizarDetalleHistorialAsync(historialIessJubilado);
        //                        _logger.LogInformation("Historial de la Fuente Iess Jubilado actualizado correctamente");
        //                    }
        //                }
        //                else
        //                {
        //                    await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
        //                    {
        //                        IdHistorial = modelo.IdHistorial,
        //                        TipoFuente = Dominio.Tipos.Fuentes.IessJubilado,
        //                        Generado = datos.IessJubilado != null,
        //                        Data = datos.IessJubilado != null ? JsonConvert.SerializeObject(datos.IessJubilado) : null,
        //                        Cache = cacheIessJubilado,
        //                        FechaRegistro = DateTime.Now,
        //                        Reintento = false,
        //                        DataError = resultadoJubilado != null ? resultadoJubilado.Error : null,
        //                        FuenteActiva = resultadoJubilado != null ? resultadoJubilado.FuenteActiva : null
        //                    });
        //                    _logger.LogInformation("Historial de la Fuente Iess Jubilado procesado correctamente");
        //                }
        //            }
        //            else
        //                throw new Exception("El Id del Historial no se ha generado correctamente");
        //        }
        //        catch (Exception ex)
        //        {
        //            _logger.LogError(ex, ex.Message);
        //        }
        //        return PartialView("../Shared/Fuentes/_FuenteIessJubilado", datos);
        //    }
        //    catch (Exception e)
        //    {
        //        _logger.LogError(e, e.Message);
        //        return PartialView("../Shared/Fuentes/_FuenteIessJubilado", null);
        //    }
        //}

        [HttpPost]
        [Route("ObtenerReporteSenescyt")]
        public async Task<IActionResult> ObtenerReporteSenescyt(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();

                Externos.Logica.Senescyt.Modelos.Persona r_senescyt = null;
                var datos = new SenescytViewModel();
                Historial historialTemp = null;
                var busquedaNuevaSenescyt = false;
                var cacheSenescyt = false;
                var cedulaEntidades = false;
                var validarFuente = false;
                var hostSenescyt = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Senescyt identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, i => i.Include(m => m.Usuario).ThenInclude(m => m.Empresa), true);
                        hostSenescyt = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;

                        //var datosCacheFecha = historialTemp != null ? (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == historialTemp.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt && m.Generado && !m.Cache && !string.IsNullOrEmpty(m.Data) && m.Historial.Fecha.Date == DateTime.Now.Date, o => o.OrderByDescending(m => m.Id), null, null, null, true)).FirstOrDefault() : null;
                        //if (datosCacheFecha != null)
                        //{
                        //    busquedaNuevaSenescyt = true;
                        //    cacheSenescyt = true;
                        //    r_senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(datosCacheFecha);
                        //    _logger.LogInformation($"Datos obtenidos de una consulta realizada previamente el mismo día en la Fuente Senescyt identificación: {modelo.Identificacion}");
                        //}
                        //else
                        //{
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    //r_senescyt = await _senescyt.GetRespuestaAsync(modelo.Identificacion);
                                    var resultado = await _consulta.ObtenerSenescytConsultaExterna(modelo.Identificacion, hostSenescyt);
                                    if (resultado != null)
                                    {
                                        r_senescyt = resultado.Data;
                                        validarFuente = resultado.Data != null ? true : !resultado.TieneTitulos;
                                    }
                                }
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                    {
                                        if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        {
                                            //r_senescyt = await _senescyt.GetRespuestaAsync(r_sri.RepresentanteLegal.Trim());
                                            var resultado = await _consulta.ObtenerSenescytConsultaExterna(historialTemp.IdentificacionSecundaria.Trim(), hostSenescyt);
                                            if (resultado != null)
                                            {
                                                r_senescyt = resultado.Data;
                                                validarFuente = resultado.Data != null ? true : !resultado.TieneTitulos;
                                            }
                                        }
                                    }
                                }
                                else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    {
                                        //r_senescyt = await _senescyt.GetRespuestaAsync(cedulaTemp);
                                        var resultado = await _consulta.ObtenerSenescytConsultaExterna(cedulaTemp, hostSenescyt);
                                        if (resultado != null)
                                        {
                                            r_senescyt = resultado.Data;
                                            validarFuente = resultado.Data != null ? true : !resultado.TieneTitulos;
                                        }
                                    }
                                }
                            }
                        }
                        //}
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Senescyt con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_senescyt == null)
                    {
                        busquedaNuevaSenescyt = true;
                        //var datosDetalleASenescyt = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosDetalleASenescyt != null)
                        //{
                        //    cacheSenescyt = true;
                        //    r_senescyt = JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(datosDetalleASenescyt);
                        //}
                    }

                    datos = new SenescytViewModel()
                    {
                        Senescyt = r_senescyt,
                        BusquedaNueva = busquedaNuevaSenescyt,
                        FuenteActiva = validarFuente
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSenecyt = Path.Combine(pathFuentes, "senescytDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathSenecyt);
                    datos = JsonConvert.DeserializeObject<SenescytViewModel>(archivo);
                }

                _logger.LogInformation("Fuente de Senescyt procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Senescyt. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialSenescyt = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt);
                        if (historialSenescyt != null)
                        {
                            if (!historialSenescyt.Generado || !busquedaNuevaSenescyt)
                            {
                                historialSenescyt.IdHistorial = modelo.IdHistorial;
                                historialSenescyt.TipoFuente = Dominio.Tipos.Fuentes.Senescyt;
                                historialSenescyt.Generado = r_senescyt != null;
                                historialSenescyt.Data = r_senescyt != null ? JsonConvert.SerializeObject(r_senescyt) : null;
                                historialSenescyt.Cache = cacheSenescyt;
                                historialSenescyt.FechaRegistro = DateTime.Now;
                                historialSenescyt.Reintento = true;
                                historialSenescyt.FuenteActiva = validarFuente;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSenescyt);
                                _logger.LogInformation("Historial de la Fuente Senescyt actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Senescyt,
                                Generado = datos.Senescyt != null,
                                Data = datos.Senescyt != null ? JsonConvert.SerializeObject(datos.Senescyt) : null,
                                Cache = cacheSenescyt,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                FuenteActiva = validarFuente
                            });
                            _logger.LogInformation("Historial de la Fuente Senescyt procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteSenescyt", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteSenescyt", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteLegal")]
        public async Task<IActionResult> ObtenerReporteLegal(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.FJudicial.Modelos.Persona r_fjudicial = null;
                Externos.Logica.FJudicial.Modelos.Persona r_fjudicialNombres = null;
                Externos.Logica.FJudicial.Modelos.Persona r_fjudicialempresaRuc = null;
                Externos.Logica.FJudicial.Modelos.Persona r_fjudicialempresa = null;
                var datos = new JudicialViewModel();
                Historial historialTemp = null;
                var busquedaNuevaLegal = false;
                var busquedaNuevaLegalEmpresa = false;
                var cacheLegal = false;
                var cacheLegalEmpresa = false;
                var cedulaEntidades = false;
                var validarFuente = true;
                var empresasConsultaPersonalizada = new List<int>();
                ViewBag.FuenteImpedimento = false;
                ViewBag.FuenteFuncionJudicial = true;
                try
                {
                    var pathEmpresasConsultaJudicial = Path.Combine("wwwroot", "data", "empresasConsultaJudicial.json");
                    var archivoJudicial = System.IO.File.ReadAllText(pathEmpresasConsultaJudicial);
                    var empresasConsultaJudicial = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoJudicial);
                    if (empresasConsultaJudicial != null && empresasConsultaJudicial.Any())
                        empresasConsultaPersonalizada = empresasConsultaJudicial.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Legal identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, n => n.Include(n => n.PlanEmpresa), true);
                        var pathTipoFuente = Path.Combine("wwwroot", "data", "fuentesInternas.json");
                        var tipoFuente = JsonConvert.DeserializeObject<ParametroFuentesInternasViewModel>(System.IO.File.ReadAllText(pathTipoFuente))?.FuentesInternas.FJ;

                        if (tipoFuente == 5)
                        {
                            datos = new JudicialViewModel()
                            {
                                HistorialCabecera = historialTemp,
                                BusquedaNueva = busquedaNuevaLegal,
                                BusquedaNuevaEmpresa = busquedaNuevaLegalEmpresa,
                                FuenteActiva = false,
                            };
                            return PartialView("../Shared/Fuentes/_FuenteFJudicialConsulta", datos);
                        }
                        if (!empresasConsultaPersonalizada.Contains(usuarioActual.IdEmpresa))
                        {
                            if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
                                        r_fjudicial = await ObtenerDataFJudicial(modelo.Identificacion, tipoFuente);

                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.NombresPersona))
                                            r_fjudicialNombres = await ObtenerDataFJudicial(historialTemp.NombresPersona, tipoFuente);

                                        if (r_fjudicial != null && r_fjudicialNombres != null)
                                        {
                                            r_fjudicial.Actor = ReporteViewModel.NormalizarProcesosLegal(r_fjudicial.Actor, r_fjudicialNombres.Actor);
                                            r_fjudicial.Demandado = ReporteViewModel.NormalizarProcesosLegal(r_fjudicial.Demandado, r_fjudicialNombres.Demandado);
                                        }
                                        else if (r_fjudicialNombres != null && r_fjudicial == null)
                                            r_fjudicial = r_fjudicialNombres;

                                        if (r_fjudicial == null)
                                        {
                                            if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                            {
                                                //validarFuente = _fjudicial.ValidarFuente();
                                                busquedaNuevaLegal = true;
                                                var datosDetalleFJudicial = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                if (datosDetalleFJudicial != null)
                                                {
                                                    cacheLegal = true;
                                                    r_fjudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleFJudicial);
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
                                        r_fjudicialempresaRuc = await ObtenerDataFJudicial(modelo.Identificacion, tipoFuente);
                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa))
                                            r_fjudicialempresa = await ObtenerDataFJudicial(historialTemp.RazonSocialEmpresa, tipoFuente);

                                        if (r_fjudicialempresa != null && r_fjudicialempresaRuc != null)
                                        {
                                            r_fjudicialempresa.Actor = ReporteViewModel.NormalizarProcesosLegal(r_fjudicialempresa.Actor, r_fjudicialempresaRuc.Actor);
                                            r_fjudicialempresa.Demandado = ReporteViewModel.NormalizarProcesosLegal(r_fjudicialempresa.Demandado, r_fjudicialempresaRuc.Demandado);
                                        }
                                        else if (r_fjudicialempresaRuc != null && r_fjudicialempresa == null)
                                            r_fjudicialempresa = r_fjudicialempresaRuc;

                                        if (r_fjudicialempresa == null)
                                        {
                                            //validarFuente = _fjudicial.ValidarFuente();
                                            var datosDetalleJFJEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                            busquedaNuevaLegalEmpresa = true;
                                            if (datosDetalleJFJEmpresa != null)
                                            {
                                                cacheLegalEmpresa = true;
                                                r_fjudicialempresa = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleJFJEmpresa);
                                            }
                                        }
                                    }
                                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                    {
                                        if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        {
                                            r_fjudicial = await ObtenerDataFJudicial(historialTemp.IdentificacionSecundaria, tipoFuente);
                                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.NombresPersona))
                                                r_fjudicialNombres = await ObtenerDataFJudicial(historialTemp.NombresPersona, tipoFuente);

                                            if (r_fjudicial != null && r_fjudicialNombres != null)
                                            {
                                                r_fjudicial.Actor = ReporteViewModel.NormalizarProcesosLegal(r_fjudicial.Actor, r_fjudicialNombres.Actor);
                                                r_fjudicial.Demandado = ReporteViewModel.NormalizarProcesosLegal(r_fjudicial.Demandado, r_fjudicialNombres.Demandado);
                                            }
                                            else if (r_fjudicialNombres != null && r_fjudicial == null)
                                                r_fjudicial = r_fjudicialNombres;

                                            if (r_fjudicial == null)
                                            {
                                                if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                                {
                                                    //validarFuente = _fjudicial.ValidarFuente();
                                                    busquedaNuevaLegal = true;
                                                    var datosDetalleFJudicial = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                    if (datosDetalleFJudicial != null)
                                                    {
                                                        cacheLegal = true;
                                                        r_fjudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleFJudicial);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                    {
                                        var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                        if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        {
                                            r_fjudicial = await ObtenerDataFJudicial(cedulaTemp, tipoFuente);
                                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.NombresPersona))
                                                r_fjudicialNombres = await ObtenerDataFJudicial(historialTemp.NombresPersona, tipoFuente);

                                            if (r_fjudicial != null && r_fjudicialNombres != null)
                                            {
                                                r_fjudicial.Actor = ReporteViewModel.NormalizarProcesosLegal(r_fjudicial.Actor, r_fjudicialNombres.Actor);
                                                r_fjudicial.Demandado = ReporteViewModel.NormalizarProcesosLegal(r_fjudicial.Demandado, r_fjudicialNombres.Demandado);
                                            }
                                            else if (r_fjudicialNombres != null && r_fjudicial == null)
                                                r_fjudicial = r_fjudicialNombres;

                                            if (r_fjudicial == null)
                                            {
                                                if (historialTemp.PlanEmpresa.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                                                {
                                                    //validarFuente = _fjudicial.ValidarFuente();
                                                    busquedaNuevaLegal = true;
                                                    var datosDetalleFJudicial = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                    if (datosDetalleFJudicial != null)
                                                    {
                                                        cacheLegal = true;
                                                        r_fjudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleFJudicial);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
                                        r_fjudicial = await ObtenerDataFJudicial(modelo.Identificacion, tipoFuente);
                                        if (r_fjudicial == null)
                                        {
                                            //validarFuente = _fjudicial.ValidarFuente();
                                            busquedaNuevaLegal = true;
                                            if (!validarFuente)
                                            {
                                                var datosDetalleFJudicial = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                if (datosDetalleFJudicial != null)
                                                {
                                                    cacheLegal = true;
                                                    r_fjudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleFJudicial);
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
                                        r_fjudicialempresa = await ObtenerDataFJudicial(modelo.Identificacion, tipoFuente);
                                        if (r_fjudicialempresa == null)
                                        {
                                            //validarFuente = _fjudicial.ValidarFuente();
                                            if (!validarFuente)
                                            {
                                                var datosDetalleJFJEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                busquedaNuevaLegalEmpresa = true;
                                                if (datosDetalleJFJEmpresa != null)
                                                {
                                                    cacheLegalEmpresa = true;
                                                    r_fjudicialempresa = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleJFJEmpresa);
                                                }
                                            }
                                        }
                                    }
                                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                    {
                                        if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        {
                                            r_fjudicial = await ObtenerDataFJudicial(historialTemp.IdentificacionSecundaria, tipoFuente);
                                            if (r_fjudicial == null)
                                            {
                                                //validarFuente = _fjudicial.ValidarFuente();
                                                if (!validarFuente)
                                                {
                                                    busquedaNuevaLegal = true;
                                                    var datosDetalleFJudicial = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                    if (datosDetalleFJudicial != null)
                                                    {
                                                        cacheLegal = true;
                                                        r_fjudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleFJudicial);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                                    {
                                        var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                        if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        {
                                            r_fjudicial = await ObtenerDataFJudicial(cedulaTemp, tipoFuente);
                                            if (r_fjudicial == null)
                                            {
                                                //validarFuente = _fjudicial.ValidarFuente();
                                                if (!validarFuente)
                                                {
                                                    busquedaNuevaLegal = true;
                                                    var datosDetalleFJudicial = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                    if (datosDetalleFJudicial != null)
                                                    {
                                                        cacheLegal = true;
                                                        r_fjudicial = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosDetalleFJudicial);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente legal con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    try
                    {
                        //Datos demostracion procesos Felipe Caceres
                        if (r_fjudicial != null && historialTemp != null && !string.IsNullOrEmpty(historialTemp.NombresPersona?.Trim()) && (historialTemp.NombresPersona.ToUpper() == Dominio.Constantes.General.NombrePersonaDemo || historialTemp.Identificacion.Contains(Dominio.Constantes.General.CedulaPersonaDemo)))
                        {
                            //var proceso1 = r_fjudicial.Demandado.FirstOrDefault(kvp => kvp.Value.Codigo.Trim() == "17230-2021-06732" || kvp.Value.Codigo.Trim() == "17230202106732");
                            //r_fjudicial.Demandado.Remove(proceso1.Key);

                            //var proceso2 = r_fjudicial.Demandado.FirstOrDefault(kvp => kvp.Value.Codigo.Trim() == "17455-2008-0545*" || kvp.Value.Codigo.Trim() == "1745520080545*");
                            //r_fjudicial.Demandado.Remove(proceso2.Key);

                            r_fjudicial.Demandado.Clear();

                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                    }

                    datos = new JudicialViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        FJudicial = r_fjudicial,
                        FJEmpresa = r_fjudicialempresa,
                        BusquedaNueva = busquedaNuevaLegal,
                        BusquedaNuevaEmpresa = busquedaNuevaLegalEmpresa,
                        FuenteActiva = validarFuente,
                        ConsultaPersonalizada = empresasConsultaPersonalizada.Contains(usuarioActual.IdEmpresa)
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathLegal = Path.Combine(pathFuentes, "legalDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathLegal);
                    datos = JsonConvert.DeserializeObject<JudicialViewModel>(archivo);
                }
                _logger.LogInformation("Fuente de Legal procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Legal. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesJudicial = new[] { Dominio.Tipos.Fuentes.FJudicial, Dominio.Tipos.Fuentes.FJEmpresa };
                        var historialesJudicial = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesJudicial.Contains(m.TipoFuente));
                        var historialJudicial = historialesJudicial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial);
                        var historialEmpresa = historialesJudicial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FJEmpresa);

                        if (historialJudicial != null && (!historialJudicial.Generado || !busquedaNuevaLegal))
                        {
                            historialJudicial.IdHistorial = modelo.IdHistorial;
                            historialJudicial.TipoFuente = Dominio.Tipos.Fuentes.FJudicial;
                            historialJudicial.Generado = datos.FJudicial != null;
                            historialJudicial.Data = datos.FJudicial != null ? JsonConvert.SerializeObject(datos.FJudicial) : null;
                            historialJudicial.Cache = cacheLegal;
                            historialJudicial.FuenteActiva = validarFuente;
                            historialJudicial.FechaRegistro = DateTime.Now;
                            historialJudicial.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialJudicial);
                            _logger.LogInformation("Historial de la Fuente Judicial Persona actualizado correctamente");
                        }
                        else if (historialJudicial == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.FJudicial,
                                Generado = datos.FJudicial != null,
                                Data = datos.FJudicial != null ? JsonConvert.SerializeObject(datos.FJudicial) : null,
                                Cache = cacheLegal,
                                FuenteActiva = validarFuente,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (historialEmpresa != null && (!historialEmpresa.Generado || !busquedaNuevaLegal))
                        {
                            historialEmpresa.IdHistorial = modelo.IdHistorial;
                            historialEmpresa.TipoFuente = Dominio.Tipos.Fuentes.FJEmpresa;
                            historialEmpresa.Generado = datos.FJEmpresa != null;
                            historialEmpresa.Data = datos.FJEmpresa != null ? JsonConvert.SerializeObject(datos.FJEmpresa) : null;
                            historialEmpresa.Cache = cacheLegalEmpresa;
                            historialEmpresa.FuenteActiva = validarFuente;
                            historialEmpresa.FechaRegistro = DateTime.Now;
                            historialEmpresa.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialEmpresa);
                            _logger.LogInformation("Historial de la Fuente Judicial Empresa actualizado correctamente");
                        }
                        else if (historialEmpresa == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.FJEmpresa,
                                Generado = datos.FJEmpresa != null,
                                Data = datos.FJEmpresa != null ? JsonConvert.SerializeObject(datos.FJEmpresa) : null,
                                Cache = cacheLegalEmpresa,
                                FuenteActiva = validarFuente,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente Legal procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteFJudicialConsulta", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteFJudicialConsulta", null);
            }
        }

        private async Task<Externos.Logica.FJudicial.Modelos.Persona> ObtenerDataFJudicial(string identificacion, int? tipoFuente)
        {
            Externos.Logica.FJudicial.Modelos.Persona r_data = null;
            switch (tipoFuente)
            {
                case 1:
                    r_data = await _consulta.GetRespuestaFJAsync(identificacion);
                    break;
                default:
                    r_data = _fjudicial.GetRespuesta(identificacion);
                    break;
            }
            return r_data;
        }

        [HttpPost]
        [Route("ObtenerReporteImpedimento")]
        public async Task<IActionResult> ObtenerReporteImpedimento(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.FJudicial.Modelos.Impedimento impedimento = null;
                Historial historialTemp = null;
                var cacheImpedimento = false;
                var busquedaImpedimento = false;
                var rutaArchivo = string.Empty;
                var hostImpedimentos = string.Empty;
                ViewBag.FuenteImpedimento = true;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Legal Impedimento identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        hostImpedimentos = !string.IsNullOrWhiteSpace(usuarioActual.Empresa.DireccionIp) ? usuarioActual.Empresa.DireccionIp : null;
                        string fechaNacimiento = null;
                        var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                        var detallesHistorial = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);
                        if (detallesHistorial.Any())
                        {
                            var registroCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                            if (registroCivil != null)
                            {
                                var dataRc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(registroCivil.Data);
                                if (dataRc != null)
                                    fechaNacimiento = dataRc.FechaNacimiento.ToString("dd/MM/yyyy");
                            }
                            else
                            {
                                var personaGc = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);
                                if (personaGc != null)
                                {
                                    var dataGc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(personaGc.Data);
                                    if (dataGc != null)
                                        fechaNacimiento = dataGc.FechaNacimiento.Value.ToString("dd/MM/yyyy");
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(historialTemp.Identificacion) && ValidacionViewModel.ValidarCedula(historialTemp.Identificacion) && !string.IsNullOrEmpty(fechaNacimiento))
                            impedimento = await _fjudicial.GetImpedimentos(historialTemp.Identificacion, fechaNacimiento, hostImpedimentos);
                        else if (!string.IsNullOrEmpty(historialTemp.Identificacion) && ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion) && !string.IsNullOrEmpty(fechaNacimiento))
                            impedimento = await _fjudicial.GetImpedimentos(historialTemp.Identificacion.Substring(0, 10), fechaNacimiento, hostImpedimentos);
                        else if (!string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)) && !string.IsNullOrEmpty(fechaNacimiento))
                            impedimento = await _fjudicial.GetImpedimentos(historialTemp.IdentificacionSecundaria, fechaNacimiento, hostImpedimentos);

                        if (impedimento != null && impedimento.Reporte.Length > 0)
                        {
                            try
                            {
                                var filePath = Path.GetTempFileName();
                                rutaArchivo = filePath;
                                System.IO.File.WriteAllBytes(filePath, impedimento.Reporte);
                            }
                            catch (Exception ex)
                            {
                                rutaArchivo = string.Empty;
                                _logger.LogError($"Error al registrar certificado de Impedimento {modelo.Identificacion}: {ex.Message}");
                            }
                            impedimento.Reporte = null;
                        }

                        if (impedimento == null)
                        {
                            busquedaImpedimento = true;
                            var datosDetalleImpedimento = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Impedimento && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleImpedimento != null)
                            {
                                cacheImpedimento = true;
                                impedimento = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Impedimento>(datosDetalleImpedimento);
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Legal Impedimento con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathImpedimento = Path.Combine(pathFuentes, "impedimentoDemo.json");
                    impedimento = JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Impedimento>(System.IO.File.ReadAllText(pathImpedimento));

                    if (impedimento != null && impedimento.Reporte != null && impedimento.Reporte.Length > 0)
                    {
                        try
                        {
                            var filePath = Path.GetTempFileName();
                            ViewBag.RutaArchivoImpedimento = filePath;
                            System.IO.File.WriteAllBytes(filePath, impedimento.Reporte);
                        }
                        catch (Exception ex)
                        {
                            ViewBag.RutaArchivoImpedimento = string.Empty;
                            _logger.LogError($"Error al registrar certificado de Impedimento {modelo.Identificacion}: {ex.Message}");
                        }
                        impedimento.Reporte = null;
                    }
                }
                _logger.LogInformation("Fuente de Legal Impedimento procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Legal Impedimento. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialImpedimento = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.Impedimento);
                        if (historialImpedimento != null && (!historialImpedimento.Generado || !busquedaImpedimento))
                        {
                            historialImpedimento.IdHistorial = modelo.IdHistorial;
                            historialImpedimento.TipoFuente = Dominio.Tipos.Fuentes.Impedimento;
                            historialImpedimento.Generado = impedimento != null;
                            historialImpedimento.Data = impedimento != null ? JsonConvert.SerializeObject(impedimento) : null;
                            historialImpedimento.Cache = cacheImpedimento;
                            historialImpedimento.FechaRegistro = DateTime.Now;
                            historialImpedimento.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialImpedimento);
                            _logger.LogInformation("Historial de la Fuente Legal Impedimento se actualizado correctamente");
                        }
                        else if (historialImpedimento == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Impedimento,
                                Generado = impedimento != null,
                                Data = impedimento != null ? JsonConvert.SerializeObject(impedimento) : null,
                                Cache = cacheImpedimento,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteImpedimento", new JudicialViewModel() { Impedimento = impedimento, BusquedaNuevaImpedimento = busquedaImpedimento, RutaArchivo = rutaArchivo });
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteImpedimento", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteANT")]
        public async Task<IActionResult> ObtenerReporteANT(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.ANT.Modelos.Licencia r_ant = null;
                //List<Externos.Logica.ANT.Modelos.AutoHistorico> autosHistorico = null;
                var datos = new ANTViewModel();
                Historial historialTemp = null;
                var busquedaNuevaAnt = false;
                var cacheAnt = false;
                //var cacheHistoricoAutos = false;
                ResultadoLicencia resultadoLicencia = null;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente ANT identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            {
                                resultadoLicencia = await _ant.GetRespuestaAsyncV2(modelo.Identificacion);
                                r_ant = resultadoLicencia?.Licencia;
                                //autosHistorico = await _ant.ObtenerVehiculoHistorico(modelo.Identificacion);
                            }

                            if (r_ant == null && historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                            {
                                resultadoLicencia = await _ant.GetRespuestaAsyncV2(historialTemp.IdentificacionSecundaria);
                                r_ant = resultadoLicencia?.Licencia;
                                //autosHistorico = await _ant.ObtenerVehiculoHistorico(historialTemp.IdentificacionSecundaria);
                            }

                            if (r_ant != null && (string.IsNullOrEmpty(r_ant.Cedula) || string.IsNullOrEmpty(r_ant.Titular)))
                                r_ant = null;
                        }
                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            resultadoLicencia = await _ant.GetRespuestaAsyncV2(modelo.Identificacion);
                            r_ant = resultadoLicencia?.Licencia;
                            //autosHistorico = await _ant.ObtenerVehiculoHistorico(modelo.Identificacion);
                        }

                        //if (autosHistorico == null || (autosHistorico != null && !autosHistorico.Any()))
                        //    autosHistorico = null;

                        if (r_ant == null)
                        {
                            busquedaNuevaAnt = true;
                            var datosDetalleAnt = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Ant && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleAnt != null)
                            {
                                cacheAnt = true;
                                r_ant = JsonConvert.DeserializeObject<Externos.Logica.ANT.Modelos.Licencia>(datosDetalleAnt);
                            }
                        }

                        if (r_ant != null && historialTemp != null)
                        {
                            if ((r_ant.Cedula?.Trim() == historialTemp.Identificacion?.Trim() || r_ant.Cedula?.Trim() == historialTemp.IdentificacionSecundaria?.Trim()) && !string.IsNullOrEmpty(historialTemp.NombresPersona) && !string.IsNullOrEmpty(r_ant.Titular) && historialTemp.NombresPersona != r_ant.Titular)
                                r_ant.Titular = historialTemp.NombresPersona;
                        }

                        //if (autosHistorico == null)
                        //{
                        //    var datosDetalleAutoHistorico = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.AutoHistorico && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //    if (datosDetalleAutoHistorico != null)
                        //    {
                        //        cacheHistoricoAutos = true;
                        //        autosHistorico = JsonConvert.DeserializeObject<List<Externos.Logica.ANT.Modelos.AutoHistorico>>(datosDetalleAutoHistorico);
                        //    }
                        //}

                        datos = new ANTViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Licencia = r_ant,
                            BusquedaNueva = busquedaNuevaAnt,
                            //AutosHistorico = autosHistorico
                        };
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente ANT con identificación {modelo.Identificacion}: {ex.Message}");
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathAnt = Path.Combine(pathFuentes, "antDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathAnt);
                    var licencia = JsonConvert.DeserializeObject<ANTViewModel>(archivo);
                    datos = new ANTViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        Licencia = licencia.Licencia,
                        BusquedaNueva = busquedaNuevaAnt,
                        //AutosHistorico = licencia.AutosHistorico
                    };
                }

                _logger.LogInformation("Fuente de ANT procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente ANT. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesAnt = new[] { Dominio.Tipos.Fuentes.Ant, Dominio.Tipos.Fuentes.AutoHistorico };
                        var historialesAnt = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesAnt.Contains(m.TipoFuente));
                        var historialAnt = historialesAnt.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ant);
                        //var historialAutosHistorico = historialesAnt.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.AutoHistorico);
                        if (historialAnt != null && (!historialAnt.Generado || !busquedaNuevaAnt))
                        {
                            historialAnt.IdHistorial = modelo.IdHistorial;
                            historialAnt.TipoFuente = Dominio.Tipos.Fuentes.Ant;
                            historialAnt.Generado = datos.Licencia != null;
                            historialAnt.Data = datos.Licencia != null ? JsonConvert.SerializeObject(datos.Licencia) : null;
                            historialAnt.Cache = cacheAnt;
                            historialAnt.FechaRegistro = DateTime.Now;
                            historialAnt.Reintento = true;
                            historialAnt.DataError = resultadoLicencia != null ? resultadoLicencia.Error : null;
                            historialAnt.FuenteActiva = resultadoLicencia != null ? resultadoLicencia.FuenteActiva : null;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAnt);
                            _logger.LogInformation("Historial de la Fuente ANT actualizado correctamente");
                        }
                        else if (historialAnt == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Ant,
                                Generado = datos.Licencia != null,
                                Data = datos.Licencia != null ? JsonConvert.SerializeObject(datos.Licencia) : null,
                                Cache = cacheAnt,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoLicencia != null ? resultadoLicencia.Error : null,
                                FuenteActiva = resultadoLicencia != null ? resultadoLicencia.FuenteActiva : null
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente ANT procesado correctamente");

                        //if (historialAutosHistorico != null && (!historialAutosHistorico.Generado || !busquedaNuevaAnt))
                        //{
                        //    historialAutosHistorico.IdHistorial = modelo.IdHistorial;
                        //    historialAutosHistorico.TipoFuente = Dominio.Tipos.Fuentes.AutoHistorico;
                        //    historialAutosHistorico.Generado = datos.AutosHistorico != null;
                        //    historialAutosHistorico.Data = datos.AutosHistorico != null ? JsonConvert.SerializeObject(datos.AutosHistorico) : null;
                        //    historialAutosHistorico.Cache = cacheHistoricoAutos;
                        //    historialAutosHistorico.FechaRegistro = DateTime.Now;
                        //    historialAutosHistorico.Reintento = true;
                        //    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAutosHistorico);
                        //    _logger.LogInformation("Historial de la Fuente Autos Histórico actualizado correctamente");
                        //}
                        //else if (historialAutosHistorico == null)
                        //{
                        //    await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        //    {
                        //        IdHistorial = modelo.IdHistorial,
                        //        TipoFuente = Dominio.Tipos.Fuentes.AutoHistorico,
                        //        Generado = datos.AutosHistorico != null,
                        //        Data = datos.AutosHistorico != null ? JsonConvert.SerializeObject(datos.AutosHistorico) : null,
                        //        Cache = cacheHistoricoAutos,
                        //        FechaRegistro = DateTime.Now,
                        //        Reintento = false
                        //    });
                        //}
                        //_logger.LogInformation("Historial de la Fuente  Autos Histórico procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteANT", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteANT", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteSERCOP")]
        public async Task<IActionResult> ObtenerReporteSERCOP(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.SERCOP.Modelos.ProveedorIncumplido r_sercop = null;
                List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria> r_sercopcontraloria = null;
                var datos = new SERCOPViewModel();
                Historial historialTemp = null;
                var busquedaNuevaSercop = false;
                var cacheSercop = false;
                var cedulaEntidades = false;

                historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                var pathTipoFuente = Path.Combine("wwwroot", "data", "fuentesInternas.json");
                var tipoFuente = JsonConvert.DeserializeObject<ParametroFuentesInternasViewModel>(System.IO.File.ReadAllText(pathTipoFuente))?.FuentesInternas.Sercop;

                if (!_cache)
                {
                    try
                    {
                        if (tipoFuente != 5)
                        {
                            _logger.LogInformation($"Procesando Fuente SERCOP identificación: {modelo.Identificacion}");
                            if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            {
                                cedulaEntidades = true;
                                modelo.Identificacion = $"{modelo.Identificacion}001";
                            }

                            if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                if (cedulaEntidades)
                                {
                                    modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
                                        r_sercop = await _sercop.GetRespuestaAsync(modelo.Identificacion);
                                    }
                                    if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa))
                                    {
                                        r_sercopcontraloria = _sercop.GetProveedorContraloria(historialTemp.RazonSocialEmpresa);
                                        if (r_sercopcontraloria == null && !r_sercopcontraloria.Any())
                                        {
                                            var datosDetalleContraloria = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.ProveedorContraloria && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                            if (datosDetalleContraloria != null && !datosDetalleContraloria.Any())
                                            {
                                                cacheSercop = true;
                                                r_sercopcontraloria = JsonConvert.DeserializeObject<List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria>>(datosDetalleContraloria);
                                                busquedaNuevaSercop = true;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) || ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
                                        r_sercop = await _sercop.GetRespuestaAsync(modelo.Identificacion);

                                        if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa))
                                        {
                                            r_sercopcontraloria = _sercop.GetProveedorContraloria(historialTemp.RazonSocialEmpresa);
                                            if (r_sercopcontraloria == null && !r_sercopcontraloria.Any())
                                            {
                                                var datosDetalleContraloria = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.ProveedorContraloria && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                                if (datosDetalleContraloria != null && !datosDetalleContraloria.Any())
                                                {
                                                    cacheSercop = true;
                                                    r_sercopcontraloria = JsonConvert.DeserializeObject<List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria>>(datosDetalleContraloria);
                                                    busquedaNuevaSercop = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente SERCOP con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_sercop == null)
                    {
                        busquedaNuevaSercop = true;
                        //var datosDetalleProveedor = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.Proveedor && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosDetalleProveedor != null)
                        //{
                        //    cacheSercop = true;
                        //    r_sercop = JsonConvert.DeserializeObject<Externos.Logica.SERCOP.Modelos.ProveedorIncumplido>(datosDetalleProveedor);
                        //}
                    }

                    datos = new SERCOPViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        Proveedor = r_sercop,
                        ProveedorContraloria = r_sercopcontraloria,
                        BusquedaNueva = busquedaNuevaSercop
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSercop = Path.Combine(pathFuentes, "sercopDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathSercop);
                    datos = JsonConvert.DeserializeObject<SERCOPViewModel>(archivo);
                }

                _logger.LogInformation("Fuente de SERCOP procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente SERCOP. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesSercop = new[] { Dominio.Tipos.Fuentes.Proveedor, Dominio.Tipos.Fuentes.ProveedorContraloria };
                        var historialesSercop = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesSercop.Contains(m.TipoFuente));
                        var historialProveedor = historialesSercop.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Proveedor);
                        var historialContraloria = historialesSercop.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ProveedorContraloria);

                        if (historialProveedor != null && (!historialProveedor.Generado || !busquedaNuevaSercop))
                        {
                            historialProveedor.IdHistorial = modelo.IdHistorial;
                            historialProveedor.TipoFuente = Dominio.Tipos.Fuentes.Proveedor;
                            historialProveedor.Generado = datos.Proveedor != null;
                            historialProveedor.Data = datos.Proveedor != null ? JsonConvert.SerializeObject(datos.Proveedor) : null;
                            historialProveedor.Cache = cacheSercop;
                            historialProveedor.FechaRegistro = DateTime.Now;
                            historialProveedor.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialProveedor);
                            _logger.LogInformation("Historial de la Fuente Sercop actualizado correctamente");
                        }
                        else if (historialProveedor == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.Proveedor,
                                Generado = datos.Proveedor != null && (datos.Proveedor.ProveedoresIncop.Count() != 0 || datos.Proveedor.ProveedoresContraloria.Count() != 0),
                                Data = datos.Proveedor != null && (datos.Proveedor.ProveedoresIncop.Count() != 0 || datos.Proveedor.ProveedoresContraloria.Count() != 0) ? JsonConvert.SerializeObject(datos.Proveedor) : null,
                                Cache = cacheSercop,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }

                        if (historialContraloria != null && (!historialContraloria.Generado || !busquedaNuevaSercop))
                        {
                            historialContraloria.IdHistorial = modelo.IdHistorial;
                            historialContraloria.TipoFuente = Dominio.Tipos.Fuentes.ProveedorContraloria;
                            historialContraloria.Generado = datos.ProveedorContraloria != null;
                            historialContraloria.Data = datos.ProveedorContraloria != null ? JsonConvert.SerializeObject(datos.ProveedorContraloria) : null;
                            historialContraloria.Cache = cacheSercop;
                            historialContraloria.FechaRegistro = DateTime.Now;
                            historialContraloria.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialContraloria);
                            _logger.LogInformation("Historial de la Fuente Sercop Contraloria actualizado correctamente");
                        }
                        else if (historialContraloria == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.ProveedorContraloria,
                                Generado = datos.ProveedorContraloria != null && datos.ProveedorContraloria.Count() != 0,
                                Data = datos.ProveedorContraloria != null && datos.ProveedorContraloria.Count() != 0 ? JsonConvert.SerializeObject(datos.ProveedorContraloria) : null,
                                Cache = cacheSercop,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente SERCOP procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteSercop", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteSercop", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePensionAlimenticia")]
        public async Task<IActionResult> ObtenerReportePensionAlimenticia(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia r_pension = null;
                var datos = new PensionAlimenticiaViewModel();
                var busquedaNuevaPension = false;
                var cachePension = false;
                ResultadoResponsePensionAlmenticia resultadoPAlimenticia = null;
                var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                var pathTipoFuente = Path.Combine("wwwroot", "data", "fuentesInternas.json");
                var tipoFuente = JsonConvert.DeserializeObject<ParametroFuentesInternasViewModel>(System.IO.File.ReadAllText(pathTipoFuente))?.FuentesInternas.Alimentos;

                if (!_cache)
                {
                    try
                    {
                        if (tipoFuente != 5)
                        {
                            _logger.LogInformation($"Procesando Fuente Pension alimenticia identificación: {modelo.Identificacion}");
                            if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    resultadoPAlimenticia = await _pension.GetRespuestaAsyncV2(modelo.Identificacion);
                                    r_pension = resultadoPAlimenticia?.PensionAlimenticia;
                                }

                                if (r_pension == null && historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                                {
                                    resultadoPAlimenticia = await _pension.GetRespuestaAsyncV2(historialTemp.IdentificacionSecundaria);
                                    r_pension = resultadoPAlimenticia?.PensionAlimenticia;
                                }
                            }
                            else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            {
                                resultadoPAlimenticia = await _pension.GetRespuestaAsyncV2(modelo.Identificacion);
                                r_pension = resultadoPAlimenticia?.PensionAlimenticia;
                            }

                            if (r_pension != null && r_pension.Resultados == null)
                                r_pension = null;
                        }
                        if (r_pension == null)
                        {
                            busquedaNuevaPension = true;
                            //var datosDetallePension = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PensionAlimenticia && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            //if (datosDetallePension != null)
                            //{
                            //    cachePension = true;
                            //    r_pension = JsonConvert.DeserializeObject<Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia>(datosDetallePension);
                            //}
                        }

                        datos = new PensionAlimenticiaViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            PensionAlimenticia = r_pension,
                            BusquedaNueva = busquedaNuevaPension
                        };

                        if (datos.PensionAlimenticia != null && datos.PensionAlimenticia.Resultados != null)
                            foreach (var item in datos.PensionAlimenticia.Resultados)
                            {
                                item.Nombre = historialTemp.NombresPersona;
                                item.Cedula = (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico) ? historialTemp.IdentificacionSecundaria : historialTemp.Identificacion;
                            }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Pension Alimenticia con identificación {modelo.Identificacion}: {ex.Message}");
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathAnt = Path.Combine(pathFuentes, "pensionAlimenticiaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathAnt);
                    var pension = JsonConvert.DeserializeObject<Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia>(archivo);
                    datos = new PensionAlimenticiaViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        PensionAlimenticia = pension,
                        BusquedaNueva = busquedaNuevaPension
                    };
                }

                _logger.LogInformation("Fuente de Pension alimenticia procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Pension alimenticia. Id Historial: {modelo.IdHistorial}");
                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPension = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PensionAlimenticia);
                        if (historialPension != null && (!historialPension.Generado || !busquedaNuevaPension))
                        {
                            historialPension.IdHistorial = modelo.IdHistorial;
                            historialPension.TipoFuente = Dominio.Tipos.Fuentes.PensionAlimenticia;
                            historialPension.Generado = datos.PensionAlimenticia != null;
                            historialPension.Data = datos.PensionAlimenticia != null ? JsonConvert.SerializeObject(datos.PensionAlimenticia) : null;
                            historialPension.Cache = cachePension;
                            historialPension.FechaRegistro = DateTime.Now;
                            historialPension.Reintento = true;
                            historialPension.DataError = resultadoPAlimenticia != null ? resultadoPAlimenticia.Error : null;
                            historialPension.FuenteActiva = resultadoPAlimenticia != null ? resultadoPAlimenticia.FuenteActiva : null;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPension);
                            _logger.LogInformation("Historial de la Fuente Pension alimenticia actualizado correctamente");
                        }
                        else if (historialPension == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PensionAlimenticia,
                                Generado = datos.PensionAlimenticia != null,
                                Data = datos.PensionAlimenticia != null ? JsonConvert.SerializeObject(datos.PensionAlimenticia) : null,
                                Cache = cachePension,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoPAlimenticia != null ? resultadoPAlimenticia.Error : null,
                                FuenteActiva = resultadoPAlimenticia != null ? resultadoPAlimenticia.FuenteActiva : null
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente Pension alimenticia procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePensionAlimenticia", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePensionAlimenticia", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteSuperBancos")]
        public async Task<IActionResult> ObtenerReporteSuperBancos(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.SuperBancos.Modelos.Resultado r_superBancosCedula = null;
                Externos.Logica.SuperBancos.Modelos.Resultado r_superBancosNatural = null;
                Externos.Logica.SuperBancos.Modelos.Resultado r_superBancosEmpresa = null;
                ViewBag.RutaArchivoCedula = string.Empty;
                ViewBag.RutaArchivoNatural = string.Empty;
                ViewBag.RutaArchivoEmpresa = string.Empty;
                ViewBag.MsjErrorSuperBancos = string.Empty;
                var datos = new SuperBancosViewModel();
                var busquedaNuevaSuperBancosCedula = false;
                var busquedaNuevaSuperBancosNatural = false;
                var busquedaNuevaSuperBancosEmpresa = false;
                var cacheSuperBancosCedula = false;
                var cacheSuperBancosNatural = false;
                var cacheSuperBancosEmpresa = false;
                var tipoConsulta = 0;
                var hostSuperBancos = string.Empty;
                Historial historialTemp = null;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente SuperBancos identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, m => m.Include(n => n.Usuario.Empresa), true);
                        var fechaExpedicion = _superBancos.GetType().GetProperty("FechaExpedicionCedula");
                        string[] credencialesHost = null;
                        hostSuperBancos = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;
                        credencialesHost = new[] { hostSuperBancos };

                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                        {
                            if (historialTemp != null && string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula?.Trim()))
                            {
                                ViewBag.MsjErrorSuperBancos = "No se pudo obtener la Fecha de Cedulación de la consulta en línea del Registro Civil, por favor ingresar la Fecha de Cedulación de forma manual.";
                                throw new Exception($"No se puede consultar super de bancos porque no se tiene fecha de expedición de cédula. Identificación: {modelo.Identificacion}");
                            }

                            //Cedula
                            if (fechaExpedicion != null)
                                fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                            r_superBancosCedula = await _superBancos.GetRespuestaAsync(modelo.Identificacion, credencialesHost);

                            if (r_superBancosCedula != null && r_superBancosCedula.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    ViewBag.RutaArchivoCedula = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosCedula.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.RutaArchivoCedula = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                                }
                                r_superBancosCedula.Reporte = null;
                            }

                            //Natural
                            if (fechaExpedicion != null)
                                fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                            r_superBancosNatural = await _superBancos.GetRespuestaAsync($"{modelo.Identificacion}001", credencialesHost);

                            if (r_superBancosNatural != null && r_superBancosNatural.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    ViewBag.RutaArchivoNatural = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosNatural.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.RutaArchivoNatural = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}001: {ex.Message}");
                                }
                                r_superBancosNatural.Reporte = null;
                            }
                            tipoConsulta = 1;
                        }
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                        {
                            if (historialTemp != null && string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula?.Trim()))
                            {
                                ViewBag.MsjErrorSuperBancos = "No se pudo obtener la Fecha de Cedulación de la consulta en línea del Registro Civil, por favor ingresar la Fecha de Cedulación de forma manual.";
                                throw new Exception($"No se puede consultar super de bancos porque no se tiene fecha de expedición de cédula. Identificación: {modelo.Identificacion}");
                            }

                            //Natural
                            if (fechaExpedicion != null)
                                fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                            r_superBancosNatural = await _superBancos.GetRespuestaAsync(modelo.Identificacion, credencialesHost);

                            if (r_superBancosNatural != null && r_superBancosNatural.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    ViewBag.RutaArchivoNatural = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosNatural.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.RutaArchivoNatural = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}001: {ex.Message}");
                                }
                                r_superBancosNatural.Reporte = null;
                            }

                            //Cedula
                            var cedula = modelo.Identificacion.Substring(0, 10);
                            if (fechaExpedicion != null)
                                fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                            r_superBancosCedula = await _superBancos.GetRespuestaAsync(cedula, credencialesHost);

                            if (r_superBancosCedula != null && r_superBancosCedula.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    ViewBag.RutaArchivoCedula = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosCedula.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.RutaArchivoCedula = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {cedula}: {ex.Message}");
                                }
                                r_superBancosCedula.Reporte = null;
                            }
                            tipoConsulta = 2;
                        }
                        else
                        {
                            //Juridico
                            r_superBancosEmpresa = await _superBancos.GetRespuestaAsync(modelo.Identificacion, credencialesHost);

                            if (r_superBancosEmpresa != null && r_superBancosEmpresa.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    ViewBag.RutaArchivoEmpresa = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosEmpresa.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.RutaArchivoEmpresa = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                                }
                                r_superBancosEmpresa.Reporte = null;
                            }

                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula?.Trim()))
                            {
                                //Natural
                                var rucNatural = $"{historialTemp.IdentificacionSecundaria}001";
                                if (fechaExpedicion != null)
                                    fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                                r_superBancosNatural = await _superBancos.GetRespuestaAsync(rucNatural, credencialesHost);

                                if (r_superBancosNatural != null && r_superBancosNatural.Reporte.Length > 0)
                                {
                                    try
                                    {
                                        var filePath = Path.GetTempFileName();
                                        ViewBag.RutaArchivoNatural = filePath;
                                        System.IO.File.WriteAllBytes(filePath, r_superBancosNatural.Reporte);
                                    }
                                    catch (Exception ex)
                                    {
                                        ViewBag.RutaArchivoNatural = string.Empty;
                                        _logger.LogError($"Error al registrar certificado de super de bancos {rucNatural}: {ex.Message}");
                                    }
                                    r_superBancosNatural.Reporte = null;
                                }

                                //Cedula
                                var cedula = historialTemp.IdentificacionSecundaria;
                                if (fechaExpedicion != null)
                                    fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                                r_superBancosCedula = await _superBancos.GetRespuestaAsync(cedula, credencialesHost);

                                if (r_superBancosCedula != null && r_superBancosCedula.Reporte.Length > 0)
                                {
                                    try
                                    {
                                        var filePath = Path.GetTempFileName();
                                        ViewBag.RutaArchivoCedula = filePath;
                                        System.IO.File.WriteAllBytes(filePath, r_superBancosCedula.Reporte);
                                    }
                                    catch (Exception ex)
                                    {
                                        ViewBag.RutaArchivoCedula = string.Empty;
                                        _logger.LogError($"Error al registrar certificado de super de bancos {cedula}: {ex.Message}");
                                    }
                                    r_superBancosCedula.Reporte = null;
                                }
                            }
                            else
                            {
                                ViewBag.MsjErrorSuperBancos = "No se pudo obtener la Fecha de Cedulación de la consulta en línea del Registro Civil, por favor ingresar la Fecha de Cedulación de forma manual.";
                                _logger.LogInformation($"No se puede consultar super de bancos porque no se tiene fecha de expedición de cédula. Identificación: {modelo.Identificacion}");
                            }

                            tipoConsulta = 3;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente SuperBancos con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_superBancosCedula == null)
                    {
                        busquedaNuevaSuperBancosCedula = true;
                        //var datosSuperBancos = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosSuperBancos != null)
                        //{
                        //    cacheSuperBancosCedula = true;
                        //    r_superBancosCedula = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancos);
                        //}
                    }

                    if (r_superBancosNatural == null)
                    {
                        busquedaNuevaSuperBancosNatural = true;
                        //var datosSuperBancos = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosSuperBancos != null)
                        //{
                        //    cacheSuperBancosNatural = true;
                        //    r_superBancosNatural = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancos);
                        //}
                    }

                    if (r_superBancosEmpresa == null && tipoConsulta == 3)
                    {
                        busquedaNuevaSuperBancosEmpresa = true;
                        //var datosSuperBancos = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        //if (datosSuperBancos != null)
                        //{
                        //    cacheSuperBancosEmpresa = true;
                        //    r_superBancosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancos);
                        //}
                    }

                    datos = new SuperBancosViewModel()
                    {
                        SuperBancos = r_superBancosCedula,
                        SuperBancosNatural = r_superBancosNatural,
                        SuperBancosEmpresa = r_superBancosEmpresa,
                        BusquedaNueva = busquedaNuevaSuperBancosCedula,
                        BusquedaNuevaNatural = busquedaNuevaSuperBancosNatural,
                        BusquedaNuevaEmpresa = busquedaNuevaSuperBancosEmpresa,
                        TipoConsulta = tipoConsulta,
                        FechaExpedicion = historialTemp != null && !string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula?.Trim())
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSuperBancos = Path.Combine(pathFuentes, "superBancosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathSuperBancos);
                    datos = JsonConvert.DeserializeObject<SuperBancosViewModel>(archivo);

                    if (datos.SuperBancos != null)
                    {
                        try
                        {
                            var filePath = Path.GetTempFileName();
                            ViewBag.RutaArchivoCedula = filePath;
                            ViewBag.RutaArchivoNatural = filePath;
                            ViewBag.RutaArchivoEmpresa = filePath;
                            System.IO.File.WriteAllBytes(filePath, datos.SuperBancos.Reporte);
                            datos.SuperBancos.Reporte = null;
                        }
                        catch (Exception ex)
                        {
                            ViewBag.RutaArchivo = string.Empty;
                            _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                        }
                    }
                }

                _logger.LogInformation("Fuente de SuperBancos procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente SuperBancos. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesCivil = new[] { Dominio.Tipos.Fuentes.SuperBancos, Dominio.Tipos.Fuentes.SuperBancosNatural, Dominio.Tipos.Fuentes.SuperBancosEmpresa };
                        var historialesSuperBancos = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesCivil.Contains(m.TipoFuente));
                        var historialSuperBancosCedula = historialesSuperBancos.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos);
                        var historialSuperBancosNatural = historialesSuperBancos.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural);
                        var historialSuperBancosEmpresa = historialesSuperBancos.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosEmpresa);

                        if (historialSuperBancosCedula != null)
                        {
                            if (!historialSuperBancosCedula.Generado || !busquedaNuevaSuperBancosCedula)
                            {
                                historialSuperBancosCedula.IdHistorial = modelo.IdHistorial;
                                historialSuperBancosCedula.TipoFuente = Dominio.Tipos.Fuentes.SuperBancos;
                                historialSuperBancosCedula.Generado = r_superBancosCedula != null;
                                historialSuperBancosCedula.Data = r_superBancosCedula != null ? JsonConvert.SerializeObject(r_superBancosCedula) : null;
                                historialSuperBancosCedula.Cache = cacheSuperBancosCedula;
                                historialSuperBancosCedula.FechaRegistro = DateTime.Now;
                                historialSuperBancosCedula.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSuperBancosCedula);
                                _logger.LogInformation("Historial de la Fuente SuperBancos actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.SuperBancos,
                                Generado = datos.SuperBancos != null,
                                Data = datos.SuperBancos != null ? JsonConvert.SerializeObject(datos.SuperBancos) : null,
                                Cache = cacheSuperBancosCedula,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente SuperBancos procesado correctamente");
                        }

                        if (historialSuperBancosNatural != null)
                        {
                            if (!historialSuperBancosNatural.Generado || !busquedaNuevaSuperBancosNatural)
                            {
                                historialSuperBancosNatural.IdHistorial = modelo.IdHistorial;
                                historialSuperBancosNatural.TipoFuente = Dominio.Tipos.Fuentes.SuperBancosNatural;
                                historialSuperBancosNatural.Generado = r_superBancosNatural != null;
                                historialSuperBancosNatural.Data = r_superBancosNatural != null ? JsonConvert.SerializeObject(r_superBancosNatural) : null;
                                historialSuperBancosNatural.Cache = cacheSuperBancosNatural;
                                historialSuperBancosNatural.FechaRegistro = DateTime.Now;
                                historialSuperBancosNatural.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSuperBancosNatural);
                                _logger.LogInformation("Historial de la Fuente SuperBancos Natural actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.SuperBancosNatural,
                                Generado = datos.SuperBancosNatural != null,
                                Data = datos.SuperBancosNatural != null ? JsonConvert.SerializeObject(datos.SuperBancosNatural) : null,
                                Cache = cacheSuperBancosNatural,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente SuperBancos Natural procesado correctamente");
                        }

                        if (historialSuperBancosEmpresa != null)
                        {
                            if (!historialSuperBancosEmpresa.Generado || !busquedaNuevaSuperBancosEmpresa)
                            {
                                historialSuperBancosEmpresa.IdHistorial = modelo.IdHistorial;
                                historialSuperBancosEmpresa.TipoFuente = Dominio.Tipos.Fuentes.SuperBancosEmpresa;
                                historialSuperBancosEmpresa.Generado = r_superBancosEmpresa != null;
                                historialSuperBancosEmpresa.Data = r_superBancosEmpresa != null ? JsonConvert.SerializeObject(r_superBancosEmpresa) : null;
                                historialSuperBancosEmpresa.Cache = cacheSuperBancosEmpresa;
                                historialSuperBancosEmpresa.FechaRegistro = DateTime.Now;
                                historialSuperBancosEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSuperBancosEmpresa);
                                _logger.LogInformation("Historial de la Fuente SuperBancos Juridico actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.SuperBancosEmpresa,
                                Generado = datos.SuperBancosEmpresa != null,
                                Data = datos.SuperBancosEmpresa != null ? JsonConvert.SerializeObject(datos.SuperBancosEmpresa) : null,
                                Cache = cacheSuperBancosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente SuperBancos Juridico procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteSuperBancos", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteSuperBancos", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteSuperBancosCedula")]
        public async Task<IActionResult> ObtenerReporteSuperBancosCedula(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.SuperBancos.Modelos.Resultado r_superBancosCedula = null;
                var busquedaNuevaSuperBancosCedula = false;
                var cacheSuperBancosCedula = false;
                var rutaArchivo = string.Empty;
                ViewBag.MsjErrorSuperBancos = string.Empty;
                var fechaExpedicionIngresada = false;
                var hostSuperBancos = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente SuperBancos identificación: {modelo.Identificacion}");
                        var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, m => m.Include(n => n.Usuario.Empresa));
                        var cedula = string.Empty;
                        string[] credencialesHost = null;
                        hostSuperBancos = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;
                        credencialesHost = new[] { hostSuperBancos };

                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                            cedula = modelo.Identificacion;
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                            cedula = modelo.Identificacion.Substring(0, 10);
                        else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                            cedula = historialTemp.IdentificacionSecundaria;

                        if (!string.IsNullOrEmpty(cedula))
                        {
                            var fechaExpedicion = _superBancos.GetType().GetProperty("FechaExpedicionCedula");
                            if (historialTemp != null && string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula?.Trim()) && modelo.FechaCedulacion.HasValue && modelo.FechaCedulacion.Value != default)
                            {
                                try
                                {
                                    historialTemp.FechaExpedicionCedula = modelo.FechaCedulacion.Value.ToString("dd/MM/yyyy");
                                    await _historiales.UpdateAsync(historialTemp);
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError(ex, ex.Message);
                                }
                            }

                            if (modelo.FechaCedulacion.HasValue && !string.IsNullOrEmpty(modelo.FechaCedulacion.Value.ToString("dd/MM/yyyy")))
                                fechaExpedicionIngresada = !string.IsNullOrEmpty(modelo.FechaCedulacion.Value.ToString("dd/MM/yyyy"));
                            else
                                fechaExpedicionIngresada = !string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula.Trim());

                            if (fechaExpedicion != null)
                                fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                            r_superBancosCedula = await _superBancos.GetRespuestaAsync(cedula, credencialesHost);
                            if (r_superBancosCedula != null && r_superBancosCedula.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    rutaArchivo = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosCedula.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    rutaArchivo = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                                }
                                r_superBancosCedula.Reporte = null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente SuperBancos con identificación {modelo.Identificacion}: {ex.Message}");
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSuperBancos = Path.Combine(pathFuentes, "superBancosIndividualDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathSuperBancos);
                    r_superBancosCedula = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(archivo);

                    if (r_superBancosCedula != null)
                    {
                        try
                        {
                            var filePath = Path.GetTempFileName();
                            rutaArchivo = filePath;
                            System.IO.File.WriteAllBytes(filePath, r_superBancosCedula.Reporte);
                            r_superBancosCedula.Reporte = null;
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                        }
                    }
                }

                if (r_superBancosCedula == null)
                {
                    busquedaNuevaSuperBancosCedula = true;
                    //var datosSuperBancos = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                    //if (datosSuperBancos != null)
                    //{
                    //    cacheSuperBancosCedula = true;
                    //    r_superBancosCedula = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancos);
                    //}
                }

                _logger.LogInformation("Fuente de SuperBancos procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente SuperBancos. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialSuperBancosCedula = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos);
                        if (historialSuperBancosCedula != null)
                        {
                            if (!historialSuperBancosCedula.Generado || !busquedaNuevaSuperBancosCedula)
                            {
                                historialSuperBancosCedula.IdHistorial = modelo.IdHistorial;
                                historialSuperBancosCedula.TipoFuente = Dominio.Tipos.Fuentes.SuperBancos;
                                historialSuperBancosCedula.Generado = r_superBancosCedula != null;
                                historialSuperBancosCedula.Data = r_superBancosCedula != null ? JsonConvert.SerializeObject(r_superBancosCedula) : null;
                                historialSuperBancosCedula.Cache = cacheSuperBancosCedula;
                                historialSuperBancosCedula.FechaRegistro = DateTime.Now;
                                historialSuperBancosCedula.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSuperBancosCedula);
                                _logger.LogInformation("Historial de la Fuente SuperBancos actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.SuperBancos,
                                Generado = r_superBancosCedula != null,
                                Data = r_superBancosCedula != null ? JsonConvert.SerializeObject(r_superBancosCedula) : null,
                                Cache = cacheSuperBancosCedula,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente SuperBancos procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionSuperBancos", new InformacionSuperBancosViewModel() { RutaArchivo = rutaArchivo, SuperBancos = r_superBancosCedula, TipoConsulta = 1, BusquedaNueva = busquedaNuevaSuperBancosCedula, FechaExpedicion = fechaExpedicionIngresada });
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionSuperBancos", new InformacionSuperBancosViewModel() { });
            }
        }

        [HttpPost]
        [Route("ObtenerReporteSuperBancosNatural")]
        public async Task<IActionResult> ObtenerReporteSuperBancosNatural(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.SuperBancos.Modelos.Resultado r_superBancosNatural = null;
                var busquedaNuevaSuperBancosNatural = false;
                var cacheSuperBancosNatural = false;
                var rutaArchivo = string.Empty;
                ViewBag.MsjErrorSuperBancos = string.Empty;
                var hostSuperBancos = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente SuperBancos identificación: {modelo.Identificacion}");
                        var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, m => m.Include(n => n.Usuario.Empresa), true);
                        var rucNatural = string.Empty;
                        string[] credencialesHost = null;
                        hostSuperBancos = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;
                        credencialesHost = new[] { hostSuperBancos };

                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                            rucNatural = $"{modelo.Identificacion}001";
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                            rucNatural = modelo.Identificacion;
                        else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria))
                            rucNatural = $"{historialTemp.IdentificacionSecundaria}001";

                        if (!string.IsNullOrEmpty(rucNatural))
                        {
                            var fechaExpedicion = _superBancos.GetType().GetProperty("FechaExpedicionCedula");
                            if (historialTemp != null && string.IsNullOrEmpty(historialTemp.FechaExpedicionCedula?.Trim()) && modelo.FechaCedulacion.HasValue && modelo.FechaCedulacion.Value != default)
                            {
                                try
                                {
                                    historialTemp.FechaExpedicionCedula = modelo.FechaCedulacion.Value.ToString("dd/MM/yyyy");
                                    await _historiales.UpdateAsync(historialTemp);
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError(ex, ex.Message);
                                }
                            }

                            if (fechaExpedicion != null)
                                fechaExpedicion.SetValue(_superBancos, historialTemp.FechaExpedicionCedula.Trim());

                            r_superBancosNatural = await _superBancos.GetRespuestaAsync(rucNatural, credencialesHost);
                            if (r_superBancosNatural != null && r_superBancosNatural.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    rutaArchivo = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosNatural.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}001: {ex.Message}");
                                }
                                r_superBancosNatural.Reporte = null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente SuperBancos con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_superBancosNatural == null)
                    {
                        busquedaNuevaSuperBancosNatural = true;
                        var datosSuperBancos = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosSuperBancos != null)
                        {
                            cacheSuperBancosNatural = true;
                            r_superBancosNatural = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancos);
                        }
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSuperBancos = Path.Combine(pathFuentes, "superBancosIndividualDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathSuperBancos);
                    r_superBancosNatural = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(archivo);

                    if (r_superBancosNatural != null)
                    {
                        try
                        {
                            var filePath = Path.GetTempFileName();
                            rutaArchivo = filePath;
                            System.IO.File.WriteAllBytes(filePath, r_superBancosNatural.Reporte);
                            r_superBancosNatural.Reporte = null;
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                        }
                    }
                }

                _logger.LogInformation("Fuente de SuperBancos procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente SuperBancos. Id Historial: {modelo.IdHistorial}");

                try
                {
                    var historialSuperBancosNatural = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural);
                    if (historialSuperBancosNatural != null)
                    {
                        if (!historialSuperBancosNatural.Generado || !busquedaNuevaSuperBancosNatural)
                        {
                            historialSuperBancosNatural.IdHistorial = modelo.IdHistorial;
                            historialSuperBancosNatural.TipoFuente = Dominio.Tipos.Fuentes.SuperBancosNatural;
                            historialSuperBancosNatural.Generado = r_superBancosNatural != null;
                            historialSuperBancosNatural.Data = r_superBancosNatural != null ? JsonConvert.SerializeObject(r_superBancosNatural) : null;
                            historialSuperBancosNatural.Cache = cacheSuperBancosNatural;
                            historialSuperBancosNatural.FechaRegistro = DateTime.Now;
                            historialSuperBancosNatural.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSuperBancosNatural);
                            _logger.LogInformation("Historial de la Fuente SuperBancos Natural actualizado correctamente");
                        }
                    }
                    else
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.SuperBancosNatural,
                            Generado = r_superBancosNatural != null,
                            Data = r_superBancosNatural != null ? JsonConvert.SerializeObject(r_superBancosNatural) : null,
                            Cache = cacheSuperBancosNatural,
                            FechaRegistro = DateTime.Now,
                            Reintento = false
                        });
                        _logger.LogInformation("Historial de la Fuente SuperBancos Natural procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionSuperBancos", new InformacionSuperBancosViewModel() { RutaArchivo = rutaArchivo, SuperBancos = r_superBancosNatural, TipoConsulta = 2, BusquedaNueva = busquedaNuevaSuperBancosNatural });
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionSuperBancos", new InformacionSuperBancosViewModel() { });
            }
        }

        [HttpPost]
        [Route("ObtenerReporteSuperBancosEmpresa")]
        public async Task<IActionResult> ObtenerReporteSuperBancosEmpresa(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.SuperBancos.Modelos.Resultado r_superBancosEmpresa = null;
                var busquedaNuevaSuperBancosEmpresa = false;
                var cacheSuperBancosEmpresa = false;
                var rutaArchivo = string.Empty;
                var aplicaBusquedaCache = false;
                var hostSuperBancos = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente SuperBancos identificación: {modelo.Identificacion}");
                        var rucJuridico = string.Empty;
                        string[] credencialesHost = null;
                        var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, i => i.Include(m => m.Usuario.Empresa), true);
                        hostSuperBancos = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;
                        credencialesHost = new[] { hostSuperBancos };

                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                            rucJuridico = string.Empty;
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                            rucJuridico = string.Empty;
                        else
                            rucJuridico = modelo.Identificacion;

                        if (!string.IsNullOrEmpty(rucJuridico))
                        {
                            aplicaBusquedaCache = true;
                            r_superBancosEmpresa = await _superBancos.GetRespuestaAsync(rucJuridico, credencialesHost);
                            if (r_superBancosEmpresa != null && r_superBancosEmpresa.Reporte.Length > 0)
                            {
                                try
                                {
                                    var filePath = Path.GetTempFileName();
                                    rutaArchivo = filePath;
                                    System.IO.File.WriteAllBytes(filePath, r_superBancosEmpresa.Reporte);
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.RutaArchivoEmpresa = string.Empty;
                                    _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                                }
                                r_superBancosEmpresa.Reporte = null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente SuperBancos con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_superBancosEmpresa == null && aplicaBusquedaCache)
                    {
                        busquedaNuevaSuperBancosEmpresa = true;
                        var datosSuperBancos = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosSuperBancos != null)
                        {
                            cacheSuperBancosEmpresa = true;
                            r_superBancosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancos);
                        }
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathSuperBancos = Path.Combine(pathFuentes, "superBancosIndividualDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathSuperBancos);
                    r_superBancosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(archivo);

                    if (r_superBancosEmpresa != null)
                    {
                        try
                        {
                            var filePath = Path.GetTempFileName();
                            rutaArchivo = filePath;
                            System.IO.File.WriteAllBytes(filePath, r_superBancosEmpresa.Reporte);
                            r_superBancosEmpresa.Reporte = null;
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError($"Error al registrar certificado de super de bancos {modelo.Identificacion}: {ex.Message}");
                        }
                    }
                }

                _logger.LogInformation("Fuente de SuperBancos procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente SuperBancos. Id Historial: {modelo.IdHistorial}");

                try
                {
                    var historialSuperBancosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosEmpresa);
                    if (historialSuperBancosEmpresa != null)
                    {
                        if (!historialSuperBancosEmpresa.Generado || !busquedaNuevaSuperBancosEmpresa)
                        {
                            historialSuperBancosEmpresa.IdHistorial = modelo.IdHistorial;
                            historialSuperBancosEmpresa.TipoFuente = Dominio.Tipos.Fuentes.SuperBancosEmpresa;
                            historialSuperBancosEmpresa.Generado = r_superBancosEmpresa != null;
                            historialSuperBancosEmpresa.Data = r_superBancosEmpresa != null ? JsonConvert.SerializeObject(r_superBancosEmpresa) : null;
                            historialSuperBancosEmpresa.Cache = cacheSuperBancosEmpresa;
                            historialSuperBancosEmpresa.FechaRegistro = DateTime.Now;
                            historialSuperBancosEmpresa.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialSuperBancosEmpresa);
                            _logger.LogInformation("Historial de la Fuente SuperBancos Juridico actualizado correctamente");
                        }
                    }
                    else
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.SuperBancosEmpresa,
                            Generado = r_superBancosEmpresa != null,
                            Data = r_superBancosEmpresa != null ? JsonConvert.SerializeObject(r_superBancosEmpresa) : null,
                            Cache = cacheSuperBancosEmpresa,
                            FechaRegistro = DateTime.Now,
                            Reintento = false
                        });
                        _logger.LogInformation("Historial de la Fuente SuperBancos Juridico procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionSuperBancos", new InformacionSuperBancosViewModel() { RutaArchivo = rutaArchivo, SuperBancos = r_superBancosEmpresa, TipoConsulta = 3, BusquedaNueva = busquedaNuevaSuperBancosEmpresa });
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionSuperBancos", new InformacionSuperBancosViewModel() { });
            }
        }

        [HttpPost]
        [Route("ObtenerReporteAntecedentesPenales")]
        public async Task<IActionResult> ObtenerReporteAntecedentesPenales(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.AntecedentesPenales.Modelos.Resultado r_antecedentes = null;
                ViewBag.RutaArchivo = string.Empty;
                var datos = new AntecedentesPenalesViewModel();
                Historial historialTemp = null;
                var busquedaNuevaAntecedentes = false;
                var cacheAntecedentes = false;
                var hostRentas = string.Empty;
                ResultadoAntecedentesPenales resultadoAntecedentesPenales = null;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Antecedentes Penales identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, m => m.Include(m => m.Usuario.Empresa), true);
                        string[] credencialesHost = null;
                        hostRentas = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;
                        credencialesHost = new[] { hostRentas };

                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion)) && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                            {
                                resultadoAntecedentesPenales = await _antecedentes.GetRespuestaAsyncV2(historialTemp.IdentificacionSecundaria, credencialesHost);
                                r_antecedentes = resultadoAntecedentesPenales?.Resultado;
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    resultadoAntecedentesPenales = await _antecedentes.GetRespuestaAsyncV2(modelo.Identificacion, credencialesHost);
                                    r_antecedentes = resultadoAntecedentesPenales?.Resultado;
                                }
                            }
                        }
                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            resultadoAntecedentesPenales = await _antecedentes.GetRespuestaAsyncV2(modelo.Identificacion, credencialesHost);
                            r_antecedentes = resultadoAntecedentesPenales?.Resultado;
                        }

                        if (r_antecedentes != null && r_antecedentes.Reporte.Length > 0)
                        {
                            try
                            {
                                var filePath = Path.GetTempFileName();
                                ViewBag.RutaArchivo = filePath;
                                System.IO.File.WriteAllBytes(filePath, r_antecedentes.Reporte);
                            }
                            catch (Exception ex)
                            {
                                ViewBag.RutaArchivo = string.Empty;
                                _logger.LogError($"Error al registrar certificado de antecedentes penales {modelo.Identificacion}: {ex.Message}");
                            }
                            r_antecedentes.Reporte = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Antecedentes Penales con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_antecedentes == null)
                    {
                        busquedaNuevaAntecedentes = true;
                        var datosAntecedentes = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.AntecedentesPenales && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosAntecedentes != null)
                        {
                            cacheAntecedentes = true;
                            r_antecedentes = JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.Resultado>(datosAntecedentes);
                        }
                    }

                    datos = new AntecedentesPenalesViewModel()
                    {
                        Antecedentes = r_antecedentes,
                        BusquedaNueva = busquedaNuevaAntecedentes,
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathAntecedentes = Path.Combine(pathFuentes, "antecedentesDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathAntecedentes);
                    datos = JsonConvert.DeserializeObject<AntecedentesPenalesViewModel>(archivo);

                    try
                    {
                        var filePath = Path.GetTempFileName();
                        ViewBag.RutaArchivo = filePath;
                        System.IO.File.WriteAllBytes(filePath, datos.Antecedentes.Reporte);
                        datos.Antecedentes.Reporte = null;
                    }
                    catch (Exception ex)
                    {
                        ViewBag.RutaArchivo = string.Empty;
                        _logger.LogError($"Error al registrar certificado de antecedentes penales {modelo.Identificacion}: {ex.Message}");
                    }
                }

                _logger.LogInformation("Fuente de Antecedentes Penales procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Antecedentes Penales. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialAntecedentes = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.AntecedentesPenales);
                        if (historialAntecedentes != null)
                        {
                            if (!historialAntecedentes.Generado || !busquedaNuevaAntecedentes)
                            {
                                historialAntecedentes.IdHistorial = modelo.IdHistorial;
                                historialAntecedentes.TipoFuente = Dominio.Tipos.Fuentes.AntecedentesPenales;
                                historialAntecedentes.Generado = r_antecedentes != null;
                                historialAntecedentes.Data = r_antecedentes != null ? JsonConvert.SerializeObject(r_antecedentes) : null;
                                historialAntecedentes.Cache = cacheAntecedentes;
                                historialAntecedentes.FechaRegistro = DateTime.Now;
                                historialAntecedentes.Reintento = true;
                                historialAntecedentes.DataError = resultadoAntecedentesPenales != null ? resultadoAntecedentesPenales.Error : null;
                                historialAntecedentes.FuenteActiva = resultadoAntecedentesPenales != null ? resultadoAntecedentesPenales.FuenteActiva : null;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAntecedentes);
                                _logger.LogInformation("Historial de la Fuente Antecedentes Penales actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.AntecedentesPenales,
                                Generado = datos.Antecedentes != null,
                                Data = datos.Antecedentes != null ? JsonConvert.SerializeObject(datos.Antecedentes) : null,
                                Cache = cacheAntecedentes,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoAntecedentesPenales != null ? resultadoAntecedentesPenales.Error : null,
                                FuenteActiva = resultadoAntecedentesPenales != null ? resultadoAntecedentesPenales.FuenteActiva : null
                            });
                            _logger.LogInformation("Historial de la Fuente Antecedentes Penales procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteAntecedentesPenales", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteAntecedentesPenales", null);
            }
        }

        [HttpPost]
        [Route("GuardarAntecedentesPenales")]
        public async Task<IActionResult> GuardarAntecedentesPenales(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                if (!modelo.AntecedentesPenales.HasValue)
                    throw new Exception("No se ha enviado el parametro de antecedentes penales");

                Historial historialTemp = null;
                var datos = new AntecedentesPenalesViewModel();
                var nombrePersona = string.Empty;
                var cedulaPersona = string.Empty;

                try
                {
                    _logger.LogInformation($"Guardando datos de Fuente Antecedentes Penales identificación: {modelo.Identificacion}");
                    historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, m => m.Include(m => m.Usuario.Empresa), true);

                    if (historialTemp != null)
                    {
                        if (ValidacionViewModel.ValidarRuc(historialTemp.Identificacion))
                        {
                            nombrePersona = !string.IsNullOrWhiteSpace(historialTemp.NombresPersona.Trim()) ? historialTemp.NombresPersona.Trim() : null;
                            cedulaPersona = !string.IsNullOrWhiteSpace(historialTemp.IdentificacionSecundaria.Trim()) ? historialTemp.IdentificacionSecundaria.Trim() : null;
                        }
                        else if (ValidacionViewModel.ValidarCedula(historialTemp.Identificacion))
                        {
                            nombrePersona = !string.IsNullOrWhiteSpace(historialTemp.RazonSocialEmpresa.Trim()) ? historialTemp.RazonSocialEmpresa.Trim() : null;
                            cedulaPersona = !string.IsNullOrWhiteSpace(historialTemp.Identificacion.Trim()) ? historialTemp.Identificacion.Trim() : null;
                        }

                        datos = new AntecedentesPenalesViewModel()
                        {
                            Antecedentes = new Externos.Logica.AntecedentesPenales.Modelos.Resultado()
                            {
                                FechaEmision = string.Empty,
                                NumeroCertificado = string.Empty,
                                TipoDocumento = string.Empty,
                                Identificacion = cedulaPersona,
                                Nombre = nombrePersona,
                                Antecedente = modelo.AntecedentesPenales.HasValue && modelo.AntecedentesPenales.Value ? "SI" : "NO",
                                NombreDirector = string.Empty,
                                CargoDirector = string.Empty,
                                FechaValidacion = string.Empty,
                                Institucion = string.Empty,
                                Reporte = null
                            }
                        };
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al guardar fuente Antecedentes Penales con identificación {modelo.Identificacion}: {ex.Message}");
                }

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.AntecedentesPenales,
                            Generado = datos.Antecedentes != null,
                            Data = datos.Antecedentes != null ? JsonConvert.SerializeObject(datos.Antecedentes) : null,
                            Cache = false,
                            FechaRegistro = DateTime.Now,
                            Reintento = false,
                            DataError = null,
                            FuenteActiva = null
                        });
                        _logger.LogInformation("Historial de la Fuente Antecedentes Penales procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView("../Shared/Fuentes/_FuenteAntecedentesPenales", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteAntecedentesPenales", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteDeNoBaja")]
        public async Task<IActionResult> ObtenerReporteDeNoBaja(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.AntecedentesPenales.Modelos.ResultadoNoPolicia r_denobaja = null;
                ViewBag.RutaArchivo = string.Empty;
                var datos = new DeNoBajaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaDeNoBaja = false;
                var cacheDeNoBaja = false;
                ResultadoResultadoNoPolicia resultadoDeNoBaja = null;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente De No Baja identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion)) && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                            {
                                resultadoDeNoBaja = await _antecedentes.GetRespuestaAsyncDeNoBajaV2(historialTemp.IdentificacionSecundaria);
                                r_denobaja = resultadoDeNoBaja?.ResultadoNoPolicia;
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    resultadoDeNoBaja = await _antecedentes.GetRespuestaAsyncDeNoBajaV2(modelo.Identificacion);
                                    r_denobaja = resultadoDeNoBaja?.ResultadoNoPolicia;
                                }
                            }
                        }
                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            resultadoDeNoBaja = await _antecedentes.GetRespuestaAsyncDeNoBajaV2(modelo.Identificacion);
                            r_denobaja = resultadoDeNoBaja?.ResultadoNoPolicia;
                        }

                        if (r_denobaja != null && r_denobaja.Resultado != null && r_denobaja.Resultado.Reporte.Length > 0)
                        {
                            try
                            {
                                var filePath = Path.GetTempFileName();
                                ViewBag.RutaArchivo = filePath;
                                System.IO.File.WriteAllBytes(filePath, r_denobaja.Resultado.Reporte);
                            }
                            catch (Exception ex)
                            {
                                ViewBag.RutaArchivo = string.Empty;
                                _logger.LogError($"Error al registrar certificado de DeNoBaja {modelo.Identificacion}: {ex.Message}");
                            }
                            r_denobaja.Resultado.Reporte = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente De No Baja con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_denobaja == null)
                    {
                        busquedaNuevaDeNoBaja = true;
                        var datosDeNoBaja = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.DeNoBaja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDeNoBaja != null)
                        {
                            cacheDeNoBaja = true;
                            r_denobaja = JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.ResultadoNoPolicia>(datosDeNoBaja);
                        }
                    }

                    datos = new DeNoBajaViewModel()
                    {
                        DeNoBaja = r_denobaja,
                        BusquedaNueva = busquedaNuevaDeNoBaja,
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathAntecedentes = Path.Combine(pathFuentes, "denobajaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathAntecedentes);
                    datos = JsonConvert.DeserializeObject<DeNoBajaViewModel>(archivo);
                    try
                    {
                        var filePath = Path.GetTempFileName();
                        ViewBag.RutaArchivo = filePath;
                        System.IO.File.WriteAllBytes(filePath, datos.DeNoBaja.Resultado.Reporte);
                        datos.DeNoBaja.Resultado.Reporte = null;
                    }
                    catch (Exception ex)
                    {
                        ViewBag.RutaArchivo = string.Empty;
                        _logger.LogError($"Error al registrar certificado de DeNoBaja {modelo.Identificacion}: {ex.Message}");
                    }
                }

                _logger.LogInformation("Fuente de De No Baja procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente De No Baja. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialDeNoBaja = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DeNoBaja);
                        if (historialDeNoBaja != null)
                        {
                            if (!historialDeNoBaja.Generado || !busquedaNuevaDeNoBaja)
                            {
                                historialDeNoBaja.IdHistorial = modelo.IdHistorial;
                                historialDeNoBaja.TipoFuente = Dominio.Tipos.Fuentes.DeNoBaja;
                                historialDeNoBaja.Generado = r_denobaja != null;
                                historialDeNoBaja.Data = r_denobaja != null ? JsonConvert.SerializeObject(r_denobaja) : null;
                                historialDeNoBaja.Cache = cacheDeNoBaja;
                                historialDeNoBaja.FechaRegistro = DateTime.Now;
                                historialDeNoBaja.Reintento = true;
                                historialDeNoBaja.DataError = resultadoDeNoBaja != null ? resultadoDeNoBaja.Error : null;
                                historialDeNoBaja.FuenteActiva = resultadoDeNoBaja != null ? resultadoDeNoBaja.FuenteActiva : null;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialDeNoBaja);
                                _logger.LogInformation("Historial de la Fuente De No Baja actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.DeNoBaja,
                                Generado = datos.DeNoBaja != null,
                                Data = datos.DeNoBaja != null ? JsonConvert.SerializeObject(datos.DeNoBaja) : null,
                                Cache = cacheDeNoBaja,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoDeNoBaja != null ? resultadoDeNoBaja.Error : null,
                                FuenteActiva = resultadoDeNoBaja != null ? resultadoDeNoBaja.FuenteActiva : null
                            });
                            _logger.LogInformation("Historial de la Fuente De No Baja procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteDeNoBaja", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteDeNoBaja", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePredios")]
        public async Task<IActionResult> ObtenerReportePredios(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.Resultado r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.Resultado r_prediosEmpresa = null;
                var datos = new PrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var busquedaEmpresa = false;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (historialTemp != null)
                        {
                            if ((ValidacionViewModel.ValidarCedula(historialTemp.Identificacion) || ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria)) && !string.IsNullOrEmpty(historialTemp.NombresPersona))
                                r_prediosRepresentante = await _predios.GetRespuestaAsync(historialTemp.NombresPersona);

                            if ((ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)) && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa) && historialTemp.NombresPersona != historialTemp.RazonSocialEmpresa)
                            {
                                r_prediosEmpresa = await _predios.GetRespuestaAsync(historialTemp.RazonSocialEmpresa);
                                busquedaEmpresa = true;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null && busquedaEmpresa)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresa);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipio;
                                historialPredio.Generado = r_prediosRepresentante != null;
                                historialPredio.Data = r_prediosRepresentante != null ? JsonConvert.SerializeObject(r_prediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipio,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                    historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresa;
                                    historialPredioEmpresa.Generado = r_prediosEmpresa != null;
                                    historialPredioEmpresa.Data = r_prediosEmpresa != null ? JsonConvert.SerializeObject(r_prediosEmpresa) : null;
                                    historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                    historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                    historialPredioEmpresa.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresa,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePredios", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePredios", null);
            }
        }

        [Route("ObtenerReportePrediosRepresentante")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentante(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.Resultado r_prediosRepresentante = null;
                var datos = new InformacionPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Representante identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (historialTemp != null)
                        {
                            if ((ValidacionViewModel.ValidarCedula(historialTemp.Identificacion) || ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria)) && !string.IsNullOrEmpty(historialTemp.NombresPersona))
                                r_prediosRepresentante = await _predios.GetRespuestaAsync(historialTemp.NombresPersona);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Representante con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(datosPredios);
                        }
                    }

                    datos = new InformacionPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        HistorialCabecera = historialTemp,
                        BusquedaNueva = busquedaNuevaPredios,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosViewModel>(archivo);
                    datos = new InformacionPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante
                    };
                }

                _logger.LogInformation("Fuente de Predio Representante procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Representante. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipio;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Representante actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipio,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Representante procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPredios", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPredios", null);
            }
        }

        [Route("ObtenerReportePrediosEmpresa")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresa(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.Resultado r_prediosEmpresa = null;
                var datos = new InformacionPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Empresa identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (historialTemp != null)
                        {
                            if ((ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)) && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa) && historialTemp.NombresPersona != historialTemp.RazonSocialEmpresa)
                                r_prediosEmpresa = await _predios.GetRespuestaAsync(historialTemp.RazonSocialEmpresa);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Empresa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        HistorialCabecera = historialTemp,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosViewModel>(archivo);
                    datos = new InformacionPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa
                    };
                }

                _logger.LogInformation("Fuente de Predio Empresa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Empresa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresa);
                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresa;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresa,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPredios", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPredios", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteDetallePredios")]
        public async Task<IActionResult> ObtenerReporteDetallePredios(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                DetallePrediosViewModel resultado = null;
                var busquedaNuevaDetallePredios = false;
                var cacheDetallePredios = false;
                var rutaArchivo = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Detalle de Predios identificación: {modelo.Identificacion}");
                        var detalleHistorialPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio, null, i => i.Include(m => m.Historial), true);
                        if (detalleHistorialPredios != null && !string.IsNullOrEmpty(detalleHistorialPredios.Data))
                        {
                            var predios = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(detalleHistorialPredios.Data);
                            if (predios != null && predios.Detalle != null && predios.Detalle.Any())
                            {
                                resultado = new DetallePrediosViewModel();
                                var detallePredios = predios.Detalle.Where(m => m.Anio == DateTime.Now.Year && (m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("URBANO PARROQUIA"))).Select(m => m.Numero).Distinct().ToArray();
                                foreach (var item in detallePredios)
                                {
                                    var r_detallePredios = _predios.GetDetallePredioIrm(item);
                                    if (r_detallePredios != null)
                                    {
                                        if (r_detallePredios.Identificacion == detalleHistorialPredios.Historial.Identificacion || r_detallePredios.Identificacion == detalleHistorialPredios.Historial.IdentificacionSecundaria)
                                            resultado.Detalle.Add(r_detallePredios);
                                    }
                                    await Task.Delay(1000);
                                }

                                if (!resultado.Detalle.Any())
                                    resultado = null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Detalle de Predios con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (resultado == null)
                    {
                        busquedaNuevaDetallePredios = true;
                        var datosDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePredios && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetallePredios != null)
                        {
                            cacheDetallePredios = true;
                            resultado = new DetallePrediosViewModel()
                            {
                                Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm>>(datosDetallePredios)
                            };
                        }
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathDetallPredios = Path.Combine(pathFuentes, "detallePrediosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathDetallPredios);

                    resultado = new DetallePrediosViewModel()
                    {
                        Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm>>(archivo)
                    };
                }

                _logger.LogInformation("Fuente de Detalle de Predios procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Detalle de Predios. Id Historial: {modelo.IdHistorial}");

                try
                {
                    var historialDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePredios);
                    if (historialDetallePredios != null)
                    {
                        if (!historialDetallePredios.Generado || !busquedaNuevaDetallePredios)
                        {
                            historialDetallePredios.IdHistorial = modelo.IdHistorial;
                            historialDetallePredios.TipoFuente = Dominio.Tipos.Fuentes.DetallePredios;
                            historialDetallePredios.Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any();
                            historialDetallePredios.Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null;
                            historialDetallePredios.Cache = cacheDetallePredios;
                            historialDetallePredios.FechaRegistro = DateTime.Now;
                            historialDetallePredios.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialDetallePredios);
                            _logger.LogInformation("Historial de la Fuente Detalle de Predios actualizado correctamente");
                        }
                    }
                    else
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.DetallePredios,
                            Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any(),
                            Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null,
                            Cache = cacheDetallePredios,
                            FechaRegistro = DateTime.Now,
                            Reintento = false
                        });
                        _logger.LogInformation("Historial de la Fuente Detalle de Predios procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteDetallePredios", resultado);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteDetallePredios", new DetallePrediosViewModel() { });
            }
        }

        [HttpPost]
        [Route("ObtenerReporteDetallePrediosEmpresa")]
        public async Task<IActionResult> ObtenerReporteDetallePrediosEmpresa(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                DetallePrediosViewModel resultado = null;
                var busquedaNuevaDetallePrediosEmpresa = false;
                var cacheDetallePrediosEmpresa = false;
                var rutaArchivo = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Detalle de Predios Empresa identificación: {modelo.Identificacion}");
                        var detalleHistorialPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio, null, i => i.Include(m => m.Historial), true);
                        if (detalleHistorialPredios != null && !string.IsNullOrEmpty(detalleHistorialPredios.Data))
                        {
                            var predios = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(detalleHistorialPredios.Data);
                            if (predios != null && predios.Detalle != null && predios.Detalle.Any())
                            {
                                resultado = new DetallePrediosViewModel();
                                var detallePredios = predios.Detalle.Where(m => m.Anio == DateTime.Now.Year && (m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("URBANO PARROQUIA"))).Select(m => m.Numero).Distinct().ToArray();
                                foreach (var item in detallePredios)
                                {
                                    var r_detallePredios = _predios.GetDetallePredioIrm(item);
                                    if (r_detallePredios != null)
                                    {
                                        if (r_detallePredios.Identificacion == detalleHistorialPredios.Historial.Identificacion || r_detallePredios.Identificacion == detalleHistorialPredios.Historial.IdentificacionSecundaria)
                                            resultado.Detalle.Add(r_detallePredios);
                                    }
                                    await Task.Delay(1000);
                                }

                                if (!resultado.Detalle.Any())
                                    resultado = null;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Detalle de Predios Empresa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (resultado == null)
                    {
                        busquedaNuevaDetallePrediosEmpresa = true;
                        var datosDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetallePredios != null)
                        {
                            cacheDetallePrediosEmpresa = true;
                            resultado = new DetallePrediosViewModel()
                            {
                                Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm>>(datosDetallePredios)
                            };
                        }
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathDetallPredios = Path.Combine(pathFuentes, "detallePrediosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathDetallPredios);

                    resultado = new DetallePrediosViewModel()
                    {
                        Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm>>(archivo)
                    };
                }

                _logger.LogInformation("Fuente de Detalle de Predios procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Detalle de Predios Empresa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    var historialDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosEmpresa);
                    if (historialDetallePredios != null)
                    {
                        if (!historialDetallePredios.Generado || !busquedaNuevaDetallePrediosEmpresa)
                        {
                            historialDetallePredios.IdHistorial = modelo.IdHistorial;
                            historialDetallePredios.TipoFuente = Dominio.Tipos.Fuentes.DetallePrediosEmpresa;
                            historialDetallePredios.Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any();
                            historialDetallePredios.Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null;
                            historialDetallePredios.Cache = cacheDetallePrediosEmpresa;
                            historialDetallePredios.FechaRegistro = DateTime.Now;
                            historialDetallePredios.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialDetallePredios);
                            _logger.LogInformation("Historial de la Fuente Detalle de Predios Empresa actualizado correctamente");
                        }
                    }
                    else
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.DetallePrediosEmpresa,
                            Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any(),
                            Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null,
                            Cache = cacheDetallePrediosEmpresa,
                            FechaRegistro = DateTime.Now,
                            Reintento = false
                        });
                        _logger.LogInformation("Historial de la Fuente Detalle de Predios Empresa procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteDetallePredios", resultado);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteDetallePredios", new DetallePrediosViewModel() { });
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosCuenca")]
        public async Task<IActionResult> ObtenerReportePrediosCuenca(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca r_prediosEmpresa = null;
                var datos = new PrediosCuencaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cuenca identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosCuenca(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosCuenca(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosCuenca(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosCuenca(cedulaTemp);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cuenca con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCuenca && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null && busquedaEmpresa)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosCuencaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCuencaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosCuencaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Cuenca procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cuenca. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCuenca);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCuenca;
                                historialPredio.Generado = r_prediosRepresentante != null;
                                historialPredio.Data = r_prediosRepresentante != null ? JsonConvert.SerializeObject(r_prediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Cuenca actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCuenca,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Cuenca procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                    historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca;
                                    historialPredioEmpresa.Generado = r_prediosEmpresa != null;
                                    historialPredioEmpresa.Data = r_prediosEmpresa != null ? JsonConvert.SerializeObject(r_prediosEmpresa) : null;
                                    historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                    historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                    historialPredioEmpresa.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa Cuenaca actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Cuenca procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosCuenca", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosCuenca", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteCuenca")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteCuenca(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca r_prediosRepresentante = null;
                var datos = new InformacionCuencaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cuenca identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosCuenca(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosCuenca(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosCuenca(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cuenca con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCuenca && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca>(datosPredios);
                        }
                    }

                    datos = new InformacionCuencaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1

                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCuencaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCuencaViewModel>(archivo);
                    datos = new InformacionCuencaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1

                    };
                }

                _logger.LogInformation("Fuente de Predio Cuenca procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cuenca. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCuenca);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCuenca;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Cuenca actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCuenca,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Cuenca procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCuenca", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCuenca", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaCuenca")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaCuenca(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca r_prediosEmpresa = null;
                var datos = new InformacionCuencaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cuenca identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosCuenca(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cuenca con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionCuencaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCuencaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCuencaViewModel>(archivo);
                    datos = new InformacionCuencaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Cuenca procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cuenca. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Cuenca actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Cuenca procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCuenca", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCuenca", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosSantoDomingo")]
        public async Task<IActionResult> ObtenerReportePrediosSantoDomingo(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo r_prediosEmpresa = null;
                var datos = new PrediosSantoDomingoViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Santo Domingo Cuenca identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosSantoDomingo(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosSantoDomingo(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosSantoDomingo(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosSantoDomingo(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Santo Domingo con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null || (r_prediosRepresentante != null && r_prediosRepresentante.Detalle != null && !r_prediosRepresentante.Detalle.Any()))
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo>(datosPredios);
                        }
                    }

                    if ((r_prediosEmpresa == null || (r_prediosEmpresa != null && r_prediosEmpresa.Detalle != null && !r_prediosEmpresa.Detalle.Any())) && busquedaEmpresa)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosSantoDomingoViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSantoDomingoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosSantoDomingoViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Santo Domingo procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Santo Domingo. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Santo Domingo actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Santo Domingo procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                    historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo;
                                    historialPredioEmpresa.Generado = r_prediosEmpresa != null;
                                    historialPredioEmpresa.Data = r_prediosEmpresa != null ? JsonConvert.SerializeObject(r_prediosEmpresa) : null;
                                    historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                    historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                    historialPredioEmpresa.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosSantoDomingo", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosSantoDomingo", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteSantoDomingo")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteSantoDomingo(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo r_prediosRepresentante = null;
                var datos = new InformacionSantoDomingoPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Santo Domingo identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosSantoDomingo(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosSantoDomingo(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosSantoDomingo(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Santo Domingo con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null || (r_prediosRepresentante != null && r_prediosRepresentante.Detalle != null && !r_prediosRepresentante.Detalle.Any()))
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo>(datosPredios);
                        }
                    }

                    datos = new InformacionSantoDomingoPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSantoDomingoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSantoDomingoViewModel>(archivo);
                    datos = new InformacionSantoDomingoPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Santo Domingo procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Santo Domingo. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Santo Domingo actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Santo Domingo procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantoDomingo", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantoDomingo", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaSantoDomingo")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaSantoDomingo(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo r_prediosEmpresa = null;
                var datos = new InformacionSantoDomingoPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Santo Domingo identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosSantoDomingo(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Santo Domingo con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null || (r_prediosEmpresa != null && r_prediosEmpresa.Detalle != null && !r_prediosEmpresa.Detalle.Any()))
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionSantoDomingoPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSantoDomingoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSantoDomingoViewModel>(archivo);
                    datos = new InformacionSantoDomingoPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Santo Domingo procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Santo Domingo. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Santo Domingo actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Santo Domingo procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantoDomingo", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantoDomingo", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRuminahui")]
        public async Task<IActionResult> ObtenerReportePrediosRuminahui(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui r_prediosEmpresa = null;
                var datos = new PrediosRuminahuiViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Rumiñahui Cuenca identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosRuminahui(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosRuminahui(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosRuminahui(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosRuminahui(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Rumiñahui con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null || (r_prediosRepresentante != null && r_prediosRepresentante.Detalle != null && !r_prediosRepresentante.Detalle.Any()))
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioRuminahui && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui>(datosPredios);
                        }
                    }

                    if ((r_prediosEmpresa == null || (r_prediosEmpresa != null && r_prediosEmpresa.Detalle != null && !r_prediosEmpresa.Detalle.Any())) && busquedaEmpresa)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosRuminahuiViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosRuminahuiDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosRuminahuiViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Rumiñahui procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Rumiñahui. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioRuminahui);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioRuminahui;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Rumiñahui actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioRuminahui,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Rumiñahui procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                    historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui;
                                    historialPredioEmpresa.Generado = r_prediosEmpresa != null;
                                    historialPredioEmpresa.Data = r_prediosEmpresa != null ? JsonConvert.SerializeObject(r_prediosEmpresa) : null;
                                    historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                    historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                    historialPredioEmpresa.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosRuminahui", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosRuminahui", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteRuminahui")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteRuminahui(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui r_prediosRepresentante = null;
                var datos = new InformacionRuminahuiPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Rumiñahui identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosRuminahui(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosRuminahui(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosRuminahui(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Rumiñahui con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null || (r_prediosRepresentante != null && r_prediosRepresentante.Detalle != null && !r_prediosRepresentante.Detalle.Any()))
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioRuminahui && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui>(datosPredios);
                        }
                    }

                    datos = new InformacionRuminahuiPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosRuminahuiDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosRuminahuiViewModel>(archivo);
                    datos = new InformacionRuminahuiPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Rumiñahui procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Rumiñahui. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioRuminahui);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioRuminahui;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Rumiñahui actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioRuminahui,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Rumiñahui procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosRuminahui", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosRuminahui", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaRuminahui")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaRuminahui(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui r_prediosEmpresa = null;
                var datos = new InformacionRuminahuiPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Rumiñahui identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosRuminahui(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Rumiñahui con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null || (r_prediosEmpresa != null && r_prediosEmpresa.Detalle != null && !r_prediosEmpresa.Detalle.Any()))
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionRuminahuiPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosRuminahuiDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosRuminahuiViewModel>(archivo);
                    datos = new InformacionRuminahuiPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Rumiñahui procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Rumiñahui. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Rumiñahui actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Rumiñahui procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosRuminahui", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosRuminahui", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosQuininde")]
        public async Task<IActionResult> ObtenerReportePrediosQuininde(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde r_prediosEmpresa = null;
                var datos = new PrediosQuinindeViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Quinindé Cuenca identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosQuininde(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosQuininde(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosQuininde(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosQuininde(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Quinindé con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioQuininde && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosQuinindeViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosQuinindeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosQuinindeViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Quinindé procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Quinindé. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioQuininde);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioQuininde;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Quinindé actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioQuininde,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Quinindé procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosQuininde", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosQuininde", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteQuininde")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteQuininde(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde r_prediosRepresentante = null;
                var datos = new InformacionQuinindePrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Quinindé identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosQuininde(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosQuininde(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosQuininde(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Quinindé con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioQuininde && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde>(datosPredios);
                        }
                    }

                    datos = new InformacionQuinindePrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosQuinindeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosQuinindeViewModel>(archivo);
                    datos = new InformacionQuinindePrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Quinindé procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Quinindé. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioQuininde);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioQuininde;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Quinindé actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioQuininde,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Quinindé procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosQuininde", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosQuininde", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaQuininde")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaQuininde(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde r_prediosEmpresa = null;
                var datos = new InformacionQuinindePrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Quinindé identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosQuininde(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Quinindé con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionQuinindePrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosQuinindeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosQuinindeViewModel>(archivo);
                    datos = new InformacionQuinindePrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Quinindé procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Quinindé. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Quinindé actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Quinindé procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosQuininde", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosQuininde", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosLatacunga")]
        public async Task<IActionResult> ObtenerReportePrediosLatacunga(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga r_prediosEmpresa = null;
                var datos = new PrediosLatacungaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Latacunga identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosLatacunga(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosLatacunga(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosLatacunga(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosLatacunga(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Latacunga con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLatacunga && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosLatacungaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLatacungaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosLatacungaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Latacunga procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Latacunga. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLatacunga);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLatacunga;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Latacunga actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLatacunga,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Latacunga procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosLatacunga", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosLatacunga", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteLatacunga")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteLatacunga(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga r_prediosRepresentante = null;
                var datos = new InformacionLatacungaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Latacunga identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosLatacunga(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosLatacunga(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosLatacunga(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Latacunga con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLatacunga && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga>(datosPredios);
                        }
                    }

                    datos = new InformacionLatacungaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLatacungaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosLatacungaViewModel>(archivo);
                    datos = new InformacionLatacungaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Latacunga procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Latacunga. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLatacunga);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLatacunga;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Latacunga actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLatacunga,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Latacunga procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLatacunga", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLatacunga", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaLatacunga")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaLatacunga(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga r_prediosEmpresa = null;
                var datos = new InformacionLatacungaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Latacunga identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosLatacunga(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Latacunga con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionLatacungaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLatacungaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosLatacungaViewModel>(archivo);
                    datos = new InformacionLatacungaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Latacunga procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Latacunga. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Latacunga actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Latacunga procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLatacunga", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLatacunga", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosManta")]
        public async Task<IActionResult> ObtenerReportePrediosManta(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosManta r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosManta r_prediosEmpresa = null;
                var datos = new PrediosMantaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Manta identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosManta(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosManta(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosManta(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosManta(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Latacunga con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioManta && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosManta>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosManta>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosMantaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMantaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosMantaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Manta procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Manta. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioManta);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioManta;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Manta actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioManta,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Manta procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosManta", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosManta", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteManta")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteManta(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosManta r_prediosRepresentante = null;
                var datos = new InformacionMantaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Manta identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosManta(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosManta(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosManta(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Manta con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioManta && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosManta>(datosPredios);
                        }
                    }

                    datos = new InformacionMantaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMantaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosMantaViewModel>(archivo);
                    datos = new InformacionMantaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Manta procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Manta. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioManta);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioManta;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Manta actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioManta,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Manta procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosManta", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosManta", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaManta")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaManta(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosManta r_prediosEmpresa = null;
                var datos = new InformacionMantaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Manta identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosManta(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Manta con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosManta>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionMantaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMantaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosMantaViewModel>(archivo);
                    datos = new InformacionMantaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Manta procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Manta. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Manta actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Manta procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosManta", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosManta", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosAmbato")]
        public async Task<IActionResult> ObtenerReportePrediosAmbato(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato r_prediosEmpresa = null;
                var datos = new PrediosAmbatoViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                var servidor = string.Empty;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Ambato identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, i => i.Include(m => m.Usuario).ThenInclude(m => m.Empresa), true);
                        servidor = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;


                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosAmbato(modelo.Identificacion, servidor);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosAmbato(modelo.Identificacion, servidor);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosAmbato(historialTemp.IdentificacionSecundaria.Trim(), servidor);

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosAmbato(cedulaTemp, servidor);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Latacunga con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAmbato && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosAmbatoViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosAmbatoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosAmbatoViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Ambato procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Ambato. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAmbato);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAmbato;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Ambato actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAmbato,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Ambato procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosAmbato", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosAmbato", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteAmbato")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteAmbato(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato r_prediosRepresentante = null;
                var datos = new InformacionAmbatoPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var servidor = string.Empty;

                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Ambato identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, i => i.Include(m => m.Usuario).ThenInclude(m => m.Empresa), true);
                        servidor = !string.IsNullOrWhiteSpace(historialTemp.Usuario.Empresa.DireccionIp) ? historialTemp.Usuario.Empresa.DireccionIp : null;

                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosAmbato(modelo.Identificacion, servidor);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosAmbato(historialTemp.IdentificacionSecundaria.Trim(), servidor);
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosAmbato(cedulaTemp, servidor);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Ambato con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAmbato && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato>(datosPredios);
                        }
                    }

                    datos = new InformacionAmbatoPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosAmbatoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosAmbatoViewModel>(archivo);
                    datos = new InformacionAmbatoPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Ambato procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Ambato. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAmbato);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAmbato;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Ambato actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAmbato,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Ambato procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAmbato", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAmbato", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaAmbato")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaAmbato(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato r_prediosEmpresa = null;
                var datos = new InformacionAmbatoPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Ambato identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosAmbato(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Ambato con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionAmbatoPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosAmbatoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosAmbatoViewModel>(archivo);
                    datos = new InformacionAmbatoPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Ambato procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Ambato. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Ambato actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Ambato procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAmbato", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAmbato", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosIbarra")]
        public async Task<IActionResult> ObtenerReportePrediosIbarra(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra r_prediosEmpresa = null;
                var datos = new PrediosIbarraViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Ibarra identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosIbarra(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosIbarra(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosIbarra(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosIbarra(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Latacunga con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioIbarra && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosIbarraViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosIbarraDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosIbarraViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Ibarra procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Ibarra. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioIbarra);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioIbarra;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Ibarra actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioIbarra,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Ibarra procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosIbarra", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosIbarra", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteIbarra")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteIbarra(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra r_prediosRepresentante = null;
                var datos = new InformacionIbarraPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Ibarra identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosIbarra(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosIbarra(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosIbarra(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Ibarra con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioIbarra && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra>(datosPredios);
                        }
                    }

                    datos = new InformacionIbarraPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosIbarraDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosIbarraViewModel>(archivo);
                    datos = new InformacionIbarraPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Ibarra procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Ibarra. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioIbarra);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioIbarra;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Ibarra actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioIbarra,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Ibarra procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosIbarra", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosIbarra", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaIbarra")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaIbarra(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra r_prediosEmpresa = null;
                var datos = new InformacionIbarraPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Ibarra identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosIbarra(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Ibarra con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionIbarraPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosIbarraDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosIbarraViewModel>(archivo);
                    datos = new InformacionIbarraPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Ibarra procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Ibarra. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Ibarra actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Ibarra procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosIbarra", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosIbarra", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosSanCristobal")]
        public async Task<IActionResult> ObtenerReportePrediosSanCristobal(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal r_prediosEmpresa = null;
                var datos = new PrediosSanCristobalViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente San Cristobal identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosSanCristobal(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosSanCristobal(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosSanCristobal(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosSanCristobal(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios San Cristobal con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosSanCristobalViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSanCristobalDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosSanCristobalViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio San Cristobal procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio San Cristobal. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio San Cristobal actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio San Cristobal procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosSanCristobal", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosSanCristobal", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteSanCristobal")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteSanCristobal(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal r_prediosRepresentante = null;
                var datos = new InformacionSanCristobalPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios San Cristobal identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosSanCristobal(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosSanCristobal(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosSanCristobal(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios San Cristobal con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal>(datosPredios);
                        }
                    }

                    datos = new InformacionSanCristobalPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSanCristobalDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSanCristobalViewModel>(archivo);
                    datos = new InformacionSanCristobalPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio San Cristobal procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio San Cristobal. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio San Cristobal actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio San Cristobal procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSanCristobal", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSanCristobal", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaSanCristobal")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaSanCristobal(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal r_prediosEmpresa = null;
                var datos = new InformacionSanCristobalPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios San Cristobal identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosSanCristobal(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios San Cristobal con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionSanCristobalPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSanCristobalDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSanCristobalViewModel>(archivo);
                    datos = new InformacionSanCristobalPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio San Cristobal procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio San Cristobal. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa San Cristobal actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa San Cristobal procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSanCristobal", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSanCristobal", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosDuran")]
        public async Task<IActionResult> ObtenerReportePrediosDuran(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosDuran r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosDuran r_prediosEmpresa = null;
                var datos = new PrediosDuranViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Duran identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosDuran(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosDuran(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosDuran(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosDuran(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Durán con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDuran && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDuran>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDuran>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosDuranViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDuranDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosDuranViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Durán procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Durán. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDuran);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDuran;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Durán actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDuran,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Durán procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosDuran", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosDuran", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteDuran")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteDuran(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosDuran r_prediosRepresentante = null;
                var datos = new InformacionDuranPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Durán identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosDuran(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosDuran(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosDuran(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Durán con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDuran && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDuran>(datosPredios);
                        }
                    }

                    datos = new InformacionDuranPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDuranDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosDuranViewModel>(archivo);
                    datos = new InformacionDuranPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Durán procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Durán. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDuran);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDuran;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Durán actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDuran,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Durán procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDuran", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDuran", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaDuran")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaDuran(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosDuran r_prediosEmpresa = null;
                var datos = new InformacionDuranPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Durán identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosDuran(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Durán con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDuran>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionDuranPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDuranDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosDuranViewModel>(archivo);
                    datos = new InformacionDuranPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Durán procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Durán. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Durán actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Durán procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDuran", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDuran", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosLagoAgrio")]
        public async Task<IActionResult> ObtenerReportePrediosLagoAgrio(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio r_prediosEmpresa = null;
                var datos = new PrediosLagoAgrioViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Lago Agrio identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosLagoAgrio(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosLagoAgrio(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosLagoAgrio(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosLagoAgrio(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Lago Agrio con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosLagoAgrioViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLagoAgrioDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosLagoAgrioViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Lago Agrio procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Lago Agrio. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Lago Agrio actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Lago Agrio procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosLagoAgrio", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosLagoAgrio", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteLagoAgrio")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteLagoAgrio(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio r_prediosRepresentante = null;
                var datos = new InformacionLagoAgrioPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Lago Agrio identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosLagoAgrio(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosLagoAgrio(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosLagoAgrio(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Lago Agrio con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio>(datosPredios);
                        }
                    }

                    datos = new InformacionLagoAgrioPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLagoAgrioDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosLagoAgrioViewModel>(archivo);
                    datos = new InformacionLagoAgrioPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Lago Agrio procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Lago Agrio. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Lago Agrio actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Lago Agrio procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLagoAgrio", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLagoAgrio", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaLagoAgrio")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaLagoAgrio(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio r_prediosEmpresa = null;
                var datos = new InformacionLagoAgrioPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Lago Agrio identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosLagoAgrio(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Lago Agrio con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionLagoAgrioPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLagoAgrioDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosLagoAgrioViewModel>(archivo);
                    datos = new InformacionLagoAgrioPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Lago Agrio procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Lago Agrio. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Lago Agrio actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Lago Agrio procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLagoAgrio", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLagoAgrio", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosSantaRosa")]
        public async Task<IActionResult> ObtenerReportePrediosSantaRosa(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa r_prediosEmpresa = null;
                var datos = new PrediosSantaRosaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Santa Rosa identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosSantaRosa(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosSantaRosa(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosSantaRosa(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosSantaRosa(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Santa Rosa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosSantaRosaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSantaRosaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosSantaRosaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Santa Rosa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Santa Rosa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Santa Rosa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Santa Rosa procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosSantaRosa", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosSantaRosa", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteSantaRosa")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteSantaRosa(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa r_prediosRepresentante = null;
                var datos = new InformacionSantaRosaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Santa Rosa identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosSantaRosa(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosSantaRosa(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosSantaRosa(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Santa Rosa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa>(datosPredios);
                        }
                    }

                    datos = new InformacionSantaRosaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSantaRosaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSantaRosaViewModel>(archivo);
                    datos = new InformacionSantaRosaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Santa Rosa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Santa Rosa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Santa Rosa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Santa Rosa procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantaRosa", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantaRosa", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaSantaRosa")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaSantaRosa(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa r_prediosEmpresa = null;
                var datos = new InformacionSantaRosaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Santa Rosa identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosSantaRosa(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Santa Rosa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionSantaRosaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSantaRosaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSantaRosaViewModel>(archivo);
                    datos = new InformacionSantaRosaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Santa Rosa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Santa Rosa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Santa Rosa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Santa Rosa procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantaRosa", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSantaRosa", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosSucua")]
        public async Task<IActionResult> ObtenerReportePrediosSucua(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSucua r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSucua r_prediosEmpresa = null;
                var datos = new PrediosSucuaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Sucúa identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosSucua(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosSucua(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosSucua(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosSucua(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Sucúa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSucua && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSucua>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSucua>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosSucuaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSucuaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosSucuaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Sucúa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Sucúa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSucua);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSucua;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Sucúa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSucua,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Sucúa procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosSucua", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosSucua", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteSucua")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteSucua(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSucua r_prediosRepresentante = null;
                var datos = new InformacionSucuaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Sucúa identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosSucua(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosSucua(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosSucua(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Sucúa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSucua && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSucua>(datosPredios);
                        }
                    }

                    datos = new InformacionSucuaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSucuaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSucuaViewModel>(archivo);
                    datos = new InformacionSucuaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Sucúa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Sucúa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSucua);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSucua;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Sucúa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSucua,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Sucúa procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSucua", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSucua", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaSucua")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaSucua(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSucua r_prediosEmpresa = null;
                var datos = new InformacionSucuaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Sucúa identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosSucua(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Sucúa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSucua>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionSucuaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSucuaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSucuaViewModel>(archivo);
                    datos = new InformacionSucuaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Sucúa procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Sucúa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Sucúa actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Sucúa procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSucua", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSucua", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosSigSig")]
        public async Task<IActionResult> ObtenerReportePrediosSigSig(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig r_prediosEmpresa = null;
                var datos = new PrediosSigSigViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Sígsig identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosSigSig(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosSigSig(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosSigSig(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosSigSig(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Sígsig con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSigSig && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosSigSigViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSigSigDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosSigSigViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Sígsig procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Sígsig. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSigSig);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSigSig;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Sígsig actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSigSig,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Sígsig procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosSigSig", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosSigSig", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteSigSig")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteSigSig(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig r_prediosRepresentante = null;
                var datos = new InformacionSigSigPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Sígsig identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosSigSig(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosSigSig(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosSigSig(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Sígsig con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSigSig && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig>(datosPredios);
                        }
                    }

                    datos = new InformacionSigSigPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSigSigDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSigSigViewModel>(archivo);
                    datos = new InformacionSigSigPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Sígsig procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Sígsig. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSigSig);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSigSig;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Sígsig actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSigSig,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Sígsig procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSigSig", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSigSig", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaSigSig")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaSigSig(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig r_prediosEmpresa = null;
                var datos = new InformacionSigSigPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Sígsig identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosSigSig(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Sígsig con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionSigSigPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSigSigDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSigSigViewModel>(archivo);
                    datos = new InformacionSigSigPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Sígsig procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Sígsig. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Sígsig actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Sígsig procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSigSig", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSigSig", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosMejia")]
        public async Task<IActionResult> ObtenerReportePrediosMejia(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosMejia r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosMejia r_prediosEmpresa = null;
                var datos = new PrediosMejiaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Mejia identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosMejia(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosMejia(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosMejia(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosMejia(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Mejia con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMejia && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMejia>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMejia>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosMejiaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMejiaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosMejiaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Mejia procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Mejia. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMejia);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMejia;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Mejia actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMejia,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Mejia procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosMejia", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosMejia", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteMejia")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteMejia(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosMejia r_prediosRepresentante = null;
                var datos = new InformacionMejiaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Mejia identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosMejia(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosMejia(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosMejia(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Mejia con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMejia && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMejia>(datosPredios);
                        }
                    }

                    datos = new InformacionMejiaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMejiaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosMejiaViewModel>(archivo);
                    datos = new InformacionMejiaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Mejia procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Mejia. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMejia);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMejia;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Mejia actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMejia,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Mejia procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMejia", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMejia", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaMejia")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaMejia(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosMejia r_prediosEmpresa = null;
                var datos = new InformacionMejiaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Mejia identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosMejia(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Mejia con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMejia>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionMejiaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMejiaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosMejiaViewModel>(archivo);
                    datos = new InformacionMejiaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Mejia procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Mejia. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Mejia actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Mejia procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMejia", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMejia", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosMorona")]
        public async Task<IActionResult> ObtenerReportePrediosMorona(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosMorona r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosMorona r_prediosEmpresa = null;
                var datos = new PrediosMoronaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Morona identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosMorona(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosMorona(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosMorona(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosMorona(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Morona con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMorona && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMorona>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMorona>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosMoronaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMoronaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosMoronaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Morona procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Morona. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMorona);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMorona;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Morona actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMorona,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Morona procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosMorona", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosMorona", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteMorona")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteMorona(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosMorona r_prediosRepresentante = null;
                var datos = new InformacionMoronaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Morona identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosMorona(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosMorona(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosMorona(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Morona con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMorona && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMorona>(datosPredios);
                        }
                    }

                    datos = new InformacionMoronaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMoronaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosMoronaViewModel>(archivo);
                    datos = new InformacionMoronaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Morona procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Morona. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMorona);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMorona;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Morona actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioMorona,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Morona procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMorona", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMorona", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaMorona")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaMorona(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosMorona r_prediosEmpresa = null;
                var datos = new InformacionMoronaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Morona identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosMorona(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Morona con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMorona>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionMoronaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosMoronaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosMoronaViewModel>(archivo);
                    datos = new InformacionMoronaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Morona procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Morona. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Morona actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Morona procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMorona", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosMorona", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosTena")]
        public async Task<IActionResult> ObtenerReportePrediosTena(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosTena r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosTena r_prediosEmpresa = null;
                var datos = new PrediosTenaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Tena identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosTena(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosTena(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosTena(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosTena(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Tena con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioTena && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosTena>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosTena>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosTenaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosTenaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosTenaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Tena procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Tena. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioTena);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioTena;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Tena actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioTena,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Tena procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosTena", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosTena", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteTena")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteTena(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosTena r_prediosRepresentante = null;
                var datos = new InformacionTenaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Tena identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosTena(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosTena(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosTena(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Tena con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioTena && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosTena>(datosPredios);
                        }
                    }

                    datos = new InformacionTenaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosTenaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosTenaViewModel>(archivo);
                    datos = new InformacionTenaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Tena procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Tena. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioTena);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioTena;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Tena actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioTena,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Tena procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosTena", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosTena", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaTena")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaTena(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosTena r_prediosEmpresa = null;
                var datos = new InformacionTenaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Tena identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosTena(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Tena con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosTena>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionTenaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosTenaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosTenaViewModel>(archivo);
                    datos = new InformacionTenaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Tena procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Tena. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Tena actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Tena procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosTena", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosTena", null);
            }
        }
        [HttpPost]
        [Route("ObtenerReportePrediosCatamayo")]
        public async Task<IActionResult> ObtenerReportePrediosCatamayo(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo r_prediosEmpresa = null;
                var datos = new PrediosCatamayoViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Catamayo identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = await _predios.GetPrediosCatamayo(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = await _predios.GetPrediosCatamayo(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = await _predios.GetPrediosCatamayo(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = await _predios.GetPrediosCatamayo(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Catamayo con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCatamayo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosCatamayoViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCatamayoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosCatamayoViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Catamayo procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Catamayo. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCatamayo);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCatamayo;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Catamayo actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCatamayo,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Catamayo procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosCatamayo", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosCatamayo", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteCatamayo")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteCatamayo(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo r_prediosRepresentante = null;
                var datos = new InformacionCatamayoPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Catamayo identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = await _predios.GetPrediosCatamayo(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = await _predios.GetPrediosCatamayo(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = await _predios.GetPrediosCatamayo(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Catamayo con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCatamayo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo>(datosPredios);
                        }
                    }

                    datos = new InformacionCatamayoPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCatamayoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCatamayoViewModel>(archivo);
                    datos = new InformacionCatamayoPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Catamayo procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Catamayo. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCatamayo);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCatamayo;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Catamayo actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCatamayo,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Catamayo procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCatamayo", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCatamayo", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaCatamayo")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaCatamayo(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo r_prediosEmpresa = null;
                var datos = new InformacionCatamayoPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Catamayo identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = await _predios.GetPrediosCatamayo(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Catamayo con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionCatamayoPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCatamayoDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCatamayoViewModel>(archivo);
                    datos = new InformacionCatamayoPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Catamayo procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Catamayo. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Catamayo actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Catamayo procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCatamayo", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCatamayo", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosLoja")]
        public async Task<IActionResult> ObtenerReportePrediosLoja(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja r_prediosEmpresa = null;
                var datos = new PrediosLojaViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Loja identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = await _predios.GetRespuestaAsyncLoja(modelo.Identificacion, false, true);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = await _predios.GetRespuestaAsyncLoja(modelo.Identificacion, false, true);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = await _predios.GetRespuestaAsyncLoja(historialTemp.IdentificacionSecundaria.Trim(), false, true);

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = await _predios.GetRespuestaAsyncLoja(cedulaTemp, false, true);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Loja con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLoja>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLoja>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosLojaViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                    };
                    var datosJson = JsonConvert.SerializeObject(datos);
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLojaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosLojaViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Loja procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Loja. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLoja;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Loja actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLoja,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Loja procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosLoja", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosLoja", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteLoja")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteLoja(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja r_prediosRepresentante = null;
                var datos = new InformacionLojaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Loja identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = await _predios.GetRespuestaAsyncLoja(modelo.Identificacion, false, true);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = await _predios.GetRespuestaAsyncLoja(historialTemp.IdentificacionSecundaria.Trim(), false, true);
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = await _predios.GetRespuestaAsyncLoja(cedulaTemp, false, true);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Loja con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLoja>(datosPredios);
                        }
                    }

                    datos = new InformacionLojaPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLojaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosLojaViewModel>(archivo);
                    datos = new InformacionLojaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Loja procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Loja. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLoja;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Loja actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioLoja,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Loja procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLoja", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLoja", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaLoja")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaLoja(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja r_prediosEmpresa = null;
                var datos = new InformacionLojaPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Loja identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = await _predios.GetRespuestaAsyncLoja(modelo.Identificacion, false, true);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Loja con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLoja>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionLojaPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosLojaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosLojaViewModel>(archivo);
                    datos = new InformacionLojaPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Loja procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Loja. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Loja actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Loja procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLoja", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosLoja", null);
            }
        }
        [HttpPost]
        [Route("ObtenerReporteDetallePrediosLoja")]
        public async Task<IActionResult> ObtenerReporteDetallePrediosLoja(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                DetallePrediosLojaViewModel resultado = null;
                var busquedaNuevaDetallePredios = false;
                var cacheDetallePredios = false;
                var rutaArchivo = string.Empty;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja datos = null;
                var identificacionBuscar = string.Empty;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Detalle de Predios identificación: {modelo.Identificacion}");
                        var detalleHistorialPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja, null, i => i.Include(m => m.Historial), true);
                        if (detalleHistorialPredios != null && detalleHistorialPredios.Historial != null)
                        {
                            if (!string.IsNullOrEmpty(detalleHistorialPredios.Historial.Identificacion))
                                identificacionBuscar = detalleHistorialPredios.Historial.Identificacion;
                            else if (!string.IsNullOrEmpty(detalleHistorialPredios.Historial.IdentificacionSecundaria))
                                identificacionBuscar = detalleHistorialPredios.Historial.IdentificacionSecundaria;
                        }
                        if (string.IsNullOrEmpty(identificacionBuscar)) identificacionBuscar = modelo.Identificacion;
                        resultado = new DetallePrediosLojaViewModel();
                        if (!string.IsNullOrEmpty(identificacionBuscar))
                        {
                            datos = await _predios.GetRespuestaAsyncLoja(identificacionBuscar, true, false);
                            if (datos != null && datos.DetallePropiedades != null && datos.DetallePropiedades.Any())
                            {
                                resultado = new DetallePrediosLojaViewModel()
                                {
                                    Detalle = datos.DetallePropiedades
                                };
                            }
                            if (!resultado.Detalle.Any())
                                resultado = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Detalle de Predios Loja con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (resultado == null)
                    {
                        busquedaNuevaDetallePredios = true;
                        var datosDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosLoja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetallePredios != null)
                        {
                            cacheDetallePredios = true;
                            resultado = new DetallePrediosLojaViewModel()
                            {
                                Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja>>(datosDetallePredios)
                            };
                        }
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathDetallPredios = Path.Combine(pathFuentes, "detallePrediosLojaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathDetallPredios);

                    resultado = new DetallePrediosLojaViewModel()
                    {
                        Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja>>(archivo)
                    };
                }

                _logger.LogInformation("Fuente de Detalle de Predios procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Detalle de Predios. Id Historial: {modelo.IdHistorial}");

                try
                {
                    var historialDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosLoja);
                    if (historialDetallePredios != null)
                    {
                        if (!historialDetallePredios.Generado || !busquedaNuevaDetallePredios)
                        {
                            historialDetallePredios.IdHistorial = modelo.IdHistorial;
                            historialDetallePredios.TipoFuente = Dominio.Tipos.Fuentes.DetallePrediosLoja;
                            historialDetallePredios.Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any();
                            historialDetallePredios.Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null;
                            historialDetallePredios.Cache = cacheDetallePredios;
                            historialDetallePredios.FechaRegistro = DateTime.Now;
                            historialDetallePredios.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialDetallePredios);
                            _logger.LogInformation("Historial de la Fuente Detalle de Predios actualizado correctamente");
                        }
                    }
                    else
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.DetallePrediosLoja,
                            Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any(),
                            Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null,
                            Cache = cacheDetallePredios,
                            FechaRegistro = DateTime.Now,
                            Reintento = false
                        });
                        _logger.LogInformation("Historial de la Fuente Detalle de Predios procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteDetallePrediosLoja", resultado);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteDetallePrediosLoja", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteDetallePrediosEmpresaLoja")]
        public async Task<IActionResult> ObtenerReporteDetallePrediosEmpresaLoja(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja datos = null;
                modelo.Identificacion = modelo.Identificacion.Trim();
                DetallePrediosLojaViewModel resultado = null;
                var busquedaNuevaDetallePrediosEmpresa = false;
                var cacheDetallePrediosEmpresa = false;
                var rutaArchivo = string.Empty;
                var identificacionBuscar = string.Empty;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Detalle de Predios Empresa Loja identificación: {modelo.Identificacion}");
                        var detalleHistorialPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja, null, i => i.Include(m => m.Historial), true);
                        if (detalleHistorialPredios != null && detalleHistorialPredios.Historial != null)
                        {
                            if (!string.IsNullOrEmpty(detalleHistorialPredios.Historial.Identificacion))
                                identificacionBuscar = detalleHistorialPredios.Historial.Identificacion;
                            else if (!string.IsNullOrEmpty(detalleHistorialPredios.Historial.IdentificacionSecundaria))
                                identificacionBuscar = detalleHistorialPredios.Historial.IdentificacionSecundaria;
                        }
                        if (string.IsNullOrEmpty(identificacionBuscar)) identificacionBuscar = modelo.Identificacion;
                        resultado = new DetallePrediosLojaViewModel();
                        if (!string.IsNullOrEmpty(identificacionBuscar))
                        {
                            datos = await _predios.GetRespuestaAsyncLoja(identificacionBuscar, true, false);
                            if (datos != null && datos.DetallePropiedades != null && datos.DetallePropiedades.Any())
                            {
                                resultado = new DetallePrediosLojaViewModel()
                                {
                                    Detalle = datos.DetallePropiedades
                                };
                            }
                            if (!resultado.Detalle.Any())
                                resultado = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Detalle de Predios Loja Empresa con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (resultado == null)
                    {
                        busquedaNuevaDetallePrediosEmpresa = true;
                        var datosDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosEmpresaLoja && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetallePredios != null)
                        {
                            cacheDetallePrediosEmpresa = true;
                            resultado = new DetallePrediosLojaViewModel()
                            {
                                Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja>>(datosDetallePredios)
                            };
                        }
                    }
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathDetallPredios = Path.Combine(pathFuentes, "detallePrediosLojaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathDetallPredios);

                    resultado = new DetallePrediosLojaViewModel()
                    {
                        Detalle = JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja>>(archivo)
                    };
                }

                _logger.LogInformation("Fuente de Detalle de Predios procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Detalle de Predios Empresa. Id Historial: {modelo.IdHistorial}");

                try
                {
                    var historialDetallePredios = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosEmpresaLoja);
                    if (historialDetallePredios != null)
                    {
                        if (!historialDetallePredios.Generado || !busquedaNuevaDetallePrediosEmpresa)
                        {
                            historialDetallePredios.IdHistorial = modelo.IdHistorial;
                            historialDetallePredios.TipoFuente = Dominio.Tipos.Fuentes.DetallePrediosEmpresaLoja;
                            historialDetallePredios.Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any();
                            historialDetallePredios.Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null;
                            historialDetallePredios.Cache = cacheDetallePrediosEmpresa;
                            historialDetallePredios.FechaRegistro = DateTime.Now;
                            historialDetallePredios.Reintento = true;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialDetallePredios);
                            _logger.LogInformation("Historial de la Fuente Detalle de Predios Empresa actualizado correctamente");
                        }
                    }
                    else
                    {
                        await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                        {
                            IdHistorial = modelo.IdHistorial,
                            TipoFuente = Dominio.Tipos.Fuentes.DetallePrediosEmpresaLoja,
                            Generado = resultado != null && resultado.Detalle != null && resultado.Detalle.Any(),
                            Data = resultado != null && resultado.Detalle != null && resultado.Detalle.Any() ? JsonConvert.SerializeObject(resultado.Detalle) : null,
                            Cache = cacheDetallePrediosEmpresa,
                            FechaRegistro = DateTime.Now,
                            Reintento = false
                        });
                        _logger.LogInformation("Historial de la Fuente Detalle de Predios Empresa procesado correctamente");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteDetallePrediosLoja", resultado);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteDetallePrediosLoja", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosSamborondon")]
        public async Task<IActionResult> ObtenerReportePrediosSamborondon(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon r_prediosEmpresa = null;
                var datos = new PrediosSamborondonViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Samborondon identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosSamborondon(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosSamborondon(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosSamborondon(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosSamborondon(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Samborondon con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSamborondon && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosSamborondonViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSamborondonDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosSamborondonViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Samborondon procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Samborondon. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSamborondon);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSamborondon;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Samborondon actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSamborondon,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Samborondon procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosSamborondon", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosSamborondon", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteSamborondon")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteSamborondon(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon r_prediosRepresentante = null;
                var datos = new InformacionSamborondonPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Samborondon identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosSamborondon(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosSamborondon(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosSamborondon(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Samborondon con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSamborondon && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon>(datosPredios);
                        }
                    }

                    datos = new InformacionSamborondonPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSamborondonDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSamborondonViewModel>(archivo);
                    datos = new InformacionSamborondonPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Samborondon procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Samborondon. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSamborondon);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSamborondon;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Samborondon actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioSamborondon,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Samborondon procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSamborondon", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSamborondon", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaSamborondon")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaSamborondon(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon r_prediosEmpresa = null;
                var datos = new InformacionSamborondonPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Samborondon identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosSamborondon(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Samborondon con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionSamborondonPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosSamborondonDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosSamborondonViewModel>(archivo);
                    datos = new InformacionSamborondonPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Samborondon procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Samborondon. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Samborondon actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Samborondon procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSamborondon", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosSamborondon", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosDaule")]
        public async Task<IActionResult> ObtenerReportePrediosDaule(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosDaule r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosDaule r_prediosEmpresa = null;
                var datos = new PrediosDauleViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Daule identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosDaule(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosDaule(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosDaule(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosDaule(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Daule con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDaule && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDaule>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDaule>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosDauleViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDauleDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosDauleViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Daule procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Daule. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDaule);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDaule;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Daule actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDaule,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Daule procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosDaule", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosDaule", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteDaule")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteDaule(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosDaule r_prediosRepresentante = null;
                var datos = new InformacionDaulePrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Daule identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosDaule(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosDaule(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosDaule(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Daule con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDaule && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDaule>(datosPredios);
                        }
                    }

                    datos = new InformacionDaulePrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDauleDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosDauleViewModel>(archivo);
                    datos = new InformacionDaulePrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Daule procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Daule. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDaule);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDaule;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Daule actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioDaule,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Daule procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDaule", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDaule", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaDaule")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaDaule(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosDaule r_prediosEmpresa = null;
                var datos = new InformacionDaulePrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Daule identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosDaule(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Daule con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDaule>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionDaulePrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosDauleDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosDauleViewModel>(archivo);
                    datos = new InformacionDaulePrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Daule procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Daule. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Daule actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Daule procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDaule", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosDaule", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosCayambe")]
        public async Task<IActionResult> ObtenerReportePrediosCayambe(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe r_prediosEmpresa = null;
                var datos = new PrediosCayambeViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Cayambe identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosCayambe(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosCayambe(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosCayambe(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosCayambe(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cayambe con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCayambe && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosCayambeViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                    var datosJson = JsonConvert.SerializeObject(datos);
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCayambeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosCayambeViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Cayambe procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cayambe. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCayambe);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCayambe;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Cayambe actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCayambe,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Cayambe procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosCayambe", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosCayambe", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteCayambe")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteCayambe(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe r_prediosRepresentante = null;
                var datos = new InformacionCayambePrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cayambe identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosCayambe(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosCayambe(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosCayambe(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cayambe con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCayambe && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe>(datosPredios);
                        }
                    }

                    datos = new InformacionCayambePrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCayambeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCayambeViewModel>(archivo);
                    datos = new InformacionCayambePrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Cayambe procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cayambe. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCayambe);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCayambe;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Cayambe actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCayambe,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Cayambe procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCayambe", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCayambe", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaCayambe")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaCayambe(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe r_prediosEmpresa = null;
                var datos = new InformacionCayambePrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cayambe identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosCayambe(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cayambe con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionCayambePrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCayambeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCayambeViewModel>(archivo);
                    datos = new InformacionCayambePrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Cayambe procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cayambe. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Cayambe actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Cayambe procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCayambe", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCayambe", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosAzogues")]
        public async Task<IActionResult> ObtenerReportePrediosAzogues(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues r_prediosEmpresa = null;
                var datos = new PrediosAzoguesViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Azogues identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosAzogues(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosAzogues(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosAzogues(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosAzogues(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Azogues con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAzogues && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosAzoguesViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                    var datosJson = JsonConvert.SerializeObject(datos);
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosAzoguesDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosAzoguesViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Azogues procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Azogues. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAzogues);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAzogues;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Azogues actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAzogues,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Azogues procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosAzogues", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosAzogues", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteAzogues")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteAzogues(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues r_prediosRepresentante = null;
                var datos = new InformacionAzoguesPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Azogues identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosAzogues(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosAzogues(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosAzogues(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Azogues con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAzogues && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues>(datosPredios);
                        }
                    }

                    datos = new InformacionAzoguesPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosAzoguesDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosAzoguesViewModel>(archivo);
                    datos = new InformacionAzoguesPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Azogues procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Azogues. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAzogues);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAzogues;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Azogues actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioAzogues,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Azogues procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAzogues", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAzogues", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaAzogues")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaAzogues(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues r_prediosEmpresa = null;
                var datos = new InformacionAzoguesPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Azogues identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosAzogues(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Azogues con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionAzoguesPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosAzoguesDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosAzoguesViewModel>(archivo);
                    datos = new InformacionAzoguesPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Azogues procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Azogues. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Azogues actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Azogues procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAzogues", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosAzogues", null);
            }
        }

        #region PrediosEsmeraldas
        [HttpPost]
        [Route("ObtenerReportePrediosEsmeraldas")]
        public async Task<IActionResult> ObtenerReportePrediosEsmeraldas(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas r_prediosEmpresa = null;
                var datos = new PrediosEsmeraldasViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Esmeraldas identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosEsmeraldas(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosEsmeraldas(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosEsmeraldas(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosEsmeraldas(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Esmeraldas con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosEsmeraldasViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                    var datosJson = JsonConvert.SerializeObject(datos);
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosEsmeraldasDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosEsmeraldasViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Esmeraldas procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Esmeraldas. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Esmeraldas actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Esmeraldas procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosEsmeraldas", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosEsmeraldas", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteEsmeraldas")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteEsmeraldas(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas r_prediosRepresentante = null;
                var datos = new InformacionEsmeraldasPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Esmeraldas identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosEsmeraldas(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosEsmeraldas(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosEsmeraldas(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Esmeraldas con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas>(datosPredios);
                        }
                    }

                    datos = new InformacionEsmeraldasPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosEsmeraldasDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosEsmeraldasViewModel>(archivo);
                    datos = new InformacionEsmeraldasPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Esmeraldas procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Esmeraldas. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Esmeraldas actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Esmeraldas procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosEsmeraldas", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosEsmeraldas", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaEsmeraldas")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaEsmeraldas(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas r_prediosEmpresa = null;
                var datos = new InformacionEsmeraldasPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Esmeraldas identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosEsmeraldas(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Esmeraldas con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionEsmeraldasPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosEsmeraldasDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosEsmeraldasViewModel>(archivo);
                    datos = new InformacionEsmeraldasPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Esmeraldas procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Esmeraldas. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Esmeraldas actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Esmeraldas procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosEsmeraldas", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosEsmeraldas", null);
            }
        }
        #endregion PrediosEsmeraldas
        #region PrediosCotacachi
        [HttpPost]
        [Route("ObtenerReportePrediosCotacachi")]
        public async Task<IActionResult> ObtenerReportePrediosCotacachi(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi r_prediosRepresentante = null;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi r_prediosEmpresa = null;
                var datos = new PrediosCotacachiViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePredios = false;
                var cachePrediosEmpresa = false;
                var cedulaEntidades = false;
                var busquedaEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Cotacachi identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    r_prediosRepresentante = _predios.GetPrediosCotacachi(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    r_prediosEmpresa = _predios.GetPrediosCotacachi(modelo.Identificacion);
                                    busquedaEmpresa = true;
                                }

                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        r_prediosRepresentante = _predios.GetPrediosCotacachi(historialTemp.IdentificacionSecundaria.Trim());

                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        r_prediosRepresentante = _predios.GetPrediosCotacachi(cedulaTemp);
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cotacachi con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCotacachi && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi>(datosPredios);
                        }
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi>(datosPrediosEmpresa);
                        }
                    }

                    datos = new PrediosCotacachiViewModel()
                    {
                        PrediosRepresentante = r_prediosRepresentante,
                        PrediosEmpresa = r_prediosEmpresa,
                        BusquedaNuevaRepresentante = busquedaNuevaPredios,
                        BusquedaNuevaEmpresa = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp
                    };
                    var datosJson = JsonConvert.SerializeObject(datos);
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCotacachiDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    datos = JsonConvert.DeserializeObject<PrediosCotacachiViewModel>(archivo);
                    busquedaEmpresa = true;
                }

                _logger.LogInformation("Fuente de Predio Cotacachi procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cotacachi. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCotacachi);
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi);

                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCotacachi;
                                historialPredio.Generado = datos.PrediosRepresentante != null;
                                historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Cotacachi actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCotacachi,
                                Generado = datos.PrediosRepresentante != null,
                                Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Cotacachi procesado correctamente");
                        }

                        if (busquedaEmpresa)
                        {
                            if (historialPredioEmpresa != null)
                            {
                                if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                                {
                                    historialPredio.IdHistorial = modelo.IdHistorial;
                                    historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi;
                                    historialPredio.Generado = datos.PrediosRepresentante != null;
                                    historialPredio.Data = datos.PrediosRepresentante != null ? JsonConvert.SerializeObject(datos.PrediosRepresentante) : null;
                                    historialPredio.Cache = cachePredios;
                                    historialPredio.FechaRegistro = DateTime.Now;
                                    historialPredio.Reintento = true;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                    _logger.LogInformation("Historial de la Fuente Predio Empresa actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi,
                                    Generado = datos.PrediosEmpresa != null,
                                    Data = datos.PrediosEmpresa != null ? JsonConvert.SerializeObject(datos.PrediosEmpresa) : null,
                                    Cache = cachePrediosEmpresa,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false
                                });
                                _logger.LogInformation("Historial de la Fuente Predio Empresa procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuentePrediosCotacachi", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuentePrediosCotacachi", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosRepresentanteCotacachi")]
        public async Task<IActionResult> ObtenerReportePrediosRepresentanteCotacachi(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi r_prediosRepresentante = null;
                var datos = new InformacionCotacachiPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPredios = false;
                var cachePredios = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cotacachi identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                            r_prediosRepresentante = _predios.GetPrediosCotacachi(modelo.Identificacion);
                        else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                            {
                                if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                    r_prediosRepresentante = _predios.GetPrediosCotacachi(historialTemp.IdentificacionSecundaria.Trim());
                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                    r_prediosRepresentante = _predios.GetPrediosCotacachi(cedulaTemp);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cotacachi con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosRepresentante == null)
                    {
                        busquedaNuevaPredios = true;
                        var datosPredios = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCotacachi && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPredios != null)
                        {
                            cachePredios = true;
                            r_prediosRepresentante = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi>(datosPredios);
                        }
                    }

                    datos = new InformacionCotacachiPrediosViewModel()
                    {
                        Predios = r_prediosRepresentante,
                        BusquedaNueva = busquedaNuevaPredios,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 1
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCotacachiDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCotacachiViewModel>(archivo);
                    datos = new InformacionCotacachiPrediosViewModel()
                    {
                        Predios = datosCache.PrediosRepresentante,
                        BusquedaNueva = datosCache.BusquedaNuevaRepresentante,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 1
                    };
                }

                _logger.LogInformation("Fuente de Predio Cotacachi procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cotacachi. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredio = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCotacachi);
                        if (historialPredio != null)
                        {
                            if (!historialPredio.Generado || !busquedaNuevaPredios)
                            {
                                historialPredio.IdHistorial = modelo.IdHistorial;
                                historialPredio.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCotacachi;
                                historialPredio.Generado = datos.Predios != null;
                                historialPredio.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredio.Cache = cachePredios;
                                historialPredio.FechaRegistro = DateTime.Now;
                                historialPredio.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredio);
                                _logger.LogInformation("Historial de la Fuente Predio Cotacachi actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioCotacachi,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePredios,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Cotacachi procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCotacachi", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCotacachi", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReportePrediosEmpresaCotacachi")]
        public async Task<IActionResult> ObtenerReportePrediosEmpresaCotacachi(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi r_prediosEmpresa = null;
                var datos = new InformacionCotacachiPrediosViewModel();
                Historial historialTemp = null;
                var busquedaNuevaPrediosEmpresa = false;
                var cachePrediosEmpresa = false;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Predios Cotacachi identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                r_prediosEmpresa = _predios.GetPrediosCotacachi(modelo.Identificacion);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Predios Cotacachi con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_prediosEmpresa == null)
                    {
                        busquedaNuevaPrediosEmpresa = true;
                        var datosPrediosEmpresa = (await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id))).FirstOrDefault();
                        if (datosPrediosEmpresa != null)
                        {
                            cachePrediosEmpresa = true;
                            r_prediosEmpresa = JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi>(datosPrediosEmpresa);
                        }
                    }

                    datos = new InformacionCotacachiPrediosViewModel()
                    {
                        Predios = r_prediosEmpresa,
                        BusquedaNueva = busquedaNuevaPrediosEmpresa,
                        HistorialCabecera = historialTemp,
                        TipoConsulta = 2
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathPredios = Path.Combine(pathFuentes, "prediosCotacachiDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathPredios);
                    var datosCache = JsonConvert.DeserializeObject<PrediosCotacachiViewModel>(archivo);
                    datos = new InformacionCotacachiPrediosViewModel()
                    {
                        Predios = datosCache.PrediosEmpresa,
                        BusquedaNueva = datosCache.BusquedaNuevaEmpresa,
                        HistorialCabecera = datosCache.HistorialCabecera,
                        TipoConsulta = 2
                    };
                }

                _logger.LogInformation("Fuente de Predio Cotacachi procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Predio Cotacachi. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialPredioEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi);

                        if (historialPredioEmpresa != null)
                        {
                            if (!historialPredioEmpresa.Generado || !busquedaNuevaPrediosEmpresa)
                            {
                                historialPredioEmpresa.IdHistorial = modelo.IdHistorial;
                                historialPredioEmpresa.TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi;
                                historialPredioEmpresa.Generado = datos.Predios != null;
                                historialPredioEmpresa.Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null;
                                historialPredioEmpresa.Cache = cachePrediosEmpresa;
                                historialPredioEmpresa.FechaRegistro = DateTime.Now;
                                historialPredioEmpresa.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialPredioEmpresa);
                                _logger.LogInformation("Historial de la Fuente Predio Empresa Cotacachi actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi,
                                Generado = datos.Predios != null,
                                Data = datos.Predios != null ? JsonConvert.SerializeObject(datos.Predios) : null,
                                Cache = cachePrediosEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Predio Empresa Cotacachi procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCotacachi", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteInformacionPrediosCotacachi", null);
            }
        }
        #endregion PrediosCotacachi

        [HttpPost]
        [Route("ObtenerFiscaliaDelitos")]
        public async Task<IActionResult> ObtenerFiscaliaDelitos(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();

                Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito fiscaliaPersona = null;
                Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito fiscaliaEmpresa = null;
                var datos = new DelitosViewModel();
                Historial historialTemp = null;
                var cedulaEntidades = false;
                var cacheFiscalia = false;
                var cacheFiscaliaEmpresa = false;
                var busquedaNuevaFiscalia = false;
                var busquedaNuevaFiscaliaEmpresa = false;
                var validarFuente = true;
                var swValidar = false;

                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Fiscalía Delitos identificación: {modelo.Identificacion}");
                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            cedulaEntidades = true;
                            modelo.Identificacion = $"{modelo.Identificacion}001";
                        }

                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (cedulaEntidades)
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    fiscaliaPersona = await _fiscaliaDelitos.GetRespuestaAsync(modelo.Identificacion);
                            }
                            else
                            {
                                if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                {
                                    fiscaliaEmpresa = await _fiscaliaDelitos.GetRespuestaAsync(modelo.Identificacion);
                                    if (fiscaliaEmpresa == null)
                                    {
                                        validarFuente = _fiscaliaDelitos.ValidarFuente();
                                        swValidar = true;
                                        var datosDetalleFiscaliaEmpresa = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                                        if (datosDetalleFiscaliaEmpresa != null)
                                        {
                                            cacheFiscaliaEmpresa = true;
                                            busquedaNuevaFiscaliaEmpresa = true;
                                            fiscaliaEmpresa = JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(datosDetalleFiscaliaEmpresa);
                                        }
                                    }
                                }
                                if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && (ValidacionViewModel.ValidarRucJuridico(historialTemp.Identificacion) || ValidacionViewModel.ValidarRuc(historialTemp.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(historialTemp.Identificacion)))
                                {
                                    if (ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                                        fiscaliaPersona = await _fiscaliaDelitos.GetRespuestaAsync(historialTemp.IdentificacionSecundaria.Trim());
                                }
                                else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion))
                                {
                                    var cedulaTemp = modelo.Identificacion.Substring(0, 10);
                                    if (ValidacionViewModel.ValidarCedula(cedulaTemp))
                                        fiscaliaPersona = await _fiscaliaDelitos.GetRespuestaAsync(cedulaTemp);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Fiscalía Delitos con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (fiscaliaPersona == null)
                    {
                        if (!swValidar)
                            validarFuente = _fiscaliaDelitos.ValidarFuente();
                        var datosDetalleFiscaliaPersona = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosPersona && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleFiscaliaPersona != null)
                        {
                            cacheFiscalia = true;
                            busquedaNuevaFiscalia = true;
                            fiscaliaPersona = JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(datosDetalleFiscaliaPersona);
                        }
                    }

                    datos = new DelitosViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        FiscaliaPersona = fiscaliaPersona,
                        FiscaliaEmpresa = fiscaliaEmpresa,
                        BusquedaNueva = busquedaNuevaFiscalia,
                        BusquedaNuevaEmpresa = busquedaNuevaFiscaliaEmpresa,
                        FuenteActiva = validarFuente
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathLegal = Path.Combine(pathFuentes, "fiscaliaDelitosDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathLegal);
                    datos = JsonConvert.DeserializeObject<DelitosViewModel>(archivo);
                    datos.FuenteActiva = validarFuente;
                }

                _logger.LogInformation("Fuente de Fiscalía Delitos procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Fiscalía Delitos. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesFiscalia = new[] { Dominio.Tipos.Fuentes.FiscaliaDelitosPersona, Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa };
                        var historialesFiscalia = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesFiscalia.Contains(m.TipoFuente));
                        var historialFiscaliaPersona = historialesFiscalia.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosPersona);
                        var historialFiscaliaEmpresa = historialesFiscalia.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa);

                        if (historialFiscaliaPersona != null && (historialFiscaliaPersona.Generado || !busquedaNuevaFiscalia))
                        {
                            historialFiscaliaPersona.IdHistorial = modelo.IdHistorial;
                            historialFiscaliaPersona.TipoFuente = Dominio.Tipos.Fuentes.FiscaliaDelitosPersona;
                            historialFiscaliaPersona.Generado = datos.FiscaliaPersona != null;
                            historialFiscaliaPersona.Data = datos.FiscaliaPersona != null ? JsonConvert.SerializeObject(datos.FiscaliaPersona) : null;
                            historialFiscaliaPersona.Cache = cacheFiscalia;
                            historialFiscaliaPersona.FechaRegistro = DateTime.Now;
                            historialFiscaliaPersona.Reintento = true;
                            historialFiscaliaPersona.FuenteActiva = validarFuente;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialFiscaliaPersona);
                            _logger.LogInformation("Historial de la Fuente Fiscalía Delitos Persona actualizado correctamente");
                        }
                        else if (historialFiscaliaPersona == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.FiscaliaDelitosPersona,
                                Generado = datos.FiscaliaPersona != null,
                                Data = datos.FiscaliaPersona != null ? JsonConvert.SerializeObject(datos.FiscaliaPersona) : null,
                                Cache = cacheFiscalia,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                FuenteActiva = validarFuente
                            });
                        }

                        if (historialFiscaliaEmpresa != null && (historialFiscaliaEmpresa.Generado || !busquedaNuevaFiscaliaEmpresa))
                        {
                            historialFiscaliaEmpresa.IdHistorial = modelo.IdHistorial;
                            historialFiscaliaEmpresa.TipoFuente = Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa;
                            historialFiscaliaEmpresa.Generado = datos.FiscaliaEmpresa != null;
                            historialFiscaliaEmpresa.Data = datos.FiscaliaEmpresa != null ? JsonConvert.SerializeObject(datos.FiscaliaEmpresa) : null;
                            historialFiscaliaEmpresa.Cache = cacheFiscaliaEmpresa;
                            historialFiscaliaEmpresa.FechaRegistro = DateTime.Now;
                            historialFiscaliaEmpresa.Reintento = true;
                            historialFiscaliaEmpresa.FuenteActiva = validarFuente;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialFiscaliaEmpresa);
                            _logger.LogInformation("Historial de la Fuente Fiscalía Delitos Empresa actualizado correctamente");
                        }
                        else if (historialFiscaliaEmpresa == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa,
                                Generado = datos.FiscaliaEmpresa != null,
                                Data = datos.FiscaliaEmpresa != null ? JsonConvert.SerializeObject(datos.FiscaliaEmpresa) : null,
                                Cache = cacheFiscaliaEmpresa,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                FuenteActiva = validarFuente
                            });
                        }
                        _logger.LogInformation("Historial de la Fuente Fiscalía Delitos procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                #region DatosDelitos ProcesadosSospechosos
                try
                {
                    var numeroDelito = new List<string>();
                    var numeroAdministro = new List<string>();
                    var numeroDelitoEmpresa = new List<string>();
                    var numeroAdministroEmpresa = new List<string>();
                    if (datos != null && datos.FiscaliaPersona != null && datos.FiscaliaPersona.ProcesosNoticiaDelito != null && datos.FiscaliaPersona.ProcesosNoticiaDelito.Any())
                    {
                        var sujetosNoticiaDelito = datos.FiscaliaPersona.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                        if (sujetosNoticiaDelito != null && sujetosNoticiaDelito.Any())
                        {
                            var nombreDivido = datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.NombresPersona) ? datos.HistorialCabecera.NombresPersona.Split(' ') : new string[0];
                            var listaNombre = new List<bool>();
                            foreach (var item1 in sujetosNoticiaDelito.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                            {
                                if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                {
                                    if (!string.IsNullOrEmpty(item1.Cedula) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.Identificacion) && datos.HistorialCabecera.Identificacion == item1.Cedula)
                                        numeroDelito.Add(item1.Numero);
                                    else if (!string.IsNullOrEmpty(item1.Cedula) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.IdentificacionSecundaria) && datos.HistorialCabecera.IdentificacionSecundaria == item1.Cedula)
                                        numeroDelito.Add(item1.Numero);
                                    else
                                    {
                                        var nombreSeparado = item1.NombresCompletos.Split(' ');
                                        listaNombre.Clear();
                                        foreach (var item2 in nombreSeparado)
                                        {
                                            if (datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.NombresPersona) && datos.HistorialCabecera.NombresPersona.Contains(item2))
                                                listaNombre.Add(true);
                                            else
                                                listaNombre.Add(false);
                                        }
                                        if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                                            numeroDelito.Add(item1.Numero);
                                    }
                                }
                            }
                            numeroDelito = numeroDelito.Distinct().ToList();
                            datos.FiscaliaPersona.ProcesosNoticiaDelito = datos.FiscaliaPersona.ProcesosNoticiaDelito.Where(x => numeroDelito.Contains(x.Numero)).Select(x => x).ToList();
                        }
                        else
                            datos.FiscaliaPersona.ProcesosNoticiaDelito.Clear();
                    }

                    //if (datos != null && datos.FiscaliaPersona != null && datos.FiscaliaPersona.ProcesosActoAdministrativo != null && datos.FiscaliaPersona.ProcesosActoAdministrativo.Any())
                    //{
                    //    var sujetosActoAdministrativo = datos.FiscaliaPersona.ProcesosActoAdministrativo.Where(x => x.Descripcion.ToUpper().Equals("PROCESADO") || x.Descripcion.ToUpper().Equals("SOSPECHOSO")).Select(x => new { x.Numero, x.CedulaDenunciante, x.NombreDenunciante }).ToList();
                    //    if (sujetosActoAdministrativo != null && sujetosActoAdministrativo.Any())
                    //    {
                    //        var nombreDivido = datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.NombresPersona) ? datos.HistorialCabecera.NombresPersona.Split(' ') : new string[0];
                    //        var listaNombre = new List<bool>();
                    //        foreach (var item1 in sujetosActoAdministrativo)
                    //        {
                    //            if (!string.IsNullOrEmpty(item1.CedulaDenunciante) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.Identificacion) && datos.HistorialCabecera.Identificacion == item1.CedulaDenunciante)
                    //                numeroAdministro.Add(item1.Numero);
                    //            else if (!string.IsNullOrEmpty(item1.CedulaDenunciante) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.IdentificacionSecundaria) && datos.HistorialCabecera.IdentificacionSecundaria == item1.CedulaDenunciante)
                    //                numeroAdministro.Add(item1.Numero);
                    //            else
                    //            {
                    //                var nombreSeparado = item1.NombreDenunciante.Split(' ');
                    //                listaNombre.Clear();
                    //                foreach (var item2 in nombreSeparado)
                    //                {
                    //                    if (datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.NombresPersona) && datos.HistorialCabecera.NombresPersona.Contains(item2))
                    //                        listaNombre.Add(true);
                    //                    else
                    //                        listaNombre.Add(false);
                    //                }
                    //                if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                    //                    numeroAdministro.Add(item1.Numero);
                    //            }
                    //        }
                    //        numeroAdministro = numeroAdministro.Distinct().ToList();
                    //        datos.FiscaliaPersona.ProcesosActoAdministrativo = datos.FiscaliaPersona.ProcesosActoAdministrativo.Where(x => numeroAdministro.Contains(x.Numero)).Select(x => x).ToList();
                    //    }
                    //    else
                    //        datos.FiscaliaPersona.ProcesosActoAdministrativo.Clear();
                    //}

                    if (datos != null && datos.FiscaliaEmpresa != null && datos.FiscaliaEmpresa.ProcesosNoticiaDelito != null && datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Any())
                    {
                        var sujetos = datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                        if (sujetos != null && sujetos.Any())
                        {
                            foreach (var item1 in sujetos.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                            {
                                if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                {
                                    if (!string.IsNullOrEmpty(item1.Cedula) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.Identificacion) && datos.HistorialCabecera.Identificacion == item1.Cedula)
                                        numeroDelitoEmpresa.Add(item1.Numero);
                                    else if (!string.IsNullOrEmpty(item1.NombresCompletos) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.RazonSocialEmpresa) && datos.HistorialCabecera.RazonSocialEmpresa == item1.NombresCompletos)
                                        numeroDelitoEmpresa.Add(item1.Numero);
                                }
                            }
                            numeroDelitoEmpresa = numeroDelitoEmpresa.Distinct().ToList();
                            datos.FiscaliaEmpresa.ProcesosNoticiaDelito = datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Where(x => numeroDelitoEmpresa.Contains(x.Numero)).Select(x => x).ToList();
                        }
                        else
                            datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Clear();
                    }

                    //if (datos != null && datos.FiscaliaEmpresa != null && datos.FiscaliaEmpresa.ProcesosActoAdministrativo != null && datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Any())
                    //{
                    //    var sujetos = datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Where(x => x.Descripcion.ToUpper().Equals("PROCESADO") || x.Descripcion.ToUpper().Equals("SOSPECHOSO")).Select(x => new { x.Numero, x.CedulaDenunciante, x.NombreDenunciante }).ToList();
                    //    if (sujetos != null && sujetos.Any())
                    //    {
                    //        foreach (var item1 in sujetos)
                    //        {
                    //            if (!string.IsNullOrEmpty(item1.CedulaDenunciante) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.Identificacion) && datos.HistorialCabecera.Identificacion == item1.CedulaDenunciante)
                    //                numeroAdministroEmpresa.Add(item1.Numero);
                    //            else if (!string.IsNullOrEmpty(item1.NombreDenunciante) && datos.HistorialCabecera != null && !string.IsNullOrEmpty(datos.HistorialCabecera.RazonSocialEmpresa) && datos.HistorialCabecera.RazonSocialEmpresa == item1.NombreDenunciante)
                    //                numeroAdministroEmpresa.Add(item1.Numero);
                    //        }
                    //        numeroAdministroEmpresa = numeroAdministroEmpresa.Distinct().ToList();
                    //        datos.FiscaliaEmpresa.ProcesosActoAdministrativo = datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Where(x => numeroAdministroEmpresa.Contains(x.Numero)).Select(x => x).ToList();
                    //    }
                    //    else
                    //        datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Clear();
                    //}
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                #endregion DatosDelitos ProcesadosSospechosos

                return PartialView("../Shared/Fuentes/_FuenteFiscaliaDelitos", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteFiscaliaDelitos", null);
            }
        }

        [HttpPost]
        [Route("ObtenerUafe")]
        public async Task<IActionResult> ObtenerUafe(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                modelo.Identificacion = modelo.Identificacion.Trim();

                Externos.Logica.UAFE.Modelos.Resultado r_onu = null;
                Externos.Logica.UAFE.Modelos.Resultado r_onu2206 = null;
                Externos.Logica.UAFE.Modelos.ResultadoInterpol r_interpol = null;
                Externos.Logica.UAFE.Modelos.ResultadoOfac r_ofac = null;
                var busquedaNuevaOnu = false;
                var busquedaNuevaOnu2206 = false;
                var busquedaNuevaInterpol = false;
                var busquedaNuevaOfac = false;
                var cacheOnu = false;
                var cacheOnu2206 = false;
                var cacheInterpol = false;
                var cacheOfac = false;
                string mensajeErrorOnu = null;
                string mensajeErrorOnu2206 = null;
                string mensajeErrorInterpol = null;
                string mensajeErrorOfac = null;
                var busquedaJuridica = false;
                var accesoOnu = false;
                var accesoOfac = false;
                var accesoInterpol = false;

                var datos = new UafeViewModel();
                Historial historialTemp = null;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente UAFE identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (historialTemp != null)
                        {
                            if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                            {
                                r_onu = await _uafe.GetRespuestaAsync(historialTemp.NombresPersona, new[] { !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa?.Trim()) ? historialTemp.RazonSocialEmpresa.Trim() : string.Empty });
                                r_onu2206 = _uafe.GetInformacionOnu2206(historialTemp.NombresPersona, historialTemp.RazonSocialEmpresa);
                                accesoOnu = true;

                                DateTime? fechaNacimiento = null;
                                var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                                var detallesHistorial = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);
                                if (detallesHistorial.Any())
                                {
                                    var registroCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                                    if (registroCivil != null)
                                    {
                                        var dataRc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(registroCivil.Data);
                                        if (dataRc != null)
                                            fechaNacimiento = dataRc.FechaNacimiento;
                                    }
                                    else
                                    {
                                        var personaGc = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);
                                        if (personaGc != null)
                                        {
                                            var dataGc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(personaGc.Data);
                                            if (dataGc != null)
                                                fechaNacimiento = dataGc.FechaNacimiento;
                                        }
                                    }
                                }

                                if (!string.IsNullOrEmpty(historialTemp.NombresPersona) && fechaNacimiento.HasValue)
                                    r_interpol = await _uafe.GetInformacionInterpol(historialTemp.NombresPersona, fechaNacimiento);

                                accesoInterpol = true;
                                r_ofac = _uafe.GetInformacionOfac(historialTemp.NombresPersona, historialTemp.IdentificacionSecundaria, historialTemp.RazonSocialEmpresa, historialTemp.Identificacion);
                                accesoOfac = true;
                                busquedaJuridica = true;
                            }
                            else
                            {

                                r_onu = await _uafe.GetRespuestaAsync(historialTemp.NombresPersona);
                                r_onu2206 = _uafe.GetInformacionOnu2206(historialTemp.NombresPersona);
                                accesoOnu = true;

                                DateTime? fechaNacimiento = null;
                                var fuentes = new[] { Dominio.Tipos.Fuentes.Ciudadano, Dominio.Tipos.Fuentes.RegistroCivil };
                                var detallesHistorial = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentes.Contains(m.TipoFuente), null, null, 0, null, true);
                                if (detallesHistorial.Any())
                                {
                                    var registroCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil && m.Generado);
                                    if (registroCivil != null)
                                    {
                                        var dataRc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(registroCivil.Data);
                                        if (dataRc != null)
                                            fechaNacimiento = dataRc.FechaNacimiento;
                                    }
                                    else
                                    {
                                        var personaGc = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano && m.Generado);
                                        if (personaGc != null)
                                        {
                                            var dataGc = JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(personaGc.Data);
                                            if (dataGc != null)
                                                fechaNacimiento = dataGc.FechaNacimiento;
                                        }
                                    }
                                }

                                if (!string.IsNullOrEmpty(historialTemp.NombresPersona) && fechaNacimiento.HasValue)
                                    r_interpol = await _uafe.GetInformacionInterpol(historialTemp.NombresPersona, fechaNacimiento);

                                accesoInterpol = true;

                                var cedula = string.Empty;
                                if (!ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    cedula = modelo.Identificacion.Substring(0, 10);
                                else
                                    cedula = modelo.Identificacion;

                                r_ofac = _uafe.GetInformacionOfac(historialTemp.NombresPersona, cedula, !ValidacionViewModel.ValidarCedula(modelo.Identificacion) ? historialTemp.NombresPersona : "", !ValidacionViewModel.ValidarCedula(modelo.Identificacion) ? modelo.Identificacion : "");
                                accesoOfac = true;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente UAFE con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (accesoOnu)
                    {
                        var aplicaBusquedaCacheOnu = true;
                        if (datos.ONU != null && datos.ONU.Individuo == null && datos.ONU.Entidad == null && !string.IsNullOrEmpty(datos.ONU.MensajeError))
                        {
                            aplicaBusquedaCacheOnu = false;
                            mensajeErrorOnu = datos.ONU.MensajeError;
                        }

                        var aplicaBusquedaCacheOnu2206 = true;
                        if (datos.ONU2206 != null && datos.ONU2206.Individuo == null && datos.ONU2206.Entidad == null && !string.IsNullOrEmpty(datos.ONU2206.MensajeError))
                        {
                            aplicaBusquedaCacheOnu2206 = false;
                            mensajeErrorOnu2206 = datos.ONU2206.MensajeError;
                        }

                        if (r_onu == null && aplicaBusquedaCacheOnu)
                        {
                            busquedaNuevaOnu = true;
                            var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleUafe != null)
                            {
                                cacheOnu = true;
                                r_onu = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.Resultado>(datosDetalleUafe);
                            }
                        }

                        if (r_onu2206 == null && aplicaBusquedaCacheOnu2206)
                        {
                            busquedaNuevaOnu2206 = true;
                            var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu2206 && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleUafe != null)
                            {
                                cacheOnu2206 = true;
                                r_onu2206 = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.Resultado>(datosDetalleUafe);
                            }
                        }
                    }

                    if (accesoInterpol)
                    {
                        var aplicaBusquedaCacheInterpol = true;
                        if (datos.Interpol != null && datos.Interpol.NoticiaIndividuo == null && !string.IsNullOrEmpty(datos.Interpol.MensajeError))
                        {
                            aplicaBusquedaCacheInterpol = false;
                            mensajeErrorInterpol = datos.Interpol.MensajeError;
                        }

                        if (r_interpol == null && aplicaBusquedaCacheInterpol)
                        {
                            busquedaNuevaInterpol = true;
                            var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.UafeInterpol && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleUafe != null)
                            {
                                cacheInterpol = true;
                                r_interpol = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.ResultadoInterpol>(datosDetalleUafe);
                            }
                        }
                    }

                    if (accesoOfac)
                    {
                        var aplicaBusquedaCacheOfac = true;
                        if (datos.OFAC != null && string.IsNullOrEmpty(datos.OFAC.ContenidoIndividuo) && string.IsNullOrEmpty(datos.OFAC.ContenidoEmpresa) && !string.IsNullOrEmpty(datos.OFAC.MensajeError))
                        {
                            aplicaBusquedaCacheOfac = false;
                            mensajeErrorOfac = datos.OFAC.MensajeError;
                        }

                        if (r_ofac == null && aplicaBusquedaCacheOfac)
                        {
                            busquedaNuevaOfac = true;
                            var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOfac && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                            if (datosDetalleUafe != null)
                            {
                                cacheOfac = true;
                                r_ofac = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.ResultadoOfac>(datosDetalleUafe);
                            }
                        }
                    }

                    datos = new UafeViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        ONU = r_onu,
                        ONU2206 = r_onu2206,
                        Interpol = r_interpol,
                        OFAC = r_ofac,
                        BusquedaNuevaOnu = busquedaNuevaOnu,
                        BusquedaNuevaOnu2206 = busquedaNuevaOnu2206,
                        BusquedaNuevaInterpol = busquedaNuevaInterpol,
                        BusquedaNuevaOfac = busquedaNuevaOfac,
                        MensajeErrorOnu = mensajeErrorOnu,
                        MensajeErrorOnu2206 = mensajeErrorOnu2206,
                        MensajeErrorInterpol = mensajeErrorInterpol,
                        MensajeErrorOfac = mensajeErrorOfac,
                        BusquedaJuridica = busquedaJuridica,
                        AccesoOnu = accesoOnu,
                        AccesoInterpol = accesoInterpol,
                        AccesoOfac = accesoOfac
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathLegal = Path.Combine(pathFuentes, "uafeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathLegal);
                    datos = JsonConvert.DeserializeObject<UafeViewModel>(archivo);
                    datos.BusquedaJuridica = true;
                    datos.AccesoOnu = true;
                    datos.AccesoInterpol = true;
                    datos.AccesoOfac = true;
                }

                if (accesoOnu)
                {
                    if (datos.ONU != null && datos.ONU.Individuo == null && datos.ONU.Entidad == null)
                        datos.ONU = null;

                    if (datos.ONU2206 != null && datos.ONU2206.Individuo == null && datos.ONU2206.Entidad == null)
                        datos.ONU2206 = null;
                }

                if (accesoInterpol)
                {
                    if (datos.Interpol != null && datos.Interpol.NoticiaIndividuo == null)
                        datos.Interpol = null;
                }

                if (accesoOfac)
                {
                    if (datos.OFAC != null && string.IsNullOrEmpty(datos.OFAC.ContenidoIndividuo) && string.IsNullOrEmpty(datos.OFAC.ContenidoEmpresa))
                        datos.OFAC = null;
                }

                _logger.LogInformation("Fuente de UAFE procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente UAFE. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesUafe = new[] { Dominio.Tipos.Fuentes.UafeOnu, Dominio.Tipos.Fuentes.UafeOnu2206, Dominio.Tipos.Fuentes.UafeInterpol, Dominio.Tipos.Fuentes.UafeOfac };
                        var historialesUafe = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesUafe.Contains(m.TipoFuente));
                        var historialOnu = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu);
                        var historialOnu2206 = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu2206);
                        var historialInterpol = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeInterpol);
                        var historialOfac = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOfac);

                        if (accesoOnu)
                        {
                            if (historialOnu != null && (!historialOnu.Generado || !busquedaNuevaOnu))
                            {
                                historialOnu.IdHistorial = modelo.IdHistorial;
                                historialOnu.TipoFuente = Dominio.Tipos.Fuentes.UafeOnu;
                                historialOnu.Generado = datos.ONU != null;
                                historialOnu.Data = datos.ONU != null ? JsonConvert.SerializeObject(datos.ONU) : null;
                                historialOnu.Cache = cacheOnu;
                                historialOnu.FechaRegistro = DateTime.Now;
                                historialOnu.Reintento = true;
                                historialOnu.DataError = mensajeErrorOnu;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialOnu);
                                _logger.LogInformation("Historial de la Fuente UAFE ONU actualizado correctamente");
                            }
                            else if (historialOnu == null)
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.UafeOnu,
                                    Generado = datos.ONU != null,
                                    Data = datos.ONU != null ? JsonConvert.SerializeObject(datos.ONU) : null,
                                    Cache = cacheOnu,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false,
                                    DataError = mensajeErrorOnu
                                });
                            }

                            if (historialOnu2206 != null && (!historialOnu2206.Generado || !busquedaNuevaOnu2206))
                            {
                                historialOnu2206.IdHistorial = modelo.IdHistorial;
                                historialOnu2206.TipoFuente = Dominio.Tipos.Fuentes.UafeOnu2206;
                                historialOnu2206.Generado = datos.ONU2206 != null;
                                historialOnu2206.Data = datos.ONU2206 != null ? JsonConvert.SerializeObject(datos.ONU2206) : null;
                                historialOnu2206.Cache = cacheOnu2206;
                                historialOnu2206.FechaRegistro = DateTime.Now;
                                historialOnu2206.Reintento = true;
                                historialOnu2206.DataError = mensajeErrorOnu2206;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialOnu2206);
                                _logger.LogInformation("Historial de la Fuente UAFE ONU 2206 actualizado correctamente");
                            }
                            else if (historialOnu2206 == null)
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.UafeOnu2206,
                                    Generado = datos.ONU2206 != null,
                                    Data = datos.ONU2206 != null ? JsonConvert.SerializeObject(datos.ONU2206) : null,
                                    Cache = cacheOnu2206,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false,
                                    DataError = mensajeErrorOnu2206
                                });
                            }
                        }

                        if (accesoInterpol)
                        {
                            if (historialInterpol != null && (!historialInterpol.Generado || !busquedaNuevaInterpol))
                            {
                                historialInterpol.IdHistorial = modelo.IdHistorial;
                                historialInterpol.TipoFuente = Dominio.Tipos.Fuentes.UafeInterpol;
                                historialInterpol.Generado = datos.Interpol != null;
                                historialInterpol.Data = datos.Interpol != null ? JsonConvert.SerializeObject(datos.Interpol) : null;
                                historialInterpol.Cache = cacheInterpol;
                                historialInterpol.FechaRegistro = DateTime.Now;
                                historialInterpol.Reintento = true;
                                historialInterpol.DataError = mensajeErrorInterpol;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialInterpol);
                                _logger.LogInformation("Historial de la Fuente UAFE Interpol actualizado correctamente");
                            }
                            else if (historialInterpol == null)
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.UafeInterpol,
                                    Generado = datos.Interpol != null,
                                    Data = datos.Interpol != null ? JsonConvert.SerializeObject(datos.Interpol) : null,
                                    Cache = cacheInterpol,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false,
                                    DataError = mensajeErrorInterpol
                                });
                            }
                        }

                        if (accesoOfac)
                        {
                            if (historialOfac != null && (!historialOfac.Generado || !busquedaNuevaOfac))
                            {
                                historialOfac.IdHistorial = modelo.IdHistorial;
                                historialOfac.TipoFuente = Dominio.Tipos.Fuentes.UafeOfac;
                                historialOfac.Generado = datos.OFAC != null;
                                historialOfac.Data = datos.OFAC != null ? JsonConvert.SerializeObject(datos.OFAC) : null;
                                historialOfac.Cache = cacheOfac;
                                historialOfac.FechaRegistro = DateTime.Now;
                                historialOfac.Reintento = true;
                                historialOfac.DataError = mensajeErrorOfac;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialOfac);
                                _logger.LogInformation("Historial de la Fuente UAFE OFAC actualizado correctamente");
                            }
                            else if (historialOfac == null)
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.UafeOfac,
                                    Generado = datos.OFAC != null,
                                    Data = datos.OFAC != null ? JsonConvert.SerializeObject(datos.OFAC) : null,
                                    Cache = cacheOfac,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false,
                                    DataError = mensajeErrorOfac
                                });
                            }
                        }
                        _logger.LogInformation("Historial de la Fuente UAFE procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteUAFE", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteUAFE", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteFuerzasArmadas")]
        public async Task<IActionResult> ObtenerReporteFuerzasArmadas(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.AntecedentesPenales.Modelos.PersonaFuerzaArmada r_fuerzaArmada = null;
                ViewBag.RutaArchivo = string.Empty;
                var busquedaNuevaFuerzaArmada = false;
                var cacheFuerzaArmada = false;
                var rutaArchivo = string.Empty;
                Historial historialTemp = null;
                var datos = new FuerzasArmadasViewModel();
                ResultadoPersonaFuerzaArmada resultadoFuerzaArmada = null;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente Fuerzas Armadas identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                        {
                            if (historialTemp != null && (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion)) && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && ValidacionViewModel.ValidarCedula(historialTemp.IdentificacionSecundaria))
                            {
                                resultadoFuerzaArmada = _antecedentes.GetFuerzasArmadasV2(historialTemp.IdentificacionSecundaria);
                                r_fuerzaArmada = resultadoFuerzaArmada?.PersonaFuerzaArmada;

                            }
                            else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                            {
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                {
                                    resultadoFuerzaArmada = _antecedentes.GetFuerzasArmadasV2(modelo.Identificacion);
                                    r_fuerzaArmada = resultadoFuerzaArmada?.PersonaFuerzaArmada;
                                }
                            }
                        }
                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                        {
                            resultadoFuerzaArmada = _antecedentes.GetFuerzasArmadasV2(modelo.Identificacion);
                            r_fuerzaArmada = resultadoFuerzaArmada?.PersonaFuerzaArmada;
                        }

                        if (r_fuerzaArmada != null && r_fuerzaArmada.Reporte.Length > 0)
                        {
                            try
                            {
                                var filePath = Path.GetTempFileName();
                                ViewBag.RutaArchivo = filePath;
                                System.IO.File.WriteAllBytes(filePath, r_fuerzaArmada.Reporte);
                            }
                            catch (Exception ex)
                            {
                                ViewBag.RutaArchivo = string.Empty;
                                _logger.LogError($"Error al registrar certificado de fuerzas armadas {modelo.Identificacion}: {ex.Message}");
                            }
                            r_fuerzaArmada.Reporte = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente Fuerzas Armadas con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    if (r_fuerzaArmada == null)
                    {
                        busquedaNuevaFuerzaArmada = true;
                        var datosFuerzaArmada = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.FuerzaArmada && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosFuerzaArmada != null)
                        {
                            cacheFuerzaArmada = true;
                            r_fuerzaArmada = JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.PersonaFuerzaArmada>(datosFuerzaArmada);
                        }
                    }

                    datos = new FuerzasArmadasViewModel()
                    {
                        FuerzasArmadas = r_fuerzaArmada,
                        BusquedaNueva = busquedaNuevaFuerzaArmada,
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathFuerzaArmada = Path.Combine(pathFuentes, "fuerzaArmadaDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathFuerzaArmada);
                    datos = JsonConvert.DeserializeObject<FuerzasArmadasViewModel>(archivo);

                    try
                    {
                        var filePath = Path.GetTempFileName();
                        ViewBag.RutaArchivo = filePath;
                        System.IO.File.WriteAllBytes(filePath, datos.FuerzasArmadas.Reporte);
                        datos.FuerzasArmadas.Reporte = null;
                    }
                    catch (Exception ex)
                    {
                        ViewBag.RutaArchivo = string.Empty;
                        _logger.LogError($"Error al registrar certificado de Fuerzas Armadas {modelo.Identificacion}: {ex.Message}");
                    }
                }

                _logger.LogInformation("Fuente de Fuerzas Armadas procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Fuerzas Armadas. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialFuerzasArmadas = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.FuerzaArmada);
                        if (historialFuerzasArmadas != null)
                        {
                            if (!historialFuerzasArmadas.Generado || !busquedaNuevaFuerzaArmada)
                            {
                                historialFuerzasArmadas.IdHistorial = modelo.IdHistorial;
                                historialFuerzasArmadas.TipoFuente = Dominio.Tipos.Fuentes.FuerzaArmada;
                                historialFuerzasArmadas.Generado = r_fuerzaArmada != null;
                                historialFuerzasArmadas.Data = r_fuerzaArmada != null ? JsonConvert.SerializeObject(r_fuerzaArmada) : null;
                                historialFuerzasArmadas.Cache = cacheFuerzaArmada;
                                historialFuerzasArmadas.FechaRegistro = DateTime.Now;
                                historialFuerzasArmadas.Reintento = true;
                                historialFuerzasArmadas.DataError = resultadoFuerzaArmada != null ? resultadoFuerzaArmada.Error : null;
                                historialFuerzasArmadas.FuenteActiva = resultadoFuerzaArmada != null ? resultadoFuerzaArmada.FuenteActiva : null;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialFuerzasArmadas);
                                _logger.LogInformation("Historial de la Fuente Fuerzas Armadas actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.FuerzaArmada,
                                Generado = datos.FuerzasArmadas != null,
                                Data = datos.FuerzasArmadas != null ? JsonConvert.SerializeObject(datos.FuerzasArmadas) : null,
                                Cache = cacheFuerzaArmada,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = resultadoFuerzaArmada != null ? resultadoFuerzaArmada.Error : null,
                                FuenteActiva = resultadoFuerzaArmada != null ? resultadoFuerzaArmada.FuenteActiva : null
                            });
                            _logger.LogInformation("Historial de la Fuente Fuerzas Armadas procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteFuerzasArmadas", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteFuerzasArmadas", null);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteBuroCredito")]
        public async Task<IActionResult> ObtenerReporteBuroCredito(ReporteViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();

                if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                    identificacionBuro = $"{modelo.Identificacion}001";

                if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                    identificacionBuro = modelo.Identificacion.Substring(0, 10);

                Externos.Logica.BuroCredito.Modelos.CreditoRespuesta r_burocredito = null;
                Externos.Logica.Equifax.Modelos.Resultado r_burocreditoEquifax = null;
                Historial historialTemp = null;
                var busquedaNuevaBuroCredito = false;
                var cacheBuroCredito = false;
                var idUsuario = User.GetUserId<int>();
                var idPlanBuro = 0;
                var datos = new BuroCreditoViewModel();
                var dataErrorEquifax = string.Empty;
                var dataErrorAval = string.Empty;
                var culture = System.Globalization.CultureInfo.CurrentCulture;
                var aplicaConsultaBuroCompartida = false;
                var mensajeErrorBuro = string.Empty;
                var tipoDocumentoBLitoral = string.Empty;
                var tipoDocumentoCoopTena = string.Empty;

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                idPlanBuro = planBuroCredito.Id;

                if (idPlanBuro == 0)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene planes vigentes de Buró de Crédito.");

                var fechaActual = DateTime.Now;
                var primerDiadelMes = new DateTime(fechaActual.Year, fechaActual.Month, 1);
                var ultimoDiadelMes = primerDiadelMes.AddMonths(1).AddDays(-1);

                if (planBuroCredito.ConsultasCompartidas && planBuroCredito.NumeroMaximoConsultasCompartidas.HasValue && planBuroCredito.NumeroMaximoConsultasCompartidas.Value > 0)
                {
                    var numeroHistorialBuroSinComp = await _historiales.CountAsync(s => s.Id != modelo.IdHistorial && s.IdPlanBuroCredito == idPlanBuro && s.Fecha.Date >= primerDiadelMes.Date && s.Fecha.Date <= ultimoDiadelMes.Date && !s.ConsultaBuroCompartido);
                    if (numeroHistorialBuroSinComp >= planBuroCredito.NumeroMaximoConsultas)
                    {
                        _logger.LogInformation($"Se ha alcanzado el límite de consultas con las credenciales propias del cliente:  {usuarioActual.IdEmpresa}.");
                        aplicaConsultaBuroCompartida = true;
                    }

                    if (aplicaConsultaBuroCompartida)
                    {
                        var resultadoPermisoCompartido = Dominio.Tipos.EstadosPlanesBuroCredito.Activo;
                        if (planBuroCredito.BloquearConsultas)
                        {
                            var numeroHistorialBuroComp = await _historiales.CountAsync(s => s.Id != modelo.IdHistorial && s.IdPlanBuroCredito == idPlanBuro && s.Fecha.Date >= primerDiadelMes.Date && s.Fecha.Date <= ultimoDiadelMes.Date && s.ConsultaBuroCompartido);
                            resultadoPermisoCompartido = planBuroCredito.NumeroMaximoConsultasCompartidas > numeroHistorialBuroComp ? Dominio.Tipos.EstadosPlanesBuroCredito.Activo : Dominio.Tipos.EstadosPlanesBuroCredito.Inactivo;
                        }

                        if (resultadoPermisoCompartido != Dominio.Tipos.EstadosPlanesBuroCredito.Activo)
                            throw new Exception("No es posible realizar esta consulta ya que excedió el límite de consultas del plan Buró de Crédito.");
                    }

                    #region Mail
                    if ((numeroHistorialBuroSinComp + 1) == planBuroCredito.NumeroMaximoConsultas)
                    {
                        try
                        {
                            var usuarios = new List<string>();
                            var usuarioAdministrador = await _usuarios.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.UsuariosRoles.Any(s => s.RoleId == (short)Dominio.Tipos.Roles.AdministradorEmpresa), null, null, true);
                            if (usuarioAdministrador != null)
                                usuarios.Add(usuarioAdministrador.NormalizedEmail);

                            var usuarioGc = await _usuarios.FirstOrDefaultAsync(m => m, m => m.Identificacion == Dominio.Constantes.General.CedulaPersonaDemo && m.UsuariosRoles.Any(s => s.RoleId == (short)Dominio.Tipos.Roles.Administrador), null, null, true);
                            if (usuarioGc != null)
                                usuarios.Add(usuarioGc.NormalizedEmail);

                            if (usuarios.Any())
                            {
                                var emisor = _configuration.GetValue<string>("SmtpSettings:From");
                                _logger.LogInformation($"Preparando envío de correo consultas de butó ...");
                                var template = EmailViewModel.ObtenerSubtemplate(Dominio.Tipos.TemplatesCorreo.LimiteBuroAlcanzado);
                                if (string.IsNullOrEmpty(template))
                                    throw new Exception($"No se ha cargado la plantilla de tipo: {Dominio.Tipos.TemplatesCorreo.LimiteBuroAlcanzado}");

                                var asunto = "Límite de Consultas Alcanzado Buró de Crédito Plataforma Integral de Información 360°";
                                var domainName = new Uri(HttpContext.Request.GetDisplayUrl()).GetLeftPart(UriPartial.Authority);
                                var enlace = $"{domainName}{Url.Action("Inicio", "Cuenta", new { Area = "Identidad" })}";

                                var replacements = new Dictionary<string, object>
                                {
                                    { "{NOMBREEMPRESA}", $"{usuarioActual.Empresa.Identificacion} - {usuarioActual.Empresa.RazonSocial}" },
                                    { "{NUMCONSULTASCLIENTE}", numeroHistorialBuroSinComp.ToString() },
                                    { "{NUMCONSULTASINTERNAS}", planBuroCredito.NumeroMaximoConsultasCompartidas.Value },
                                    { "{ENLACE}", enlace },
                                };
                                var correosBcc = string.Join(';', usuarios.Select(m => m.ToLower().Trim()));
                                await _emailSender.SendEmailAsync(emisor, asunto, template, "USUARIO", replacements, null, correosBcc);
                            }
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, ex.Message);
                        }
                    }
                    #endregion Mail
                }
                else
                {
                    var resultadoPermiso = Dominio.Tipos.EstadosPlanesBuroCredito.Activo;
                    if (planBuroCredito.BloquearConsultas)
                    {
                        var numeroHistorialBuro = await _historiales.CountAsync(s => s.Id != modelo.IdHistorial && s.IdPlanBuroCredito == idPlanBuro && s.Fecha.Date >= primerDiadelMes.Date && s.Fecha.Date <= ultimoDiadelMes.Date);
                        resultadoPermiso = planBuroCredito.NumeroMaximoConsultas > numeroHistorialBuro ? Dominio.Tipos.EstadosPlanesBuroCredito.Activo : Dominio.Tipos.EstadosPlanesBuroCredito.Inactivo;
                    }

                    if (resultadoPermiso != Dominio.Tipos.EstadosPlanesBuroCredito.Activo)
                        throw new Exception("No es posible realizar esta consulta ya que excedió el límite de consultas del plan Buró de Crédito.");
                }

                #region Indumot
                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001)
                {
                    try
                    {
                        //if (string.IsNullOrEmpty(modelo.TipoProductoIndumot))
                        //    throw new Exception("El campo Tipo de Producto es obligatorio");

                        if (modelo.IngresosIndumot <= 0)
                            modelo.IngresosIndumot = 0;

                        if (modelo.PlazoIndumot <= 0)
                            modelo.PlazoIndumot = 0;

                        if (modelo.MontoIndumot <= 0)
                            modelo.MontoIndumot = 0;

                        if (modelo.RestaGastoFinancieroIndumot <= 0)
                            modelo.RestaGastoFinancieroIndumot = 0;

                        if (modelo.ValorEntradaIndumot <= 0)
                            modelo.ValorEntradaIndumot = 0;

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IdentificacionConyugeIndumot,
                                Valor = modelo.IdentificacionConyugeIndumot?.Trim(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IdentificacionGaranteIndumot,
                                Valor = modelo.IdentificacionGaranteIndumot?.Trim(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoProductoIndumot,
                                Valor = modelo.TipoProductoIndumot?.Trim(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresosIndumot,
                                Valor = modelo.IngresosIndumot.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastosIndumot,
                                Valor = modelo.RestaGastoFinancieroIndumot.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoIndumot,
                                Valor = modelo.MontoIndumot.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoIndumot,
                                Valor = modelo.PlazoIndumot.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.ValorEntrada,
                                Valor = modelo.ValorEntradaIndumot.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                        }.Where(m => !string.IsNullOrEmpty(m.Valor)).ToArray());
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                        datos = new BuroCreditoViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Fuente = planBuroCredito.Fuente,
                            MensajeError = ex.Message
                        };
                        return PartialView($"../Shared/Fuentes/_FuenteBuroEquifaxIndumot", datos);
                    }
                }
                #endregion Indumot

                #region Validaciones BCAPITAL
                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                {
                    try
                    {
                        //double ingresos, double gastos, double montoSolicitado, int plazo, string identificacionConyuge, int mesesExperienciaActividad, bool propiedades, string tipoPrestamo
                        if (modelo.IngresosBC <= 0)//TODO: tomar de AVAL si no ingresan
                            throw new Exception("Los ingresos deben ser superiores a 0.");

                        if (modelo.GastosBC < 0)//TODO: tomar de AVAL si no ingresan
                            throw new Exception("Los gastos deben ser superiores o iguales a 0.");

                        if (modelo.MontoSolicitadoBC <= 0)
                            throw new Exception("El monto solicitado debe ser superior a 0.");

                        if (modelo.PlazoBC <= 0)
                            throw new Exception("El plazo debe ser superior a 0.");

                        if (modelo.GastosBC > modelo.IngresosBC)
                            throw new Exception("Los gastos no pueden ser superiores a los ingresos.");

                        if (modelo.TipoPrestamoBC == Dominio.Tipos.Clientes.Cliente1090105244001.TipoPrestamoBCapitalAval.Desconocido)
                            throw new Exception("El campo Tipo de Préstamo es obligatorio.");

                        if (modelo.TipoPrestamoBC == Dominio.Tipos.Clientes.Cliente1090105244001.TipoPrestamoBCapitalAval.LivianosC || modelo.TipoPrestamoBC == Dominio.Tipos.Clientes.Cliente1090105244001.TipoPrestamoBCapitalAval.LivianosM)
                        {
                            if (modelo.MontoSolicitadoBC < 5000 || modelo.MontoSolicitadoBC > 65000)
                                throw new Exception("El monto solicitado debe ser entre $ 5000,00 y $ 65.000,00");

                            if (modelo.PlazoBC < 12 || modelo.PlazoBC > 72)
                                throw new Exception("El plazo debe estar entre 12 y 72 meses.");

                            if (modelo.MesesExperienciaActividadBC < 12)
                                throw new Exception("Los Meses Experiencia/Estabilidad Laboral debe ser mayor a 12 meses.");
                        }

                        if (modelo.TipoPrestamoBC == Dominio.Tipos.Clientes.Cliente1090105244001.TipoPrestamoBCapitalAval.TrabajoM)
                        {
                            if (modelo.MontoSolicitadoBC < 5000 || modelo.MontoSolicitadoBC > 90000)
                                throw new Exception("El monto solicitado debe ser entre $ 5000,00 y $ 90.000,00");

                            if (modelo.PlazoBC < 12 || modelo.PlazoBC > 72)
                                throw new Exception("El plazo debe estar entre 12 y 72 meses.");

                            if (modelo.MesesExperienciaActividadBC < 24)
                                throw new Exception("Los Meses Experiencia/Estabilidad Laboral debe ser mayor a 24 meses.");
                        }

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresosBCapital,
                                Valor = modelo.IngresosBC.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastosBCapital,
                                Valor = modelo.GastosBC.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoSolicitadoBCapital,
                                Valor = modelo.MontoSolicitadoBC.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoBCapital,
                                Valor = modelo.PlazoBC.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoPrestamoBCapital,
                                Valor = ((short)modelo.TipoPrestamoBC).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IdentificacionConyugeBCapital,
                                Valor = modelo.IdentificacionConyugeBC,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MesesExperienciaActividadBCapital,
                                Valor = modelo.MesesExperienciaActividadBC.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PropiedadesBCapital,
                                Valor = modelo.PropiedadesBC.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            }
                        }.Where(x => !string.IsNullOrEmpty(x.Valor)).ToArray());
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                        datos = new BuroCreditoViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Fuente = planBuroCredito.Fuente,
                            MensajeError = ex.Message
                        };
                        return PartialView($"../Shared/Fuentes/_FuenteBuroCreditoBCapital", datos);
                    }
                }
                #endregion Validaciones BCAPITAL

                #region Validaciones COAC
                if (planBuroCredito.ModeloCooperativas)
                {
                    try
                    {
                        if (modelo.Ingresos <= 0)
                            throw new Exception("Los ingresos deben ser superiores a 0.");

                        if (modelo.Gastos < 0)
                            throw new Exception("Los gastos deben ser superiores o iguales a 0.");

                        if (modelo.MontoSolicitado <= 0)
                            throw new Exception("El monto solicitado debe ser superior a 0.");

                        if (modelo.Gastos > modelo.Ingresos)
                            throw new Exception("Los gastos no pueden ser superiores a los ingresos.");

                        if (modelo.Plazo <= 0)
                            throw new Exception("El plazo debe ser superior a 0.");

                        if (modelo.TipoPrestamo == Dominio.Tipos.TipoPrestamoCooperativasAval.Desconocido)
                            throw new Exception("El campo Tipo de Préstamo es obligatorio.");

                        if (modelo.TipoPrestamo == Dominio.Tipos.TipoPrestamoCooperativasAval.Consumo)
                        {
                            if (modelo.MontoSolicitado < 100 || modelo.MontoSolicitado > 120000)
                                throw new Exception("El monto solicitado para consumo debe ser entre $ 110,00 y $ 120.000,00");

                            if (modelo.Plazo > 120)
                                throw new Exception("El plazo para consumo no debe superar los 120 meses.");
                        }

                        if (modelo.TipoPrestamo == Dominio.Tipos.TipoPrestamoCooperativasAval.Microcredito)
                        {
                            if (modelo.MontoSolicitado < 80 || modelo.MontoSolicitado > 120000)
                                throw new Exception("El monto solicitado para consumo debe ser entre $ 80,00 y $ 120.000,00");

                            if (modelo.Plazo > 120)
                                throw new Exception("El plazo para consumo no debe superar los 120 meses.");
                        }

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresosCoac,
                                Valor = modelo.Ingresos.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastosCoac,
                                Valor = modelo.Gastos.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoSolicitadoCoac,
                                Valor = modelo.MontoSolicitado.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoCoac,
                                Valor = modelo.Plazo.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoPrestamoCoac,
                                Valor = ((short)modelo.TipoPrestamo).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                        }.Where(m => !string.IsNullOrEmpty(m.Valor)).ToArray());
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                        datos = new BuroCreditoViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Fuente = planBuroCredito.Fuente,
                            MensajeError = ex.Message
                        };
                        return PartialView($"../Shared/Fuentes/_FuenteBuroCreditoCooperativas", datos);
                    }
                }
                #endregion Validaciones COAC

                #region Banco Litoral
                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoral.HasValue && modelo.ConsultaBuroBLitoral.Value)
                {
                    try
                    {
                        //if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion.Trim()))
                        //    throw new Exception("No se pueden consultar RUCs Jurídicos o del Sector Público.");

                        if (modelo.PlazoBLitoral < 0)
                            throw new Exception("Los plazos deben ser superiores o iguales 0.");

                        if (modelo.MontoBLitoral < 0)
                            throw new Exception("Los montos deben ser superiores o iguales 0.");

                        //if (modelo.IngresoBLitoral < 0)
                        //    throw new Exception("Los ingresos deben ser superiores o iguales 0.");

                        //if (modelo.GastoHogarBLitoral < 0)
                        //    throw new Exception("Los gastos del hogar deben ser superiores o iguales 0.");

                        //if (modelo.RestaGastoFinancieroBLitoral < 0)
                        //    throw new Exception("Resta de Gastos Financieros deben ser superiores o iguales 0.");

                        if (modelo.TipoLineaBLitoral == Dominio.Tipos.Clientes.Cliente0990981930001.TipoLinea.Desconocido)
                            throw new Exception("El campo linea es obligatorio.");

                        if (modelo.TipoCreditoBLitoral == Dominio.Tipos.Clientes.Cliente0990981930001.TipoCredito.Desconocido)
                            throw new Exception("El campo tipo de crédito es obligatorio.");

                        if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion.Trim()))
                            tipoDocumentoBLitoral = "R";
                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion?.Trim()) || ValidacionViewModel.ValidarRuc(modelo.Identificacion?.Trim()))
                            tipoDocumentoBLitoral = "C";

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoDocumentoBLitoral,
                                Valor = tipoDocumentoBLitoral,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.NumeroDocumentoBLitoral,
                                Valor = modelo.Identificacion?.Trim(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.LineaBLitoral,
                                Valor = ((short)modelo.TipoLineaBLitoral).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoCreditoBLitoral,
                                Valor = ((short)modelo.TipoCreditoBLitoral).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoBLitoral,
                                Valor = modelo.PlazoBLitoral.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoBLitoral,
                                Valor = modelo.MontoBLitoral.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresoBLitoral,
                                Valor = modelo.IngresoBLitoral.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastoHogarBLitoral,
                                Valor = modelo.GastoHogarBLitoral.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.RestaGastoFinancieroBLitoral,
                                Valor = modelo.RestaGastoFinancieroBLitoral.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                        }.Where(x => !string.IsNullOrEmpty(x.Valor)).ToArray());
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                        datos = new BuroCreditoViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Fuente = planBuroCredito.Fuente,
                            MensajeError = ex.Message
                        };
                        return PartialView($"../Shared/Fuentes/_FuenteBuroEquifaxBancoLitoral", datos);
                    }
                }
                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoralMicrofinanza.HasValue && modelo.ConsultaBuroBLitoralMicrofinanza.Value)
                {
                    try
                    {
                        //if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion.Trim()))
                        //    throw new Exception("No se pueden consultar RUCs Jurídicos o del Sector Público.");

                        if (modelo.PlazoBLitoralMicrofinanza < 0)
                            throw new Exception("Los plazos deben ser superiores o iguales 0.");

                        if (modelo.MontoBLitoralMicrofinanza < 0)
                            throw new Exception("Los montos deben ser superiores o iguales 0.");

                        if (modelo.TipoCreditoBLitoralMicrofinanza == Dominio.Tipos.Clientes.Cliente0990981930001.TipoCreditoMicrofinanzas.Desconocido)
                            throw new Exception("El campo tipo de crédito es obligatorio.");

                        switch (modelo.TipoCreditoBLitoralMicrofinanza)
                        {
                            case Dominio.Tipos.Clientes.Cliente0990981930001.TipoCreditoMicrofinanzas.PagoBienesServicios:
                                if (modelo.PlazoBLitoralMicrofinanza < 2 || modelo.PlazoBLitoralMicrofinanza > 60)
                                    throw new Exception("El plazo no puede ser menor a 2 o superar los 60 meses");

                                if (modelo.MontoBLitoralMicrofinanza < 2000 || modelo.MontoBLitoralMicrofinanza > 150000)
                                    throw new Exception("El monto no puede ser menor a $ 2.000,00 o superar los $ 150.000,00");
                                break;
                            case Dominio.Tipos.Clientes.Cliente0990981930001.TipoCreditoMicrofinanzas.RenovacionSeguros:
                                if (modelo.PlazoBLitoralMicrofinanza < 12 || modelo.PlazoBLitoralMicrofinanza > 36)
                                    throw new Exception("El plazo no puede ser menor a 12 o superar los 36 meses");

                                if (modelo.MontoBLitoralMicrofinanza < 250 || modelo.MontoBLitoralMicrofinanza > 5000)
                                    throw new Exception("El monto no puede ser menor a $ 250,00 o superar los $ 5.000,00");
                                break;
                        }

                        if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion.Trim()))
                            tipoDocumentoBLitoral = "R";
                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion?.Trim()) || ValidacionViewModel.ValidarRuc(modelo.Identificacion?.Trim()))
                            tipoDocumentoBLitoral = "C";

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoDocumentoBLitoralMicrofinanza,
                                Valor = tipoDocumentoBLitoral,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.NumeroDocumentoBLitoralMicrofinanza,
                                Valor = modelo.Identificacion?.Trim(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoCreditoBLitoralMicrofinanza,
                                Valor = ((short)modelo.TipoCreditoBLitoralMicrofinanza).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoBLitoralMicrofinanza,
                                Valor = modelo.PlazoBLitoralMicrofinanza.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoBLitoralMicrofinanza,
                                Valor = modelo.MontoBLitoralMicrofinanza.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresoBLitoralMicrofinanza,
                                Valor = modelo.IngresoBLitoralMicrofinanza.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastoHogarBLitoralMicrofinanza,
                                Valor = modelo.GastoHogarBLitoralMicrofinanza.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.RestaGastoFinancieroBLitoralMicrofinanza,
                                Valor = modelo.RestaGastoFinancieroBLitoralMicrofinanza.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                        }.Where(x => !string.IsNullOrEmpty(x.Valor)).ToArray());
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                        datos = new BuroCreditoViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Fuente = planBuroCredito.Fuente,
                            MensajeError = ex.Message
                        };
                        return PartialView($"../Shared/Fuentes/_FuenteBuroEquifaxBancoLitoralMicrofinanza", datos);
                    }
                }
                #endregion Banco Litoral

                #region Cooperativa Tena
                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1590001585001)
                {
                    try
                    {
                        if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion.Trim()) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion.Trim()))
                            throw new Exception("No se pueden consultar RUCs Jurídicos o del Sector Público.");

                        if (modelo.TipoCreditoCoopTena == Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.Desconocido)
                            throw new Exception("El campo tipo de crédito es obligatorio.");

                        if (modelo.PlazoCoopTena <= 0)
                            throw new Exception("Los plazos deben ser superiores a 0.");

                        //if (modelo.GastoHogarCoopTena < 0)
                        //    throw new Exception("Los gastos del hogar deben ser superiores o iguales 0.");

                        if (modelo.MontoCoopTena <= 0)
                            throw new Exception("Los montos deben ser superiores a 0.");

                        //if (modelo.IngresoCoopTena < 0)
                        //    throw new Exception("Los ingresos deben ser superiores o iguales 0.");

                        //if (modelo.RestaGastoFinancieroCoopTena < 0)
                        //    throw new Exception("Resta de Gastos Financieros deben ser superiores o iguales 0.");

                        switch (modelo.TipoCreditoCoopTena)
                        {
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.Consumo:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 90)
                                    throw new Exception("El plazo no puede ser 0 o superar los 90 días");

                                if (modelo.MontoCoopTena <= 0 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o superar los 50000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.ConsumoSinEncaje:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 90)
                                    throw new Exception("El plazo no puede ser 0 o superar los 90 días");

                                if (modelo.MontoCoopTena < 50 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 50 y 50000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.CrediCash:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 36)
                                    throw new Exception("El plazo no puede ser 0 o superar los 36 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 10000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 10000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.Microcredito:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 78)
                                    throw new Exception("El plazo no puede ser 0 o superar los 78 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 50000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.MicrocreditoSinEncaje:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 78)
                                    throw new Exception("El plazo no puede ser 0 o superar los 78 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 50000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.CONAFIPS:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 48)
                                    throw new Exception("El plazo no puede ser 0 o superar los 48 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 20000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 20000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.ConsumoDPF:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 90)
                                    throw new Exception("El plazo no puede ser 0 o superar los 90 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 50000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.ConsumoRESREF:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 90)
                                    throw new Exception("El plazo no puede ser 0 o superar los 90 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 50000 dólares");

                                break;
                            case Dominio.Tipos.Clientes.Cliente1590001585001.TipoCreditoCoopTena.MicrocreditoREFRES:
                                if (modelo.PlazoCoopTena <= 0 || modelo.PlazoCoopTena > 78)
                                    throw new Exception("El plazo no puede ser 0 o superar los 78 días");

                                if (modelo.MontoCoopTena < 100 || modelo.MontoCoopTena > 50000)
                                    throw new Exception("El monto no puede ser 0 o debe estar entre los 100 y 50000 dólares");

                                break;
                        }

                        if (ValidacionViewModel.ValidarCedula(modelo.Identificacion?.Trim()) || ValidacionViewModel.ValidarRuc(modelo.Identificacion?.Trim()))
                            tipoDocumentoCoopTena = "C";

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoDocumentoCoopTena,
                                Valor = tipoDocumentoCoopTena,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.NumeroDocumentoCoopTena,
                                Valor = modelo.Identificacion?.Trim(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoCreditoCoopTena,
                                Valor = ((short)modelo.TipoCreditoCoopTena).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoCoopTena,
                                Valor = modelo.PlazoCoopTena.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                             new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastoHogarCoopTena,
                                Valor = modelo.GastoHogarCoopTena.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoCoopTena,
                                Valor = modelo.MontoCoopTena.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresoCoopTena,
                                Valor = modelo.IngresoCoopTena.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.RestaGastoFinancieroCoopTena,
                                Valor = modelo.RestaGastoFinancieroCoopTena.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                        }.Where(x => !string.IsNullOrEmpty(x.Valor)).ToArray());
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ex.Message);
                        datos = new BuroCreditoViewModel()
                        {
                            HistorialCabecera = historialTemp,
                            Fuente = planBuroCredito.Fuente,
                            MensajeError = ex.Message
                        };
                        return PartialView($"../Shared/Fuentes/_FuenteBuroEquifaxCoopTena", datos);
                    }
                }
                #endregion Cooperativa Tena

                #region BancoDMiro
                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001)
                {
                    if (modelo.ModeloBancoDMiro)
                    {
                        if (modelo.EstadoCivilBancoDMiro == Dominio.Tipos.Clientes.Cliente0992701374001.EstadoCivil.Desconocido)
                            throw new Exception("El campo estado civil es obligatorio.");

                        if (modelo.AntiguedadLaboralBancoDMiro <= 0)
                            throw new Exception("El campo antiguedad Laboral es obligatorio.");

                        if (modelo.TipoInstruccionBancoDMiro == Dominio.Tipos.Clientes.Cliente0992701374001.TipoInstruccion.Desconocido)
                            throw new Exception("El campo instrucción es obligatorio.");

                        if (modelo.TipoPrestamoBancoDMiro == Dominio.Tipos.Clientes.Cliente0992701374001.TipoPrestamo.Desconocido)
                            throw new Exception("El campo tipo prestamo es obligatorio.");

                        if (modelo.MontoSolicitadoBancoDMiro <= 0)
                            throw new Exception("El campo monto solicitado es obligatorio.");

                        if (modelo.MontoSolicitadoBancoDMiro < 1 || modelo.MontoSolicitadoBancoDMiro > 30000)
                            throw new Exception("El monto solicitado no puede ser menor a 1 o mayor a 30000 dólares.");

                        if (modelo.PlazoBancoDMiro <= 0)
                            throw new Exception("El campo plazo es obligatorio.");

                        if (modelo.PlazoBancoDMiro < 1 || modelo.PlazoBancoDMiro > 48)
                            throw new Exception("El campo plazo no puede ser menor a 1 mes o mayor a 48 meses.");

                        if (modelo.IngresoBancoDMiro <= 0)
                            throw new Exception("El campo ingreso es obligatorio.");

                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IdentificacionSujetoBancoDMiro,
                                Valor = modelo.Identificacion,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IdentificacionConyugeBancoDMiro,
                                Valor = modelo.IdentificacionConyugeBancoDMiro,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.EstadoCivilBancoDMiro,
                                Valor = ((short)modelo.EstadoCivilBancoDMiro).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.AntiguedadLaboralBancoDMiro,
                                Valor = modelo.AntiguedadLaboralBancoDMiro.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.InstruccionBancoDMiro,
                                Valor = ((short)modelo.TipoInstruccionBancoDMiro).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoPrestamoBancoDMiro,
                                Valor = ((short)modelo.TipoPrestamoBancoDMiro).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.MontoSolicitadoBancoDMiro,
                                Valor = modelo.MontoSolicitadoBancoDMiro.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.PlazoBancoDMiro,
                                Valor = modelo.PlazoBancoDMiro.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IngresoBancoDMiro,
                                Valor = modelo.IngresoBancoDMiro.ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.GastosPersonalesBancoDMiro,
                                Valor = modelo.GastosPersonalesBancoDMiro.HasValue ? modelo.GastosPersonalesBancoDMiro.Value.ToString() : string.Empty,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoModeloBancoDMiro,
                                Valor = ((short)Dominio.Tipos.Clientes.Cliente0992701374001.TipoBuroCredito.ModeloDMiro).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            }
                        }.Where(x => !string.IsNullOrEmpty(x.Valor)).ToArray());
                    }
                    else
                    {
                        await _parametrosClientesHistoriales.CreateAsync(new List<ParametroClienteHistorial>()
                        {
                             new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.IdentificacionBancoDMiro,
                                Valor = modelo.Identificacion,
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            },
                            new ParametroClienteHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                Parametro = Dominio.Tipos.ParametrosClientes.TipoModeloBancoDMiro,
                                Valor = ((short)Dominio.Tipos.Clientes.Cliente0992701374001.TipoBuroCredito.ModeloFinancial).ToString(),
                                FechaCreacion = DateTime.Now,
                                UsuarioCreacion = usuarioActual.Id
                            }
                        }.Where(x => !string.IsNullOrEmpty(x.Valor)).ToArray());
                    }
                }
                #endregion BancoDMiro

                var historial = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial);
                var historialConsolidado = await _reporteConsolidado.FirstOrDefaultAsync(m => m, m => m.HistorialId == modelo.IdHistorial);
                if (historial != null)
                {
                    _logger.LogInformation($"Actualizando historial buro. Historial {historial.Id}");
                    historial.IdPlanBuroCredito = idPlanBuro;
                    historial.TipoFuenteBuro = planBuroCredito.Fuente;
                    if (aplicaConsultaBuroCompartida)
                        historial.ConsultaBuroCompartido = true;
                    await _historiales.UpdateAsync(historial);
                    _logger.LogInformation($"Actualizando historial buro. Historial {historial.Id} - Actualizado");
                    if (historialConsolidado != null)
                    {
                        historialConsolidado.ConsultaBuro = historial.IdPlanBuroCredito.HasValue && historial.IdPlanBuroCredito.Value > 0;
                        historialConsolidado.FuenteBuro = historial.TipoFuenteBuro != null && historial.TipoFuenteBuro.HasValue ? historial.TipoFuenteBuro.Value : 0;
                        await _reporteConsolidado.UpdateAsync(historialConsolidado);
                    }
                }
                else
                    _logger.LogInformation($"Actualizando historial buro. Historial null - {modelo.IdHistorial}");

                try
                {
                    var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                    historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                    var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                    var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                    if (!cacheBuro && ambiente == "Production")
                    {
                        var buroCredito = await _detallesHistorial.FirstOrDefaultAsync(m => new { m.Data, m.Historial.Fecha }, m => m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && (m.Historial.Identificacion == modelo.Identificacion || m.Historial.Identificacion == identificacionBuro) && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito && m.Historial.PlanBuroCredito.Fuente == planBuroCredito.Fuente && m.Historial.TipoFuenteBuro == planBuroCredito.Fuente && m.Generado && !m.Cache && planBuroCredito.PersistenciaCache > 0, o => o.OrderByDescending(m => m.Id));
                        if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Aval)
                                credenciales = new[] { credencial.Usuario, credencial.Clave };

                            if (aplicaConsultaBuroCompartida && credenciales != null && credenciales.Any())
                                credenciales = null;

                            if (buroCredito != null && DateTime.Today.Date.AddDays(-planBuroCredito.PersistenciaCache) <= buroCredito.Fecha.Date)
                            {
                                _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval con la persistencia del plan de la empresa para la identificación: {modelo.Identificacion}");
                                r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(buroCredito.Data);
                                cacheBuroCredito = true;
                            }
                            else
                            {
                                _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval identificación: {modelo.Identificacion}");
                                if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1792899036001)
                                {
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Aval)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaAyasaAsync(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaAyasaAsync(modelo.Identificacion, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaAyasaAsync(modelo.Identificacion, credenciales);
#endif
                                    }
                                }
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval (BANCO CAPITAL) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Aval)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaBancoCapitalAsync(modelo.Identificacion.Substring(0, 10), modelo.IngresosBC, modelo.GastosBC, modelo.MontoSolicitadoBC, modelo.PlazoBC, modelo.IdentificacionConyugeBC, modelo.MesesExperienciaActividadBC, modelo.PropiedadesBC, modelo.TipoPrestamoBC.GetEnumDescription(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaBancoCapitalAsync(modelo.Identificacion, modelo.IngresosBC, modelo.GastosBC, modelo.MontoSolicitadoBC, modelo.PlazoBC, modelo.IdentificacionConyugeBC, modelo.MesesExperienciaActividadBC, modelo.PropiedadesBC, modelo.TipoPrestamoBC.GetEnumDescription(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaBancoCapitalAsync(modelo.Identificacion, modelo.IngresosBC, modelo.GastosBC, modelo.MontoSolicitadoBC, modelo.PlazoBC, modelo.IdentificacionConyugeBC, modelo.MesesExperienciaActividadBC, modelo.PropiedadesBC, modelo.TipoPrestamoBC.GetEnumDescription(), credenciales);
#endif
                                    }
                                }
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente0992701374001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval (BANCO DMIRO) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Aval)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (modelo.ModeloBancoDMiro)
                                    {
                                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                        {
#if !DEBUG
                                            r_burocredito = await _burocredito.GetRespuestaBancoDMiroAsync(modelo.Identificacion.Substring(0, 10), modelo.IdentificacionConyugeBancoDMiro, modelo.EstadoCivilBancoDMiro.GetEnumDescription(), modelo.AntiguedadLaboralBancoDMiro, modelo.TipoInstruccionBancoDMiro.GetEnumDescription(), modelo.TipoPrestamoBancoDMiro.GetEnumDescription(), modelo.MontoSolicitadoBancoDMiro, modelo.PlazoBancoDMiro, modelo.IngresoBancoDMiro, modelo.GastosPersonalesBancoDMiro, credenciales);
#endif
                                        }
                                        else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                        {
#if !DEBUG
                                            r_burocredito = await _burocredito.GetRespuestaBancoDMiroAsync(modelo.Identificacion, modelo.IdentificacionConyugeBancoDMiro, modelo.EstadoCivilBancoDMiro.GetEnumDescription(), modelo.AntiguedadLaboralBancoDMiro, modelo.TipoInstruccionBancoDMiro.GetEnumDescription(), modelo.TipoPrestamoBancoDMiro.GetEnumDescription(), modelo.MontoSolicitadoBancoDMiro, modelo.PlazoBancoDMiro, modelo.IngresoBancoDMiro, modelo.GastosPersonalesBancoDMiro, credenciales);
#endif
                                        }
                                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                        {
#if !DEBUG
                                            r_burocredito = await _burocredito.GetRespuestaBancoDMiroAsync(modelo.Identificacion, modelo.IdentificacionConyugeBancoDMiro, modelo.EstadoCivilBancoDMiro.GetEnumDescription(), modelo.AntiguedadLaboralBancoDMiro, modelo.TipoInstruccionBancoDMiro.GetEnumDescription(), modelo.TipoPrestamoBancoDMiro.GetEnumDescription(), modelo.MontoSolicitadoBancoDMiro, modelo.PlazoBancoDMiro, modelo.IngresoBancoDMiro, modelo.GastosPersonalesBancoDMiro, credenciales);
#endif
                                        }
                                    }
                                    else
                                    {
                                        if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                        {
#if !DEBUG
                                            r_burocredito = await _burocredito.GetRespuestaBancoDMiroFinancialAsync(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                        }
                                        else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                        {
#if !DEBUG
                                            r_burocredito = await _burocredito.GetRespuestaBancoDMiroFinancialAsync(modelo.Identificacion, credenciales);
#endif
                                        }
                                        else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                        {
#if !DEBUG
                                            r_burocredito = await _burocredito.GetRespuestaBancoDMiroFinancialAsync(modelo.Identificacion, credenciales);
#endif
                                        }
                                    }
                                }
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente0993382609001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval (MMOTASA) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Aval)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaT611Async(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaT611Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaT611Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                }
                                else if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090077887001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval (IDECAUCHO) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Aval)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaT611Async(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaT611Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocredito = await _burocredito.GetRespuestaT611Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                }
                                else
                                {
                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (!planBuroCredito.ModeloCooperativas)
                                            r_burocredito = await _burocredito.GetRespuestaAsync(modelo.Identificacion.Substring(0, 10), credenciales);
                                        else
                                            r_burocredito = await _burocredito.GetRespuestaCoacAsync(modelo.Identificacion.Substring(0, 10), modelo.Ingresos, modelo.Gastos, modelo.MontoSolicitado, modelo.Plazo, modelo.TipoPrestamo.GetEnumDescription() , credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (!planBuroCredito.ModeloCooperativas)
                                            r_burocredito = await _burocredito.GetRespuestaAsync(modelo.Identificacion, credenciales);
                                        else
                                            r_burocredito = await _burocredito.GetRespuestaCoacAsync(modelo.Identificacion, modelo.Ingresos, modelo.Gastos, modelo.MontoSolicitado, modelo.Plazo, modelo.TipoPrestamo.GetEnumDescription(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (!planBuroCredito.ModeloCooperativas)
                                            r_burocredito = await _burocredito.GetRespuestaAsync(modelo.Identificacion, credenciales);
                                        else
                                            r_burocredito = await _burocredito.GetRespuestaCoacAsync(modelo.Identificacion, modelo.Ingresos, modelo.Gastos, modelo.MontoSolicitado, modelo.Plazo, modelo.TipoPrestamo.GetEnumDescription(), credenciales);
#endif
                                    }
                                }

                                if (r_burocredito != null && r_burocredito.Result == null)
                                {
                                    dataErrorAval = JsonConvert.SerializeObject(r_burocredito);
                                    r_burocredito = null;
                                }
                            }
                        }
                        else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace, credencial.ProductData, credencial.TokenAcceso, credencial.FechaCreacionToken.HasValue && credencial.FechaCreacionToken.Value != default ? credencial.FechaCreacionToken.Value.ToString() : string.Empty };

                            if (aplicaConsultaBuroCompartida && credenciales != null && credenciales.Any())
                                credenciales = null;

                            if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001)
                            {
                                if (modelo.ConsultaBuroBLitoral.HasValue && modelo.ConsultaBuroBLitoral.Value)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (BANCO LITORAL AUTOMOTRIZ) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaBancoLitoralAsync(tipoDocumentoBLitoral, modelo.Identificacion.Substring(0, 10), modelo.TipoLineaBLitoral.GetEnumDescription(), modelo.TipoCreditoBLitoral.GetEnumDescription(), modelo.PlazoBLitoral.ToString(), modelo.MontoBLitoral.ToString(), modelo.IngresoBLitoral.ToString(), modelo.GastoHogarBLitoral.ToString(), modelo.RestaGastoFinancieroBLitoral.ToString(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaBancoLitoralAsync(tipoDocumentoBLitoral, modelo.Identificacion?.Trim(), modelo.TipoLineaBLitoral.GetEnumDescription(), modelo.TipoCreditoBLitoral.GetEnumDescription(), modelo.PlazoBLitoral.ToString(), modelo.MontoBLitoral.ToString(), modelo.IngresoBLitoral.ToString(), modelo.GastoHogarBLitoral.ToString(), modelo.RestaGastoFinancieroBLitoral.ToString(), credenciales);
#endif
                                    }
                                }
                                else if (modelo.ConsultaBuroBLitoralMicrofinanza.HasValue && modelo.ConsultaBuroBLitoralMicrofinanza.Value)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (BANCO LITORAL MICROFINANZA) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaBancoLitoralMicrofinanzaAsync(tipoDocumentoBLitoral, modelo.Identificacion.Substring(0, 10), modelo.TipoCreditoBLitoralMicrofinanza.GetEnumDescription(), modelo.PlazoBLitoralMicrofinanza.ToString(), modelo.MontoBLitoralMicrofinanza.ToString(), modelo.IngresoBLitoralMicrofinanza.ToString(), modelo.GastoHogarBLitoralMicrofinanza.ToString(), modelo.RestaGastoFinancieroBLitoralMicrofinanza.ToString(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaBancoLitoralMicrofinanzaAsync(tipoDocumentoBLitoral, modelo.Identificacion?.Trim(), modelo.TipoCreditoBLitoralMicrofinanza.GetEnumDescription(), modelo.PlazoBLitoralMicrofinanza.ToString(), modelo.MontoBLitoralMicrofinanza.ToString(), modelo.IngresoBLitoralMicrofinanza.ToString(), modelo.GastoHogarBLitoralMicrofinanza.ToString(), modelo.RestaGastoFinancieroBLitoralMicrofinanza.ToString(), credenciales);
#endif
                                    }
                                }
                                else
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax identificación: {modelo.Identificacion}");
                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (string.IsNullOrWhiteSpace(credencial.ProductData?.Trim()))
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaAsync(modelo.Identificacion.Substring(0, 10), credenciales);
                                        else
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaV2Async(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (string.IsNullOrWhiteSpace(credencial.ProductData?.Trim()))
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaAsync(modelo.Identificacion, credenciales);
                                        else
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaV2Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (string.IsNullOrWhiteSpace(credencial.ProductData?.Trim()))
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaAsync(modelo.Identificacion, credenciales);
                                        else
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaV2Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                }

                                if (r_burocreditoEquifax != null && r_burocreditoEquifax.Resultados == null)
                                {
                                    dataErrorEquifax = JsonConvert.SerializeObject(r_burocreditoEquifax);
                                    r_burocreditoEquifax = null;
                                }
                            }
                            else if (buroCredito != null && DateTime.Today.Date.AddDays(-planBuroCredito.PersistenciaCache) <= buroCredito.Fecha.Date)
                            {
                                _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax con la persistencia del plan de la empresa para la identificación: {modelo.Identificacion}");
                                r_burocreditoEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(buroCredito.Data);
                                cacheBuroCredito = true;
                            }
                            else
                            {
                                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (INDUMOT) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaIndumotAsync(modelo.Identificacion.Substring(0, 10), modelo.IdentificacionConyugeIndumot?.Trim(), modelo.IdentificacionGaranteIndumot?.Trim(), modelo.TipoProductoIndumot?.Trim(), modelo.IngresosIndumot, modelo.RestaGastoFinancieroIndumot, modelo.PlazoIndumot, modelo.MontoIndumot, modelo.ValorEntradaIndumot, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaIndumotAsync(modelo.Identificacion?.Trim(), modelo.IdentificacionConyugeIndumot?.Trim(), modelo.IdentificacionGaranteIndumot?.Trim(), modelo.TipoProductoIndumot?.Trim(), modelo.IngresosIndumot, modelo.RestaGastoFinancieroIndumot, modelo.PlazoIndumot, modelo.MontoIndumot, modelo.ValorEntradaIndumot, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaIndumotAsync(modelo.Identificacion?.Trim(), modelo.IdentificacionConyugeIndumot?.Trim(), modelo.IdentificacionGaranteIndumot?.Trim(), modelo.TipoProductoIndumot?.Trim(), modelo.IngresosIndumot, modelo.RestaGastoFinancieroIndumot, modelo.PlazoIndumot, modelo.MontoIndumot, modelo.ValorEntradaIndumot, credenciales);
#endif
                                    }
                                }
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190325180001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (SAN JOSE) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaSanJoseAsync(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaSanJoseAsync(modelo.Identificacion?.Trim(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaSanJoseAsync(modelo.Identificacion?.Trim(), credenciales);
#endif
                                    }
                                }
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0390027923001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (BIBLIAN CB COOPERATIVA) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaCBCooperativaAsync(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaCBCooperativaAsync(modelo.Identificacion?.Trim(), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaCBCooperativaAsync(modelo.Identificacion?.Trim(), credenciales);
#endif
                                    }
                                }
                                //                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190111881001)
                                //                                {
                                //                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (FRAGANCIAS) identificación: {modelo.Identificacion}");
                                //                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                //                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                //                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                //                                    {
                                //#if !DEBUG
                                //                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaFraganciasAsync(modelo.Identificacion.Substring(0, 10), credenciales);
                                //#endif
                                //                                    }
                                //                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                //                                    {
                                //#if !DEBUG
                                //                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaFraganciasAsync(modelo.Identificacion?.Trim(), credenciales);
                                //#endif
                                //                                    }
                                //                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                //                                    {
                                //#if !DEBUG
                                //                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaFraganciasAsync(modelo.Identificacion?.Trim(), credenciales);
                                //#endif
                                //                                    }
                                //                                }
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1590001585001)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax (COOPERATIVA TENA) identificación: {modelo.Identificacion}");
                                    if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                        credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaCooperativaTenaAsync(tipoDocumentoCoopTena, modelo.Identificacion.Substring(0, 10), modelo.TipoCreditoCoopTena.GetEnumDescription(), modelo.PlazoCoopTena.ToString(), modelo.MontoCoopTena.ToString(), modelo.IngresoCoopTena.ToString(), modelo.GastoHogarCoopTena.ToString(), modelo.RestaGastoFinancieroCoopTena.ToString(), credenciales);
#endif
                                    }
                                    //                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    //                                    {
                                    //#if !DEBUG
                                    //                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaCooperativaTenaAsync(tipoDocumentoCoopTena, modelo.Identificacion?.Trim(), modelo.TipoCreditoCoopTena.GetEnumDescription(), modelo.PlazoCoopTena.ToString(), modelo.MontoCoopTena.ToString(), modelo.IngresoCoopTena.ToString(), modelo.GastoHogarCoopTena.ToString(), modelo.RestaGastoFinancieroCoopTena.ToString(), credenciales);
                                    //#endif
                                    //                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaCooperativaTenaAsync(tipoDocumentoCoopTena, modelo.Identificacion?.Trim(), modelo.TipoCreditoCoopTena.GetEnumDescription(), modelo.PlazoCoopTena.ToString(), modelo.MontoCoopTena.ToString(), modelo.IngresoCoopTena.ToString(), modelo.GastoHogarCoopTena.ToString(), modelo.RestaGastoFinancieroCoopTena.ToString(), credenciales);
#endif
                                    }
                                }
                                else if (credencial == null || !credencial.CovidRest)
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax identificación: {modelo.Identificacion}");
                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (credencial == null || string.IsNullOrWhiteSpace(credencial.ProductData?.Trim()))
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaAsync(modelo.Identificacion.Substring(0, 10), credenciales);
                                        else
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaV2Async(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (credencial == null || string.IsNullOrWhiteSpace(credencial.ProductData?.Trim()))
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaAsync(modelo.Identificacion, credenciales);
                                        else
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaV2Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        if (credencial == null || string.IsNullOrWhiteSpace(credencial.ProductData?.Trim()))
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaAsync(modelo.Identificacion, credenciales);
                                        else
                                            r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaV2Async(modelo.Identificacion, credenciales);
#endif
                                    }
                                }
                                else
                                {
                                    _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax identificación: {modelo.Identificacion}");
                                    if (ValidacionViewModel.ValidarRuc(modelo.Identificacion) && !ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) && !ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaRestAsync(modelo.Identificacion.Substring(0, 10), credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarRucJuridico(modelo.Identificacion) || ValidacionViewModel.ValidarRucSectorPublico(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaRestAsync(modelo.Identificacion, credenciales);
#endif
                                    }
                                    else if (ValidacionViewModel.ValidarCedula(modelo.Identificacion))
                                    {
#if !DEBUG
                                        r_burocreditoEquifax = await _buroCreditoEquifax.GetRespuestaRestAsync(modelo.Identificacion, credenciales);
#endif
                                    }
                                }

                                if (r_burocreditoEquifax != null)
                                {
                                    if (!string.IsNullOrWhiteSpace(credencial.TokenAcceso?.Trim()) && !string.IsNullOrWhiteSpace(r_burocreditoEquifax.TokenAcceso?.Trim()) && credencial.TokenAcceso.Trim() != r_burocreditoEquifax.TokenAcceso.Trim())
                                    {
                                        credencial.TokenAcceso = r_burocreditoEquifax.TokenAcceso;
                                        credencial.FechaCreacionToken = r_burocreditoEquifax.FechaCreacionToken;
                                        await _credencialesBuro.UpdateAsync(credencial);
                                    }
                                    else if (!string.IsNullOrWhiteSpace(r_burocreditoEquifax.TokenAcceso?.Trim()) && string.IsNullOrWhiteSpace(credencial.TokenAcceso?.Trim()))
                                    {
                                        credencial.TokenAcceso = r_burocreditoEquifax.TokenAcceso;
                                        credencial.FechaCreacionToken = r_burocreditoEquifax.FechaCreacionToken;
                                        await _credencialesBuro.UpdateAsync(credencial);
                                    }
                                }

                                if (r_burocreditoEquifax != null && r_burocreditoEquifax.Resultados == null)
                                {
                                    dataErrorEquifax = JsonConvert.SerializeObject(r_burocreditoEquifax);
                                    r_burocreditoEquifax = null;
                                }
                            }
                        }
                        else
                            throw new Exception("No se pudo realizar la consulta de Buró de Crédito en ninguna de las Fuentes");
                    }
                    else
                    {
                        var pathBase = System.IO.Path.Combine("wwwroot", "data");
                        var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                        if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                        {
                            if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                            {
                                if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico)
                                {
                                    var pathBuroEmpresa = Path.Combine(pathFuentes, "buroAvalEmpresaBCapitalDemo.json");
                                    r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(System.IO.File.ReadAllText(pathBuroEmpresa));
                                }
                                else if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                                {
                                    var pathBuroCedula = Path.Combine(pathFuentes, "buroAvalCedulaBCapitalDemo.json");
                                    r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(System.IO.File.ReadAllText(pathBuroCedula));
                                }

                            }
                            if (usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente0992701374001)
                            {
                                if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico)
                                {
                                    var pathBuroEmpresa = Path.Combine(pathFuentes, "buroAvalBancoDMiroFinancialEmpresaDemo.json");
                                    if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001 && modelo.ModeloBancoDMiro)
                                        pathBuroEmpresa = Path.Combine(pathFuentes, "buroAvalBancoDMiroEmpresaDemo.json");
                                    if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001 && !modelo.ModeloBancoDMiro)
                                        pathBuroEmpresa = Path.Combine(pathFuentes, "buroAvalBancoDMiroFinancialEmpresaDemo.json");
                                    r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(System.IO.File.ReadAllText(pathBuroEmpresa));
                                }
                                else if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                                {
                                    var pathBuroCedula = Path.Combine(pathFuentes, "buroAvalBancoDMiroFinancialCedulaDemo.json");
                                    if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001 && modelo.ModeloBancoDMiro)
                                        pathBuroCedula = Path.Combine(pathFuentes, "buroAvalBancoDMiroCedulaDemo.json");
                                    if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001 && !modelo.ModeloBancoDMiro)
                                        pathBuroCedula = Path.Combine(pathFuentes, "buroAvalBancoDMiroFinancialCedulaDemo.json");
                                    r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(System.IO.File.ReadAllText(pathBuroCedula));
                                }
                            }
                            else if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico)
                            {
                                var pathBuroEmpresa = Path.Combine(pathFuentes, !planBuroCredito.ModeloCooperativas ? "buroAvalEmpresaDemo.json" : "buroAvalEmpresaCoacDemo.json");
                                //var pathBuroEmpresa = Path.Combine(pathFuentes, "buroAvalEmpresaAyasaDemo.json");
                                r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(System.IO.File.ReadAllText(pathBuroEmpresa));
                            }
                            else if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                var pathBuroCedula = Path.Combine(pathFuentes, !planBuroCredito.ModeloCooperativas ? "buroAvalCedulaDemo.json" : "buroAvalCedulaCoacDemo.json");
                                //var pathBuroCedula = Path.Combine(pathFuentes, "buroAvalCedulaAyasaDemo.json");
                                r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(System.IO.File.ReadAllText(pathBuroCedula));
                            }
                        }
                        else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                        {
                            if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                var pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaDemo.json");
                                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaIndumotDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190325180001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaSanJoseDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0390027923001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaCBCooperativaDemo.json");
                                //else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190111881001)
                                //    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaFraganciasDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoral.HasValue && modelo.ConsultaBuroBLitoral.Value)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaBancoLitoralDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoralMicrofinanza.HasValue && modelo.ConsultaBuroBLitoralMicrofinanza.Value)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaBancoLitoralMicrofinanzaDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1590001585001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxCedulaCoopTenaDemo.json");
                                r_burocreditoEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(System.IO.File.ReadAllText(pathBuroEquifax));
                            }
                            else if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico)
                            {
                                var pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaDemo.json");
                                if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaIndumotDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190325180001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaSanJoseDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0390027923001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaCBCooperativaDemo.json");
                                //else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190111881001)
                                //    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaFraganciasDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoral.HasValue && modelo.ConsultaBuroBLitoral.Value)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaBancoLitoralDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoralMicrofinanza.HasValue && modelo.ConsultaBuroBLitoralMicrofinanza.Value)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaBancoLitoralMicrofinanzaDemo.json");
                                else if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1590001585001)
                                    pathBuroEquifax = Path.Combine(pathFuentes, "buroEquifaxEmpresaCoopTenaDemo.json");
                                r_burocreditoEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(System.IO.File.ReadAllText(pathBuroEquifax));
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar fuente Buró de Crédito con identificación {modelo.Identificacion}: {ex.Message}");
                    mensajeErrorBuro = ex.Message;
                }

                if (r_burocredito == null && planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                {
                    var datosDetalleBuroCredito = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Aval && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosDetalleBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                    {
                        _logger.LogInformation($"Procesando Fuente Buró de Crédito Aval con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheBuroCredito = true;
                        r_burocredito = JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(datosDetalleBuroCredito);
                        busquedaNuevaBuroCredito = true;

                        if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001)
                        {
                            r_burocredito = null;
                            cacheBuroCredito = false;
                            busquedaNuevaBuroCredito = false;
                        }
                    }
                }
                else if (r_burocreditoEquifax == null && planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                {
                    var datosDetalleBuroCredito = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosDetalleBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                    {
                        _logger.LogInformation($"Procesando Fuente Buró de Crédito Equifax con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheBuroCredito = true;
                        r_burocreditoEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(datosDetalleBuroCredito);
                        busquedaNuevaBuroCredito = true;

                        if (usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001)
                        {
                            r_burocreditoEquifax = null;
                            cacheBuroCredito = false;
                            busquedaNuevaBuroCredito = false;//me permite volver a consultar?
                        }
                    }
                }

                try
                {
                    if ((historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural) && r_burocredito != null && r_burocredito.Result != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                    {
                        var deudaSuma = 0.00;
                        var ingresoPrevio = 0.00;
                        var ingresoInferior = string.Empty;
                        var ingresoSuperior = string.Empty;

                        if (r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.DeudaVigenteTotal != null && r_burocredito.Result.DeudaVigenteTotal.Any())
                        {
                            var deudaVencido = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorVencido);
                            var deudaDemandaJudicial = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.ValorDemandaJudicial);
                            var deudaCarteraCastigada = r_burocredito.Result.DeudaVigenteTotal.Sum(x => x.CarteraCastigada);
                            deudaSuma = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada);
                        }
                        if (r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any() && !string.IsNullOrEmpty(r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso))
                        {
                            var posibleIngreso = Regex.Matches(r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso, @"\d\.?\d+\,?\d*");
                            if (posibleIngreso.Count() == 2)
                            {
                                ingresoInferior = posibleIngreso[0].ToString().Replace(".", "").Replace(",", ".");
                                ingresoSuperior = posibleIngreso[1].ToString().Replace(".", "").Replace(",", ".");
                            }
                            else if (posibleIngreso.Count() == 1)
                                ingresoSuperior = posibleIngreso[0].ToString().Replace(".", "").Replace(",", ".");
                        }

                        if (r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any() && r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular > 0 && deudaSuma == 0)
                        {
                            ingresoPrevio = (double)(r_burocredito.Result.GastoFinanciero.FirstOrDefault()?.CuotaEstimadaTitular * 1.40);
                            if (double.TryParse(ingresoSuperior, out _) && double.Parse(ingresoSuperior) > 0 && double.Parse(ingresoSuperior) >= ingresoPrevio)
                                r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoSuperior;
                            else if (!r_burocredito.Result.Ingreso.Any())
                                r_burocredito.Result.Ingreso.Add(new Externos.Logica.BuroCredito.Modelos.CreditoRespuesta.Ingreso() { RangoIngreso = ingresoPrevio.ToString("N", culture) });
                            else
                                r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoPrevio.ToString("N", culture);
                        }
                        else if (r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.GastoFinanciero != null && r_burocredito.Result.GastoFinanciero.Any() && r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular > 0 && deudaSuma > 0)
                        {
                            ingresoPrevio = (double)(r_burocredito.Result.GastoFinanciero.FirstOrDefault().CuotaEstimadaTitular * 1.40);
                            if (double.TryParse(ingresoInferior, out _) && double.Parse(ingresoInferior) > 0)
                                r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoInferior;
                            else if (double.TryParse(ingresoSuperior, out _) && double.Parse(ingresoSuperior) > 0)
                                r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoSuperior;
                            else if (!r_burocredito.Result.Ingreso.Any())
                                r_burocredito.Result.Ingreso.Add(new Externos.Logica.BuroCredito.Modelos.CreditoRespuesta.Ingreso() { RangoIngreso = ingresoPrevio.ToString("N", culture) });
                            else
                                r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoPrevio.ToString("N", culture);
                        }
                        else if (double.TryParse(ingresoSuperior, out _) && double.Parse(ingresoSuperior) > 0 && deudaSuma == 0)
                            r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoSuperior;
                        else if (double.TryParse(ingresoInferior, out _) && double.Parse(ingresoInferior) > 0 && deudaSuma > 0)
                            r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoInferior;
                        else if (r_burocredito != null && r_burocredito.Result != null && r_burocredito.Result.Ingreso != null && r_burocredito.Result.Ingreso.Any())
                            r_burocredito.Result.Ingreso.FirstOrDefault().RangoIngreso = ingresoSuperior;
                    }
                    else if ((historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural) && r_burocreditoEquifax != null && r_burocreditoEquifax.Resultados != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                    {
                        var deudaSumaEquifax = 0.00;
                        var ingresoPrevioEquifax = 0.00;
                        var ingresoEstimadoEquifax = 0.00;
                        if (r_burocreditoEquifax != null && r_burocreditoEquifax.Resultados != null && r_burocreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && r_burocreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any())
                        {
                            var deudaVencido = r_burocreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != String.Empty).Sum(x => x.Vencido);
                            var deudaDemandaJudicial = r_burocreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != String.Empty).Sum(x => x.DemandaJudicial);
                            var deudaCarteraCastigada = r_burocreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => x.Titulo != String.Empty).Sum(x => x.CarteraCastigada);
                            deudaSumaEquifax = (double)(deudaVencido + deudaDemandaJudicial + deudaCarteraCastigada);
                        }
                        if (r_burocreditoEquifax != null && r_burocreditoEquifax.Resultados != null && r_burocreditoEquifax.Resultados.CuotaEstimadaMensualWeb != null && r_burocreditoEquifax.Resultados.CuotaEstimadaMensualWeb.Pago > 0 && deudaSumaEquifax == 0)
                        {
                            ingresoPrevioEquifax = r_burocreditoEquifax.Resultados.CuotaEstimadaMensualWeb.Pago * 1.40;
                            if (r_burocreditoEquifax.Resultados.IndicadorCOVID0 != null && r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor > 0)
                            {
                                ingresoEstimadoEquifax = (double)r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor;
                                if (ingresoEstimadoEquifax > 0 && (double)ingresoEstimadoEquifax > ingresoPrevioEquifax)
                                    r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor = (decimal)ingresoEstimadoEquifax;
                                else
                                    r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor = (decimal)ingresoPrevioEquifax;
                            }
                            else if (r_burocreditoEquifax.Resultados.IndicadorCOVID0 == null)
                                r_burocreditoEquifax.Resultados.IndicadorCOVID0 = new Externos.Logica.Equifax.Resultados._IndicadorCOVID0() { IncomePredictor = (decimal)ingresoPrevioEquifax };
                            else
                                r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor = (decimal)ingresoPrevioEquifax;
                        }
                        else if (r_burocreditoEquifax != null && r_burocreditoEquifax.Resultados != null && r_burocreditoEquifax.Resultados.CuotaEstimadaMensualWeb != null && r_burocreditoEquifax.Resultados.CuotaEstimadaMensualWeb.Pago > 0 && deudaSumaEquifax > 0)
                        {
                            ingresoPrevioEquifax = r_burocreditoEquifax.Resultados.CuotaEstimadaMensualWeb.Pago * 1.40;
                            if (r_burocreditoEquifax.Resultados.IndicadorCOVID0 != null && r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor > 0)
                            {
                                ingresoEstimadoEquifax = (double)r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor;
                                if (ingresoEstimadoEquifax > 0)
                                    r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor = (decimal)ingresoEstimadoEquifax;
                                else
                                    r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor = (decimal)ingresoPrevioEquifax;
                            }
                            else if (r_burocreditoEquifax.Resultados.IndicadorCOVID0 == null)
                                r_burocreditoEquifax.Resultados.IndicadorCOVID0 = new Externos.Logica.Equifax.Resultados._IndicadorCOVID0() { IncomePredictor = (decimal)ingresoPrevioEquifax };
                            else
                                r_burocreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor = (decimal)ingresoPrevioEquifax;
                        }
                    }

                    if (r_burocredito != null && r_burocredito.Result != null)
                    {
                        if (r_burocredito.Result.ScoreFinanciero != null && r_burocredito.Result.ScoreFinanciero.Any())
                        {
                            r_burocredito.Result.Score = r_burocredito.Result.ScoreFinanciero.Select(x => new Externos.Logica.BuroCredito.Modelos.CreditoRespuesta.Scores
                            {
                                Score = x.Score,
                                ClientesPeorScore = x.ClientesPeorScore,
                                TasaMalos = !string.IsNullOrWhiteSpace(x.TasaMalos?.Trim()) && double.TryParse(x.TasaMalos.Trim(), out _) ? double.Parse(x.TasaMalos.Trim()) : 0
                            }).ToList();
                        }
                        else if (r_burocredito.Result.ScoreDMiro != null && r_burocredito.Result.ScoreDMiro.Any())
                        {
                            r_burocredito.Result.Score = r_burocredito.Result.ScoreDMiro.Select(x => new Externos.Logica.BuroCredito.Modelos.CreditoRespuesta.Scores
                            {
                                Score = x.Score,
                                ClientesPeorScore = x.ClientesPeorScore,
                                TasaMalos = !string.IsNullOrWhiteSpace(x.TasaMalos?.Trim()) && double.TryParse(x.TasaMalos.Trim(), out _) ? double.Parse(x.TasaMalos.Trim()) : 0
                            }).ToList();
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                datos = new BuroCreditoViewModel()
                {
                    HistorialCabecera = historialTemp,
                    BuroCredito = r_burocredito,
                    BusquedaNueva = busquedaNuevaBuroCredito,
                    DatosCache = cacheBuroCredito,
                    Fuente = planBuroCredito.Fuente,
                    BuroCreditoEquifax = r_burocreditoEquifax,
                    ErrorEquifax = !string.IsNullOrEmpty(dataErrorEquifax) ? JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(dataErrorEquifax) : null,
                    ErrorAval = !string.IsNullOrEmpty(dataErrorAval) ? JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(dataErrorAval) : null,
                    MensajeError = mensajeErrorBuro
                };

                _logger.LogInformation("Fuente de Buró de Crédito procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                        {
                            var codigoBuro = new List<string> { "A401", "A402", "A410", "A404", "A405", "A406", "A407", "A408", "A409", "A411", "A412", "A415", "A416", "A418", "A419", "A420", "A909", "A999" };
                            var historialBuroCredito = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito);
                            if (historialBuroCredito != null)
                            {
                                if (!historialBuroCredito.Generado || !busquedaNuevaBuroCredito)
                                {
                                    historialBuroCredito.IdHistorial = modelo.IdHistorial;
                                    historialBuroCredito.TipoFuente = Dominio.Tipos.Fuentes.BuroCredito;
                                    historialBuroCredito.Generado = datos.BuroCredito != null && !codigoBuro.Contains(datos.BuroCredito.ResponseCode);
                                    historialBuroCredito.Data = datos.BuroCredito != null ? JsonConvert.SerializeObject(datos.BuroCredito) : null;
                                    historialBuroCredito.Cache = cacheBuroCredito;
                                    historialBuroCredito.DataError = !string.IsNullOrEmpty(dataErrorAval) ? dataErrorAval : null;
                                    historialBuroCredito.FechaRegistro = DateTime.Now;
                                    historialBuroCredito.Reintento = true;
                                    historialBuroCredito.Observacion = datos.BuroCredito != null && !string.IsNullOrEmpty(datos.BuroCredito.Usuario) ? $"Usuario WS AVAL: {datos.BuroCredito.Usuario}" : null;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialBuroCredito);
                                    _logger.LogInformation("Historial de la Fuente Aval Buró de Crédito actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.BuroCredito,
                                    Generado = datos.BuroCredito != null && !codigoBuro.Contains(datos.BuroCredito.ResponseCode),
                                    Data = datos.BuroCredito != null ? JsonConvert.SerializeObject(datos.BuroCredito) : null,
                                    Cache = cacheBuroCredito,
                                    DataError = !string.IsNullOrEmpty(dataErrorAval) ? dataErrorAval : null,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false,
                                    Observacion = datos.BuroCredito != null && !string.IsNullOrEmpty(datos.BuroCredito.Usuario) ? $"Usuario WS AVAL: {datos.BuroCredito.Usuario}" : null
                                });
                                _logger.LogInformation("Historial de la Fuente Aval Buró de Crédito procesado correctamente");
                            }
                        }
                        else if (planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                        {
                            var historialBuroCredito = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito);
                            if (historialBuroCredito != null)
                            {
                                if (!historialBuroCredito.Generado || !busquedaNuevaBuroCredito)
                                {
                                    historialBuroCredito.IdHistorial = modelo.IdHistorial;
                                    historialBuroCredito.TipoFuente = Dominio.Tipos.Fuentes.BuroCredito;
                                    historialBuroCredito.Generado = datos.BuroCreditoEquifax != null;
                                    historialBuroCredito.Data = datos.BuroCreditoEquifax != null ? JsonConvert.SerializeObject(datos.BuroCreditoEquifax) : null;
                                    historialBuroCredito.Cache = cacheBuroCredito;
                                    historialBuroCredito.DataError = !string.IsNullOrEmpty(dataErrorEquifax) ? dataErrorEquifax : null;
                                    historialBuroCredito.FechaRegistro = DateTime.Now;
                                    historialBuroCredito.Reintento = true;
                                    historialBuroCredito.Observacion = datos.BuroCreditoEquifax != null && !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Usuario) ? $"Usuario WS Equifax: {datos.BuroCreditoEquifax.Usuario}" : null;
                                    await _detallesHistorial.ActualizarDetalleHistorialAsync(historialBuroCredito);
                                    _logger.LogInformation("Historial de la Fuente Equifax Buró de Crédito actualizado correctamente");
                                }
                            }
                            else
                            {
                                await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                                {
                                    IdHistorial = modelo.IdHistorial,
                                    TipoFuente = Dominio.Tipos.Fuentes.BuroCredito,
                                    Generado = datos.BuroCreditoEquifax != null,
                                    Data = datos.BuroCreditoEquifax != null ? JsonConvert.SerializeObject(datos.BuroCreditoEquifax) : null,
                                    Cache = cacheBuroCredito,
                                    DataError = !string.IsNullOrEmpty(dataErrorEquifax) ? dataErrorEquifax : null,
                                    FechaRegistro = DateTime.Now,
                                    Reintento = false,
                                    Observacion = datos.BuroCreditoEquifax != null && !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Usuario) ? $"Usuario WS Equifax: {datos.BuroCreditoEquifax.Usuario}" : null
                                });
                                _logger.LogInformation("Historial de la Fuente Equifax Buró de Crédito procesado correctamente");
                            }
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                var vistaBuro = string.Empty;
                if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval && usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1792899036001)
                    vistaBuro = "_FuenteBuroCreditoAyasa";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval && usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001)
                    vistaBuro = "_FuenteBuroCreditoBCapital";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval && planBuroCredito.ModeloCooperativas)
                    vistaBuro = "_FuenteBuroCreditoCooperativas";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval && usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente0992701374001)
                    vistaBuro = "_FuenteBuroCreditoBDMiro";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Aval)
                    vistaBuro = "_FuenteBuroCredito";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001)
                    vistaBuro = "_FuenteBuroEquifaxIndumot";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190325180001)
                    vistaBuro = "_FuenteBuroEquifaxSanJose";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0390027923001)
                    vistaBuro = "_FuenteBuroEquifaxCBCooperativa";
                //else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190111881001)
                //    vistaBuro = "_FuenteBuroEquifaxFragancias";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoral.HasValue && modelo.ConsultaBuroBLitoral.Value)
                    vistaBuro = "_FuenteBuroEquifaxBancoLitoral";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001 && modelo.ConsultaBuroBLitoralMicrofinanza.HasValue && modelo.ConsultaBuroBLitoralMicrofinanza.Value)
                    vistaBuro = "_FuenteBuroEquifaxBancoLitoralMicrofinanza";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax && usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1590001585001)
                    vistaBuro = "_FuenteBuroEquifaxCoopTena";
                else if (planBuroCredito != null && planBuroCredito.Fuente == Dominio.Tipos.FuentesBuro.Equifax)
                    vistaBuro = "_FuenteBuroEquifax";
                else
                    vistaBuro = "_FuenteBuro";

                if (datos != null)
                {
                    if (datos.BuroCreditoEquifax != null)
                    {
                        datos.BuroCreditoEquifax.Usuario = null;
                        datos.BuroCreditoEquifax.Clave = null;
                    }

                    if (datos.BuroCredito != null)
                    {
                        datos.BuroCredito.Usuario = null;
                        datos.BuroCredito.Clave = null;
                    }
                }
                return PartialView($"../Shared/Fuentes/{vistaBuro}", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteBuro", null);
            }
        }
        #endregion Fuentes

        #region ConsultasEquifax

        [HttpPost]
        [Route("ObtenerNivelTotalDeudaHistoricaEquifax")]
        public async Task<IActionResult> ObtenerNivelTotalDeudaHistoricaEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoTotalDeudaHistorica nivelTotalDeudaHistorica = null;
                var busquedaNivelTotalDeudaHistorica = false;
                var cacheNivelTotalDeudaHistorica = false;
                var datos = new NivelTotalDeudaHistoricaViewModel();

                try
                {
                    var consultaDeudaHistorico = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelTotalDeudaHistorica && m.Generado, null, null, true);
                    if (consultaDeudaHistorico != null && !string.IsNullOrEmpty(consultaDeudaHistorico.Data))
                    {
                        nivelTotalDeudaHistorica = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoTotalDeudaHistorica>(consultaDeudaHistorico.Data);
                        datos = new NivelTotalDeudaHistoricaViewModel()
                        {
                            TotalDeudaHistorica = nivelTotalDeudaHistorica,
                            BusquedaNueva = busquedaNivelTotalDeudaHistorica,
                            DatosCache = consultaDeudaHistorico.Cache,
                        };

                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesTotalDeudaHistorica", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoDeudaHistorica3601 == null || !datosEquifax.Resultados.RecursivoDeudaHistorica3601.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Deuda Historica 360.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelTotalDeudaHistorica = await _buroCreditoEquifax.GetTotalDeudaHistoricaAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, credenciales);

                            if (nivelTotalDeudaHistorica != null && !nivelTotalDeudaHistorica.ResultadoConsultaTotalDeudaHistorica)
                                nivelTotalDeudaHistorica = null;
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelTotalDeudaHistorica = Path.Combine(pathFuentes, "totalDeudaHistoricaDemo.json");
                            nivelTotalDeudaHistorica = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoTotalDeudaHistorica>(System.IO.File.ReadAllText(pathNivelTotalDeudaHistorica));
                            busquedaNivelTotalDeudaHistorica = false;
                            cacheNivelTotalDeudaHistorica = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Total Deuda Historica {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelTotalDeudaHistorica == null)
                {
                    busquedaNivelTotalDeudaHistorica = true;
                    var datosNivelTotalDeudaHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelTotalDeudaHistorica && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelTotalDeudaHistorica != null)
                    {
                        _logger.LogInformation($"Procesando Nivel Total Deuda Historica con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelTotalDeudaHistorica = true;
                        nivelTotalDeudaHistorica = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoTotalDeudaHistorica>(datosNivelTotalDeudaHistorica);
                    }
                }

                datos = new NivelTotalDeudaHistoricaViewModel()
                {
                    TotalDeudaHistorica = nivelTotalDeudaHistorica,
                    BusquedaNueva = busquedaNivelTotalDeudaHistorica,
                    DatosCache = cacheNivelTotalDeudaHistorica,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Total Deuda Historica procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Total Deuda Historica. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelTotalDeudaHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelTotalDeudaHistorica);
                        if (historialNivelTotalDeudaHistorica != null)
                        {
                            if (!historialNivelTotalDeudaHistorica.Generado || !busquedaNivelTotalDeudaHistorica)
                            {
                                historialNivelTotalDeudaHistorica.IdHistorial = modelo.IdHistorial;
                                historialNivelTotalDeudaHistorica.TipoFuente = Dominio.Tipos.Fuentes.NivelTotalDeudaHistorica;
                                historialNivelTotalDeudaHistorica.Generado = nivelTotalDeudaHistorica != null;
                                historialNivelTotalDeudaHistorica.Data = nivelTotalDeudaHistorica != null ? JsonConvert.SerializeObject(nivelTotalDeudaHistorica) : null;
                                historialNivelTotalDeudaHistorica.Cache = cacheNivelTotalDeudaHistorica;
                                historialNivelTotalDeudaHistorica.FechaRegistro = DateTime.Now;
                                historialNivelTotalDeudaHistorica.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelTotalDeudaHistorica);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Total Deuda Historica actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelTotalDeudaHistorica,
                                Generado = nivelTotalDeudaHistorica != null,
                                Data = nivelTotalDeudaHistorica != null ? JsonConvert.SerializeObject(nivelTotalDeudaHistorica) : null,
                                Cache = cacheNivelTotalDeudaHistorica,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Total Deuda Historica procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesTotalDeudaHistorica", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesTotalDeudaHistorica", null);
            }
        }

        [HttpPost]
        [Route("ObtenerNivelEvolucionHistoricaDistribucionEndeudamientoEquifax")]
        public async Task<IActionResult> ObtenerNivelEvolucionHistoricaDistribucionEndeudamientoEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoEvolucionHistorico nivelEvolucionHistorica = null;
                var busquedaNivelEvolucionHistorica = false;
                var cacheNivelEvolucionHistorica = false;
                var datos = new NivelEvolucionHistoricaViewModel();

                try
                {
                    var consultaEvolucionHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelEvolucionHistoricaDistribucionEndeudamiento && m.Generado, null, null, true);
                    if (consultaEvolucionHistorica != null && !string.IsNullOrEmpty(consultaEvolucionHistorica.Data))
                    {
                        nivelEvolucionHistorica = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoEvolucionHistorico>(consultaEvolucionHistorica.Data);
                        datos = new NivelEvolucionHistoricaViewModel()
                        {
                            EvolucionHistorica = nivelEvolucionHistorica,
                            BusquedaNueva = busquedaNivelEvolucionHistorica,
                            DatosCache = consultaEvolucionHistorica.Cache,
                        };

                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesEvolucionHistorica", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600 == null || !datosEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Detalle Distribución Endeudamiento Educativo 360.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelEvolucionHistorica = await _buroCreditoEquifax.GetEvolucionHistoricaDistribucionEndeudamientoAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, credenciales);

                            if (nivelEvolucionHistorica != null && !nivelEvolucionHistorica.ResultadoConsultaEvolucionHistorico)
                                nivelEvolucionHistorica = null;
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelEvolucionHistorica = Path.Combine(pathFuentes, "evolucionHistoricoDemo.json");
                            nivelEvolucionHistorica = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoEvolucionHistorico>(System.IO.File.ReadAllText(pathNivelEvolucionHistorica));
                            busquedaNivelEvolucionHistorica = false;
                            cacheNivelEvolucionHistorica = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Evolución Histórica Distribución Endeudamiento {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelEvolucionHistorica == null)
                {
                    busquedaNivelEvolucionHistorica = true;
                    var datosNivelEvolucionHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelEvolucionHistoricaDistribucionEndeudamiento && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelEvolucionHistorica != null)
                    {
                        _logger.LogInformation($"Procesando Nivel Evolución Histórica Distribución Endeudamiento con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelEvolucionHistorica = true;
                        nivelEvolucionHistorica = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoEvolucionHistorico>(datosNivelEvolucionHistorica);
                    }
                }

                datos = new NivelEvolucionHistoricaViewModel()
                {
                    EvolucionHistorica = nivelEvolucionHistorica,
                    BusquedaNueva = busquedaNivelEvolucionHistorica,
                    DatosCache = cacheNivelEvolucionHistorica,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Evolución Histórica Distribución Endeudamiento procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Evolución Histórica Distribución Endeudamiento. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelEvolucionHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelEvolucionHistoricaDistribucionEndeudamiento);
                        if (historialNivelEvolucionHistorica != null)
                        {
                            if (!historialNivelEvolucionHistorica.Generado || !busquedaNivelEvolucionHistorica)
                            {
                                historialNivelEvolucionHistorica.IdHistorial = modelo.IdHistorial;
                                historialNivelEvolucionHistorica.TipoFuente = Dominio.Tipos.Fuentes.NivelEvolucionHistoricaDistribucionEndeudamiento;
                                historialNivelEvolucionHistorica.Generado = nivelEvolucionHistorica != null;
                                historialNivelEvolucionHistorica.Data = nivelEvolucionHistorica != null ? JsonConvert.SerializeObject(nivelEvolucionHistorica) : null;
                                historialNivelEvolucionHistorica.Cache = cacheNivelEvolucionHistorica;
                                historialNivelEvolucionHistorica.FechaRegistro = DateTime.Now;
                                historialNivelEvolucionHistorica.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelEvolucionHistorica);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Evolución Histórica Distribución Endeudamiento actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelEvolucionHistoricaDistribucionEndeudamiento,
                                Generado = nivelEvolucionHistorica != null,
                                Data = nivelEvolucionHistorica != null ? JsonConvert.SerializeObject(nivelEvolucionHistorica) : null,
                                Cache = cacheNivelEvolucionHistorica,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Evolución Histórica Distribución Endeudamiento procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesEvolucionHistorica", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesEvolucionHistorica", null);
            }
        }

        [HttpPost]
        [Route("ObtenerNivelHistoricoEstructuraVencimientosEquifax")]
        public async Task<IActionResult> ObtenerNivelHistoricoEstructuraVencimientosEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoHistoricoEstructuraVencimiento nivelHistoricoEstructuraVencimiento = null;
                var busquedaNivelHistoricoEstructuraVencimiento = false;
                var cacheNivelHistoricoEstructuraVencimiento = false;
                var datos = new HistoricoEstructuraVencimientoViewModel();

                try
                {
                    var consultaHistoricoEstructuraVencimiento = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelHistoricoEstructuraVencimientos && m.Generado, null, null, true);
                    if (consultaHistoricoEstructuraVencimiento != null && !string.IsNullOrEmpty(consultaHistoricoEstructuraVencimiento.Data))
                    {
                        nivelHistoricoEstructuraVencimiento = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoHistoricoEstructuraVencimiento>(consultaHistoricoEstructuraVencimiento.Data);
                        datos = new HistoricoEstructuraVencimientoViewModel()
                        {
                            HistoricoEstructuraVencimiento = nivelHistoricoEstructuraVencimiento,
                            BusquedaNueva = busquedaNivelHistoricoEstructuraVencimiento,
                            DatosCache = consultaHistoricoEstructuraVencimiento.Cache,
                        };

                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesHistoricoEstructuraVencimiento", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoDeudaHistorica3601 == null || !datosEquifax.Resultados.RecursivoDeudaHistorica3601.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Deuda Historica 360.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelHistoricoEstructuraVencimiento = await _buroCreditoEquifax.GetHistoricoEstructuraVencimientosAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, credenciales);

                            if (nivelHistoricoEstructuraVencimiento != null && !nivelHistoricoEstructuraVencimiento.ResultadoConsultaHistoricoEstructuraVencimiento)
                                nivelHistoricoEstructuraVencimiento = null;
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelHistoricoEstructuraVencimiento = Path.Combine(pathFuentes, "historicoEstructuraVencimientoDemo.json");
                            nivelHistoricoEstructuraVencimiento = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoHistoricoEstructuraVencimiento>(System.IO.File.ReadAllText(pathNivelHistoricoEstructuraVencimiento));
                            busquedaNivelHistoricoEstructuraVencimiento = false;
                            cacheNivelHistoricoEstructuraVencimiento = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Total Deuda Historica {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelHistoricoEstructuraVencimiento == null)
                {
                    busquedaNivelHistoricoEstructuraVencimiento = true;
                    var datosNivelHistoricoEstructuraVencimiento = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelHistoricoEstructuraVencimientos && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelHistoricoEstructuraVencimiento != null)
                    {
                        _logger.LogInformation($"Procesando Nivel Total Deuda Historica con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelHistoricoEstructuraVencimiento = true;
                        nivelHistoricoEstructuraVencimiento = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoHistoricoEstructuraVencimiento>(datosNivelHistoricoEstructuraVencimiento);
                    }
                }

                datos = new HistoricoEstructuraVencimientoViewModel()
                {
                    HistoricoEstructuraVencimiento = nivelHistoricoEstructuraVencimiento,
                    BusquedaNueva = busquedaNivelHistoricoEstructuraVencimiento,
                    DatosCache = cacheNivelHistoricoEstructuraVencimiento,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Total Deuda Historica procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Total Deuda Historica. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelHistoricoEstructuraVencimiento = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelHistoricoEstructuraVencimientos);
                        if (historialNivelHistoricoEstructuraVencimiento != null)
                        {
                            if (!historialNivelHistoricoEstructuraVencimiento.Generado || !busquedaNivelHistoricoEstructuraVencimiento)
                            {
                                historialNivelHistoricoEstructuraVencimiento.IdHistorial = modelo.IdHistorial;
                                historialNivelHistoricoEstructuraVencimiento.TipoFuente = Dominio.Tipos.Fuentes.NivelHistoricoEstructuraVencimientos;
                                historialNivelHistoricoEstructuraVencimiento.Generado = nivelHistoricoEstructuraVencimiento != null;
                                historialNivelHistoricoEstructuraVencimiento.Data = nivelHistoricoEstructuraVencimiento != null ? JsonConvert.SerializeObject(nivelHistoricoEstructuraVencimiento) : null;
                                historialNivelHistoricoEstructuraVencimiento.Cache = cacheNivelHistoricoEstructuraVencimiento;
                                historialNivelHistoricoEstructuraVencimiento.FechaRegistro = DateTime.Now;
                                historialNivelHistoricoEstructuraVencimiento.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelHistoricoEstructuraVencimiento);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Total Deuda Historica actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelHistoricoEstructuraVencimientos,
                                Generado = nivelHistoricoEstructuraVencimiento != null,
                                Data = nivelHistoricoEstructuraVencimiento != null ? JsonConvert.SerializeObject(nivelHistoricoEstructuraVencimiento) : null,
                                Cache = cacheNivelHistoricoEstructuraVencimiento,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Total Deuda Historica procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesHistoricoEstructuraVencimiento", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesHistoricoEstructuraVencimiento", null);
            }
        }

        [HttpPost]
        [Route("ObtenerNivelSaldoPorVencerPorInstitucionEquifax")]
        public async Task<IActionResult> ObtenerNivelSaldoPorVencerPorInstitucionEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                if (string.IsNullOrEmpty(modelo.CodigoInstitucion?.Trim()))
                    throw new Exception("El campo Código Institución es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoSaldoVencerInstitucion nivelSaldoVencerInstitucion = null;
                var busquedaNivelSaldoVencerInstitucion = false;
                var cacheNivelSaldoVencerInstitucion = false;
                var datos = new NivelSaldoPorVencerPorInstitucionViewModel();
                var lstDatos = new List<NivelSaldoPorVencerPorInstitucionViewModel>();
                var datosError = string.Empty;

                try
                {
                    var consultaEvolucionHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelSaldoPorVencerPorInstitucion && m.Generado, null, null, true);
                    if (consultaEvolucionHistorica != null && !string.IsNullOrEmpty(consultaEvolucionHistorica.Data))
                        lstDatos = JsonConvert.DeserializeObject<List<NivelSaldoPorVencerPorInstitucionViewModel>>(consultaEvolucionHistorica.Data);

                    if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim()))
                    {
                        nivelSaldoVencerInstitucion = lstDatos.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim())?.SaldoVencerInstitucion;
                        datos = new NivelSaldoPorVencerPorInstitucionViewModel()
                        {
                            SaldoVencerInstitucion = nivelSaldoVencerInstitucion,
                            BusquedaNueva = busquedaNivelSaldoVencerInstitucion,
                            DatosCache = consultaEvolucionHistorica.Cache,
                        };
                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesSaldoVencerInstitucion", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento == null || !datosEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Composicion Estructura De Vencimiento.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelSaldoVencerInstitucion = await _buroCreditoEquifax.GetSaldoPorVencerPorInstitucionAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, modelo.CodigoInstitucion.Trim(), credenciales);

                            if (nivelSaldoVencerInstitucion != null && !nivelSaldoVencerInstitucion.ResultadoConsultaNivelSaldoVencerInstitucion)
                            {
                                datosError = JsonConvert.SerializeObject(nivelSaldoVencerInstitucion);
                                nivelSaldoVencerInstitucion = null;
                            }
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelEvolucionHistorica = Path.Combine(pathFuentes, "nivelSaldoVencerInstitucionDemo.json");
                            nivelSaldoVencerInstitucion = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoSaldoVencerInstitucion>(System.IO.File.ReadAllText(pathNivelEvolucionHistorica));
                            busquedaNivelSaldoVencerInstitucion = false;
                            cacheNivelSaldoVencerInstitucion = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Saldo Por Vencer Por Institución {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelSaldoVencerInstitucion == null)
                {
                    busquedaNivelSaldoVencerInstitucion = true;
                    var datosNivelEvolucionHistorica = await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelSaldoPorVencerPorInstitucion && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelEvolucionHistorica != null && datosNivelEvolucionHistorica.Any())
                    {
                        _logger.LogInformation($"Procesando Nivel Saldo Por Vencer Por Institución con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelSaldoVencerInstitucion = true;
                        foreach (var itemNivelEvolucionHistorica in datosNivelEvolucionHistorica)
                        {
                            lstDatos.AddRange(JsonConvert.DeserializeObject<List<NivelSaldoPorVencerPorInstitucionViewModel>>(itemNivelEvolucionHistorica));
                        }
                        if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim()))
                            nivelSaldoVencerInstitucion = lstDatos.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim()).SaldoVencerInstitucion;
                    }
                }

                datos = new NivelSaldoPorVencerPorInstitucionViewModel()
                {
                    SaldoVencerInstitucion = nivelSaldoVencerInstitucion,
                    BusquedaNueva = busquedaNivelSaldoVencerInstitucion,
                    DatosCache = cacheNivelSaldoVencerInstitucion,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Saldo Por Vencer Por Institución procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Saldo Por Vencer Por Institución. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelEvolucionHistorica = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelSaldoPorVencerPorInstitucion);
                        if (historialNivelEvolucionHistorica != null)
                        {
                            var lstEvolucionHistorica = new List<NivelSaldoPorVencerPorInstitucionViewModel>();
                            var lstContador = 0;
                            if (historialNivelEvolucionHistorica.Data != null)
                            {
                                lstEvolucionHistorica = JsonConvert.DeserializeObject<List<NivelSaldoPorVencerPorInstitucionViewModel>>(historialNivelEvolucionHistorica.Data);
                                lstContador = lstEvolucionHistorica.Count();
                            }

                            if (nivelSaldoVencerInstitucion != null)
                                lstEvolucionHistorica.Add(new NivelSaldoPorVencerPorInstitucionViewModel() { SaldoVencerInstitucion = nivelSaldoVencerInstitucion, CodigoInstitucion = modelo.CodigoInstitucion.Trim() });

                            if (!lstEvolucionHistorica.Any())
                                lstEvolucionHistorica = null;

                            if (lstEvolucionHistorica.Count() > lstContador)
                            {
                                historialNivelEvolucionHistorica.IdHistorial = modelo.IdHistorial;
                                historialNivelEvolucionHistorica.TipoFuente = Dominio.Tipos.Fuentes.NivelSaldoPorVencerPorInstitucion;
                                historialNivelEvolucionHistorica.Generado = nivelSaldoVencerInstitucion != null || (nivelSaldoVencerInstitucion == null && lstEvolucionHistorica != null && lstEvolucionHistorica.Any());
                                historialNivelEvolucionHistorica.DataError = !string.IsNullOrEmpty(datosError) ? datosError : null;
                                historialNivelEvolucionHistorica.Data = (nivelSaldoVencerInstitucion != null || (nivelSaldoVencerInstitucion == null && lstEvolucionHistorica != null && lstEvolucionHistorica.Any())) ? JsonConvert.SerializeObject(lstEvolucionHistorica) : null;
                                historialNivelEvolucionHistorica.Cache = cacheNivelSaldoVencerInstitucion;
                                historialNivelEvolucionHistorica.FechaRegistro = DateTime.Now;
                                historialNivelEvolucionHistorica.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelEvolucionHistorica);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Saldo Por Vencer Por Institución actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelSaldoPorVencerPorInstitucion,
                                Generado = nivelSaldoVencerInstitucion != null,
                                DataError = !string.IsNullOrEmpty(datosError) ? datosError : null,
                                Data = nivelSaldoVencerInstitucion != null ? JsonConvert.SerializeObject(new List<NivelSaldoPorVencerPorInstitucionViewModel>() { new NivelSaldoPorVencerPorInstitucionViewModel() { SaldoVencerInstitucion = nivelSaldoVencerInstitucion, CodigoInstitucion = modelo.CodigoInstitucion.Trim() } }) : null,
                                Cache = cacheNivelSaldoVencerInstitucion,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Saldo Por Vencer Por Institución procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesSaldoVencerInstitucion", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesSaldoVencerInstitucion", null);
            }
        }

        [HttpPost]
        [Route("ObtenerNivelOperacionesInstitucionEquifax")]
        public async Task<IActionResult> ObtenerNivelOperacionesInstitucionEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                if (string.IsNullOrEmpty(modelo.CodigoInstitucion?.Trim()))
                    throw new Exception("El campo Código Institución es obligatorio");

                if (string.IsNullOrEmpty(modelo.TipoCredito?.Trim()))
                    throw new Exception("El campo Tipo Crédito es obligatorio");

                if (modelo.FechaCorte.HasValue && modelo.FechaCorte.Value == default)
                    throw new Exception("El campo Fecha Corte es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoOperacionInstitucion nivelOperacionInstitucion = null;
                Externos.Logica.Equifax.Modelos.ResultadoOperacionInstitucion nivelOperacionInstitucionPV = null;
                var busquedaNivelOperacionInstitucion = false;
                var cacheNivelOperacionInstitucion = false;
                var busquedaNivelOperacionInstitucionPV = false;
                var cacheNivelOperacionInstitucionPV = false;
                var datos = new NivelOperacionInstitucionViewModel();
                var lstDatos = new List<NivelOperacionInstitucionViewModel>();
                var lstDatosPV = new List<NivelOperacionInstitucionViewModel>();
                var datosError = string.Empty;
                var datosErrorPV = string.Empty;

                try
                {
                    var consultaOperacionInstitucion = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucion && m.Generado, null, null, true);
                    var consultaOperacionInstitucionPV = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucionPV && m.Generado, null, null, true);
                    if (consultaOperacionInstitucion != null && !string.IsNullOrEmpty(consultaOperacionInstitucion.Data))
                        lstDatos = JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(consultaOperacionInstitucion.Data);

                    if (consultaOperacionInstitucionPV != null && !string.IsNullOrEmpty(consultaOperacionInstitucionPV.Data))
                        lstDatosPV = JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(consultaOperacionInstitucionPV.Data);

                    if ((lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd")))
                        || (lstDatosPV != null && lstDatosPV.Any() && lstDatosPV.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd"))))
                    {
                        nivelOperacionInstitucion = lstDatos.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd"))?.OperacionInstitucion;
                        nivelOperacionInstitucionPV = lstDatosPV.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd"))?.OperacionInstitucionPV;
                        datos = new NivelOperacionInstitucionViewModel()
                        {
                            OperacionInstitucion = nivelOperacionInstitucion,
                            OperacionInstitucionPV = nivelOperacionInstitucionPV,
                            BusquedaNueva = busquedaNivelOperacionInstitucion,
                            DatosCache = consultaOperacionInstitucion.Cache,
                        };
                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesOperacionInstitucion", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600 == null || !datosEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Composicion Estructura De Vencimiento.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelOperacionInstitucion = await _buroCreditoEquifax.GetOperacionesPorInstitucionAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, modelo.CodigoInstitucion.Trim(), modelo.TipoCredito.Trim(), "V", modelo.FechaCorte.Value.ToString("yyyy-MM-dd"), credenciales);
                            nivelOperacionInstitucionPV = await _buroCreditoEquifax.GetOperacionesPorInstitucionAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, modelo.CodigoInstitucion.Trim(), modelo.TipoCredito.Trim(), "PV", modelo.FechaCorte.Value.ToString("yyyy-MM-dd"), credenciales);

                            if (nivelOperacionInstitucion != null && !nivelOperacionInstitucion.ResultadoConsultaNivelOperacionInstitucion)
                            {
                                datosError = JsonConvert.SerializeObject(nivelOperacionInstitucion);
                                nivelOperacionInstitucion = null;
                            }

                            if (nivelOperacionInstitucionPV != null && !nivelOperacionInstitucionPV.ResultadoConsultaNivelOperacionInstitucion)
                            {
                                datosErrorPV = JsonConvert.SerializeObject(nivelOperacionInstitucionPV);
                                nivelOperacionInstitucionPV = null;
                            }
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelOperacionInstitucion = Path.Combine(pathFuentes, "nivelOperacionInstitucionDemo.json");
                            var pathNivelOperacionInstitucionPV = Path.Combine(pathFuentes, "nivelOperacionInstitucionPorVencerDemo.json");
                            nivelOperacionInstitucion = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoOperacionInstitucion>(System.IO.File.ReadAllText(pathNivelOperacionInstitucion));
                            nivelOperacionInstitucionPV = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoOperacionInstitucion>(System.IO.File.ReadAllText(pathNivelOperacionInstitucionPV));
                            busquedaNivelOperacionInstitucion = false;
                            cacheNivelOperacionInstitucion = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Operaciones Por Institución {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelOperacionInstitucion == null)
                {
                    busquedaNivelOperacionInstitucion = true;
                    var datosNivelOperacionInstitucion = await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucion && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelOperacionInstitucion != null)
                    {
                        _logger.LogInformation($"Procesando Nivel Operaciones Por Institución con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelOperacionInstitucion = true;
                        foreach (var itemOperacionInstitucion in datosNivelOperacionInstitucion)
                        {
                            lstDatos.AddRange(JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(itemOperacionInstitucion));
                        }
                        if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd")))
                            nivelOperacionInstitucion = lstDatos.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd")).OperacionInstitucion;
                    }
                }

                if (nivelOperacionInstitucionPV == null)
                {
                    busquedaNivelOperacionInstitucionPV = true;
                    var datosNivelOperacionInstitucionPV = await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucionPV && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelOperacionInstitucionPV != null)
                    {
                        _logger.LogInformation($"Procesando Nivel Operaciones Por Institución con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelOperacionInstitucionPV = true;
                        foreach (var itemNivelOperacionInstitucionPV in datosNivelOperacionInstitucionPV)
                        {
                            lstDatosPV.AddRange(JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(itemNivelOperacionInstitucionPV));
                        }
                        if (lstDatosPV != null && lstDatosPV.Any() && lstDatosPV.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd")))
                            nivelOperacionInstitucionPV = lstDatosPV.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim() && x.TipoCredito == modelo.TipoCredito.Trim() && x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd")).OperacionInstitucionPV;
                    }
                }

                datos = new NivelOperacionInstitucionViewModel()
                {
                    OperacionInstitucion = nivelOperacionInstitucion,
                    OperacionInstitucionPV = nivelOperacionInstitucionPV,
                    BusquedaNueva = busquedaNivelOperacionInstitucion,
                    DatosCache = cacheNivelOperacionInstitucion,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Operaciones Por Institución procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Operaciones Por Institución. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelOperacionInstitucion = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucion);
                        var historialNivelOperacionInstitucionPV = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucionPV);
                        if (historialNivelOperacionInstitucion != null)
                        {
                            var lstOperacionInstitucion = new List<NivelOperacionInstitucionViewModel>();
                            var lstContador = 0;
                            if (historialNivelOperacionInstitucion.Data != null)
                            {
                                lstOperacionInstitucion = JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(historialNivelOperacionInstitucion.Data);
                                lstContador = lstOperacionInstitucion.Count();
                            }

                            if (nivelOperacionInstitucion != null)
                                lstOperacionInstitucion.Add(new NivelOperacionInstitucionViewModel() { OperacionInstitucion = nivelOperacionInstitucion, CodigoInstitucion = modelo.CodigoInstitucion.Trim(), TipoCredito = modelo.TipoCredito.Trim(), FechaCorte = modelo.FechaCorte.Value.ToString("yyyy-MM-dd") });

                            if (!lstOperacionInstitucion.Any())
                                lstOperacionInstitucion = null;

                            if (lstOperacionInstitucion.Count() > lstContador)
                            {
                                historialNivelOperacionInstitucion.IdHistorial = modelo.IdHistorial;
                                historialNivelOperacionInstitucion.TipoFuente = Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucion;
                                historialNivelOperacionInstitucion.Generado = nivelOperacionInstitucion != null || (nivelOperacionInstitucion == null && lstOperacionInstitucion != null && lstOperacionInstitucion.Any());
                                historialNivelOperacionInstitucion.DataError = !string.IsNullOrEmpty(datosError) ? datosError : null;
                                historialNivelOperacionInstitucion.Data = (nivelOperacionInstitucion != null || (nivelOperacionInstitucion == null && lstOperacionInstitucion != null && lstOperacionInstitucion.Any())) ? JsonConvert.SerializeObject(lstOperacionInstitucion) : null;
                                historialNivelOperacionInstitucion.Cache = cacheNivelOperacionInstitucion;
                                historialNivelOperacionInstitucion.FechaRegistro = DateTime.Now;
                                historialNivelOperacionInstitucion.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelOperacionInstitucion);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucion,
                                Generado = nivelOperacionInstitucion != null,
                                DataError = !string.IsNullOrEmpty(datosError) ? datosError : null,
                                Data = nivelOperacionInstitucion != null ? JsonConvert.SerializeObject(new List<NivelOperacionInstitucionViewModel>() { new NivelOperacionInstitucionViewModel() { OperacionInstitucion = nivelOperacionInstitucion, CodigoInstitucion = modelo.CodigoInstitucion.Trim(), TipoCredito = modelo.TipoCredito.Trim(), FechaCorte = modelo.FechaCorte.Value.ToString("yyyy-MM-dd") } }) : null,
                                Cache = cacheNivelOperacionInstitucion,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución procesado correctamente");
                        }

                        if (historialNivelOperacionInstitucionPV != null)
                        {
                            var lstOperacionInstitucionPV = new List<NivelOperacionInstitucionViewModel>();
                            var lstContadorPV = 0;
                            if (historialNivelOperacionInstitucionPV.Data != null)
                            {
                                lstOperacionInstitucionPV = JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(historialNivelOperacionInstitucionPV.Data);
                                lstContadorPV = lstOperacionInstitucionPV.Count();
                            }
                            if (nivelOperacionInstitucionPV != null)
                                lstOperacionInstitucionPV.Add(new NivelOperacionInstitucionViewModel() { OperacionInstitucionPV = nivelOperacionInstitucionPV, CodigoInstitucion = modelo.CodigoInstitucion.Trim(), TipoCredito = modelo.TipoCredito.Trim(), FechaCorte = modelo.FechaCorte.Value.ToString("yyyy-MM-dd") });

                            if (!lstOperacionInstitucionPV.Any())
                                lstOperacionInstitucionPV = null;

                            if (lstOperacionInstitucionPV.Count() > lstContadorPV)
                            {
                                historialNivelOperacionInstitucionPV.IdHistorial = modelo.IdHistorial;
                                historialNivelOperacionInstitucionPV.TipoFuente = Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucionPV;
                                historialNivelOperacionInstitucionPV.Generado = nivelOperacionInstitucionPV != null || (nivelOperacionInstitucionPV == null && lstOperacionInstitucionPV != null && lstOperacionInstitucionPV.Any());
                                historialNivelOperacionInstitucionPV.DataError = !string.IsNullOrEmpty(datosErrorPV) ? datosErrorPV : null;
                                historialNivelOperacionInstitucionPV.Data = (nivelOperacionInstitucionPV != null || (nivelOperacionInstitucionPV == null && lstOperacionInstitucionPV != null && lstOperacionInstitucionPV.Any())) ? JsonConvert.SerializeObject(lstOperacionInstitucionPV) : null;
                                historialNivelOperacionInstitucionPV.Cache = cacheNivelOperacionInstitucionPV;
                                historialNivelOperacionInstitucionPV.FechaRegistro = DateTime.Now;
                                historialNivelOperacionInstitucionPV.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelOperacionInstitucionPV);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucionPV,
                                Generado = nivelOperacionInstitucionPV != null,
                                DataError = !string.IsNullOrEmpty(datosErrorPV) ? datosErrorPV : null,
                                Data = nivelOperacionInstitucionPV != null ? JsonConvert.SerializeObject(new List<NivelOperacionInstitucionViewModel>() { new NivelOperacionInstitucionViewModel() { OperacionInstitucionPV = nivelOperacionInstitucionPV, CodigoInstitucion = modelo.CodigoInstitucion.Trim(), TipoCredito = modelo.TipoCredito.Trim(), FechaCorte = modelo.FechaCorte.Value.ToString("yyyy-MM-dd") } }) : null,
                                Cache = cacheNivelOperacionInstitucionPV,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesOperacionInstitucion", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesOperacionInstitucion", null);
            }
        }

        [HttpPost]
        [Route("ObtenerNivelDetalleVencidoPorInstitucionEquifax")]
        public async Task<IActionResult> ObtenerNivelDetalleVencidoPorInstitucionEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                if (string.IsNullOrEmpty(modelo.CodigoInstitucion?.Trim()))
                    throw new Exception("El campo Código Institución es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoDetalleVencidoPorInstitucion nivelDetalleVencidoInstitucion = null;
                var busquedaNivelDetalleVencidoInstitucion = false;
                var cacheNivelDetalleVencidoInstitucion = false;
                var datos = new NivelDetalleVencidoInstitucionViewModel();
                var lstDatos = new List<NivelDetalleVencidoInstitucionViewModel>();
                var datosError = string.Empty;

                try
                {
                    var consultaDetalleVencidoInstitucion = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleVencidoPorInstitucion && m.Generado, null, null, true);
                    if (consultaDetalleVencidoInstitucion != null && !string.IsNullOrEmpty(consultaDetalleVencidoInstitucion.Data))
                        lstDatos = JsonConvert.DeserializeObject<List<NivelDetalleVencidoInstitucionViewModel>>(consultaDetalleVencidoInstitucion.Data);

                    if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim()))
                    {
                        nivelDetalleVencidoInstitucion = lstDatos.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim())?.DetalleVencidoInstitucion;
                        datos = new NivelDetalleVencidoInstitucionViewModel()
                        {
                            DetalleVencidoInstitucion = nivelDetalleVencidoInstitucion,
                            BusquedaNueva = busquedaNivelDetalleVencidoInstitucion,
                            DatosCache = consultaDetalleVencidoInstitucion.Cache,
                        };
                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesDetalleVencidoPorInstitucion", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento == null || !datosEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Composicion Estructura De Vencimiento.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelDetalleVencidoInstitucion = await _buroCreditoEquifax.GetDetalleVencidoPorInstitucionAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, modelo.CodigoInstitucion.Trim(), credenciales);

                            if (nivelDetalleVencidoInstitucion != null && !nivelDetalleVencidoInstitucion.ResultadoConsultaDetalleVencidoPorInstitucion)
                            {
                                datosError = JsonConvert.SerializeObject(nivelDetalleVencidoInstitucion);
                                nivelDetalleVencidoInstitucion = null;
                            }
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelDetalleVencidoPorInstitucion = Path.Combine(pathFuentes, "nivelDetalleVencidoPorInstitucionDemo.json");
                            nivelDetalleVencidoInstitucion = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoDetalleVencidoPorInstitucion>(System.IO.File.ReadAllText(pathNivelDetalleVencidoPorInstitucion));
                            busquedaNivelDetalleVencidoInstitucion = false;
                            cacheNivelDetalleVencidoInstitucion = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Operaciones Por Institución {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelDetalleVencidoInstitucion == null)
                {
                    busquedaNivelDetalleVencidoInstitucion = true;
                    var datosNivelDetalleVencidoInstitucion = await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleVencidoPorInstitucion && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelDetalleVencidoInstitucion != null)
                    {
                        _logger.LogInformation($"Procesando Nivel Operaciones Por Institución con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelDetalleVencidoInstitucion = true;
                        foreach (var itemDetalleVencidoInstitucion in datosNivelDetalleVencidoInstitucion)
                        {
                            lstDatos.AddRange(JsonConvert.DeserializeObject<List<NivelDetalleVencidoInstitucionViewModel>>(itemDetalleVencidoInstitucion));
                        }
                        if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim()))
                            nivelDetalleVencidoInstitucion = lstDatos.FirstOrDefault(x => x.CodigoInstitucion == modelo.CodigoInstitucion.Trim()).DetalleVencidoInstitucion;
                    }
                }

                datos = new NivelDetalleVencidoInstitucionViewModel()
                {
                    DetalleVencidoInstitucion = nivelDetalleVencidoInstitucion,
                    BusquedaNueva = busquedaNivelDetalleVencidoInstitucion,
                    DatosCache = cacheNivelDetalleVencidoInstitucion,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Operaciones Por Institución procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Operaciones Por Institución. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelDetalleVencidoInstitucion = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleVencidoPorInstitucion);
                        if (historialNivelDetalleVencidoInstitucion != null)
                        {
                            var lstDetalleVencidoInstitucion = new List<NivelDetalleVencidoInstitucionViewModel>();
                            var lstContador = 0;
                            if (historialNivelDetalleVencidoInstitucion.Data != null)
                            {
                                lstDetalleVencidoInstitucion = JsonConvert.DeserializeObject<List<NivelDetalleVencidoInstitucionViewModel>>(historialNivelDetalleVencidoInstitucion.Data);
                                lstContador = lstDetalleVencidoInstitucion.Count();
                            }

                            if (nivelDetalleVencidoInstitucion != null)
                                lstDetalleVencidoInstitucion.Add(new NivelDetalleVencidoInstitucionViewModel() { DetalleVencidoInstitucion = nivelDetalleVencidoInstitucion, CodigoInstitucion = modelo.CodigoInstitucion.Trim() });

                            if (!lstDetalleVencidoInstitucion.Any())
                                lstDetalleVencidoInstitucion = null;

                            if (lstDetalleVencidoInstitucion.Count() > lstContador)
                            {
                                historialNivelDetalleVencidoInstitucion.IdHistorial = modelo.IdHistorial;
                                historialNivelDetalleVencidoInstitucion.TipoFuente = Dominio.Tipos.Fuentes.NivelDetalleVencidoPorInstitucion;
                                historialNivelDetalleVencidoInstitucion.Generado = nivelDetalleVencidoInstitucion != null || (nivelDetalleVencidoInstitucion == null && lstDetalleVencidoInstitucion != null && lstDetalleVencidoInstitucion.Any());
                                historialNivelDetalleVencidoInstitucion.DataError = !string.IsNullOrEmpty(datosError) ? datosError : null;
                                historialNivelDetalleVencidoInstitucion.Data = (nivelDetalleVencidoInstitucion != null || (nivelDetalleVencidoInstitucion == null && lstDetalleVencidoInstitucion != null && lstDetalleVencidoInstitucion.Any())) ? JsonConvert.SerializeObject(lstDetalleVencidoInstitucion) : null;
                                historialNivelDetalleVencidoInstitucion.Cache = cacheNivelDetalleVencidoInstitucion;
                                historialNivelDetalleVencidoInstitucion.FechaRegistro = DateTime.Now;
                                historialNivelDetalleVencidoInstitucion.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelDetalleVencidoInstitucion);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelDetalleVencidoPorInstitucion,
                                Generado = nivelDetalleVencidoInstitucion != null,
                                DataError = !string.IsNullOrEmpty(datosError) ? datosError : null,
                                Data = nivelDetalleVencidoInstitucion != null ? JsonConvert.SerializeObject(new List<NivelDetalleVencidoInstitucionViewModel>() { new NivelDetalleVencidoInstitucionViewModel() { DetalleVencidoInstitucion = nivelDetalleVencidoInstitucion, CodigoInstitucion = modelo.CodigoInstitucion.Trim() } }) : null,
                                Cache = cacheNivelDetalleVencidoInstitucion,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesDetalleVencidoPorInstitucion", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesDetalleVencidoPorInstitucion", null);
            }
        }

        [HttpPost]
        [Route("ObtenerNivelDetalleOperacionesEntidadesEquifax")]
        public async Task<IActionResult> ObtenerNivelDetalleOperacionesEntidadesEquifax(ReporteEquifaxViewModel modelo)
        {
            try
            {
                var identificacionBuro = string.Empty;

                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                if (modelo.FechaCorte.HasValue && modelo.FechaCorte.Value == default)
                    throw new Exception("El campo Fecha Corte es obligatorio");

                if (string.IsNullOrEmpty(modelo.SistemaCrediticio?.Trim()))
                    throw new Exception("El campo Sistema Crediticio es obligatorio");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var planBuroCredito = usuarioActual.Empresa.PlanesBuroCredito.FirstOrDefault(m => m.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (planBuroCredito == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo de Buró de Crédito.");

                var permisoPlanBuro = await _accesos.AnyAsync(m => m.IdUsuario == idUsuario && m.Estado == Dominio.Tipos.EstadosAccesos.Activo && m.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                if (!permisoPlanBuro)
                    throw new Exception("El usuario no tiene permiso para realizar consultas al Buró de Crédito.");

                Historial historialTemp = null;
                Externos.Logica.Equifax.Modelos.ResultadoDetalleOperacionEntidad nivelDetalleOperacionEntidad = null;
                var busquedaNivelDetalleOperacionEntidad = false;
                var cacheNivelDetalleOperacionEntidad = false;
                var datos = new NivelDetalleOperacionEntidadViewModel();
                var lstDatos = new List<NivelDetalleOperacionEntidadViewModel>();
                var datosError = string.Empty;

                try
                {
                    var consultaDetalleOperacionEntidad = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleOperacionesYEntidades && m.Generado, null, null, true);
                    if (consultaDetalleOperacionEntidad != null && !string.IsNullOrEmpty(consultaDetalleOperacionEntidad.Data))
                        lstDatos = JsonConvert.DeserializeObject<List<NivelDetalleOperacionEntidadViewModel>>(consultaDetalleOperacionEntidad.Data);

                    if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd") && x.SistemaCrediticio == modelo.SistemaCrediticio.Trim()))
                    {
                        nivelDetalleOperacionEntidad = lstDatos.FirstOrDefault(x => x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd") && x.SistemaCrediticio == modelo.SistemaCrediticio.Trim())?.DetalleOperacionEntidad;
                        datos = new NivelDetalleOperacionEntidadViewModel()
                        {
                            DetalleOperacionEntidad = nivelDetalleOperacionEntidad,
                            BusquedaNueva = busquedaNivelDetalleOperacionEntidad,
                            DatosCache = consultaDetalleOperacionEntidad.Cache,
                        };
                        return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesDetalleOperacionesEntidades", datos);
                    }
                    else
                    {
                        var credencial = await _credencialesBuro.FirstOrDefaultAsync(m => m, m => m.IdEmpresa == usuarioActual.IdEmpresa && m.Estado == Dominio.Tipos.EstadosCredenciales.Activo, null, null, true);
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        var consultaEquifax = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.IdHistorial == modelo.IdHistorial && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito, null, null, true);

                        if (string.IsNullOrEmpty(consultaEquifax))
                            throw new Exception($"No se pudo obtener datos del Buró de crédito Equifax para la identificación: {modelo.Identificacion}");

                        var datosEquifax = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(consultaEquifax);

                        if (datosEquifax != null && string.IsNullOrEmpty(datosEquifax.IdCodigoConsulta))
                            throw new Exception("No se puedo obtener el Código de la Consulta.");

                        if (datosEquifax != null && (datosEquifax.Resultados.RecursivoDeudaHistorica3601 == null || !datosEquifax.Resultados.RecursivoDeudaHistorica3601.Any()))
                            throw new Exception("No se puedo obtener datos de la tabla Recursivo Composicion Estructura De Vencimiento.");

                        var cacheBuro = _configuration.GetSection("AppSettings:ConsultasBuroCredito:Cache").Get<bool>();
                        var ambiente = _configuration.GetSection("AppSettings:Environment").Get<string>();
                        if (!cacheBuro && ambiente == "Production")
                        {
                            string[] credenciales = null;
                            if (credencial != null && credencial.TipoFuente == Dominio.Tipos.FuentesBuro.Equifax)
                                credenciales = new[] { credencial.Usuario, credencial.Clave, credencial.Enlace };

                            var tipoIdentificacion = string.Empty;
                            if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula)
                                tipoIdentificacion = "C";
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                            {
                                tipoIdentificacion = "C";
                                modelo.Identificacion = modelo.Identificacion.Substring(0, 10);
                            }
                            else if (historialTemp != null && !string.IsNullOrEmpty(historialTemp.TipoIdentificacion) && (historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historialTemp.TipoIdentificacion == Dominio.Constantes.General.SectorPublico))
                                tipoIdentificacion = "R";

                            nivelDetalleOperacionEntidad = await _buroCreditoEquifax.GetDetalleOperacionesYEntidadesAsync(datosEquifax.IdCodigoConsulta, tipoIdentificacion, modelo.Identificacion, modelo.FechaCorte.Value.ToString("yyyy-MM-dd"), modelo.SistemaCrediticio.Trim(), credenciales);

                            if (nivelDetalleOperacionEntidad != null && !nivelDetalleOperacionEntidad.ResultadoConsultaNivelDetalleOperacionEntidad)
                            {
                                datosError = JsonConvert.SerializeObject(nivelDetalleOperacionEntidad);
                                nivelDetalleOperacionEntidad = null;
                            }
                        }
                        else
                        {
                            var pathBase = System.IO.Path.Combine("wwwroot", "data");
                            var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                            var pathNivelDetalleOperacionEntidad = Path.Combine(pathFuentes, "nivelDetalleOperacionEntidadDemo.json");
                            nivelDetalleOperacionEntidad = JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoDetalleOperacionEntidad>(System.IO.File.ReadAllText(pathNivelDetalleOperacionEntidad));
                            busquedaNivelDetalleOperacionEntidad = false;
                            cacheNivelDetalleOperacionEntidad = false;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Error al consultar Nivel Operaciones Por Institución {modelo.Identificacion}: {ex.Message}");
                }

                if (nivelDetalleOperacionEntidad == null)
                {
                    busquedaNivelDetalleOperacionEntidad = true;
                    var datosNivelDetalleOperacionEntidad = await _detallesHistorial.ReadAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.Historial.PlanBuroCredito.IdEmpresa == usuarioActual.IdEmpresa && m.Historial.TipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax && m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleOperacionesYEntidades && m.Generado, o => o.OrderByDescending(m => m.Id));
                    if (datosNivelDetalleOperacionEntidad != null && datosNivelDetalleOperacionEntidad.Any())
                    {
                        _logger.LogInformation($"Procesando Nivel Operaciones Por Institución con la memoria caché de la base de datos para la identificación: {modelo.Identificacion}");
                        cacheNivelDetalleOperacionEntidad = true;
                        foreach (var itemDetalleOperacionEntidad in datosNivelDetalleOperacionEntidad)
                        {
                            lstDatos.AddRange(JsonConvert.DeserializeObject<List<NivelDetalleOperacionEntidadViewModel>>(itemDetalleOperacionEntidad));
                        }
                        if (lstDatos != null && lstDatos.Any() && lstDatos.Any(x => x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd") && x.SistemaCrediticio == modelo.SistemaCrediticio.Trim()))
                            nivelDetalleOperacionEntidad = lstDatos.FirstOrDefault(x => x.FechaCorte == modelo.FechaCorte.Value.ToString("yyyy-MM-dd") && x.SistemaCrediticio == modelo.SistemaCrediticio.Trim()).DetalleOperacionEntidad;
                    }
                }

                datos = new NivelDetalleOperacionEntidadViewModel()
                {
                    DetalleOperacionEntidad = nivelDetalleOperacionEntidad,
                    BusquedaNueva = busquedaNivelDetalleOperacionEntidad,
                    DatosCache = cacheNivelDetalleOperacionEntidad,
                };

                _logger.LogInformation("Fuente de Buró de Crédito Equifax Nivel Operaciones Por Institución procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente Buró de Crédito Equifax Nivel Operaciones Por Institución. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var historialNivelDetalleOperacionEntidad = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleOperacionesYEntidades);
                        if (historialNivelDetalleOperacionEntidad != null)
                        {
                            var lstDetalleOperacionEntidad = new List<NivelDetalleOperacionEntidadViewModel>();
                            var lstContador = 0;
                            if (historialNivelDetalleOperacionEntidad.Data != null)
                            {
                                lstDetalleOperacionEntidad = JsonConvert.DeserializeObject<List<NivelDetalleOperacionEntidadViewModel>>(historialNivelDetalleOperacionEntidad.Data);
                                lstContador = lstDetalleOperacionEntidad.Count();
                            }

                            if (nivelDetalleOperacionEntidad != null)
                                lstDetalleOperacionEntidad.Add(new NivelDetalleOperacionEntidadViewModel() { DetalleOperacionEntidad = nivelDetalleOperacionEntidad, FechaCorte = modelo.FechaCorte.Value.ToString("yyyy-MM-dd"), SistemaCrediticio = modelo.SistemaCrediticio.Trim() });

                            if (!lstDetalleOperacionEntidad.Any())
                                lstDetalleOperacionEntidad = null;

                            if (lstDetalleOperacionEntidad.Count() > lstContador)
                            {
                                historialNivelDetalleOperacionEntidad.IdHistorial = modelo.IdHistorial;
                                historialNivelDetalleOperacionEntidad.TipoFuente = Dominio.Tipos.Fuentes.NivelDetalleOperacionesYEntidades;
                                historialNivelDetalleOperacionEntidad.Generado = nivelDetalleOperacionEntidad != null || (nivelDetalleOperacionEntidad == null && lstDetalleOperacionEntidad != null && lstDetalleOperacionEntidad.Any());
                                historialNivelDetalleOperacionEntidad.DataError = !string.IsNullOrEmpty(datosError) ? datosError : null;
                                historialNivelDetalleOperacionEntidad.Data = (nivelDetalleOperacionEntidad != null || (nivelDetalleOperacionEntidad == null && lstDetalleOperacionEntidad != null && lstDetalleOperacionEntidad.Any())) ? JsonConvert.SerializeObject(lstDetalleOperacionEntidad) : null;
                                historialNivelDetalleOperacionEntidad.Cache = cacheNivelDetalleOperacionEntidad;
                                historialNivelDetalleOperacionEntidad.FechaRegistro = DateTime.Now;
                                historialNivelDetalleOperacionEntidad.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialNivelDetalleOperacionEntidad);
                                _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.NivelDetalleOperacionesYEntidades,
                                Generado = nivelDetalleOperacionEntidad != null,
                                DataError = !string.IsNullOrEmpty(datosError) ? datosError : null,
                                Data = nivelDetalleOperacionEntidad != null ? JsonConvert.SerializeObject(new List<NivelDetalleOperacionEntidadViewModel>() { new NivelDetalleOperacionEntidadViewModel() { DetalleOperacionEntidad = nivelDetalleOperacionEntidad, FechaCorte = modelo.FechaCorte.Value.ToString("yyyy-MM-dd"), SistemaCrediticio = modelo.SistemaCrediticio.Trim() } }) : null,
                                Cache = cacheNivelDetalleOperacionEntidad,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente Equifax - Nivel Operaciones Por Institución procesado correctamente");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesDetalleOperacionesEntidades", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView($"../Shared/Fuentes/FuentesEquifax/_FuentesDetalleOperacionesEntidades", null);
            }
        }

        #endregion ConsultasEquifax

        #region Reporte PDF
        [HttpPost]
        [Route("ObtenerReporteConsultas")]
        public async Task<IActionResult> ObtenerReporteConsultas(int idHistorial)
        {
            try
            {
                if (idHistorial == 0)
                    throw new Exception("El historial ingresado no se encuentra registrado.");

                var detallesHistorial = await _detallesHistorial.ReadAsync(m => new { m.TipoFuente, m.Data, m.FuenteActiva, m.Historial, m.Cache }, m => m.IdHistorial == idHistorial, null, i => i.Include(t => t.Historial.Usuario));
                if (!detallesHistorial.Any())
                    throw new Exception("No se han registrado correctamente el detalle del historial.");

                var cacheSri = false;
                Externos.Logica.SRi.Modelos.Contribuyente r_sri = null;
                var datosSri = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Sri);
                if (datosSri != null)
                {
                    r_sri = datosSri.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(datosSri.Data) : null;
                    cacheSri = datosSri.Cache;
                }

                var cacheDirectorioCompanias = false;
                Externos.Logica.Balances.Modelos.DirectorioCompania directCompania = null;
                var datosDirectCompanias = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DirectorioCompanias);
                if (datosDirectCompanias != null)
                {
                    directCompania = datosDirectCompanias.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.DirectorioCompania>(datosDirectCompanias.Data) : null;
                    cacheDirectorioCompanias = datosDirectCompanias.Cache;
                }

                var cacheRepresentanteEmpresa = false;
                List<Externos.Logica.Balances.Modelos.RepresentanteEmpresa> representanteEmpresa = null;
                var datosRepresentEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RepresentantesEmpresas);
                if (datosRepresentEmpresa != null)
                    representanteEmpresa = datosRepresentEmpresa.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.RepresentanteEmpresa>>(datosRepresentEmpresa.Data) : null;

                Externos.Logica.Balances.Modelos.BalanceEmpresa r_balance = null;
                var datosBalance = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Balance);
                if (datosBalance != null)
                    r_balance = datosBalance.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.BalanceEmpresa>(datosBalance.Data) : null;

                var cacheBalances = false;
                List<Externos.Logica.Balances.Modelos.BalanceEmpresa> r_balances = null;
                var datosBalances = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Balances);
                if (datosBalances != null)
                {
                    r_balances = datosBalances.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.BalanceEmpresa>>(datosBalances.Data) : null;
                    cacheBalances = datosBalances.Cache;
                }
                var cacheBalancesVerificarAccionistas = false;
                Externos.Logica.Balances.Modelos.DatosAccionista r_balancesVerificarAccionistas = null;
                var datosBalancesVerificarAccionistas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.VerificarAccionistas);
                if (datosBalancesVerificarAccionistas != null)
                {
                    r_balancesVerificarAccionistas = datosBalancesVerificarAccionistas.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.DatosAccionista>(datosBalancesVerificarAccionistas.Data) : null;
                    cacheBalancesVerificarAccionistas = datosBalancesVerificarAccionistas.Cache;
                }

                var cacheAnalisisHorizontal = false;
                List<AnalisisHorizontalViewModel> analisisHorizontal = null;
                var datosAnalisis = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.AnalisisHorizontal);
                if (datosAnalisis != null)
                {
                    analisisHorizontal = datosAnalisis.Data != null ? JsonConvert.DeserializeObject<List<AnalisisHorizontalViewModel>>(datosAnalisis.Data) : null;
                    cacheAnalisisHorizontal = datosAnalisis.Cache;
                }

                var cacheSuperBancoCedula = false;
                Externos.Logica.SuperBancos.Modelos.Resultado superBancosCedula = null;
                var datosSuperBancosCedula = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancos);
                if (datosSuperBancosCedula != null)
                {
                    superBancosCedula = datosSuperBancosCedula.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancosCedula.Data) : null;
                    cacheSuperBancoCedula = datosSuperBancosCedula.Cache;
                }

                var cacheSuperBancoNatural = false;
                Externos.Logica.SuperBancos.Modelos.Resultado superBancosNatural = null;
                var datosSuperBancosNatural = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosNatural);
                if (datosSuperBancosNatural != null)
                {
                    superBancosNatural = datosSuperBancosNatural.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancosNatural.Data) : null;
                    cacheSuperBancoNatural = datosSuperBancosNatural.Cache;
                }

                var cacheSuperBancoEmpresa = false;
                Externos.Logica.SuperBancos.Modelos.Resultado superBancosEmpresa = null;
                var datosSuperBancosEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.SuperBancosEmpresa);
                if (datosSuperBancosEmpresa != null)
                {
                    superBancosEmpresa = datosSuperBancosEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SuperBancos.Modelos.Resultado>(datosSuperBancosEmpresa.Data) : null;
                    cacheSuperBancoEmpresa = datosSuperBancosEmpresa.Cache;
                }

                var cacheAntecedentesPenales = false;
                Externos.Logica.AntecedentesPenales.Modelos.Resultado antecedentesPenales = null;
                var datosAntecedentes = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.AntecedentesPenales);
                if (datosAntecedentes != null)
                {
                    antecedentesPenales = datosAntecedentes.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.Resultado>(datosAntecedentes.Data) : null;
                    cacheAntecedentesPenales = datosAntecedentes.Cache;
                }

                var cacheFuerzasArmadas = false;
                Externos.Logica.AntecedentesPenales.Modelos.PersonaFuerzaArmada fuerzasArmadas = null;
                var datosFuerzasArmadas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FuerzaArmada);
                if (datosFuerzasArmadas != null)
                {
                    fuerzasArmadas = datosFuerzasArmadas.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.PersonaFuerzaArmada>(datosFuerzasArmadas.Data) : null;
                    cacheFuerzasArmadas = datosFuerzasArmadas.Cache;
                }

                var cacheDeNoBaja = false;
                Externos.Logica.AntecedentesPenales.Modelos.ResultadoNoPolicia deNoBaja = null;
                var datosdeNoBaja = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DeNoBaja);
                if (datosdeNoBaja != null)
                {
                    deNoBaja = datosdeNoBaja.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.AntecedentesPenales.Modelos.ResultadoNoPolicia>(datosdeNoBaja.Data) : null;
                    cacheDeNoBaja = datosdeNoBaja.Cache;
                }

                var cachePredios = false;
                Externos.Logica.PredioMunicipio.Modelos.Resultado predios = null;
                var datosPredios = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipio);
                if (datosPredios != null)
                {
                    predios = datosPredios.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(datosPredios.Data) : null;
                    if (predios != null)
                        predios.Detalle = predios.Detalle != null && predios.Detalle.Any() ? predios.Detalle.Where(m => m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("URBANO PARROQUIA")).ToList() : new List<Externos.Logica.PredioMunicipio.Modelos.DetallePredio>();

                    cachePredios = datosPredios.Cache;
                }

                var cacheDetallePredios = false;
                List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm> detallePredios = null;
                var datosDetallePredios = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DetallePredios);
                if (datosDetallePredios != null)
                {
                    detallePredios = datosDetallePredios.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm>>(datosDetallePredios.Data) : null;
                    cacheDetallePredios = datosDetallePredios.Cache;
                }

                var cachePrediosEmpresa = false;
                Externos.Logica.PredioMunicipio.Modelos.Resultado prediosEmpresa = null;
                var datosPrediosEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresa);
                if (datosPrediosEmpresa != null)
                {
                    prediosEmpresa = datosPrediosEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.Resultado>(datosPrediosEmpresa.Data) : null;
                    if (prediosEmpresa != null)
                        prediosEmpresa.Detalle = prediosEmpresa.Detalle != null && prediosEmpresa.Detalle.Any() ? prediosEmpresa.Detalle.Where(m => m.Concepto.ToUpper().Contains("PREDIO") || m.Concepto.ToUpper().Contains("PREDIAL") || m.Concepto.ToUpper().Contains("URBANO PARROQUIA")).ToList() : new List<Externos.Logica.PredioMunicipio.Modelos.DetallePredio>();

                    cachePrediosEmpresa = datosPrediosEmpresa.Cache;
                }

                var cacheDetallePrediosEmpresa = false;
                List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm> detallePrediosEmpresa = null;
                var datosDetallePrediosEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosEmpresa);
                if (datosDetallePrediosEmpresa != null)
                {
                    detallePrediosEmpresa = datosDetallePrediosEmpresa.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DetallePredioIrm>>(datosDetallePrediosEmpresa.Data) : null;
                    cacheDetallePrediosEmpresa = datosDetallePrediosEmpresa.Cache;
                }

                var cachePrediosCuenca = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca prediosCuenca = null;
                var datosPrediosCuenca = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCuenca);
                if (datosPrediosCuenca != null)
                {
                    prediosCuenca = datosPrediosCuenca.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca>(datosPrediosCuenca.Data) : null;
                    cachePrediosCuenca = datosPrediosCuenca.Cache;
                }

                var cachePrediosEmpresaCuenca = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca prediosEmpresaCuenca = null;
                var datosPrediosEmpresaCuenca = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCuenca);
                if (datosPrediosEmpresaCuenca != null)
                {
                    prediosEmpresaCuenca = datosPrediosEmpresaCuenca.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCuenca>(datosPrediosEmpresaCuenca.Data) : null;
                    cachePrediosEmpresaCuenca = datosPrediosEmpresaCuenca.Cache;
                }

                var cachePrediosStoDomingo = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo prediosStoDomingo = null;
                var datosPrediosStoDomingo = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantoDomingo);
                if (datosPrediosStoDomingo != null)
                {
                    prediosStoDomingo = datosPrediosStoDomingo.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo>(datosPrediosStoDomingo.Data) : null;
                    cachePrediosStoDomingo = datosPrediosStoDomingo.Cache;
                }

                var cachePrediosEmpresaStoDomingo = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo prediosEmpresaStoDomingo = null;
                var datosPrediosEmpresaStoDomingo = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantoDomingo);
                if (datosPrediosEmpresaStoDomingo != null)
                {
                    prediosEmpresaStoDomingo = datosPrediosEmpresaStoDomingo.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantoDomingo>(datosPrediosEmpresaStoDomingo.Data) : null;
                    cachePrediosEmpresaStoDomingo = datosPrediosEmpresaStoDomingo.Cache;
                }

                var cachePrediosRuminahui = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui prediosRuminahui = null;
                var datosPrediosRuminahui = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioRuminahui);
                if (datosPrediosRuminahui != null)
                {
                    prediosRuminahui = datosPrediosRuminahui.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui>(datosPrediosRuminahui.Data) : null;
                    cachePrediosRuminahui = datosPrediosRuminahui.Cache;
                }

                var cachePrediosEmpresaRuminahui = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui prediosEmpresaRuminahui = null;
                var datosPrediosEmpresaRuminahui = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaRuminahui);
                if (datosPrediosEmpresaRuminahui != null)
                {
                    prediosEmpresaRuminahui = datosPrediosEmpresaRuminahui.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosRuminahui>(datosPrediosEmpresaRuminahui.Data) : null;
                    cachePrediosEmpresaRuminahui = datosPrediosEmpresaRuminahui.Cache;
                }

                var cachePrediosQuininde = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde prediosQuininde = null;
                var datosPrediosQuininde = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioQuininde);
                if (datosPrediosQuininde != null)
                {
                    prediosQuininde = datosPrediosQuininde.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde>(datosPrediosQuininde.Data) : null;
                    cachePrediosQuininde = datosPrediosQuininde.Cache;
                }

                var cachePrediosEmpresaQuininde = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde prediosEmpresaQuininde = null;
                var datosPrediosEmpresaQuininde = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaQuininde);
                if (datosPrediosEmpresaQuininde != null)
                {
                    prediosEmpresaQuininde = datosPrediosEmpresaQuininde.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosQuininde>(datosPrediosEmpresaQuininde.Data) : null;
                    cachePrediosEmpresaQuininde = datosPrediosEmpresaQuininde.Cache;
                }

                var cachePrediosLatacunga = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga prediosLatacunga = null;
                var datosPrediosLatacunga = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLatacunga);
                if (datosPrediosLatacunga != null)
                {
                    prediosLatacunga = datosPrediosLatacunga.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga>(datosPrediosLatacunga.Data) : null;
                    cachePrediosLatacunga = datosPrediosLatacunga.Cache;
                }

                var cachePrediosEmpresaLatacunga = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga prediosEmpresaLatacunga = null;
                var datosPrediosEmpresaLatacunga = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLatacunga);
                if (datosPrediosEmpresaLatacunga != null)
                {
                    prediosEmpresaLatacunga = datosPrediosEmpresaLatacunga.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLatacunga>(datosPrediosEmpresaLatacunga.Data) : null;
                    cachePrediosEmpresaLatacunga = datosPrediosEmpresaLatacunga.Cache;
                }

                var cachePrediosManta = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosManta prediosManta = null;
                var datosPrediosManta = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioManta);
                if (datosPrediosManta != null)
                {
                    prediosManta = datosPrediosManta.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosManta>(datosPrediosManta.Data) : null;
                    cachePrediosManta = datosPrediosManta.Cache;
                }

                var cachePrediosEmpresaManta = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosManta prediosEmpresaManta = null;
                var datosPrediosEmpresaManta = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaManta);
                if (datosPrediosEmpresaManta != null)
                {
                    prediosEmpresaManta = datosPrediosEmpresaManta.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosManta>(datosPrediosEmpresaManta.Data) : null;
                    cachePrediosEmpresaManta = datosPrediosEmpresaManta.Cache;
                }

                var cachePrediosAmbato = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato prediosAmbato = null;
                var datosPrediosAmbato = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAmbato);
                if (datosPrediosAmbato != null)
                {
                    prediosAmbato = datosPrediosAmbato.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato>(datosPrediosAmbato.Data) : null;
                    cachePrediosAmbato = datosPrediosAmbato.Cache;
                }

                var cachePrediosEmpresaAmbato = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato prediosEmpresaAmbato = null;
                var datosPrediosEmpresaAmbato = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAmbato);
                if (datosPrediosEmpresaAmbato != null)
                {
                    prediosEmpresaAmbato = datosPrediosEmpresaAmbato.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAmbato>(datosPrediosEmpresaAmbato.Data) : null;
                    cachePrediosEmpresaAmbato = datosPrediosEmpresaAmbato.Cache;
                }

                var cachePrediosIbarra = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra prediosIbarra = null;
                var datosPrediosIbarra = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioIbarra);
                if (datosPrediosIbarra != null)
                {
                    prediosIbarra = datosPrediosIbarra.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra>(datosPrediosIbarra.Data) : null;
                    cachePrediosIbarra = datosPrediosIbarra.Cache;
                }

                var cachePrediosEmpresaIbarra = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra prediosEmpresaIbarra = null;
                var datosPrediosEmpresaIbarra = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaIbarra);
                if (datosPrediosEmpresaIbarra != null)
                {
                    prediosEmpresaIbarra = datosPrediosEmpresaIbarra.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosIbarra>(datosPrediosEmpresaIbarra.Data) : null;
                    cachePrediosEmpresaIbarra = datosPrediosEmpresaIbarra.Cache;
                }

                var cachePrediosSanCristobal = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal prediosSanCristobal = null;
                var datosPrediosSanCristobal = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSanCristobal);
                if (datosPrediosSanCristobal != null)
                {
                    prediosSanCristobal = datosPrediosSanCristobal.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal>(datosPrediosSanCristobal.Data) : null;
                    cachePrediosSanCristobal = datosPrediosSanCristobal.Cache;
                }

                var cachePrediosEmpresaSanCristobal = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal prediosEmpresaSanCristobal = null;
                var datosPrediosEmpresaSanCristobal = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSanCristobal);
                if (datosPrediosEmpresaSanCristobal != null)
                {
                    prediosEmpresaSanCristobal = datosPrediosEmpresaSanCristobal.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSanCristobal>(datosPrediosEmpresaSanCristobal.Data) : null;
                    cachePrediosEmpresaSanCristobal = datosPrediosEmpresaSanCristobal.Cache;
                }

                var cachePrediosDuran = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosDuran prediosDuran = null;
                var datosPrediosDuran = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDuran);
                if (datosPrediosDuran != null)
                {
                    prediosDuran = datosPrediosDuran.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDuran>(datosPrediosDuran.Data) : null;
                    cachePrediosDuran = datosPrediosDuran.Cache;
                }

                var cachePrediosEmpresaDuran = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosDuran prediosEmpresaDuran = null;
                var datosPrediosEmpresaDuran = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDuran);
                if (datosPrediosEmpresaDuran != null)
                {
                    prediosEmpresaDuran = datosPrediosEmpresaDuran.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDuran>(datosPrediosEmpresaDuran.Data) : null;
                    cachePrediosEmpresaDuran = datosPrediosEmpresaDuran.Cache;
                }

                var cachePrediosLagoAgrio = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio prediosLagoAgrio = null;
                var datosPrediosLagoAgrio = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLagoAgrio);
                if (datosPrediosLagoAgrio != null)
                {
                    prediosLagoAgrio = datosPrediosLagoAgrio.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio>(datosPrediosLagoAgrio.Data) : null;
                    cachePrediosLagoAgrio = datosPrediosLagoAgrio.Cache;
                }

                var cachePrediosEmpresaLagoAgrio = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio prediosEmpresaLagoAgrio = null;
                var datosPrediosEmpresaLagoAgrio = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLagoAgrio);
                if (datosPrediosEmpresaLagoAgrio != null)
                {
                    prediosEmpresaLagoAgrio = datosPrediosEmpresaLagoAgrio.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLagoAgrio>(datosPrediosEmpresaLagoAgrio.Data) : null;
                    cachePrediosEmpresaLagoAgrio = datosPrediosEmpresaLagoAgrio.Cache;
                }

                var cachePrediosSantaRosa = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa prediosSantaRosa = null;
                var datosPrediosSantaRosa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSantaRosa);
                if (datosPrediosSantaRosa != null)
                {
                    prediosSantaRosa = datosPrediosSantaRosa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa>(datosPrediosSantaRosa.Data) : null;
                    cachePrediosSantaRosa = datosPrediosSantaRosa.Cache;
                }

                var cachePrediosEmpresaSantaRosa = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa prediosEmpresaSantaRosa = null;
                var datosPrediosEmpresaSantaRosa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSantaRosa);
                if (datosPrediosEmpresaSantaRosa != null)
                {
                    prediosEmpresaSantaRosa = datosPrediosEmpresaSantaRosa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSantaRosa>(datosPrediosEmpresaSantaRosa.Data) : null;
                    cachePrediosEmpresaSantaRosa = datosPrediosEmpresaSantaRosa.Cache;
                }

                var cachePrediosSucua = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSucua prediosSucua = null;
                var datosPrediosSucua = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSucua);
                if (datosPrediosSucua != null)
                {
                    prediosSucua = datosPrediosSucua.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSucua>(datosPrediosSucua.Data) : null;
                    cachePrediosSucua = datosPrediosSucua.Cache;
                }

                var cachePrediosEmpresaSucua = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSucua prediosEmpresaSucua = null;
                var datosPrediosEmpresaSucua = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSucua);
                if (datosPrediosEmpresaSucua != null)
                {
                    prediosEmpresaSucua = datosPrediosEmpresaSucua.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSucua>(datosPrediosEmpresaSucua.Data) : null;
                    cachePrediosEmpresaSucua = datosPrediosEmpresaSucua.Cache;
                }

                var cachePrediosSigSig = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig prediosSigSig = null;
                var datosPrediosSigSig = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSigSig);
                if (datosPrediosSigSig != null)
                {
                    prediosSigSig = datosPrediosSigSig.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig>(datosPrediosSigSig.Data) : null;
                    cachePrediosSigSig = datosPrediosSigSig.Cache;
                }

                var cachePrediosEmpresaSigSig = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig prediosEmpresaSigSig = null;
                var datosPrediosEmpresaSigSig = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSigSig);
                if (datosPrediosEmpresaSigSig != null)
                {
                    prediosEmpresaSigSig = datosPrediosEmpresaSigSig.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSigSig>(datosPrediosEmpresaSigSig.Data) : null;
                    cachePrediosEmpresaSigSig = datosPrediosEmpresaSigSig.Cache;
                }

                var cachePrediosMejia = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosMejia prediosMejia = null;
                var datosPrediosMejia = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMejia);
                if (datosPrediosMejia != null)
                {
                    prediosMejia = datosPrediosMejia.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMejia>(datosPrediosMejia.Data) : null;
                    cachePrediosMejia = datosPrediosMejia.Cache;
                }

                var cachePrediosEmpresaMejia = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosMejia prediosEmpresaMejia = null;
                var datosPrediosEmpresaMejia = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMejia);
                if (datosPrediosEmpresaMejia != null)
                {
                    prediosEmpresaMejia = datosPrediosEmpresaMejia.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMejia>(datosPrediosEmpresaMejia.Data) : null;
                    cachePrediosEmpresaMejia = datosPrediosEmpresaMejia.Cache;
                }

                var cachePrediosMorona = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosMorona prediosMorona = null;
                var datosPrediosMorona = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioMorona);
                if (datosPrediosMorona != null)
                {
                    prediosMorona = datosPrediosMorona.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMorona>(datosPrediosMorona.Data) : null;
                    cachePrediosMorona = datosPrediosMorona.Cache;
                }

                var cachePrediosEmpresaMorona = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosMorona prediosEmpresaMorona = null;
                var datosPrediosEmpresaMorona = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaMorona);
                if (datosPrediosEmpresaMorona != null)
                {
                    prediosEmpresaMorona = datosPrediosEmpresaMorona.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosMorona>(datosPrediosEmpresaMorona.Data) : null;
                    cachePrediosEmpresaMorona = datosPrediosEmpresaMorona.Cache;
                }

                var cachePrediosTena = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosTena prediosTena = null;
                var datosPrediosTena = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioTena);
                if (datosPrediosTena != null)
                {
                    prediosTena = datosPrediosTena.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosTena>(datosPrediosTena.Data) : null;
                    cachePrediosTena = datosPrediosTena.Cache;
                }

                var cachePrediosEmpresaTena = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosTena prediosEmpresaTena = null;
                var datosPrediosEmpresaTena = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaTena);
                if (datosPrediosEmpresaTena != null)
                {
                    prediosEmpresaTena = datosPrediosEmpresaTena.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosTena>(datosPrediosEmpresaTena.Data) : null;
                    cachePrediosEmpresaTena = datosPrediosEmpresaTena.Cache;
                }

                var cachePrediosCatamayo = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo prediosCatamayo = null;
                var datosPrediosCatamayo = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCatamayo);
                if (datosPrediosCatamayo != null)
                {
                    prediosCatamayo = datosPrediosCatamayo.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo>(datosPrediosCatamayo.Data) : null;
                    cachePrediosCatamayo = datosPrediosCatamayo.Cache;
                }

                var cachePrediosEmpresaCatamayo = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo prediosEmpresaCatamayo = null;
                var datosPrediosEmpresaCatamayo = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCatamayo);
                if (datosPrediosEmpresaCatamayo != null)
                {
                    prediosEmpresaCatamayo = datosPrediosEmpresaCatamayo.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCatamayo>(datosPrediosEmpresaCatamayo.Data) : null;
                    cachePrediosEmpresaCatamayo = datosPrediosEmpresaCatamayo.Cache;
                }

                var cachePrediosLoja = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja prediosLoja = null;
                var datosPrediosLoja = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioLoja);
                if (datosPrediosLoja != null)
                {
                    prediosLoja = datosPrediosLoja.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLoja>(datosPrediosLoja.Data) : null;
                    cachePrediosLoja = datosPrediosLoja.Cache;
                }

                List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja> prediosDetalleLoja = null;
                var datosDetallePrediosLoja = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosLoja);
                if (datosDetallePrediosLoja != null)
                    prediosDetalleLoja = datosDetallePrediosLoja.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja>>(datosDetallePrediosLoja.Data) : null;

                var cachePrediosEmpresaLoja = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosLoja prediosEmpresaLoja = null;
                var datosPrediosEmpresaLoja = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaLoja);
                if (datosPrediosEmpresaLoja != null)
                {
                    prediosEmpresaLoja = datosPrediosEmpresaLoja.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosLoja>(datosPrediosEmpresaLoja.Data) : null;
                    cachePrediosEmpresaLoja = datosPrediosEmpresaLoja.Cache;
                }

                List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja> prediosDetalleEmpresaLoja = null;
                var datosDetallePrediosEmpresaLoja = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DetallePrediosEmpresaLoja);
                if (datosDetallePrediosEmpresaLoja != null)
                    prediosDetalleEmpresaLoja = datosDetallePrediosEmpresaLoja.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.PredioMunicipio.Modelos.DatosPrediosPropiedadesLoja>>(datosDetallePrediosEmpresaLoja.Data) : null;

                var cachePrediosSamborondon = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon prediosSamborondon = null;
                var datosPrediosSamborondon = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioSamborondon);
                if (datosPrediosSamborondon != null)
                {
                    prediosSamborondon = datosPrediosSamborondon.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon>(datosPrediosSamborondon.Data) : null;
                    cachePrediosSamborondon = datosPrediosSamborondon.Cache;
                }

                var cachePrediosEmpresaSamborondon = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon prediosEmpresaSamborondon = null;
                var datosPrediosEmpresaSamborondon = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaSamborondon);
                if (datosPrediosEmpresaSamborondon != null)
                {
                    prediosEmpresaSamborondon = datosPrediosEmpresaSamborondon.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosSamborondon>(datosPrediosEmpresaSamborondon.Data) : null;
                    cachePrediosEmpresaSamborondon = datosPrediosEmpresaSamborondon.Cache;
                }

                var cachePrediosDaule = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosDaule prediosDaule = null;
                var datosPrediosDaule = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioDaule);
                if (datosPrediosDaule != null)
                {
                    prediosDaule = datosPrediosDaule.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDaule>(datosPrediosDaule.Data) : null;
                    cachePrediosDaule = datosPrediosDaule.Cache;
                }

                var cachePrediosEmpresaDaule = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosDaule prediosEmpresaDaule = null;
                var datosPrediosEmpresaDaule = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaDaule);
                if (datosPrediosEmpresaDaule != null)
                {
                    prediosEmpresaDaule = datosPrediosEmpresaDaule.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosDaule>(datosPrediosEmpresaDaule.Data) : null;
                    cachePrediosEmpresaDaule = datosPrediosEmpresaDaule.Cache;
                }

                var cachePrediosCayambe = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe prediosCayambe = null;
                var datosPrediosCayambe = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCayambe);
                if (datosPrediosCayambe != null)
                {
                    prediosCayambe = datosPrediosCayambe.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe>(datosPrediosCayambe.Data) : null;
                    cachePrediosCayambe = datosPrediosCayambe.Cache;
                }

                var cachePrediosEmpresaCayambe = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe prediosEmpresaCayambe = null;
                var datosPrediosEmpresaCayambe = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCayambe);
                if (datosPrediosEmpresaCayambe != null)
                {
                    prediosEmpresaCayambe = datosPrediosEmpresaCayambe.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCayambe>(datosPrediosEmpresaCayambe.Data) : null;
                    cachePrediosEmpresaCayambe = datosPrediosEmpresaCayambe.Cache;
                }

                var cachePrediosAzogues = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues prediosAzogues = null;
                var datosPrediosAzogues = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioAzogues);
                if (datosPrediosAzogues != null)
                {
                    prediosAzogues = datosPrediosAzogues.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues>(datosPrediosAzogues.Data) : null;
                    cachePrediosAzogues = datosPrediosAzogues.Cache;
                }

                var cachePrediosEmpresaAzogues = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues prediosEmpresaAzogues = null;
                var datosPrediosEmpresaAzogues = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaAzogues);
                if (datosPrediosEmpresaAzogues != null)
                {
                    prediosEmpresaAzogues = datosPrediosEmpresaAzogues.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosAzogues>(datosPrediosEmpresaAzogues.Data) : null;
                    cachePrediosEmpresaAzogues = datosPrediosEmpresaAzogues.Cache;
                }

                #region PrediosEsmeraldas
                var cachePrediosEsmeraldas = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas prediosEsmeraldas = null;
                var datosPrediosEsmeraldas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEsmeraldas);
                if (datosPrediosEsmeraldas != null)
                {
                    prediosEsmeraldas = datosPrediosEsmeraldas.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas>(datosPrediosEsmeraldas.Data) : null;
                    cachePrediosEsmeraldas = datosPrediosEsmeraldas.Cache;
                }

                var cachePrediosEmpresaEsmeraldas = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas prediosEmpresaEsmeraldas = null;
                var datosPrediosEmpresaEsmeraldas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaEsmeraldas);
                if (datosPrediosEmpresaEsmeraldas != null)
                {
                    prediosEmpresaEsmeraldas = datosPrediosEmpresaEsmeraldas.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosEsmeraldas>(datosPrediosEmpresaEsmeraldas.Data) : null;
                    cachePrediosEmpresaEsmeraldas = datosPrediosEmpresaEsmeraldas.Cache;
                }
                #endregion PrediosEsmeraldas

                #region PrediosCotacachi
                var cachePrediosCotacachi = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi prediosCotacachi = null;
                var datosPrediosCotacachi = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioCotacachi);
                if (datosPrediosCotacachi != null)
                {
                    prediosCotacachi = datosPrediosCotacachi.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi>(datosPrediosCotacachi.Data) : null;
                    cachePrediosCotacachi = datosPrediosCotacachi.Cache;
                }

                var cachePrediosEmpresaCotacachi = false;
                Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi prediosEmpresaCotacachi = null;
                var datosPrediosEmpresaCotacachi = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PredioMunicipioEmpresaCotacachi);
                if (datosPrediosEmpresaCotacachi != null)
                {
                    prediosEmpresaCotacachi = datosPrediosEmpresaCotacachi.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PredioMunicipio.Modelos.PrediosCotacachi>(datosPrediosEmpresaCotacachi.Data) : null;
                    cachePrediosEmpresaCotacachi = datosPrediosEmpresaCotacachi.Cache;
                }
                #endregion PrediosCotacachi

                var cacheIess = false;
                Externos.Logica.IESS.Modelos.Persona r_iess = null;
                var datosIess = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Iess);
                if (datosIess != null)
                {
                    r_iess = datosIess.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Persona>(datosIess.Data) : null;
                    cacheIess = datosIess.Cache;
                }

                var cacheAfiliado = false;
                Externos.Logica.IESS.Modelos.Afiliacion r_afiliacion = null;
                var datosAfiliado = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado);
                if (datosAfiliado != null)
                {
                    r_afiliacion = datosAfiliado.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Afiliacion>(datosAfiliado.Data) : null;
                    cacheAfiliado = datosAfiliado.Cache;
                }

                var cacheAfiliadoAdicional = false;
                List<Externos.Logica.IESS.Modelos.Afiliado> r_afiliacionAdicional = null;
                var datosAfiliadoAdicional = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.AfiliadoAdicional);
                if (datosAfiliadoAdicional != null)
                {
                    r_afiliacionAdicional = datosAfiliadoAdicional.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.IESS.Modelos.Afiliado>>(datosAfiliadoAdicional.Data) : null;
                    cacheAfiliadoAdicional = datosAfiliadoAdicional.Cache;
                }

                List<Externos.Logica.IESS.Modelos.Empleado> r_empleadosEmpresa = null;
                var datosEmpleadosEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.IessEmpresaEmpleados);
                if (datosEmpleadosEmpresa != null)
                    r_empleadosEmpresa = datosEmpleadosEmpresa.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.IESS.Modelos.Empleado>>(datosEmpleadosEmpresa.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactos = null;
                var datosContactos = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Contactos);
                if (datosContactos != null)
                    contactos = datosContactos.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContactos.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactosEmpresa = null;
                var datosContEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa);
                if (datosContEmpresa != null)
                    contactosEmpresa = datosContEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContEmpresa.Data) : null;

                List<Externos.Logica.Balances.Modelos.Accionista> accionistas = null;
                var datosAccionistas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Accionistas);
                if (datosAccionistas != null)
                    accionistas = datosAccionistas.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.Accionista>>(datosAccionistas.Data) : null;

                List<Externos.Logica.Balances.Modelos.AccionistaEmpresa> empresasAccionista = null;
                var datosEmpresasAccionista = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.EmpresasAccionista);
                if (datosEmpresasAccionista != null)
                    empresasAccionista = datosEmpresasAccionista.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.AccionistaEmpresa>>(datosEmpresasAccionista.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactosIess = null;
                var datosContIess = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosIess);
                if (datosContIess != null)
                    contactosIess = datosContIess.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContIess.Data) : null;

                Externos.Logica.Balances.Modelos.CatastroFantasma catastroFantasma = null;
                var datosCatastroFantasma = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.CatastroFantasma);
                if (datosCatastroFantasma != null)
                    catastroFantasma = datosCatastroFantasma.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.CatastroFantasma>(datosCatastroFantasma.Data) : null;

                Externos.Logica.Garancheck.Modelos.Persona r_garancheck = null;
                var datosGarancheck = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano);
                if (datosGarancheck != null)
                    r_garancheck = datosGarancheck.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(datosGarancheck.Data) : null;

                Externos.Logica.Garancheck.Modelos.RegistroCivil r_regCivil = null;
                var datosRegCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil);
                if (datosRegCivil != null)
                    r_regCivil = datosRegCivil.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(datosRegCivil.Data) : null;

                var cacheSenescyt = false;
                Externos.Logica.Senescyt.Modelos.Persona r_senescyt = null;
                var datosSenescyt = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Senescyt);
                if (datosSenescyt != null)
                {
                    r_senescyt = datosSenescyt.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Senescyt.Modelos.Persona>(datosSenescyt.Data) : null;
                    cacheSenescyt = datosSenescyt.Cache;
                }

                var cacheJudicial = false;
                Externos.Logica.FJudicial.Modelos.Persona r_fjudicial = null;
                var datosFJPersona = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FJudicial);
                if (datosFJPersona != null)
                {
                    r_fjudicial = datosFJPersona.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosFJPersona.Data) : null;
                    cacheJudicial = datosFJPersona.Cache;
                }

                var mensajeJudicialPersona = string.Empty;
                if (datosFJPersona != null && datosFJPersona.Data == null && datosFJPersona.FuenteActiva.HasValue && datosFJPersona.FuenteActiva.Value)
                    mensajeJudicialPersona = Dominio.Constantes.Respuestas.SujetoSinInformacionFJ.ToUpper();
                else if (datosFJPersona != null && datosFJPersona.Data == null && datosFJPersona.FuenteActiva.HasValue && !datosFJPersona.FuenteActiva.Value)
                    mensajeJudicialPersona = Dominio.Constantes.Respuestas.InformacionFuenteJudicial.ToUpper();

                var cacheJudicialEmpresa = false;
                Externos.Logica.FJudicial.Modelos.Persona r_fjudicialempresa = null;
                var datosFJEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FJEmpresa);
                if (datosFJEmpresa != null)
                {
                    r_fjudicialempresa = datosFJEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Persona>(datosFJEmpresa.Data) : null;
                    cacheJudicialEmpresa = datosFJEmpresa.Cache;
                }

                var cacheImpedimento = false;
                Externos.Logica.FJudicial.Modelos.Impedimento impedimento = null;
                var datosImpedimento = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Impedimento);
                if (datosImpedimento != null)
                {
                    impedimento = datosImpedimento.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.FJudicial.Modelos.Impedimento>(datosImpedimento.Data) : null;
                    cacheImpedimento = datosImpedimento.Cache;
                }

                var mensajeJudicialEmpresa = string.Empty;
                if (datosFJEmpresa != null && datosFJEmpresa.Data == null && datosFJEmpresa.FuenteActiva.HasValue && datosFJEmpresa.FuenteActiva.Value)
                    mensajeJudicialEmpresa = Dominio.Constantes.Respuestas.EmpresaSinInformacionFJ.ToUpper();
                else if (datosFJEmpresa != null && datosFJEmpresa.Data == null && datosFJEmpresa.FuenteActiva.HasValue && !datosFJEmpresa.FuenteActiva.Value)
                    mensajeJudicialEmpresa = Dominio.Constantes.Respuestas.InformacionFuenteJudicial.ToUpper();

                var cacheFiscaliaPersona = false;
                Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito r_fiscaliaPersona = null;
                var datosFiscaliaPersona = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosPersona);
                if (datosFiscaliaPersona != null)
                {
                    r_fiscaliaPersona = datosFiscaliaPersona.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(datosFiscaliaPersona.Data) : null;
                    cacheFiscaliaPersona = datosFiscaliaPersona.Cache;
                }

                var cacheFiscaliaEmpresa = false;
                Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito r_fiscaliaEmpresa = null;
                var datosFiscaliaEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.FiscaliaDelitosEmpresa);
                if (datosFiscaliaEmpresa != null)
                {
                    r_fiscaliaEmpresa = datosFiscaliaEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.FiscaliaDelitos.Modelos.NoticiaDelito>(datosFiscaliaEmpresa.Data) : null;
                    cacheFiscaliaEmpresa = datosFiscaliaEmpresa.Cache;
                }

                #region DatosDelitos ProcesadosSospechosos
                try
                {
                    var numeroDelito = new List<string>();
                    var numeroAdministro = new List<string>();
                    var numeroDelitoEmpresa = new List<string>();
                    var numeroAdministroEmpresa = new List<string>();
                    var historialTemp = detallesHistorial.FirstOrDefault()?.Historial;
                    if (historialTemp != null && historialTemp.TipoConsulta == Dominio.Tipos.Consultas.Web)
                    {
                        if (r_fiscaliaPersona != null && r_fiscaliaPersona.ProcesosNoticiaDelito != null && r_fiscaliaPersona.ProcesosNoticiaDelito.Any())
                        {
                            var sujetosNoticiaDelito = r_fiscaliaPersona.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                            if (sujetosNoticiaDelito != null && sujetosNoticiaDelito.Any())
                            {
                                var nombreDivido = !string.IsNullOrEmpty(historialTemp.NombresPersona) ? historialTemp.NombresPersona?.Split(' ') : new string[0];
                                var listaNombre = new List<bool>();
                                foreach (var item1 in sujetosNoticiaDelito.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                                {
                                    if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                    {
                                        if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(historialTemp.Identificacion) && historialTemp.Identificacion == item1.Cedula)
                                            numeroDelito.Add(item1.Numero);
                                        else if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && historialTemp.IdentificacionSecundaria == item1.Cedula)
                                            numeroDelito.Add(item1.Numero);
                                        else
                                        {
                                            var nombreSeparado = item1.NombresCompletos.Split(' ');
                                            listaNombre.Clear();
                                            foreach (var item2 in nombreSeparado)
                                            {
                                                if (!string.IsNullOrEmpty(historialTemp.NombresPersona) && historialTemp.NombresPersona.Contains(item2))
                                                    listaNombre.Add(true);
                                                else
                                                    listaNombre.Add(false);
                                            }
                                            if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                                                numeroDelito.Add(item1.Numero);
                                        }
                                    }
                                }
                                numeroDelito = numeroDelito.Distinct().ToList();
                                r_fiscaliaPersona.ProcesosNoticiaDelito = r_fiscaliaPersona.ProcesosNoticiaDelito.Where(x => numeroDelito.Contains(x.Numero)).Select(x => x).ToList();
                            }
                            else
                                r_fiscaliaPersona.ProcesosNoticiaDelito.Clear();
                        }

                        //if (r_fiscaliaPersona != null && r_fiscaliaPersona.ProcesosActoAdministrativo != null && r_fiscaliaPersona.ProcesosActoAdministrativo.Any())
                        //{
                        //    var sujetosActoAdministrativo = r_fiscaliaPersona.ProcesosActoAdministrativo.Where(x => x.Descripcion.ToUpper().Equals("PROCESADO") || x.Descripcion.ToUpper().Equals("SOSPECHOSO")).Select(x => new { x.Numero, x.CedulaDenunciante, x.NombreDenunciante }).ToList();
                        //    if (sujetosActoAdministrativo != null && sujetosActoAdministrativo.Any())
                        //    {
                        //        var nombreDivido = !string.IsNullOrEmpty(historialTemp.NombresPersona) ? historialTemp.NombresPersona?.Split(' ') : new string[0];
                        //        var listaNombre = new List<bool>();
                        //        foreach (var item1 in sujetosActoAdministrativo)
                        //        {
                        //            if (!string.IsNullOrEmpty(item1.CedulaDenunciante) && !string.IsNullOrEmpty(historialTemp.Identificacion) && historialTemp.Identificacion == item1.CedulaDenunciante)
                        //                numeroAdministro.Add(item1.Numero);
                        //            else if (!string.IsNullOrEmpty(item1.CedulaDenunciante) && !string.IsNullOrEmpty(historialTemp.IdentificacionSecundaria) && historialTemp.IdentificacionSecundaria == item1.CedulaDenunciante)
                        //                numeroAdministro.Add(item1.Numero);
                        //            else
                        //            {
                        //                var nombreSeparado = item1.NombreDenunciante.Split(' ');
                        //                listaNombre.Clear();
                        //                foreach (var item2 in nombreSeparado)
                        //                {
                        //                    if (!string.IsNullOrEmpty(historialTemp.NombresPersona) && historialTemp.NombresPersona.Contains(item2))
                        //                        listaNombre.Add(true);
                        //                    else
                        //                        listaNombre.Add(false);
                        //                }
                        //                if (nombreDivido != null && nombreDivido.Any() && listaNombre.Count(x => x) == nombreDivido.Length)
                        //                    numeroAdministro.Add(item1.Numero);
                        //            }
                        //        }
                        //        numeroAdministro = numeroAdministro.Distinct().ToList();
                        //        r_fiscaliaPersona.ProcesosActoAdministrativo = r_fiscaliaPersona.ProcesosActoAdministrativo.Where(x => numeroAdministro.Contains(x.Numero)).Select(x => x).ToList();
                        //    }
                        //    else
                        //        r_fiscaliaPersona.ProcesosActoAdministrativo.Clear();
                        //}

                        if (r_fiscaliaEmpresa != null && r_fiscaliaEmpresa.ProcesosNoticiaDelito != null && r_fiscaliaEmpresa.ProcesosNoticiaDelito.Any())
                        {
                            var sujetos = r_fiscaliaEmpresa.ProcesosNoticiaDelito.Where(x => x.Sujetos.Any(m => m.Estado.ToUpper().Equals("PROCESADO") || m.Estado.ToUpper().Contains("SOSPECHOSO"))).Select(x => new { x.Numero, x.Sujetos }).ToList();
                            if (sujetos != null && sujetos.Any())
                            {
                                foreach (var item1 in sujetos.SelectMany(x => x.Sujetos.Select(m => new { x.Numero, m.Cedula, m.NombresCompletos, m.Estado })))
                                {
                                    if (item1.Estado.ToUpper().Equals("PROCESADO") || item1.Estado.ToUpper().Contains("SOSPECHOSO"))
                                    {
                                        if (!string.IsNullOrEmpty(item1.Cedula) && !string.IsNullOrEmpty(historialTemp.Identificacion) && historialTemp.Identificacion == item1.Cedula)
                                            numeroDelitoEmpresa.Add(item1.Numero);
                                        else if (!string.IsNullOrEmpty(item1.NombresCompletos) && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa) && historialTemp.RazonSocialEmpresa == item1.NombresCompletos)
                                            numeroDelitoEmpresa.Add(item1.Numero);
                                    }
                                }
                                numeroDelitoEmpresa = numeroDelitoEmpresa.Distinct().ToList();
                                r_fiscaliaEmpresa.ProcesosNoticiaDelito = r_fiscaliaEmpresa.ProcesosNoticiaDelito.Where(x => numeroDelitoEmpresa.Contains(x.Numero)).Select(x => x).ToList();
                            }
                            else
                                r_fiscaliaEmpresa.ProcesosNoticiaDelito.Clear();
                        }

                        //if (r_fiscaliaEmpresa != null && r_fiscaliaEmpresa.ProcesosActoAdministrativo != null && r_fiscaliaEmpresa.ProcesosActoAdministrativo.Any())
                        //{
                        //    var sujetos = r_fiscaliaEmpresa.ProcesosActoAdministrativo.Where(x => x.Descripcion.ToUpper().Equals("PROCESADO") || x.Descripcion.ToUpper().Equals("SOSPECHOSO")).Select(x => new { x.Numero, x.CedulaDenunciante, x.NombreDenunciante }).ToList();
                        //    if (sujetos != null && sujetos.Any())
                        //    {
                        //        foreach (var item1 in sujetos)
                        //        {
                        //            if (!string.IsNullOrEmpty(item1.CedulaDenunciante) && !string.IsNullOrEmpty(historialTemp.Identificacion) && historialTemp.Identificacion == item1.CedulaDenunciante)
                        //                numeroAdministroEmpresa.Add(item1.Numero);
                        //            else if (!string.IsNullOrEmpty(item1.NombreDenunciante) && !string.IsNullOrEmpty(historialTemp.RazonSocialEmpresa) && historialTemp.RazonSocialEmpresa == item1.NombreDenunciante)
                        //                numeroAdministroEmpresa.Add(item1.Numero);
                        //        }
                        //        numeroAdministroEmpresa = numeroAdministroEmpresa.Distinct().ToList();
                        //        r_fiscaliaEmpresa.ProcesosActoAdministrativo = r_fiscaliaEmpresa.ProcesosActoAdministrativo.Where(x => numeroAdministroEmpresa.Contains(x.Numero)).Select(x => x).ToList();
                        //    }
                        //    else
                        //        r_fiscaliaEmpresa.ProcesosActoAdministrativo.Clear();
                        //}
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                #endregion DatosDelitos ProcesadosSospechosos

                var cacheAnt = false;
                Externos.Logica.ANT.Modelos.Licencia r_ant = null;
                var datosAnt = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ant);
                if (datosAnt != null)
                {
                    r_ant = datosAnt.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.ANT.Modelos.Licencia>(datosAnt.Data) : null;
                    cacheAnt = datosAnt.Cache;
                }

                List<Externos.Logica.ANT.Modelos.AutoHistorico> autosHistorico = null;
                var datosAutosHistorico = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.AutoHistorico);
                if (datosAutosHistorico != null)
                    autosHistorico = datosAutosHistorico.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.ANT.Modelos.AutoHistorico>>(datosAutosHistorico.Data) : null;

                var cachePensionAlimenticia = false;
                Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia r_pension = null;
                var datosPension = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.PensionAlimenticia);
                if (datosPension != null)
                {
                    r_pension = datosPension.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.PensionesAlimenticias.Modelos.PensionAlimenticia>(datosPension.Data) : null;
                    cachePensionAlimenticia = datosPension.Cache;
                }

                var cacheSercop = false;
                Externos.Logica.SERCOP.Modelos.ProveedorIncumplido r_sercop = null;
                var datosSercop = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Proveedor);
                if (datosSercop != null)
                {
                    r_sercop = datosSercop.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SERCOP.Modelos.ProveedorIncumplido>(datosSercop.Data) : null;
                    cacheSercop = datosSercop.Cache;
                }

                var cacheSercopContraloria = false;
                List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria> r_sercopcontraloria = null;
                var datosSercopContraloria = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ProveedorContraloria);
                if (datosSercopContraloria != null)
                {
                    r_sercopcontraloria = datosSercopContraloria.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.SERCOP.Modelos.ProveedorContraloria>>(datosSercopContraloria.Data) : null;
                    cacheSercopContraloria = datosSercopContraloria.Cache;
                }

                var cacheBuro = false;
                Externos.Logica.BuroCredito.Modelos.CreditoRespuesta r_burocredito = null;
                Externos.Logica.Equifax.Modelos.Resultado r_burocreditoEquifax = null;
                var tipoFuenteBuro = await _historiales.FirstOrDefaultAsync(m => m.TipoFuenteBuro, m => m.Id == idHistorial);
                if (tipoFuenteBuro != null && tipoFuenteBuro == Dominio.Tipos.FuentesBuro.Aval)
                {
                    var datosBuroCredito = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito);
                    if (datosBuroCredito != null)
                    {
                        r_burocredito = datosBuroCredito.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta>(datosBuroCredito.Data) : null;
                        cacheBuro = datosBuroCredito.Cache;
                    }
                }
                else if (tipoFuenteBuro != null && tipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax)
                {
                    var datosBuroEquifax = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito);
                    if (datosBuroEquifax != null)
                    {
                        r_burocreditoEquifax = datosBuroEquifax.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(datosBuroEquifax.Data) : null;
                        cacheBuro = datosBuroEquifax.Cache;
                    }
                }

                List<Externos.Logica.Balances.Modelos.Similares> r_similares = null;
                var datosSimialres = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.EmpresasSimilares);
                if (datosSimialres != null)
                    r_similares = datosSimialres.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.Similares>>(datosSimialres.Data) : null;

                var cacheFamiliares = false;
                Externos.Logica.Garancheck.Modelos.Familia familiares = null;
                var datosFamiliares = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Familiares);
                if (datosFamiliares != null)
                {
                    familiares = datosFamiliares.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Familia>(datosFamiliares.Data) : null;
                    cacheFamiliares = datosFamiliares.Cache;
                }

                Externos.Logica.Garancheck.Modelos.Personal datosPersonal = null;
                var datosPersonales = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Personales);
                if (datosPersonales != null)
                    datosPersonal = datosPersonales.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(datosPersonales.Data) : null;

                var cacheOnu = false;
                Externos.Logica.UAFE.Modelos.Resultado r_onu = null;
                var datosOnu = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu);
                if (datosOnu != null)
                {
                    r_onu = datosOnu.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.Resultado>(datosOnu.Data) : null;
                    cacheOnu = datosOnu.Cache;
                }

                var cacheOnu20226 = false;
                Externos.Logica.UAFE.Modelos.Resultado r_onu2206 = null;
                var datosOnu2206 = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu2206);
                if (datosOnu2206 != null)
                {
                    r_onu2206 = datosOnu2206.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.Resultado>(datosOnu2206.Data) : null;
                    cacheOnu20226 = datosOnu2206.Cache;
                }

                var cacheInterpol = false;
                Externos.Logica.UAFE.Modelos.ResultadoInterpol r_interpol = null;
                var datosInterpol = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.UafeInterpol);
                if (datosInterpol != null)
                {
                    r_interpol = datosInterpol.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.ResultadoInterpol>(datosInterpol.Data) : null;
                    cacheInterpol = datosInterpol.Cache;
                }

                var cacheOfac = false;
                Externos.Logica.UAFE.Modelos.ResultadoOfac r_ofac = null;
                var datosOfac = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.UafeOfac);
                if (datosOfac != null)
                {
                    r_ofac = datosOfac.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.ResultadoOfac>(datosOfac.Data) : null;
                    cacheOfac = datosOfac.Cache;
                }

                #region FuenteEquifax

                Externos.Logica.Equifax.Modelos.ResultadoHistoricoEstructuraVencimiento nivelHistoricoEstructuraVencimiento = null;
                var datosHistoricoEstructuraVencimiento = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.NivelHistoricoEstructuraVencimientos);
                if (datosHistoricoEstructuraVencimiento != null)
                    nivelHistoricoEstructuraVencimiento = datosHistoricoEstructuraVencimiento.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoHistoricoEstructuraVencimiento>(datosHistoricoEstructuraVencimiento.Data) : null;

                List<NivelSaldoPorVencerPorInstitucionViewModel> nivelSaldoVencerInstitucion = null;
                var datosSaldoVencerInstitucion = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.NivelSaldoPorVencerPorInstitucion);
                if (datosSaldoVencerInstitucion != null)
                    nivelSaldoVencerInstitucion = datosSaldoVencerInstitucion.Data != null ? JsonConvert.DeserializeObject<List<NivelSaldoPorVencerPorInstitucionViewModel>>(datosSaldoVencerInstitucion.Data) : null;

                List<NivelDetalleVencidoInstitucionViewModel> nivelDetalleVencidoInstitucion = null;
                var datosDetalleVencidoInstitucion = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.NivelDetalleVencidoPorInstitucion);
                if (datosDetalleVencidoInstitucion != null)
                    nivelDetalleVencidoInstitucion = datosDetalleVencidoInstitucion.Data != null ? JsonConvert.DeserializeObject<List<NivelDetalleVencidoInstitucionViewModel>>(datosDetalleVencidoInstitucion.Data) : null;

                Externos.Logica.Equifax.Modelos.ResultadoEvolucionHistorico nivelEvolucionHistorica = null;
                var datosEvolucionHistorica = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.NivelEvolucionHistoricaDistribucionEndeudamiento);
                if (datosEvolucionHistorica != null)
                    nivelEvolucionHistorica = datosEvolucionHistorica.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.ResultadoEvolucionHistorico>(datosEvolucionHistorica.Data) : null;

                List<NivelOperacionInstitucionViewModel> nivelOperacionInstitucion = null;
                var datosOperacionInstitucion = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucion);
                if (datosOperacionInstitucion != null)
                    nivelOperacionInstitucion = datosOperacionInstitucion.Data != null ? JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(datosOperacionInstitucion.Data) : null;

                List<NivelOperacionInstitucionViewModel> nivelOperacionInstitucionPV = null;
                var datosOperacionInstitucionPV = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.NivelOperacionesPorInstitucionPV);
                if (datosOperacionInstitucionPV != null)
                    nivelOperacionInstitucionPV = datosOperacionInstitucionPV.Data != null ? JsonConvert.DeserializeObject<List<NivelOperacionInstitucionViewModel>>(datosOperacionInstitucionPV.Data) : null;

                #endregion FuenteEquifax

                var resultadoPoliticas = await _calificaciones.FirstOrDefaultAsync(m => new CalificacionViewModel
                {
                    IdCalificacion = m.Id,
                    IdHistorial = m.IdHistorial,
                    Aprobado = m.Aprobado,
                    TotalValidados = m.TotalVerificados,
                    TotalAprobados = m.NumeroAprobados,
                    TotalRechazados = m.NumeroRechazados,
                    Calificacion = m.Puntaje,
                    DetalleCalificacion = m.DetalleCalificacion.Select(x => new DetalleCalificacionViewModel
                    {
                        IdPolitica = x.IdPolitica,
                        Politica = x.Politica.Nombre,
                        Tipo = x.Politica.Tipo,
                        ReferenciaMinima = x.ReferenciaMinima,
                        ValorResultado = x.Datos,
                        Valor = x.Valor,
                        Parametro = x.Parametro,
                        ResultadoPolitica = x.Aprobado,
                        Observacion = x.Observacion
                    }).ToList()
                }, m => m.IdHistorial == idHistorial && m.TipoCalificacion != Dominio.Tipos.TiposCalificaciones.Buro);

                var empresaPersonalizada = string.Empty;
                var valorParametro = await _parametrosClientesHistoriales.FirstOrDefaultAsync(m => m.Valor, m => m.IdHistorial == idHistorial, null, null, true);
                if (!string.IsNullOrEmpty(valorParametro))
                {
                    switch (valorParametro)
                    {
                        case var parametro when parametro == ((short)Dominio.Tipos.Clientes.Cliente1790325083001.SegmentoCartera.MicroCredito).ToString():
                            empresaPersonalizada = "- MODELO MICROCRÉDITO";
                            break;
                        case var parametro when parametro == ((short)Dominio.Tipos.Clientes.Cliente1790325083001.SegmentoCartera.Consumo).ToString():
                            empresaPersonalizada = "- MODELO CONSUMO";
                            break;
                        default:
                            break;
                    }
                }

                var resultadoPoliticasBuro = await _calificaciones.FirstOrDefaultAsync(m => new CalificacionViewModel
                {
                    IdCalificacion = m.Id,
                    IdHistorial = m.IdHistorial,
                    Aprobado = m.Aprobado,
                    TotalValidados = m.TotalVerificados,
                    TotalAprobados = m.NumeroAprobados,
                    TotalRechazados = m.NumeroRechazados,
                    Calificacion = m.Puntaje,
                    Score = m.Score,
                    CupoEstimado = m.CupoEstimado,
                    VentasEmpresa = m.VentasEmpresa,
                    PatrimonioEmpresa = m.PatrimonioEmpresa,
                    RangoIngreso = m.RangoIngreso,
                    GastoFinanciero = m.GastoFinanciero,
                    DetalleCalificacion = m.DetalleCalificacion.Select(x => new DetalleCalificacionViewModel
                    {
                        IdPolitica = x.IdPolitica,
                        Politica = x.Politica.Nombre,
                        ReferenciaMinima = x.ReferenciaMinima,
                        ValorResultado = x.Datos,
                        Valor = x.Valor,
                        Parametro = x.Parametro,
                        ResultadoPolitica = x.Aprobado,
                        FechaCorte = x.FechaCorte,
                        Instituciones = x.Instituciones,
                        Tipo = x.Politica.Tipo
                    }).ToList()
                }, m => m.IdHistorial == idHistorial && m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Buro);

                var mensajeEvaluacion = string.Empty;
                var historial = await _historiales.FirstOrDefaultAsync(m => new { m.IdPlanEvaluacion, m.TipoIdentificacion, IdentificacionEmpresa = m.Usuario.Empresa.Identificacion }, m => m.Id == idHistorial);
                if (historial != null && historial.IdPlanEvaluacion != null && resultadoPoliticasBuro == null && (r_burocredito != null || r_burocreditoEquifax != null))
                {
                    if (historial.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || historial.TipoIdentificacion == Dominio.Constantes.General.SectorPublico)
                        mensajeEvaluacion = Dominio.Constantes.PlanesBuroEstados.EmpresaSinInformacion.ToUpper();
                    else if (historial.TipoIdentificacion == Dominio.Constantes.General.Cedula || historial.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                        mensajeEvaluacion = Dominio.Constantes.PlanesBuroEstados.SujetoSinInformacion.ToUpper();
                }

                var datos = new BalanceViewModel()
                {
                    IdEmpresa = detallesHistorial.FirstOrDefault()?.Historial.Usuario.IdEmpresa ?? 0,
                    IdentificacionEmpresa = historial.IdentificacionEmpresa,
                    IdentificacionOriginal = detallesHistorial.FirstOrDefault()?.Historial.Identificacion,
                    Balance = r_balance,
                    Sri = r_sri,
                    CacheSri = cacheSri,
                    Iess = r_iess,
                    Contactos = contactos,
                    ContactosEmpresa = contactosEmpresa,
                    ContactosIess = contactosIess,
                    Ciudadano = r_garancheck,
                    Senescyt = r_senescyt,
                    FJudicial = r_fjudicial,
                    FJEmpresa = r_fjudicialempresa,
                    Balances = r_balances,
                    BalancesVerificarAccionistas = r_balancesVerificarAccionistas,
                    Ant = r_ant,
                    PensionAlimenticia = r_pension,
                    Proveedor = r_sercop,
                    ProveedorContraloria = r_sercopcontraloria,
                    Afiliado = r_afiliacion,
                    EmpresasSimilares = r_similares,
                    Personales = datosPersonal,
                    Familiares = familiares,
                    RegistroCivil = r_regCivil,
                    DirectorioCompania = directCompania,
                    AnalisisHorizontal = analisisHorizontal,
                    ResultadoPoliticas = resultadoPoliticas,
                    ResultadoPoliticasBuro = resultadoPoliticasBuro,
                    BuroCredito = r_burocredito,
                    BuroCreditoEquifax = r_burocreditoEquifax,
                    RepresentantesEmpresas = representanteEmpresa,
                    CatastroFantasma = catastroFantasma,
                    MensajeEvaluacion = mensajeEvaluacion,
                    MensajeJudicialPersona = mensajeJudicialPersona,
                    MensajeJudicialEmpresa = mensajeJudicialEmpresa,
                    SuperBancosCedula = superBancosCedula,
                    SuperBancosNatural = superBancosNatural,
                    SuperBancosEmpresa = superBancosEmpresa,
                    AntecedentesPenales = antecedentesPenales,
                    FuerzasArmadas = fuerzasArmadas,
                    DeNoBaja = deNoBaja,
                    Predios = predios,
                    PrediosEmpresa = prediosEmpresa,
                    FiscaliaPersona = r_fiscaliaPersona,
                    FiscaliaEmpresa = r_fiscaliaEmpresa,
                    DetallePredios = detallePredios,
                    DetallePrediosEmpresa = detallePrediosEmpresa,
                    PrediosCuenca = prediosCuenca,
                    PrediosEmpresaCuenca = prediosEmpresaCuenca,
                    AfiliadoAdicional = r_afiliacionAdicional,
                    EmpresaPersonalizada = empresaPersonalizada,
                    PrediosStoDomingo = prediosStoDomingo,
                    PrediosEmpresaStoDomingo = prediosEmpresaStoDomingo,
                    PrediosRuminahui = prediosRuminahui,
                    PrediosEmpresaRuminahui = prediosEmpresaRuminahui,
                    PrediosQuininde = prediosQuininde,
                    PrediosEmpresaQuininde = prediosEmpresaQuininde,
                    PrediosLatacunga = prediosLatacunga,
                    PrediosEmpresaLatacunga = prediosEmpresaLatacunga,
                    PrediosManta = prediosManta,
                    PrediosEmpresaManta = prediosEmpresaManta,
                    PrediosAmbato = prediosAmbato,
                    PrediosEmpresaAmbato = prediosEmpresaAmbato,
                    PrediosIbarra = prediosIbarra,
                    PrediosEmpresaIbarra = prediosEmpresaIbarra,
                    PrediosSanCristobal = prediosSanCristobal,
                    PrediosEmpresaSanCristobal = prediosEmpresaSanCristobal,
                    PrediosDuran = prediosDuran,
                    PrediosEmpresaDuran = prediosEmpresaDuran,
                    PrediosLagoAgrio = prediosLagoAgrio,
                    PrediosEmpresaLagoAgrio = prediosEmpresaLagoAgrio,
                    PrediosSantaRosa = prediosSantaRosa,
                    PrediosEmpresaSantaRosa = prediosEmpresaSantaRosa,
                    PrediosSucua = prediosSucua,
                    PrediosEmpresaSucua = prediosEmpresaSucua,
                    PrediosSigSig = prediosSigSig,
                    PrediosEmpresaSigSig = prediosEmpresaSigSig,
                    PrediosMejia = prediosMejia,
                    PrediosEmpresaMejia = prediosEmpresaMejia,
                    PrediosMorona = prediosMorona,
                    PrediosEmpresaMorona = prediosEmpresaMorona,
                    PrediosTena = prediosTena,
                    PrediosEmpresaTena = prediosEmpresaTena,
                    PrediosCatamayo = prediosCatamayo,
                    PrediosEmpresaCatamayo = prediosEmpresaCatamayo,
                    PrediosLoja = prediosLoja,
                    PrediosEmpresaLoja = prediosEmpresaLoja,
                    PrediosDetallePropiedadesLoja = prediosDetalleLoja,
                    PrediosDetallePropiedadesEmpresaLoja = prediosDetalleEmpresaLoja,
                    PrediosSamborondon = prediosSamborondon,
                    PrediosEmpresaSamborondon = prediosEmpresaSamborondon,
                    PrediosDaule = prediosDaule,
                    PrediosEmpresaDaule = prediosEmpresaDaule,
                    PrediosCayambe = prediosCayambe,
                    PrediosEmpresaCayambe = prediosEmpresaCayambe,
                    PrediosAzogues = prediosAzogues,
                    PrediosEmpresaAzogues = prediosEmpresaAzogues,
                    PrediosEsmeraldas = prediosEsmeraldas,
                    PrediosEmpresaEsmeraldas = prediosEmpresaEsmeraldas,
                    PrediosCotacachi = prediosCotacachi,
                    PrediosEmpresaCotacachi = prediosEmpresaCotacachi,
                    EmpleadosEmpresa = r_empleadosEmpresa,
                    ONU = r_onu,
                    ONU2206 = r_onu2206,
                    Interpol = r_interpol,
                    OFAC = r_ofac,
                    Accionistas = accionistas,
                    EmpresasAccionista = empresasAccionista,
                    AutosHistorico = autosHistorico,
                    Impedimento = impedimento,
                    EvolucionHistorica = nivelEvolucionHistorica,
                    HistoricoEstructuraVencimiento = nivelHistoricoEstructuraVencimiento,
                    SaldoVencerInstitucion = nivelSaldoVencerInstitucion,
                    OperacionInstitucion = nivelOperacionInstitucion,
                    OperacionInstitucionPV = nivelOperacionInstitucionPV,
                    DetalleVencidoInstitucion = nivelDetalleVencidoInstitucion,
                    RazonSocial = detallesHistorial.FirstOrDefault().Historial.RazonSocialEmpresa,

                    #region Historial Cache
                    CacheDirectorioCompanias = cacheDirectorioCompanias,
                    CacheBalances = cacheBalances,
                    CacheAnalisisHorizontal = cacheAnalisisHorizontal,
                    CacheSuperBancoCedula = cacheSuperBancoCedula,
                    CacheSuperBancoNatural = cacheSuperBancoNatural,
                    CacheSuperBancoEmpresa = cacheSuperBancoEmpresa,
                    CacheAntecedentesPenales = cacheAntecedentesPenales,
                    CacheFuerzasArmadas = cacheFuerzasArmadas,
                    CacheDeNoBaja = cacheDeNoBaja,
                    CachePredios = cachePredios,
                    CacheDetallePredios = cacheDetallePredios,
                    CachePrediosEmpresa = cachePrediosEmpresa,
                    CacheDetallePrediosEmpresa = cacheDetallePrediosEmpresa,
                    CachePrediosCuenca = cachePrediosCuenca,
                    CachePrediosEmpresaCuenca = cachePrediosEmpresaCuenca,
                    CachePrediosStoDomingo = cachePrediosStoDomingo,
                    CachePrediosEmpresaStoDomingo = cachePrediosEmpresaStoDomingo,
                    CachePrediosRuminahui = cachePrediosRuminahui,
                    CachePrediosEmpresaRuminahui = cachePrediosEmpresaRuminahui,
                    CachePrediosQuininde = cachePrediosQuininde,
                    CachePrediosEmpresaQuininde = cachePrediosEmpresaQuininde,
                    CachePrediosLatacunga = cachePrediosLatacunga,
                    CachePrediosEmpresaLatacunga = cachePrediosEmpresaLatacunga,
                    CachePrediosManta = cachePrediosManta,
                    CachePrediosEmpresaManta = cachePrediosEmpresaManta,
                    CachePrediosAmbato = cachePrediosAmbato,
                    CachePrediosEmpresaAmbato = cachePrediosEmpresaAmbato,
                    CachePrediosIbarra = cachePrediosIbarra,
                    CachePrediosEmpresaIbarra = cachePrediosEmpresaIbarra,
                    CachePrediosSanCristobal = cachePrediosSanCristobal,
                    CachePrediosEmpresaSanCristobal = cachePrediosEmpresaSanCristobal,
                    CachePrediosDuran = cachePrediosDuran,
                    CachePrediosEmpresaDuran = cachePrediosEmpresaDuran,
                    CachePrediosLagoAgrio = cachePrediosLagoAgrio,
                    CachePrediosEmpresaLagoAgrio = cachePrediosEmpresaLagoAgrio,
                    CachePrediosSantaRosa = cachePrediosSantaRosa,
                    CachePrediosEmpresaSantaRosa = cachePrediosEmpresaSantaRosa,
                    CachePrediosSucua = cachePrediosSucua,
                    CachePrediosEmpresaSucua = cachePrediosEmpresaSucua,
                    CachePrediosSigSig = cachePrediosSigSig,
                    CachePrediosEmpresaSigSig = cachePrediosEmpresaSigSig,
                    CachePrediosMejia = cachePrediosMejia,
                    CachePrediosEmpresaMejia = cachePrediosEmpresaMejia,
                    CachePrediosMorona = cachePrediosMorona,
                    CachePrediosEmpresaMorona = cachePrediosEmpresaMorona,
                    CachePrediosTena = cachePrediosTena,
                    CachePrediosEmpresaTena = cachePrediosEmpresaTena,
                    CachePrediosCatamayo = cachePrediosCatamayo,
                    CachePrediosEmpresaCatamayo = cachePrediosEmpresaCatamayo,
                    CachePrediosLoja = cachePrediosLoja,
                    CachePrediosEmpresaLoja = cachePrediosEmpresaLoja,
                    CachePrediosSamborondon = cachePrediosSamborondon,
                    CachePrediosEmpresaSamborondon = cachePrediosEmpresaSamborondon,
                    CachePrediosDaule = cachePrediosDaule,
                    CachePrediosEmpresaDaule = cachePrediosEmpresaDaule,
                    CachePrediosCayambe = cachePrediosCayambe,
                    CachePrediosEmpresaCayambe = cachePrediosEmpresaCayambe,
                    CachePrediosAzogues = cachePrediosAzogues,
                    CachePrediosEmpresaAzogues = cachePrediosEmpresaAzogues,
                    CachePrediosEsmeraldas = cachePrediosEsmeraldas,
                    CachePrediosEmpresaEsmeraldas = cachePrediosEmpresaEsmeraldas,
                    CachePrediosCotacachi = cachePrediosCotacachi,
                    CachePrediosEmpresaCotacachi = cachePrediosEmpresaCotacachi,
                    CacheIess = cacheIess,
                    CacheAfiliado = cacheAfiliado,
                    CacheAfiliadoAdicional = cacheAfiliadoAdicional,
                    CacheSenescyt = cacheSenescyt,
                    CacheJudicial = cacheJudicial,
                    CacheJudicialEmpresa = cacheJudicialEmpresa,
                    CacheFiscaliaPersona = cacheFiscaliaPersona,
                    CacheFiscaliaEmpresa = cacheFiscaliaEmpresa,
                    CacheImpedimento = cacheImpedimento,
                    CacheAnt = cacheAnt,
                    CachePensionAlimenticia = cachePensionAlimenticia,
                    CacheSercop = cacheSercop,
                    CacheSercopContraloria = cacheSercopContraloria,
                    CacheBuro = cacheBuro,
                    CacheFamiliares = cacheFamiliares,
                    CacheOnu = cacheOnu,
                    CacheOnu20226 = cacheOnu20226,
                    CacheInterpol = cacheInterpol,
                    CacheOfac = cacheOfac
                    #endregion Historial Cache
                };
                var fileName = string.Empty;
                if (!User.IsInRole(Dominio.Tipos.Roles.VendedorEmpresa))
                    fileName = Path.Combine("wwwroot", "templates", "Reporte.xsl");
                else
                    fileName = Path.Combine("wwwroot", "templates", "ReporteVendedor.xsl");

                var valorFlexiPlast = "False";

                if (detallesHistorial.FirstOrDefault()?.Historial.Usuario.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190150496001)
                {
                    valorFlexiPlast = await _parametrosClientesHistoriales.FirstOrDefaultAsync(m => m.Valor, m => m.IdHistorial == idHistorial && m.Valor.Trim() == "True" && m.Parametro == ParametrosClientes.ProveedorInternacional);
                    if (!string.IsNullOrEmpty(valorFlexiPlast?.Trim()) && bool.Parse(valorFlexiPlast.Trim()))
                        fileName = Path.Combine("wwwroot", "templates", "Reporte0190150496001.xsl");
                }
                var plantilla = await System.IO.File.ReadAllTextAsync(fileName);

                byte[] datosReporte = null;
                if (detallesHistorial.FirstOrDefault()?.Historial.Usuario.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0190150496001 && !string.IsNullOrEmpty(valorFlexiPlast) && bool.Parse(valorFlexiPlast))
                    datosReporte = await ObtenerPdfArchivoFlexiPlast(datos, plantilla);
                else
                    datosReporte = await ObtenerPdfArchivo(datos, plantilla);

                return File(datosReporte, "application/pdf");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }

        private string GenerarHtml(string plantilla, string dataxml)
        {
            var html = string.Empty;
            var byteOrderMarkUtf8 = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());
            var xslt = plantilla;

            var xsltEngine = new XslCompiledTransform();
            if (xslt.StartsWith(byteOrderMarkUtf8, StringComparison.Ordinal))
                xslt = xslt.Remove(0, byteOrderMarkUtf8.Length);

            var readerXslt = XmlReader.Create(new StringReader(xslt));
            xsltEngine.Load(readerXslt);
            readerXslt.Close();
            readerXslt.Dispose();
            readerXslt = null;

            var htmlOutput = new StringBuilder();
            using (var htmlWriter = new StringWriter(htmlOutput))
            {
                if (dataxml.StartsWith(byteOrderMarkUtf8, StringComparison.Ordinal))
                    dataxml = dataxml.Remove(0, byteOrderMarkUtf8.Length);

                var reader = XmlReader.Create(new StringReader(dataxml));
                xsltEngine.Transform(reader, null, htmlWriter);
                html = htmlOutput.ToString();
                reader.Close();
                reader.Dispose();
                reader = null;
            }
            return html;
        }

        private byte[] ObtenerPdfHTML(string html)
        {
            var filePath = Path.GetTempFileName();
            var document = new Document(PageSize.A4);
            var writer = PdfWriter.GetInstance(document, new FileStream(filePath, FileMode.Create));
            document.Open();
            var sr = new StringReader(html);

            XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, sr);
            document.Close();

            var bytes = System.IO.File.ReadAllBytes(filePath);
            var blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            using (var stream = new MemoryStream())
            {
                var reader = new PdfReader(bytes);
                using (var stamper = new PdfStamper(reader, stream))
                {
                    var pages = reader.NumberOfPages;
                    for (var i = 1; i <= pages; i++)
                        ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase(i.ToString(), blackFont), 568f, 15f, 0);
                }
                bytes = stream.ToArray();
            }
            System.IO.File.WriteAllBytes(filePath, bytes);
            return System.IO.File.ReadAllBytes(filePath);
        }

        private byte[] ObtenerPdfHTMLMundoFactor(string html)
        {
            var filePath = Path.GetTempFileName();
            var document = new Document(PageSize.A4, 15, 15, 30, 30);
            var writer = PdfWriter.GetInstance(document, new FileStream(filePath, FileMode.Create));
            document.Open();
            var sr = new StringReader(html);

            XMLWorkerHelper.GetInstance().ParseXHtml(writer, document, sr);
            document.Close();

            var bytes = System.IO.File.ReadAllBytes(filePath);
            var blackFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
            using (var stream = new MemoryStream())
            {
                var reader = new PdfReader(bytes);
                using (var stamper = new PdfStamper(reader, stream))
                {
                    var pages = reader.NumberOfPages;
                    for (var i = 1; i <= pages; i++)
                        ColumnText.ShowTextAligned(stamper.GetUnderContent(i), Element.ALIGN_RIGHT, new Phrase(i.ToString(), blackFont), 568f, 15f, 0);
                }
                bytes = stream.ToArray();
            }
            System.IO.File.WriteAllBytes(filePath, bytes);
            return System.IO.File.ReadAllBytes(filePath);
        }

        private async Task<byte[]> ObtenerPdfArchivo(BalanceViewModel datos, string plantilla)
        {
            try
            {
                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var culture = System.Globalization.CultureInfo.CurrentCulture;
                if (datos.Balances != null)
                    datos.Balance = null;

                var lstImpuestoRenta = new[] { Dominio.Tipos.Politicas.ImpuestoRentaCedula, Dominio.Tipos.Politicas.ImpuestoRentaJuridico, Dominio.Tipos.Politicas.ImpuestoRentaNatural };
                var modeloBCapital = usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001;
                var modeloCooperativasBuro = usuarioActual.Empresa.PlanesBuroCredito != null && usuarioActual.Empresa.PlanesBuroCredito.Any() && usuarioActual.Empresa.PlanesBuroCredito.Any(s => s.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo && s.ModeloCooperativas);
                var busquedaJuridica = ValidacionViewModel.ValidarRuc(datos.IdentificacionOriginal) && (ValidacionViewModel.ValidarRucJuridico(datos.IdentificacionOriginal) || ValidacionViewModel.ValidarRucSectorPublico(datos.IdentificacionOriginal));

                #region Formato Periodo
                var periodo = datos.ResultadoPoliticas != null && datos.ResultadoPoliticas.DetalleCalificacion != null && datos.ResultadoPoliticas.DetalleCalificacion.Any() ?
                    datos.ResultadoPoliticas.DetalleCalificacion.FirstOrDefault(x => lstImpuestoRenta.Contains(x.Tipo))?.Observacion : null;
                if (!string.IsNullOrEmpty(periodo))
                {
                    var periodoValor = Regex.Matches(periodo, @"[0-9]+");
                    if (periodoValor != null && periodoValor.Any() && periodoValor[0].Length == 4)
                    {
                        periodo = periodoValor[0].ToString();
                    }
                }
                #endregion Formato Periodo

                #region Formato Pension Alimenticia
                var totalPensionActual = 0.00;
                var totalPagado = 0.00;
                var totalDeuda = 0.00;
                var totalValorDeuda = 0.00;

                if (datos.PensionAlimenticia != null && datos.PensionAlimenticia.Resultados != null && datos.PensionAlimenticia.Resultados.Any())
                {
                    foreach (var item in datos.PensionAlimenticia.Resultados)
                    {
                        totalPensionActual = totalPensionActual + Math.Round(double.Parse(!string.IsNullOrEmpty(item.PensionActualOriginal) ? item.PensionActualOriginal.Replace(",", ".") : "0"), 2);
                        totalPagado = totalPagado + Math.Round(item.Movimientos.Sum(t => double.Parse(!string.IsNullOrEmpty(t.ValorPagadoOriginal) ? t.ValorPagadoOriginal.Replace(",", ".") : "0")), 2);
                        totalDeuda = totalDeuda + Math.Round(item.Movimientos.Sum(t => double.Parse(!string.IsNullOrEmpty(t.ValorDeudaOriginal) ? t.ValorDeudaOriginal.Replace(",", ".") : "0")), 2);
                        totalValorDeuda = totalValorDeuda + Math.Round(item.Movimientos.Sum(t => double.Parse(t.ValorDeudaOriginal.Replace(",", "."))) - item.Movimientos.Sum(t => double.Parse(t.ValorPagadoOriginal.Replace(",", "."))), 2);
                    }
                }
                #endregion Formato Pension Alimenticia

                #region Formato ANT
                var autosValidos = datos != null && datos.Ant != null && datos.Ant.Autos != null && datos.Ant.Autos.Any() ? datos.Ant.Autos.Where(m => (!string.IsNullOrEmpty(m.Placa) && m.Placa.Length > 1 && m.Placa != "SIN/PLACA") && (string.IsNullOrEmpty(m.NombrePropietario) || m.NombrePropietario == datos.Ant.Titular)).ToList() : new List<Externos.Logica.ANT.Modelos.Auto>();
                var multasValidas = datos != null && datos.Ant != null && datos.Ant.Multas != null && datos.Ant.Multas.Any() ? datos.Ant.Multas.Where(m => autosValidos.Select(m => m.Placa).Contains(m.Placa) || m.Placa == "-" || m.Placa == "SIN/PLACA" || m.Placa.Length == 1 || m.Placa?.Trim() == string.Empty).ToList() : new List<Externos.Logica.ANT.Modelos.Multa>();
                #endregion Formato ANT

                #region Formato Predios
                //var detallePredioCuenca = new List<DetallePrediosCuencaViewModel>();
                //if (datos.PrediosCuenca != null && datos.PrediosCuenca.ValoresCancelados != null && datos.PrediosCuenca.ValoresCancelados.Any())
                //{
                //    detallePredioCuenca.AddRange(datos.PrediosCuenca.ValoresCancelados.Where(m => m.Anio == DateTime.Now.Year).Select(m => new DetallePrediosCuencaViewModel()
                //    {
                //        Clave = m.Clave,
                //        Anio = m.Anio,
                //        DescripcionRubro = m.Descripcion,
                //        FechaEmision = m.FechaEmision,
                //        FechaPago = m.FechaPago.HasValue ? m.FechaPago.Value.ToString("dd/MM/yyyy") : string.Empty,
                //        Titulo = m.Titulo,
                //        Total = m.Total,
                //        Estado = "Cancelado"
                //    }).ToList());
                //}

                //if (datos.PrediosCuenca != null && datos.PrediosCuenca.ValoresPendientes != null && datos.PrediosCuenca.ValoresPendientes.Any())
                //{
                //    detallePredioCuenca.AddRange(datos.PrediosCuenca.ValoresPendientes.Where(m => m.Anio == DateTime.Now.Year).Select(m => new DetallePrediosCuencaViewModel()
                //    {
                //        Clave = m.ClaveCatastral,
                //        Anio = m.Anio,
                //        DescripcionRubro = m.DescripcionRubro,
                //        FechaEmision = m.FechaEmision,
                //        Titulo = m.Titulo,
                //        Total = m.Total.HasValue ? m.Total.Value : 0m,
                //        Estado = "Pendiente"
                //    }).ToList());
                //}

                //var detallePredioEmpresaCuenca = new List<DetallePrediosCuencaViewModel>();
                //if (datos.PrediosEmpresaCuenca != null && datos.PrediosEmpresaCuenca.ValoresCancelados != null && datos.PrediosEmpresaCuenca.ValoresCancelados.Any())
                //{
                //    detallePredioEmpresaCuenca.AddRange(datos.PrediosEmpresaCuenca.ValoresCancelados.Where(m => m.Anio == DateTime.Now.Year).Select(m => new DetallePrediosCuencaViewModel()
                //    {
                //        Clave = m.Clave,
                //        Anio = m.Anio,
                //        DescripcionRubro = m.Descripcion,
                //        FechaEmision = m.FechaEmision,
                //        FechaPago = m.FechaPago.HasValue ? m.FechaPago.Value.ToString("dd/MM/yyyy") : string.Empty,
                //        Titulo = m.Titulo,
                //        Total = m.Total,
                //        Estado = "Cancelado"
                //    }).ToList());
                //}

                //if (datos.PrediosEmpresaCuenca != null && datos.PrediosEmpresaCuenca.ValoresPendientes != null && datos.PrediosEmpresaCuenca.ValoresPendientes.Any())
                //{
                //    detallePredioEmpresaCuenca.AddRange(datos.PrediosEmpresaCuenca.ValoresPendientes.Where(m => m.Anio == DateTime.Now.Year).Select(m => new DetallePrediosCuencaViewModel()
                //    {
                //        Clave = m.ClaveCatastral,
                //        Anio = m.Anio,
                //        DescripcionRubro = m.DescripcionRubro,
                //        FechaEmision = m.FechaEmision,
                //        Titulo = m.Titulo,
                //        Total = m.Total.HasValue ? m.Total.Value : 0m,
                //        Estado = "Pendiente"
                //    }).ToList());
                //}

                var detallePredioQuininde = new List<DetallePrediosQuinindeViewModel>();
                if (datos.PrediosQuininde != null && datos.PrediosQuininde.ValoresCancelados != null && datos.PrediosQuininde.ValoresCancelados.Any())
                {
                    detallePredioQuininde.AddRange(datos.PrediosQuininde.ValoresCancelados.Where(m => m.InformacionPredio.Any(x => !string.IsNullOrEmpty(x.Periodo) && Regex.Match(x.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString())).Select(m => new DetallePrediosQuinindeViewModel()
                    {
                        DescripcionPredio = m.DescripcionPredio,
                        SubTotalDescripcion = m.SubTotalDescripcion,
                        SubTotalValor = m.SubTotalValor,
                        Estado = "Cancelado",
                        InformacionPredio = m.InformacionPredio.Where(m => !string.IsNullOrEmpty(m.Periodo) && Regex.Match(m.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString()).Select(m => new InformacionPredioQuininde()
                        {
                            NumeroEmision = m.NumeroEmision,
                            Clave = m.Clave,
                            Periodo = m.Periodo,
                            Valor = m.Valor,
                            Interes = m.Interes,
                            Descuento = m.Descuento,
                            Coactiva = m.Coactiva,
                            Total = m.Total
                        }).ToList()
                    }).ToList());
                }

                if (datos.PrediosQuininde != null && datos.PrediosQuininde.ValoresPendientes != null && datos.PrediosQuininde.ValoresPendientes.Any())
                {
                    detallePredioQuininde.AddRange(datos.PrediosQuininde.ValoresPendientes.Where(m => m.InformacionPredio.Any(x => !string.IsNullOrEmpty(x.Periodo) && Regex.Match(x.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString())).Select(m => new DetallePrediosQuinindeViewModel()
                    {
                        DescripcionPredio = m.DescripcionPredio,
                        SubTotalDescripcion = m.SubTotalDescripcion,
                        SubTotalValor = m.SubTotalValor,
                        Estado = "Pendiente",
                        InformacionPredio = m.InformacionPredio.Where(m => !string.IsNullOrEmpty(m.Periodo) && Regex.Match(m.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString()).Select(m => new InformacionPredioQuininde()
                        {
                            NumeroEmision = m.NumeroEmision,
                            Clave = m.Clave,
                            Periodo = m.Periodo,
                            Valor = m.Valor,
                            Interes = m.Interes,
                            Descuento = m.Descuento,
                            Coactiva = m.Coactiva,
                            Total = m.Total
                        }).ToList()
                    }).ToList());
                }

                var detallePredioEmpresaQuininde = new List<DetallePrediosQuinindeViewModel>();
                if (datos.PrediosEmpresaQuininde != null && datos.PrediosEmpresaQuininde.ValoresCancelados != null && datos.PrediosEmpresaQuininde.ValoresCancelados.Any())
                {
                    detallePredioEmpresaQuininde.AddRange(datos.PrediosEmpresaQuininde.ValoresCancelados.Where(m => m.InformacionPredio.Any(x => !string.IsNullOrEmpty(x.Periodo) && Regex.Match(x.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString())).Select(m => new DetallePrediosQuinindeViewModel()
                    {
                        DescripcionPredio = m.DescripcionPredio,
                        SubTotalDescripcion = m.SubTotalDescripcion,
                        SubTotalValor = m.SubTotalValor,
                        Estado = "Cancelado",
                        InformacionPredio = m.InformacionPredio.Where(m => !string.IsNullOrEmpty(m.Periodo) && Regex.Match(m.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString()).Select(m => new InformacionPredioQuininde()
                        {
                            NumeroEmision = m.NumeroEmision,
                            Clave = m.Clave,
                            Periodo = m.Periodo,
                            Valor = m.Valor,
                            Interes = m.Interes,
                            Descuento = m.Descuento,
                            Coactiva = m.Coactiva,
                            Total = m.Total
                        }).ToList()
                    }).ToList());
                }

                if (datos.PrediosEmpresaQuininde != null && datos.PrediosEmpresaQuininde.ValoresPendientes != null && datos.PrediosEmpresaQuininde.ValoresPendientes.Any())
                {
                    detallePredioEmpresaQuininde.AddRange(datos.PrediosEmpresaQuininde.ValoresPendientes.Where(m => m.InformacionPredio.Any(x => !string.IsNullOrEmpty(x.Periodo) && Regex.Match(x.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString())).Select(m => new DetallePrediosQuinindeViewModel()
                    {
                        DescripcionPredio = m.DescripcionPredio,
                        SubTotalDescripcion = m.SubTotalDescripcion,
                        SubTotalValor = m.SubTotalValor,
                        Estado = "Pendiente",
                        InformacionPredio = m.InformacionPredio.Where(m => !string.IsNullOrEmpty(m.Periodo) && Regex.Match(m.Periodo, @"\d+").ToString() == DateTime.Now.Year.ToString()).Select(m => new InformacionPredioQuininde()
                        {
                            NumeroEmision = m.NumeroEmision,
                            Clave = m.Clave,
                            Periodo = m.Periodo,
                            Valor = m.Valor,
                            Interes = m.Interes,
                            Descuento = m.Descuento,
                            Coactiva = m.Coactiva,
                            Total = m.Total
                        }).ToList()
                    }).ToList());
                }

                var prediosDetalleMorona = new List<InformacionPredioMorona>();
                if (datos.PrediosMorona != null && datos.PrediosMorona.DatosImpuestos != null && datos.PrediosMorona.DatosImpuestos.Any())
                {
                    prediosDetalleMorona.AddRange(datos.PrediosMorona.DatosImpuestos.SelectMany(x => x.DatosImpuestosCuentas != null && x.DatosImpuestosCuentas.Any() ?
                            x.DatosImpuestosCuentas.SelectMany(y => y.DatosImpuestosCuentasTitulos != null && y.DatosImpuestosCuentasTitulos.Any() ?
                            y.DatosImpuestosCuentasTitulos.Select(z => new InformacionPredioMorona()
                            {
                                Denominacion = !string.IsNullOrEmpty(x.Denominacion?.Trim()) ? x.Denominacion.Trim() : string.Empty,
                                Clave = !string.IsNullOrEmpty(y.Clave?.Trim()) ? y.Clave.Trim() : string.Empty,
                                Concepto = !string.IsNullOrEmpty(z.Concepto?.Trim()) ? z.Concepto.Trim() : string.Empty,
                                Valor = z.Valor,
                                Descuento = z.Descuento,
                                Multa = z.Multa,
                                Mora = z.Mora,
                                Iva = z.Iva,
                                Total = z.Total,
                                ValorAPagar = z.ValorAPagar,
                            }) : null) : new List<InformacionPredioMorona>()));
                }

                var prediosDetalleEmpresaMorona = new List<InformacionPredioMorona>();
                if (datos.PrediosEmpresaMorona != null && datos.PrediosEmpresaMorona.DatosImpuestos != null && datos.PrediosEmpresaMorona.DatosImpuestos.Any())
                {
                    prediosDetalleEmpresaMorona.AddRange(datos.PrediosEmpresaMorona.DatosImpuestos.SelectMany(x => x.DatosImpuestosCuentas != null && x.DatosImpuestosCuentas.Any() ?
                            x.DatosImpuestosCuentas.SelectMany(y => y.DatosImpuestosCuentasTitulos != null && y.DatosImpuestosCuentasTitulos.Any() ?
                            y.DatosImpuestosCuentasTitulos.Select(z => new InformacionPredioMorona()
                            {
                                Denominacion = !string.IsNullOrEmpty(x.Denominacion?.Trim()) ? x.Denominacion.Trim() : string.Empty,
                                Clave = !string.IsNullOrEmpty(y.Clave?.Trim()) ? y.Clave.Trim() : string.Empty,
                                Concepto = !string.IsNullOrEmpty(z.Concepto?.Trim()) ? z.Concepto.Trim() : string.Empty,
                                Valor = z.Valor,
                                Descuento = z.Descuento,
                                Multa = z.Multa,
                                Mora = z.Mora,
                                Iva = z.Iva,
                                Total = z.Total,
                                ValorAPagar = z.ValorAPagar,
                            }) : null) : new List<InformacionPredioMorona>()));
                }

                var existePredioLatacunga = false;
                if (datos.PrediosLatacunga != null)
                {
                    if ((datos.PrediosLatacunga.ValoresPagos != null && datos.PrediosLatacunga.ValoresPagos.Any()) || (datos.PrediosLatacunga.Detalle != null && datos.PrediosLatacunga.Detalle.Any()))
                        existePredioLatacunga = true;
                }

                if (datos.PrediosEmpresaLatacunga != null)
                {
                    if ((datos.PrediosEmpresaLatacunga.ValoresPagos != null && datos.PrediosEmpresaLatacunga.ValoresPagos.Any()) || (datos.PrediosEmpresaLatacunga.Detalle != null && datos.PrediosEmpresaLatacunga.Detalle.Any()))
                        existePredioLatacunga = true;
                }

                var existePredioManta = false;
                if (datos.PrediosManta != null)
                {
                    if ((datos.PrediosManta.DetallesPredio != null && datos.PrediosManta.DetallesPredio.Any()) || (datos.PrediosManta.DeudasPredios != null && datos.PrediosManta.DeudasPredios.Any()) || (datos.PrediosManta.DeudasEPAM != null && datos.PrediosManta.DeudasEPAM.Any()))
                        existePredioManta = true;
                }

                if (datos.PrediosEmpresaManta != null)
                {
                    if ((datos.PrediosEmpresaManta.DetallesPredio != null && datos.PrediosEmpresaManta.DetallesPredio.Any()) || (datos.PrediosEmpresaManta.DeudasPredios != null && datos.PrediosEmpresaManta.DeudasPredios.Any()) || (datos.PrediosEmpresaManta.DeudasEPAM != null && datos.PrediosEmpresaManta.DeudasEPAM.Any()))
                        existePredioManta = true;
                }

                var existePredioIbarra = false;
                if (datos.PrediosIbarra != null)
                {
                    if ((datos.PrediosIbarra.Detalle != null && datos.PrediosIbarra.Detalle.Any()) || (datos.PrediosIbarra.Impuestos != null && datos.PrediosIbarra.Impuestos.Any()))
                        existePredioIbarra = true;
                }

                if (datos.PrediosEmpresaIbarra != null)
                {
                    if ((datos.PrediosEmpresaIbarra.Detalle != null && datos.PrediosEmpresaIbarra.Detalle.Any()) || (datos.PrediosEmpresaIbarra.Impuestos != null && datos.PrediosEmpresaIbarra.Impuestos.Any()))
                        existePredioIbarra = true;
                }

                var existePredioSanCristobal = false;
                if (datos.PrediosSanCristobal != null)
                {
                    if (datos.PrediosSanCristobal.DetallesPredio != null && datos.PrediosSanCristobal.DetallesPredio.Any())
                        existePredioSanCristobal = true;
                }

                if (datos.PrediosEmpresaSanCristobal != null)
                {
                    if (datos.PrediosEmpresaSanCristobal.DetallesPredio != null && datos.PrediosEmpresaSanCristobal.DetallesPredio.Any())
                        existePredioSanCristobal = true;
                }

                var existePredioDuran = false;
                if (datos.PrediosDuran != null)
                {
                    if (datos.PrediosDuran.DetallesTramitesPredio != null && datos.PrediosDuran.DetallesTramitesPredio.Any())
                        existePredioDuran = true;
                }

                if (datos.PrediosEmpresaDuran != null)
                {
                    if (datos.PrediosEmpresaDuran.DetallesTramitesPredio != null && datos.PrediosEmpresaDuran.DetallesTramitesPredio.Any())
                        existePredioDuran = true;
                }

                var existePredioLagoAgrio = false;
                if (datos.PrediosLagoAgrio != null)
                {
                    if ((datos.PrediosLagoAgrio.DetallesDeudasPredio != null && datos.PrediosLagoAgrio.DetallesDeudasPredio.Any()) || datos.PrediosLagoAgrio.DatosDeudasResumenLagoAgrio != null)
                        existePredioLagoAgrio = true;
                }

                if (datos.PrediosEmpresaLagoAgrio != null)
                {
                    if ((datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio != null && datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio.Any()) || datos.PrediosEmpresaLagoAgrio.DatosDeudasResumenLagoAgrio != null)
                        existePredioLagoAgrio = true;
                }

                var existePredioSantaRosa = false;
                if (datos.PrediosSantaRosa != null)
                {
                    if ((datos.PrediosSantaRosa.DatosAnios != null && datos.PrediosSantaRosa.DatosAnios.Any()) || datos.PrediosSantaRosa.SinDeudas)
                        existePredioSantaRosa = true;
                }

                if (datos.PrediosEmpresaSantaRosa != null)
                {
                    if ((datos.PrediosEmpresaSantaRosa.DatosAnios != null && datos.PrediosEmpresaSantaRosa.DatosAnios.Any()) || datos.PrediosEmpresaSantaRosa.SinDeudas)
                        existePredioSantaRosa = true;
                }

                var existePredioSucua = false;
                if (datos.PrediosSucua != null)
                {
                    if (datos.PrediosSucua.Detalle != null && datos.PrediosSucua.Detalle.Any())
                        existePredioSucua = true;
                }

                if (datos.PrediosEmpresaSucua != null)
                {
                    if (datos.PrediosEmpresaSucua.Detalle != null && datos.PrediosEmpresaSucua.Detalle.Any())
                        existePredioSucua = true;
                }

                var existePredioSigSig = false;
                if (datos.PrediosSigSig != null)
                {
                    if ((datos.PrediosSigSig.DetalleDeuda != null && datos.PrediosSigSig.DetalleDeuda.Any()) || (datos.PrediosSigSig.DetalleDeudaAguaPotable != null && datos.PrediosSigSig.DetalleDeudaAguaPotable.Any()))
                        existePredioSigSig = true;
                }

                if (datos.PrediosEmpresaSigSig != null)
                {
                    if ((datos.PrediosEmpresaSigSig.DetalleDeuda != null && datos.PrediosEmpresaSigSig.DetalleDeuda.Any()) || (datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable != null && datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable.Any()))
                        existePredioSigSig = true;
                }

                var existePredioMejia = false;
                if (datos.PrediosMejia != null)
                {
                    if (datos.PrediosMejia.Detalle != null && datos.PrediosMejia.Detalle.Any())
                        existePredioMejia = true;
                }

                if (datos.PrediosEmpresaMejia != null)
                {
                    if (datos.PrediosEmpresaMejia.Detalle != null && datos.PrediosEmpresaMejia.Detalle.Any())
                        existePredioMejia = true;
                }

                var existePredioMorona = false;
                if (prediosDetalleMorona != null && prediosDetalleMorona.Any())
                    existePredioMorona = true;

                if (prediosDetalleEmpresaMorona != null && prediosDetalleEmpresaMorona.Any())
                    existePredioMorona = true;

                var existePredioTena = false;
                if (datos.PrediosTena != null)
                {
                    if (datos.PrediosTena.Detalle != null && datos.PrediosTena.Detalle.Any())
                        existePredioTena = true;
                }

                if (datos.PrediosEmpresaTena != null)
                {
                    if (datos.PrediosEmpresaTena.Detalle != null && datos.PrediosEmpresaTena.Detalle.Any())
                        existePredioTena = true;
                }

                var existePredioCatamayo = false;
                if (datos.PrediosCatamayo != null)
                {
                    if (datos.PrediosCatamayo.DetalleDeuda != null && datos.PrediosCatamayo.DetalleDeuda.Any())
                        existePredioCatamayo = true;
                }

                if (datos.PrediosEmpresaCatamayo != null)
                {
                    if (datos.PrediosEmpresaCatamayo.DetalleDeuda != null && datos.PrediosEmpresaCatamayo.DetalleDeuda.Any())
                        existePredioCatamayo = true;
                }

                var existePredioLoja = false;
                if (datos.PrediosLoja != null)
                {
                    if (datos.PrediosLoja.DetalleImpuestos != null && datos.PrediosLoja.DetalleImpuestos.Any())
                        existePredioLoja = true;
                }
                if (datos.PrediosDetallePropiedadesLoja != null)
                {
                    if (datos.PrediosDetallePropiedadesLoja != null && datos.PrediosDetallePropiedadesLoja.Any())
                        existePredioLoja = true;
                }
                if (datos.PrediosEmpresaLoja != null)
                {
                    if (datos.PrediosEmpresaLoja.DetalleImpuestos != null && datos.PrediosEmpresaLoja.DetalleImpuestos.Any())
                        existePredioLoja = true;
                }
                if (datos.PrediosDetallePropiedadesEmpresaLoja != null)
                {
                    if (datos.PrediosDetallePropiedadesEmpresaLoja != null && datos.PrediosDetallePropiedadesEmpresaLoja.Any())
                        existePredioLoja = true;
                }

                var existePredioSamborondon = false;
                if (datos.PrediosSamborondon != null)
                {
                    if (datos.PrediosSamborondon.DetalleDeuda != null && datos.PrediosSamborondon.DetalleDeuda.Any())
                        existePredioSamborondon = true;
                }

                if (datos.PrediosEmpresaSamborondon != null)
                {
                    if (datos.PrediosEmpresaSamborondon.DetalleDeuda != null && datos.PrediosEmpresaSamborondon.DetalleDeuda.Any())
                        existePredioSamborondon = true;
                }

                var existePredioDaule = false;
                if (datos.PrediosDaule != null)
                {
                    if (datos.PrediosDaule.DetalleImpuestos != null && datos.PrediosDaule.DetalleImpuestos.Any())
                        existePredioDaule = true;
                }

                if (datos.PrediosEmpresaDaule != null)
                {
                    if (datos.PrediosEmpresaDaule.DetalleImpuestos != null && datos.PrediosEmpresaDaule.DetalleImpuestos.Any())
                        existePredioDaule = true;
                }

                var existePredioCayambe = false;
                if (datos.PrediosCayambe != null)
                {
                    if (datos.PrediosCayambe.Detalle != null && datos.PrediosCayambe.Detalle.Any())
                        existePredioCayambe = true;
                }

                if (datos.PrediosEmpresaCayambe != null)
                {
                    if (datos.PrediosEmpresaCayambe.Detalle != null && datos.PrediosEmpresaCayambe.Detalle.Any())
                        existePredioCayambe = true;
                }

                var existePredioAzogues = false;
                if (datos.PrediosAzogues != null)
                {
                    if (datos.PrediosAzogues.Detalle != null && datos.PrediosAzogues.Detalle.Any())
                        existePredioAzogues = true;
                }

                if (datos.PrediosEmpresaAzogues != null)
                {
                    if (datos.PrediosEmpresaAzogues.Detalle != null && datos.PrediosEmpresaAzogues.Detalle.Any())
                        existePredioAzogues = true;
                }

                var existePredioEsmeraldas = false;
                if (datos.PrediosEsmeraldas != null)
                {
                    if (datos.PrediosEsmeraldas.Detalle != null && datos.PrediosEsmeraldas.Detalle.Any())
                        existePredioEsmeraldas = true;
                }

                if (datos.PrediosEmpresaEsmeraldas != null)
                {
                    if (datos.PrediosEmpresaEsmeraldas.Detalle != null && datos.PrediosEmpresaEsmeraldas.Detalle.Any())
                        existePredioEsmeraldas = true;
                }

                var existePredioCotacachi = false;
                if (datos.PrediosCotacachi != null)
                {
                    if (datos.PrediosCotacachi.Detalle != null && datos.PrediosCotacachi.Detalle.Any())
                        existePredioCotacachi = true;
                }

                if (datos.PrediosEmpresaCotacachi != null)
                {
                    if (datos.PrediosEmpresaCotacachi.Detalle != null && datos.PrediosEmpresaCotacachi.Detalle.Any())
                        existePredioCotacachi = true;
                }

                #endregion Formato Predios

                #region Acceso Salarios
                var idEmpresasSalarios = new List<int>();
                try
                {
                    var pathEmpresasSalarioIess = Path.Combine("wwwroot", "data", "empresasSalarioIess.json");
                    var archivoSalarios = System.IO.File.ReadAllText(pathEmpresasSalarioIess);
                    var empresasSalariosIess = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoSalarios);
                    if (empresasSalariosIess != null && empresasSalariosIess.Any())
                        idEmpresasSalarios = empresasSalariosIess.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }

                var idEmpresasEmpleados = new List<int>();
                try
                {
                    var pathEmpresaEmpleadosIess = Path.Combine("wwwroot", "data", "empresasEmpleadosIess.json");
                    var archivoEmpleados = System.IO.File.ReadAllText(pathEmpresaEmpleadosIess);
                    var empresaEmpleadosIess = JsonConvert.DeserializeObject<List<EmpresaPersonalizadaViewModel>>(archivoEmpleados);
                    if (empresaEmpleadosIess != null && empresaEmpleadosIess.Any())
                        idEmpresasEmpleados = empresaEmpleadosIess.Select(m => m.Id).Distinct().ToList();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                #endregion Acceso Salarios

                #region Contactos
                var direcciones = new List<string>();
                var telefonos = new List<string>();
                var correos = new List<string>();

                if (datos.IdEmpresa != Dominio.Constantes.Clientes.IdCliente1792060346001)
                {
                    if (datos.ContactosIess != null && datos.ContactosIess.Direcciones != null && datos.ContactosIess.Direcciones.Any())
                        direcciones.AddRange(datos.ContactosIess.Direcciones);

                    if (datos.ContactosIess != null && datos.ContactosIess.Telefonos != null && datos.ContactosIess.Telefonos.Any())
                        telefonos.AddRange(datos.ContactosIess.Telefonos);

                    if (datos.ContactosIess != null && datos.ContactosIess.Correos != null && datos.ContactosIess.Correos.Any())
                        correos.AddRange(datos.ContactosIess.Correos);

                    if (datos.Contactos != null && datos.Contactos.Direcciones != null && datos.Contactos.Direcciones.Any())
                        direcciones.AddRange(datos.Contactos.Direcciones);

                    if (datos.Contactos != null && datos.Contactos.Telefonos != null && datos.Contactos.Telefonos.Any())
                        telefonos.AddRange(datos.Contactos.Telefonos);

                    if (datos.Contactos != null && datos.Contactos.Correos != null && datos.Contactos.Correos.Any())
                        correos.AddRange(datos.Contactos.Correos);

                    if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Direcciones != null && datos.ContactosEmpresa.Direcciones.Any())
                        direcciones.AddRange(datos.ContactosEmpresa.Direcciones);

                    if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null && datos.ContactosEmpresa.Telefonos.Any())
                        telefonos.AddRange(datos.ContactosEmpresa.Telefonos);

                    if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Correos != null && datos.ContactosEmpresa.Correos.Any())
                        correos.AddRange(datos.ContactosEmpresa.Correos);
                }
                #endregion Contactos

                #region Pension Alimenticia Temp.
                var lstPensionTemp = new List<PensionAlimenticiaTemporalViewModel>()
                {
                    new PensionAlimenticiaTemporalViewModel()
                    {
                        Tipo = "N/A",
                        Nombre = "N/A",
                        NombreComprobado = "N/A"
                    }
                };
                #endregion Pension Alimenticia Temp.

                #region Accionista
                decimal sumaTotalAccionista = 0;
                if (datos.Accionistas != null && datos.Accionistas.Any())
                    sumaTotalAccionista = datos.Accionistas.Sum(x => !string.IsNullOrEmpty(x.ValorTransaccionOriginal) && decimal.TryParse(x.ValorTransaccionOriginal, out _) ? decimal.Parse(x.ValorTransaccionOriginal) : 0);
                decimal sumaTotalVerificarAccionista = 0;
                if (datos.BalancesVerificarAccionistas != null && datos.BalancesVerificarAccionistas.Detalle != null && datos.BalancesVerificarAccionistas.Detalle.Any())
                    sumaTotalVerificarAccionista = datos.BalancesVerificarAccionistas.Detalle.Sum(x => x.Capital);


                #endregion Accionista

                #region ClienteRagui_1091796789001                
                var politicasEvaluacion = new[] { Dominio.Tipos.Politicas.DeudaVigenteTotalCedula, Dominio.Tipos.Politicas.ValorDemandaJudicialCedula, Dominio.Tipos.Politicas.ValorCarteraCastigadaCedula,
                                      Dominio.Tipos.Politicas.DeudaVigenteTotalNatural, Dominio.Tipos.Politicas.ValorDemandaJudicialNatural, Dominio.Tipos.Politicas.ValorCarteraCastigadaNatural,
                                      Dominio.Tipos.Politicas.DeudaVigenteTotalJuridico, Dominio.Tipos.Politicas.ValorDemandaJudicialJuridico, Dominio.Tipos.Politicas.ValorCarteraCastigadaJuridico,
                                      Dominio.Tipos.Politicas.ScoreCedulaRagui, Dominio.Tipos.Politicas.ScoreNaturalRagui, Dominio.Tipos.Politicas.ScoreJuridicoRagui };
                #endregion ClienteRagui_1091796789001

                #region VendedorEspana
                if (datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente0190386465001 && datos.ResultadoPoliticasBuro != null)
                {
                    var usuarioDatos = await _usuarios.FirstOrDefaultAsync(m => m, m => m.Id == idUsuario && m.Estado == Dominio.Tipos.EstadosUsuarios.Activo, null, i => i.Include(m => m.UsuariosRoles).ThenInclude(m => m.Rol));
                    var usuarioRol = usuarioDatos.UsuariosRoles.FirstOrDefault().Rol.Id;
                    if (usuarioRol == (short)Dominio.Tipos.Roles.VendedorEmpresa)
                        datos.ResultadoPoliticasBuro.CalificacionVendedorAlmespana = true;
                }
                #endregion VendedorEspana

                #region MMotasa
                if (datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente0993382609001 && datos.ResultadoPoliticasBuro != null)
                    datos.ResultadoPoliticasBuro.CalificacionMMotasa = true;

                #endregion MMotasa
                #region MercaMovil
                if (datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente0190372820001 && datos.ResultadoPoliticasBuro != null)
                    datos.ResultadoPoliticasBuro.CalificacionMercaMovil = true;

                #endregion MercaMovil

                #region SantaMaria
                if (datos.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1792060346001)
                {

                }
                #endregion

                #region ExisteClienteIessBuro

                var pathHistorialIess = Path.Combine("wwwroot", "data", "AdicionalInfo.json");
                var json = System.IO.File.ReadAllText(pathHistorialIess);

                //Deserializar como lista
                var listaUsuariosIess = JsonConvert.DeserializeObject<List<EmpresaIessHistorialViewModel>>(json)
                                        ?? new List<EmpresaIessHistorialViewModel>();


                //Validar si el usuario existe en el JSON
                bool UsuarioIess = listaUsuariosIess.Any(e => e.Id == usuarioActual.IdEmpresa);

                #endregion


                var fn = new XDocument();
                fn.Add(new XElement("Reporte",
                        //new XElement("LogoGarancheck", "./wwwroot/images/logogaranchecknuevo.png"),
                        new XElement("LogoEmpresa", usuarioActual.Empresa != null && !string.IsNullOrEmpty(usuarioActual.Empresa.RutaLogo) ? $"./wwwroot/app/logos/{usuarioActual.Empresa.RutaLogo}" : ""),
#if DEBUG
                        new XElement("HabilitarSalario", "SI"),
#else
                        new XElement("HabilitarSalario", idEmpresasSalarios.Contains(datos.IdEmpresa) ? "SI" : "NO"),
#endif
#if DEBUG
                        new XElement("HabilitarOnu", "SI"),
                        new XElement("HabilitarOfac", "SI"),
                        new XElement("HabilitarInterpol", "SI"),
#else
                        new XElement("HabilitarOnu", "SI"),
                        new XElement("HabilitarOfac", "SI"),
                        new XElement("HabilitarInterpol","SI"),
#endif

                        new XElement("HabilitarHistorialIess", UsuarioIess ? "SI" : "NO"),
                new XElement("ModeloCooperativasBuro", modeloCooperativasBuro && !busquedaJuridica ? "SI" : "NO"),
                        new XElement("ModeloRaguiBuro", datos.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1091796789001 ? "SI" : "NO"),
                        new XElement("ModeloCoopAndina", datos.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0591713094001 ? "SI" : "NO"),
                        new XElement("ModeloMMotasa", datos.ResultadoPoliticasBuro != null && datos.ResultadoPoliticasBuro.CalificacionMMotasa ? "SI" : "NO"),
                        new XElement("ModeloMercaMovil", datos.ResultadoPoliticasBuro != null && datos.ResultadoPoliticasBuro.CalificacionMercaMovil ? "SI" : "NO"),
                        new XElement("CacheSri", datos.CacheSri ? "SI" : "NO"),
                        new XElement("BusquedaJuridica", ValidacionViewModel.ValidarRucJuridico(datos.IdentificacionOriginal) || ValidacionViewModel.ValidarRucSectorPublico(datos.IdentificacionOriginal) ? "SI" : "NO"),
                        new XElement("SRI", datos.Sri != null ? new XElement("Elementos",
                            new XElement("RazonSocial", !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Ruc", !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Estado", !string.IsNullOrEmpty(datos.Sri.Estado) ? datos.Sri.EstadoContribuyente : string.Empty),
                            new XElement("Clasificacion", !string.IsNullOrEmpty(datos.Sri.Clasificacion) ? datos.Sri.Clasificacion.ToUpper() : string.Empty),
                            new XElement("Clase", !string.IsNullOrEmpty(datos.Sri.Clase) ? datos.Sri.Clase.ToUpper() : string.Empty),
                            new XElement("Categoria", !string.IsNullOrEmpty(datos.Sri.Categoria) ? datos.Sri.Categoria.ToUpper() : string.Empty),
                            new XElement("Tipo", !string.IsNullOrEmpty(datos.Sri.Tipo) ? datos.Sri.Tipo : string.Empty),
                            new XElement("Subtipo", !string.IsNullOrEmpty(datos.Sri.PersonaSociedad) && datos.Sri.PersonaSociedad == "SCD" && !string.IsNullOrEmpty(datos.Sri.Subtipo) ? datos.Sri.Subtipo : string.Empty),
                            new XElement("Contabilidad", datos.Sri.Contabilidad ? "SI" : "NO"),
                            new XElement("AgenteRetencion", datos.Sri.AgenteRetencion ? "SI" : "NO"),
                            new XElement("ContribuyenteEspecial", datos.Sri.ContribuyenteEspecial ? "SI" : "NO"),
                            new XElement("Fantasma", datos.Sri.Fantasma ? "SI" : "NO"),
                            new XElement("TransaccionesInexistente", datos.Sri.TransaccionesInexistente ? "SI" : "NO"),
                            new XElement("MotivoCancelacionSuspension", !string.IsNullOrEmpty(datos.Sri.MotivoSuspension) ? datos.Sri.MotivoSuspension : string.Empty),
                            new XElement("ActividadEconomica", datos.Balance != null && !string.IsNullOrEmpty(datos.Balance.ActividadEconomica) ? datos.Balance.ActividadEconomica : string.Empty),
                            new XElement("Actividad", !string.IsNullOrEmpty(datos.Sri.Actividad) ? datos.Sri.Actividad : string.Empty),
                            new XElement("AgenteRepresentante", !string.IsNullOrEmpty(datos.Sri.AgenteRepresentante) ? datos.Sri.AgenteRepresentante : string.Empty),
                            new XElement("RepresentanteLegal", !string.IsNullOrEmpty(datos.Sri.RepresentanteLegal) ? datos.Sri.RepresentanteLegal : string.Empty),
                            new XElement("FechaInicio", datos.Sri.FechaInicio != default ? datos.Sri.FechaInicio.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("FechaActualizacion", datos.Sri.FechaActualizacion.HasValue && datos.Sri.FechaActualizacion.Value != default ? datos.Sri.FechaActualizacion.Value.ToString("dd/MM/yyy") : string.Empty),
                            new XElement("FechaCese", datos.Sri.FechaCese.HasValue && datos.Sri.FechaCese.Value != default ? datos.Sri.FechaCese.Value.ToString("dd/MM/yyy") : string.Empty),
                            new XElement("FechaReinicio", datos.Sri.FechaReinicio.HasValue && datos.Sri.FechaReinicio.Value != default ? datos.Sri.FechaReinicio.Value.ToString("dd/MM/yyy") : string.Empty),
                            new XElement("PermisoFacturacion", datos.Sri.PermisoFacturacion != null ? datos.Sri.PermisoFacturacion.Vigencia.ToUpper() : string.Empty),
                            new XElement("FechaFinPermiso", datos.Sri.PermisoFacturacion != null && datos.Sri.PermisoFacturacion.FechaFinPermiso.HasValue && datos.Sri.PermisoFacturacion.FechaFinPermiso.Value != default ? datos.Sri.PermisoFacturacion.FechaFinPermiso.Value.ToString("dd/MM/yyy") : string.Empty),
                            new XElement("EstadoTributario", datos.Sri.EstadoTributario != null && !string.IsNullOrEmpty(datos.Sri.EstadoTributario.Estado) ? datos.Sri.EstadoTributario.Estado : string.Empty),
                            new XElement("MotivosEstadoTributario", datos.Sri.EstadoTributario != null && datos.Sri.EstadoTributario.Motivos != null && datos.Sri.EstadoTributario.Motivos.Any() ? datos.Sri.EstadoTributario.Motivos.Take(10).Select(x => new XElement("Motivo",
                                new XElement("Motivo", $"• {x.Motivo}"))) : string.Empty),
                            new XElement("MotivosEstadoTributarioMsj", datos.Sri.EstadoTributario != null && datos.Sri.EstadoTributario.Motivos != null && datos.Sri.EstadoTributario.Motivos.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS MOTIVOS" : string.Empty),
                            new XElement("ObligacionesPendientes", datos.Sri.EstadoTributario != null && datos.Sri.EstadoTributario.ObligacionesPendientesPresentacion != null && datos.Sri.EstadoTributario.ObligacionesPendientesPresentacion.Any() ? datos.Sri.EstadoTributario.ObligacionesPendientesPresentacion.Take(10).Select(x => new XElement("Obligacion",
                                new XElement("Codigo", x.CodigoObligacion),
                                new XElement("Periodo", x.Periodo),
                                new XElement("Motivo", x.Motivo))) : string.Empty),
                            new XElement("ObligacionesPendientesMsj", datos.Sri.EstadoTributario != null && datos.Sri.EstadoTributario.ObligacionesPendientesPresentacion != null && datos.Sri.Anexos.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS OBLIGACIONES" : string.Empty),
                            new XElement("Anexos", datos.Sri.Anexos != null ? datos.Sri.Anexos.OrderByDescending(x => x.Periodo).Take(10).Select(x => new XElement("Anexo",
                                new XElement("Formulario", x.Formulario),
                                new XElement("Periodo", x.Periodo),
                                new XElement("Causado", x.Causado.HasValue ? x.Causado.Value < 0 ? "$0.00" : $"${x.Causado.Value.ToString("N", culture)}" : "$0.00"),
                                new XElement("ValorImpuesto", x.Divisas.HasValue ? $"${x.Divisas.Value.ToString("N", culture)}" : "$0.00"))) : string.Empty),
                            new XElement("AnexosMsj", datos.Sri.Anexos != null && datos.Sri.Anexos.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS SALIDAS DE DIVISAS" : string.Empty),
                            new XElement("DeudasFirmes", datos.Sri.Deudas.ContainsKey("Firmes") ? new XElement("Firme",
                                new XElement("Fecha", datos.Sri.Deudas["Firmes"].FechaCorte?.ToString("dd/MM/yyyy")),
                                new XElement("Valor", $"${datos.Sri.Deudas["Firmes"].Valor?.ToString("N", culture)}")) : string.Empty),
                            new XElement("DeudasImpugnadas", datos.Sri.Deudas.ContainsKey("Impugnadas") ? new XElement("Impugnada",
                                new XElement("Fecha", datos.Sri.Deudas["Impugnadas"].FechaCorte?.ToString("dd/MM/yyyy")),
                                new XElement("Valor", $"${datos.Sri.Deudas["Impugnadas"].Valor?.ToString("N", culture)}")) : string.Empty),
                            new XElement("DeudasFacilidadesPago", datos.Sri.Deudas.ContainsKey("FacilidadesPago") ? new XElement("FacilidadesPago",
                                new XElement("Fecha", datos.Sri.Deudas["FacilidadesPago"].FechaCorte?.ToString("dd/MM/yyyy")),
                                new XElement("Valor", $"${datos.Sri.Deudas["FacilidadesPago"].Valor?.ToString("N", culture)}")) : string.Empty),
                            new XElement("Establecimientos", datos.Sri.Establecimientos != null ? datos.Sri.Establecimientos.Take(10).Select(x => new XElement("Establecimiento", $"• {x.Value.Numero} - {x.Value.Direccion}")) : string.Empty),
                            new XElement("EstablecimientoMsj", datos.Sri.Establecimientos != null && datos.Sri.Establecimientos.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS ESTABLECIMIENTOS" : string.Empty),
                            //new XElement("Telefonos", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null && datos.ContactosEmpresa.Telefonos.Any() ? datos.ContactosEmpresa.Telefonos.Take(10).Select(x => new XElement("Telefono", $"• {x}")) : string.Empty),
                            //new XElement("TelefonoMsj", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null && datos.ContactosEmpresa.Telefonos.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS TELÉFONOS" : string.Empty),
                            //new XElement("Correos", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Correos != null && datos.ContactosEmpresa.Correos.Any() ? datos.ContactosEmpresa.Correos.Take(10).Select(x => new XElement("Correo", $"• {x}")) : string.Empty),
                            //new XElement("CorreoMsj", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Correos != null && datos.ContactosEmpresa.Correos.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS CORREOS" : string.Empty),
                            //new XElement("Direcciones", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Direcciones != null && datos.ContactosEmpresa.Direcciones.Any() ? datos.ContactosEmpresa.Direcciones.Take(10).Select(x => new XElement("Direccion", $"• {x}")) : string.Empty),
                            //new XElement("DireccionMsj", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Direcciones != null && datos.ContactosEmpresa.Direcciones.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS DIRECCIONES" : string.Empty),
                            new XElement("EmpresasSimilares", datos.EmpresasSimilares != null && datos.EmpresasSimilares.Any() ? datos.EmpresasSimilares.Take(10).Select(x => new XElement("Empresa", $"• {x.RUC} - {x.RazonSocial}")) : string.Empty),
                            new XElement("EmpresasSimilaresMsj", datos.EmpresasSimilares != null && datos.EmpresasSimilares.Any() && datos.EmpresasSimilares.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS EMPRESAS" : string.Empty),
                            new XElement("Representantes", datos.Sri.Representantes != null && datos.Sri.Representantes.Any() ? datos.Sri.Representantes.Select(x => new XElement("Datos",
                                new XElement("AgenteRepresentante", !string.IsNullOrEmpty(x.AgenteRepresentante) ? x.AgenteRepresentante : string.Empty),
                                new XElement("RepresentanteLegal", !string.IsNullOrEmpty(x.RepresentanteLegal) ? x.RepresentanteLegal : string.Empty)
                                )) : string.Empty))
                        : string.Empty),
                        new XElement("CatastroFantasma", datos.CatastroFantasma != null ? new XElement("Elementos",
                            new XElement("Zona", !string.IsNullOrEmpty(datos.CatastroFantasma.Zona) ? datos.CatastroFantasma.Zona : string.Empty),
                            new XElement("Oficio5DiasNotificado", !string.IsNullOrEmpty(datos.CatastroFantasma.OficioCincoDiasNotificado) ? datos.CatastroFantasma.OficioCincoDiasNotificado : string.Empty),
                            new XElement("FechaNotificacion1", !string.IsNullOrEmpty(datos.CatastroFantasma.FechaNotificacion1) ? datos.CatastroFantasma.FechaNotificacion1 : string.Empty),
                            new XElement("NroResolucion", !string.IsNullOrEmpty(datos.CatastroFantasma.NroResolucion) ? datos.CatastroFantasma.NroResolucion : string.Empty),
                            new XElement("FechaNotificacion2", datos.CatastroFantasma.FechaNotificacion2.HasValue && datos.CatastroFantasma.FechaNotificacion2.Value != default ? datos.CatastroFantasma.FechaNotificacion2.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("Calificacion", !string.IsNullOrEmpty(datos.CatastroFantasma.Calificacion) ? datos.CatastroFantasma.Calificacion : string.Empty),
                            new XElement("FechaInicioCalificacion", datos.CatastroFantasma.FechaInicioCalificacion2.HasValue && datos.CatastroFantasma.FechaInicioCalificacion2.Value != default ? datos.CatastroFantasma.FechaInicioCalificacion2.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("FechaFinCalificacion", datos.CatastroFantasma.FechaFinalizacionCalificacion2.HasValue && datos.CatastroFantasma.FechaFinalizacionCalificacion2.Value != default ? datos.CatastroFantasma.FechaFinalizacionCalificacion2.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("ResolucionSentenciaBaja", !string.IsNullOrEmpty(datos.CatastroFantasma.ResolucionSentenciaBaja) ? datos.CatastroFantasma.ResolucionSentenciaBaja : string.Empty),
                            new XElement("FechaNotificacionResolucionSentencia", datos.CatastroFantasma.FechaNotificacionResolucionSentencia.HasValue && datos.CatastroFantasma.FechaNotificacionResolucionSentencia.Value != default ? datos.CatastroFantasma.FechaNotificacionResolucionSentencia.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("NroOficioReactivacion", datos.CatastroFantasma.NroOficioReactivacionRuc != null && datos.CatastroFantasma.NroOficioReactivacionRuc.Any() ? string.Join(',', datos.CatastroFantasma.NroOficioReactivacionRuc) : string.Empty),
                            new XElement("FechaNotificacion3", datos.CatastroFantasma.FechaNotificacion3 != null && datos.CatastroFantasma.FechaNotificacion3.Any() ? string.Join(',', datos.CatastroFantasma.FechaNotificacion3.Where(m => m.HasValue).Select(m => m.Value.ToString("dd/MM/yyyy"))) : string.Empty),
                            new XElement("AceptaRechaza", !string.IsNullOrEmpty(datos.CatastroFantasma.AceptaRechaza) ? datos.CatastroFantasma.AceptaRechaza : string.Empty),
                            new XElement("FechaReactivacion", !string.IsNullOrEmpty(datos.CatastroFantasma.FechaReactivacion) ? datos.CatastroFantasma.FechaReactivacion : string.Empty),
                            new XElement("InstaciaImpugnacion", !string.IsNullOrEmpty(datos.CatastroFantasma.InstanciaImpugnacion) ? datos.CatastroFantasma.InstanciaImpugnacion : string.Empty),
                            new XElement("EstadoImpugnacion", !string.IsNullOrEmpty(datos.CatastroFantasma.EstadoImpugnacion) ? datos.CatastroFantasma.EstadoImpugnacion : string.Empty))
                        : string.Empty),
                        new XElement("CacheRegistroCivil", datos.RegistroCivil == null ? "SI" : "NO"),
                        new XElement("Ciudadano", datos.RegistroCivil != null || datos.Ciudadano != null ? new XElement("Elementos",
                            new XElement("Nombre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("EstadoCivil", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.EstadoCivil?.Trim()) ? datos.RegistroCivil.EstadoCivil : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.EstadoCivil) ? datos.Personales.EstadoCivil : string.Empty)),
                            new XElement("Genero", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Genero?.Trim()) ? ReporteViewModel.FormatoGenero(datos.RegistroCivil.Genero) : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Genero) ? datos.Ciudadano.Genero : string.Empty)),
                            new XElement("FechaNacimiento", datos.RegistroCivil != null && datos.RegistroCivil.FechaNacimiento != default ? datos.RegistroCivil.FechaNacimiento.ToString("dd/MM/yyyy") : (datos.Ciudadano != null && datos.Ciudadano.FechaNacimiento.HasValue && datos.Ciudadano.FechaNacimiento.Value != default ? datos.Ciudadano.FechaNacimiento.Value.ToString("dd/MM/yyyy") : string.Empty)),
                            new XElement("FechaCedulacion", datos.RegistroCivil != null && datos.RegistroCivil.FechaCedulacion != default ? datos.RegistroCivil.FechaCedulacion.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("Nacionalidad", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nacionalidad?.Trim()) ? datos.RegistroCivil.Nacionalidad : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nacionalidad) ? datos.Ciudadano.Nacionalidad : string.Empty)),
                            new XElement("DesEstudio", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Instruccion?.Trim()) ? datos.RegistroCivil.Instruccion : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.DesEstudio) ? datos.Personales.DesEstudio : string.Empty)),
                            new XElement("DesProfesion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Profesion?.Trim()) ? datos.RegistroCivil.Profesion : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.Profesion) ? datos.Personales.Profesion : string.Empty)),
                            new XElement("Estado", datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.Estado) ? datos.Personales.Estado : string.Empty),
                            new XElement("FechaDefuncion", datos.RegistroCivil != null && datos.RegistroCivil.FechaDefuncion != null ? datos.RegistroCivil.FechaDefuncion.Value.ToString("dd/MM/yyyy") : datos.Personales != null && !string.IsNullOrWhiteSpace(datos.Personales.FechaDefuncion) ? datos.Personales.FechaDefuncion : string.Empty),
                            new XElement("Conyuge", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Conyuge?.Trim()) ? datos.RegistroCivil.Conyuge : (datos.Personales != null && !string.IsNullOrWhiteSpace(datos.Personales.NombreConyuge) ? datos.Personales.NombreConyuge : string.Empty)),
                            new XElement("CedulaConyuge", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.CedulaConyuge?.Trim()) ? datos.RegistroCivil.CedulaConyuge : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.CedulaConyuge) && datos.Personales.CedulaConyuge != "0" ? datos.Personales.CedulaConyuge : string.Empty)),
                            new XElement("FechaMatrimonio", datos.RegistroCivil != null && string.IsNullOrEmpty(datos.RegistroCivil.Conyuge) && datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.FechaMatrimonio) ? datos.Personales.FechaMatrimonio : string.Empty),
                            new XElement("NomPadre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.NombrePadre?.Trim()) ? datos.RegistroCivil.NombrePadre : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NombrePadre) ? datos.Personales.NombrePadre : string.Empty)),
                            new XElement("CedPadre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.CedulaPadre?.Trim()) ? datos.RegistroCivil.CedulaPadre : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.CedPadre) && datos.Personales.CedPadre != "0" ? datos.Personales.CedPadre : string.Empty)),
                            new XElement("NacPadre", datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NacPadre) ? datos.Personales.NacPadre : string.Empty),
                            new XElement("NomMadre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.NombreMadre?.Trim()) ? datos.RegistroCivil.NombreMadre : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NombreMadre) ? datos.Personales.NombreMadre : string.Empty)),
                            new XElement("CedMadre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.CedulaMadre?.Trim()) ? datos.RegistroCivil.CedulaMadre : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.CedMadre) && datos.Personales.CedMadre != "0" ? datos.Personales.CedMadre : string.Empty)),
                            new XElement("NacMadre", datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NacMadre) ? datos.Personales.NacMadre : string.Empty),
                            new XElement("Provincia", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarDomicilio?.Trim()) ? (datos.RegistroCivil.LugarDomicilio.Split('/').Length >= 1 ? datos.RegistroCivil.LugarDomicilio.Split('/')[0]?.Trim() : string.Empty) : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Provincia) ? datos.Ciudadano.Provincia : string.Empty)),
                            new XElement("Canton", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarDomicilio?.Trim()) ? (datos.RegistroCivil.LugarDomicilio.Split('/').Length >= 2 ? datos.RegistroCivil.LugarDomicilio.Split('/')[1]?.Trim() : string.Empty) : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Canton) ? datos.Ciudadano.Canton : string.Empty)),
                            new XElement("Parroquia", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarDomicilio?.Trim()) ? (datos.RegistroCivil.LugarDomicilio.Split('/').Length >= 3 ? datos.RegistroCivil.LugarDomicilio.Split('/')[2]?.Trim() : string.Empty) : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Parroquia) ? datos.Ciudadano.Parroquia : string.Empty)),
                            new XElement("ProvinciaNacimiento", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarNacimiento?.Trim()) ? (datos.RegistroCivil.LugarNacimiento.Split('/').Length >= 1 ? datos.RegistroCivil.LugarNacimiento.Split('/')[0] : string.Empty) : string.Empty),
                            new XElement("CantonNacimiento", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarNacimiento?.Trim()) ? (datos.RegistroCivil.LugarNacimiento.Split('/').Length >= 2 ? datos.RegistroCivil.LugarNacimiento.Split('/')[1] : string.Empty) : string.Empty),
                            new XElement("ParroquiaNacimiento", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarNacimiento?.Trim()) ? (datos.RegistroCivil.LugarNacimiento.Split('/').Length >= 3 ? datos.RegistroCivil.LugarNacimiento.Split('/')[2] : string.Empty) : string.Empty),
                            new XElement("Telefonos", telefonos != null && telefonos.Any() ? telefonos.Take(10).Select(x => new XElement("Telefono", $"• {x}")) : string.Empty),
                            new XElement("TelefonoMsj", telefonos != null && telefonos.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS TELÉFONOS" : string.Empty),
                            new XElement("Correos", correos != null && correos.Any() ? correos.Take(10).Select(x => new XElement("Correo", $"• {x}")) : string.Empty),
                            new XElement("CorreoMsj", correos != null && correos.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS CORREOS" : string.Empty),
                            new XElement("Direcciones", direcciones != null && direcciones.Any() ? direcciones.Take(10).Select(x => new XElement("Dirección", $"• {x}")) : string.Empty),
                            new XElement("DireccionMsj", direcciones != null && direcciones.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS DIRECCIONES" : string.Empty))
                        : string.Empty),
                        new XElement("CacheFamiliares", datos.CacheFamiliares ? "SI" : "NO"),
                        new XElement("Familiares", datos.Familiares != null ? new XElement("Elementos",
                            new XElement("AbueloPadre", datos.Familiares.AbueloPadre != null && !string.IsNullOrEmpty(datos.Familiares.AbueloPadre.Nombre) && !string.IsNullOrEmpty(datos.Familiares.AbueloPadre.Cedula) ? $"{datos.Familiares.AbueloPadre.Nombre} - {datos.Familiares.AbueloPadre.Cedula}" : string.Empty),
                            new XElement("AbuelaPadre", datos.Familiares.AbuelaPadre != null && !string.IsNullOrEmpty(datos.Familiares.AbuelaPadre.Nombre) && !string.IsNullOrEmpty(datos.Familiares.AbuelaPadre.Cedula) ? $"{datos.Familiares.AbuelaPadre.Nombre} - {datos.Familiares.AbuelaPadre.Cedula}" : string.Empty),
                            new XElement("AbueloMadre", datos.Familiares.AbueloMadre != null && !string.IsNullOrEmpty(datos.Familiares.AbueloMadre.Nombre) && !string.IsNullOrEmpty(datos.Familiares.AbueloMadre.Cedula) ? $"{datos.Familiares.AbueloMadre.Nombre} - {datos.Familiares.AbueloMadre.Cedula}" : string.Empty),
                            new XElement("AbuelaMadre", datos.Familiares.AbuelaMadre != null && !string.IsNullOrEmpty(datos.Familiares.AbuelaMadre.Nombre) && !string.IsNullOrEmpty(datos.Familiares.AbuelaMadre.Cedula) ? $"{datos.Familiares.AbuelaMadre.Nombre} - {datos.Familiares.AbuelaMadre.Cedula}" : string.Empty),
                            new XElement("Padre", datos.Familiares.Padre != null && !string.IsNullOrEmpty(datos.Familiares.Padre.Nombre) && !string.IsNullOrEmpty(datos.Familiares.Padre.Cedula) ? $"{datos.Familiares.Padre.Nombre} - {datos.Familiares.Padre.Cedula}" : string.Empty),
                            new XElement("Madre", datos.Familiares.Madre != null && !string.IsNullOrEmpty(datos.Familiares.Madre.Nombre) && !string.IsNullOrEmpty(datos.Familiares.Madre.Cedula) ? $"{datos.Familiares.Madre.Nombre} - {datos.Familiares.Madre.Cedula}" : string.Empty),
                            new XElement("Hermanos", datos.Familiares.Hermanos != null && datos.Familiares.Hermanos.Any() ? datos.Familiares.Hermanos.Select(x => new XElement("Hermano", x.Nombre, $" - {x.Cedula}")) : string.Empty),
                            new XElement("Conyuge", datos.Familiares.Conyuge != null && !string.IsNullOrEmpty(datos.Familiares.Conyuge.Nombre) && !string.IsNullOrEmpty(datos.Familiares.Conyuge.Cedula) ? $"{datos.Familiares.Conyuge.Nombre} - {datos.Familiares.Conyuge.Cedula}" : string.Empty),
                            new XElement("Hijos", datos.Familiares.Hijos != null && datos.Familiares.Hijos.Any() ? datos.Familiares.Hijos.Select(x => new XElement("Hijo", x.Nombre, $" - {x.Cedula}")) : string.Empty))
                        : string.Empty),
                        new XElement("CacheIess", datos.CacheIess ? "SI" : "NO"),
                        new XElement("IESS", datos.Iess != null ? new XElement("Elementos",
                            new XElement("DeudaPatronal", datos.Iess.Obligacion.Mora.HasValue ? $"${datos.Iess.Mora.Value.ToString("N", culture)}" : string.Empty),
                            new XElement("Obligacion", !string.IsNullOrEmpty(datos.Iess.Obligacion.Contenido) ? datos.Iess.Obligacion.Contenido.Substring(55) : string.Empty))
                        : string.Empty),
                        new XElement("CacheAfiliado", datos.CacheAfiliado ? "SI" : "NO"),
                        new XElement("CertificadoAfiliacion", datos.Afiliado != null ? new XElement("Elementos",
                                new XElement("Institulo", !string.IsNullOrEmpty(datos.Afiliado.Instituto) ? datos.Afiliado.Instituto : string.Empty),
                                new XElement("Persona", !string.IsNullOrEmpty(datos.Afiliado.Persona) ? datos.Afiliado.Persona : string.Empty),
                                new XElement("Empresa", !string.IsNullOrEmpty(datos.Afiliado.Empresa) ? datos.Afiliado.Empresa : string.Empty),
                                new XElement("ListaEmpresas", datos.Afiliado.EmpresasAfiliado != null && datos.Afiliado.EmpresasAfiliado.Any() ? datos.Afiliado.EmpresasAfiliado.Select(x => new XElement("Empresa",
                                    $"• {x.IdentificacionEmpresa} - {x.NombreEmpresa}{(!string.IsNullOrEmpty(x.Estado) ? $" - {x.Estado}" : string.Empty)}{(!string.IsNullOrEmpty(x.ObservacionEstado) ? $" - {x.ObservacionEstado.ToUpper()}" : string.Empty)}{(!string.IsNullOrEmpty(x.FechaAporte) ? $" - {x.FechaAporte}" : string.Empty)}")) : string.Empty),
                                new XElement("MsjEstado", !string.IsNullOrEmpty(datos.Afiliado.MsjEstado) ? datos.Afiliado.MsjEstado : string.Empty),
                                new XElement("Estado", !string.IsNullOrEmpty(datos.Afiliado.Estado) ? datos.Afiliado.Estado : string.Empty),
                                new XElement("CodigoQR", !string.IsNullOrEmpty(datos.Afiliado.CodigoQr) ? datos.Afiliado.CodigoQr : string.Empty),
                                new XElement("Fecha", !string.IsNullOrEmpty(datos.Afiliado.Fecha) ? datos.Afiliado.Fecha : string.Empty))
                        : string.Empty),
                        new XElement("CacheAfiliadoAdicional", datos.CacheAfiliadoAdicional ? "SI" : "NO"),
                        new XElement("AfiliadoAdicional", datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any() ? datos.AfiliadoAdicional.Select(x => new XElement("Empresa",
                                new XElement("RucEmpresa", x.RucEmpresa),
                                new XElement("NombreEmpresa", x.NombreEmpresa),
                                new XElement("FechaInicio", x.FechaInicioAfiliacion?.ToString("dd/MM/yyyy")),
                                new XElement("FechaSalida", x.FechaSalidaAfiliacion?.ToString("dd/MM/yyyy")),
#if DEBUG
                                new XElement("Salario", $"$ {x.SalarioAfiliado?.ToString("N", culture) ?? "0.00"} - $ {x.SalarioAfiliadoSuperior?.ToString("N", culture) ?? "0.00"}"),
#else
                                new XElement("Salario", idEmpresasSalarios.Contains(datos.IdEmpresa) ? $"$ {x.SalarioAfiliado?.ToString("N", culture) ?? "0.00"} - $ {x.SalarioAfiliadoSuperior?.ToString("N", culture) ?? "0.00"}" : "$ 0.00"),
#endif
                                new XElement("Cargo", x.Cargo))) : string.Empty),
                        new XElement("EmpleadosEmpresa", idEmpresasEmpleados.Contains(datos.IdEmpresa) && datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any() ? datos.EmpleadosEmpresa.Select(x => new XElement("Empleado",
                            new XElement("Cedula", x.Cedula),
                            new XElement("Nombre", x.Nombre),
                            new XElement("FechaInicio", x.FechaInicio.HasValue && x.FechaInicio.Value != default ? x.FechaInicio.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("FechaSalida", x.FechaSalida.HasValue && x.FechaSalida.Value != default ? x.FechaSalida.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("Cargo", x.Cargo),
                            new XElement("Salario", x.Salario.HasValue ? $"{x.Salario.Value.ToString("N", culture)} - ${x.SalarioSuperior.GetValueOrDefault().ToString("N", culture)}" : string.Empty))).Take(10)
                        : string.Empty),
                        new XElement("EmpleadosEmpresaMsj", idEmpresasEmpleados.Contains(datos.IdEmpresa) && datos.EmpleadosEmpresa != null && datos.EmpleadosEmpresa.Any() && datos.EmpleadosEmpresa.Count > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty),
                        new XElement("CacheSenescyt", datos.CacheSenescyt ? "SI" : "NO"),
                        new XElement("Senescyt", datos.Senescyt != null ? new XElement("Elementos",
                            new XElement("Nombre", !string.IsNullOrEmpty(datos.Senescyt.Nombre) ? datos.Senescyt.Nombre : string.Empty),
                            new XElement("Identificacion", !string.IsNullOrEmpty(datos.Senescyt.Identificacion) ? datos.Senescyt.Identificacion : string.Empty),
                            new XElement("Genero", !string.IsNullOrEmpty(datos.Senescyt.Genero) ? datos.Senescyt.Genero : string.Empty),
                            new XElement("Nacionalidad", !string.IsNullOrEmpty(datos.Senescyt.Nacionalidad) ? datos.Senescyt.Nacionalidad : string.Empty),
                            new XElement("Titulos", datos.Senescyt.Titulos != null && datos.Senescyt.Titulos.Any() ? datos.Senescyt.Titulos.Select(x => new XElement("Titulo",
                                new XElement("Nombre", x.Nombre),
                                new XElement("Institucion", x.Institucion),
                                new XElement("Nivel", x.Nivel),
                                new XElement("Fecha", x.FechaRegistro?.ToString("dd/MM/yyyy")),
                                new XElement("Tipo", x.Tipo),
                                new XElement("NumRegistro", x.NumeroRegistro),
                                new XElement("Reconocido", !string.IsNullOrEmpty(x.ReconocidoPor) ? $"{x.ReconocidoPor}" : string.Empty),
                                new XElement("Observacion", !string.IsNullOrEmpty(x.Observaciones) ? $"{x.Observaciones}" : string.Empty))) : string.Empty))
                        : string.Empty),
                        new XElement("CacheJudicial", datos.CacheJudicial ? "SI" : "NO"),
                        new XElement("JudicialPersona", datos.FJudicial != null ? new XElement("Elementos",
                            new XElement("Identificacion", !string.IsNullOrEmpty(datos.FJudicial.Identificacion) ? datos.FJudicial.Identificacion : string.Empty),
                            new XElement("Procesos", datos.FJudicial.Actor != null && datos.FJudicial.Actor.Any() ? datos.FJudicial.Actor.Take(10).Select(x => new XElement("Proceso",
                                new XElement("FechaRegistro", x.Value.Fecha?.ToString("dd/MM/yyyy")),
                                new XElement("Codigo", x.Value.Codigo),
                                new XElement("Descripcion", x.Value.Descripcion))) : string.Empty),
                            new XElement("ProcesosMsj", datos.FJudicial.Actor != null && datos.FJudicial.Actor.Any() && datos.FJudicial.Actor.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS PROCESOS" : string.Empty),
                            new XElement("Demandas", datos.FJudicial.Demandado != null && datos.FJudicial.Demandado.Any() ? datos.FJudicial.Demandado.Take(10).Select(x => new XElement("Demanda",
                                new XElement("FechaRegistro", x.Value.Fecha?.ToString("dd/MM/yyyy")),
                                new XElement("Codigo", x.Value.Codigo),
                                new XElement("Descripcion", x.Value.Descripcion))) : string.Empty),
                            new XElement("DemandasMsj", datos.FJudicial.Demandado != null && datos.FJudicial.Demandado.Any() && datos.FJudicial.Demandado.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS DEMANDAS" : string.Empty))
                        : string.Empty),
                        new XElement("MensajeJudicialPersona", !string.IsNullOrEmpty(datos.MensajeJudicialPersona) ? datos.MensajeJudicialPersona : string.Empty),
                        new XElement("CacheJudicialEmpresa", datos.CacheJudicialEmpresa ? "SI" : "NO"),
                        new XElement("JudicialEmpresa", datos.FJEmpresa != null && datos.Sri != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Procesos", datos.FJEmpresa.Actor != null && datos.FJEmpresa.Actor.Any() ? datos.FJEmpresa.Actor.Take(10).Select(x => new XElement("Proceso",
                                new XElement("FechaRegistro", x.Value.Fecha?.ToString("dd/MM/yyyy")),
                                new XElement("Codigo", x.Value.Codigo),
                                new XElement("Descripcion", x.Value.Descripcion))) : string.Empty),
                            new XElement("ProcesosMsj", datos.FJEmpresa.Actor != null && datos.FJEmpresa.Actor.Any() && datos.FJEmpresa.Actor.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS PROCESOS" : string.Empty),
                            new XElement("Demandas", datos.FJEmpresa.Demandado != null && datos.FJEmpresa.Demandado.Any() ? datos.FJEmpresa.Demandado.Take(10).Select(x => new XElement("Demanda",
                                new XElement("FechaRegistro", x.Value.Fecha?.ToString("dd/MM/yyyy")),
                                new XElement("Codigo", x.Value.Codigo),
                                new XElement("Descripcion", x.Value.Descripcion))) : string.Empty),
                            new XElement("DemandasMsj", datos.FJEmpresa.Demandado != null && datos.FJEmpresa.Demandado.Any() && datos.FJEmpresa.Demandado.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS DEMANDAS" : string.Empty))
                        : string.Empty),
                        new XElement("CacheImpedimento", datos.CacheImpedimento ? "SI" : "NO"),
                        new XElement("CertificadoImpedimento", datos.Impedimento != null ? new XElement("Elementos",
                            new XElement("NombreImpedimento", !string.IsNullOrEmpty(datos.Impedimento.Nombre?.Trim()) ? datos.Impedimento.Nombre.Trim() : string.Empty),
                            new XElement("IdentificacionImpedimento", !string.IsNullOrEmpty(datos.Impedimento.Identificacion?.Trim()) ? datos.Impedimento.Identificacion.Trim() : string.Empty),
                            new XElement("NumeroCertificado", !string.IsNullOrEmpty(datos.Impedimento.NumeroCertificado?.Trim()) ? datos.Impedimento.NumeroCertificado.Trim() : string.Empty),
                            new XElement("ImpedimentoValor", !string.IsNullOrEmpty(datos.Impedimento.ImpedimentoValor?.Trim()) ? datos.Impedimento.ImpedimentoValor.Trim() : string.Empty),
                            new XElement("ContenidoCertificado", !string.IsNullOrEmpty(datos.Impedimento.Contenido?.Trim()) ? datos.Impedimento.Contenido.Trim().Replace(", conforme a las siguientes causales:", ".").Trim() : string.Empty)
                        ) : string.Empty),
                        new XElement("MensajeJudicialEmpresa", !string.IsNullOrEmpty(datos.MensajeJudicialEmpresa) ? datos.MensajeJudicialEmpresa : string.Empty),
                        new XElement("CacheFiscaliaPersona", datos.CacheFiscaliaPersona ? "SI" : "NO"),
                        new XElement("FiscaliaPersona", datos.FiscaliaPersona != null && ((datos.FiscaliaPersona.ProcesosNoticiaDelito != null && datos.FiscaliaPersona.ProcesosNoticiaDelito.Any())
                                    || (datos.FiscaliaPersona.ProcesosActoAdministrativo != null && datos.FiscaliaPersona.ProcesosActoAdministrativo.Any())) ?
                        new XElement("Ficalia",
                            new XElement("NoticiasDelitos", datos.FiscaliaPersona.ProcesosNoticiaDelito != null && datos.FiscaliaPersona.ProcesosNoticiaDelito.Any() ?
                                datos.FiscaliaPersona.ProcesosNoticiaDelito.OrderByDescending(x => x.Fecha).Take(5).Select(x => new XElement("Proceso",
                                    new XElement("Numero", x.Numero),
                                    new XElement("Lugar", x.Lugar),
                                    new XElement("Fecha", x.Fecha.ToString("dd/MM/yyyy")),
                                    new XElement("Hora", x.Hora.ToString()),
                                    new XElement("Digitador", x.Digitador),
                                    new XElement("Delito", x.Delito),
                                    new XElement("Unidad", x.Unidad),
                                    new XElement("Fiscalia", x.Fiscalia),
                                    new XElement("Sujetos", x.Sujetos != null && x.Sujetos.Any() ?
                                        new XElement("Sujeto", x.Sujetos.Select(x => new XElement("Individuo",
                                            new XElement("Cedula", x.Cedula),
                                            new XElement("NombreCompleto", x.NombresCompletos),
                                            new XElement("Estado", x.Estado)
                                        )))
                                    : string.Empty),
                                    new XElement("Vehiculos", x.Vehiculos != null && x.Vehiculos.Any() ?
                                        new XElement("Vehiculo", x.Vehiculos.Select(x => new XElement("Coche",
                                            new XElement("Marca", x.Marca),
                                            new XElement("Modelo", x.Modelo),
                                            new XElement("Placa", x.Placa)
                                        )))
                                    : string.Empty)
                                )) : string.Empty),
                                new XElement("NoticiasDelitosContar", datos.FiscaliaPersona.ProcesosNoticiaDelito != null && datos.FiscaliaPersona.ProcesosNoticiaDelito.Any() && datos.FiscaliaPersona.ProcesosNoticiaDelito.Count() > 5 ? "SE MUESTRAN LOS CINCO PRIMEROS REGISTROS" : string.Empty),
                                new XElement("ActosAdministrativos", datos.FiscaliaPersona.ProcesosActoAdministrativo != null && datos.FiscaliaPersona.ProcesosActoAdministrativo.Any() ?
                                datos.FiscaliaPersona.ProcesosActoAdministrativo.OrderByDescending(x => x.Fecha).Take(5).Select(x => new XElement("Proceso",
                                    new XElement("Numero", x.Numero),
                                    new XElement("Fecha", x.Fecha.ToString("dd/MM/yyyy")),
                                    new XElement("Hora", x.Hora.ToString()),
                                    new XElement("Asesor", x.Asesor),
                                    new XElement("Cedula", x.CedulaDenunciante),
                                    new XElement("NombreCompleto", x.NombreDenunciante),
                                    new XElement("Descripcion", x.Descripcion),
                                    new XElement("Fiscalia", x.Fiscalia),
                                    new XElement("Observacion", x.Observaciones)
                                    )) : string.Empty),
                                new XElement("ActosAdministrativosContar", datos.FiscaliaPersona.ProcesosActoAdministrativo != null && datos.FiscaliaPersona.ProcesosActoAdministrativo.Any() && datos.FiscaliaPersona.ProcesosActoAdministrativo.Count() > 5 ? "SE MUESTRAN LOS CINCO PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CacheFiscaliaEmpresa", datos.CacheFiscaliaEmpresa ? "SI" : "NO"),
                        new XElement("FiscaliaEmpresa", datos.FiscaliaEmpresa != null && ((datos.FiscaliaEmpresa.ProcesosNoticiaDelito != null && datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Any())
                                    || (datos.FiscaliaEmpresa.ProcesosActoAdministrativo != null && datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Any())) ?
                        new XElement("Ficalia",
                            new XElement("NoticiasDelitos", datos.FiscaliaEmpresa.ProcesosNoticiaDelito != null && datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Any() ?
                                datos.FiscaliaEmpresa.ProcesosNoticiaDelito.OrderByDescending(x => x.Fecha).Take(5).Select(x => new XElement("Proceso",
                                    new XElement("Numero", x.Numero),
                                    new XElement("Lugar", x.Lugar),
                                    new XElement("Fecha", x.Fecha.ToString("dd/MM/yyyy")),
                                    new XElement("Hora", x.Hora.ToString()),
                                    new XElement("Digitador", x.Digitador),
                                    new XElement("Delito", x.Delito),
                                    new XElement("Unidad", x.Unidad),
                                    new XElement("Fiscalia", x.Fiscalia),
                                    new XElement("Sujetos", x.Sujetos != null && x.Sujetos.Any() ?
                                        new XElement("Sujeto", x.Sujetos.Select(x => new XElement("Individuo",
                                            new XElement("Cedula", x.Cedula),
                                            new XElement("NombreCompleto", x.NombresCompletos),
                                            new XElement("Estado", x.Estado)
                                        )))
                                    : string.Empty),
                                    new XElement("Vehiculos", x.Vehiculos != null && x.Vehiculos.Any() ?
                                        new XElement("Vehiculo", x.Vehiculos.Select(x => new XElement("Coche",
                                            new XElement("Marca", x.Marca),
                                            new XElement("Modelo", x.Modelo),
                                            new XElement("Placa", x.Placa)
                                        )))
                                    : string.Empty)
                                )) : string.Empty),
                                new XElement("NoticiasDelitosContar", datos.FiscaliaEmpresa.ProcesosNoticiaDelito != null && datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Any() && datos.FiscaliaEmpresa.ProcesosNoticiaDelito.Count() > 5 ? "SE MUESTRAN LOS CINCO PRIMEROS REGISTROS" : string.Empty),
                                new XElement("ActosAdministrativos", datos.FiscaliaEmpresa.ProcesosActoAdministrativo != null && datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Any() ?
                                datos.FiscaliaEmpresa.ProcesosActoAdministrativo.OrderByDescending(x => x.Fecha).Take(5).Select(x => new XElement("Proceso",
                                    new XElement("Numero", x.Numero),
                                    new XElement("Fecha", x.Fecha.ToString("dd/MM/yyyy")),
                                    new XElement("Hora", x.Hora.ToString()),
                                    new XElement("Asesor", x.Asesor),
                                    new XElement("Cedula", x.CedulaDenunciante),
                                    new XElement("NombreCompleto", x.NombreDenunciante),
                                    new XElement("Descripcion", x.Descripcion),
                                    new XElement("Fiscalia", x.Fiscalia),
                                    new XElement("Observacion", x.Observaciones)
                                    )) : string.Empty),
                                new XElement("ActosAdministrativosContar", datos.FiscaliaEmpresa.ProcesosActoAdministrativo != null && datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Any() && datos.FiscaliaEmpresa.ProcesosActoAdministrativo.Count() > 5 ? "SE MUESTRAN LOS CINCO PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CacheAnt", datos.CacheAnt ? "SI" : "NO"),
                        new XElement("ANT", datos.Ant != null ? new XElement("Elementos",
                            new XElement("Nombre", !string.IsNullOrEmpty(datos.Ant.Titular) ? datos.Ant.Titular : string.Empty),
                            new XElement("Cedula", !string.IsNullOrEmpty(datos.Ant.Cedula) ? datos.Ant.Cedula : string.Empty),
                            new XElement("Tipo", !string.IsNullOrEmpty(datos.Ant.Tipo) ? datos.Ant.Tipo : string.Empty),
                            new XElement("Puntos", datos.Ant.PuntosOriginal),
                            new XElement("FechaEmision", datos.Ant.FechaEmision.HasValue && datos.Ant.FechaEmision.Value != default ? datos.Ant.FechaEmision.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("FechaExpiracion", datos.Ant.FechaExpiracion.HasValue && datos.Ant.FechaExpiracion.Value != default ? datos.Ant.FechaExpiracion.Value.ToString("dd/MM/yyyy") : string.Empty),
                            //new XElement("TiposLicencias", datos.Ant.TiposLicencias != null && datos.Ant.TiposLicencias.Any() && datos.Ant.TiposLicencias.Count() > 1 ? datos.Ant.TiposLicencias.Select(x => new XElement("Licencias",
                            //      new XElement("Tipo", x.Tipo),
                            //      new XElement("FechaEmision", x.FechaEmision?.ToString("dd/MM/yyyy")),
                            //      new XElement("FechaExpiracion", x.FechaExpiracion?.ToString("dd/MM/yyyy")))) : string.Empty
                            //),
                            //new XElement("Citaciones", datos.Ant.Citaciones != null && datos.Ant.Citaciones.Any() ? datos.Ant.Citaciones.Select(x => new XElement("Citacion",
                            //      new XElement("Infraccion", x.Infraccion),
                            //      new XElement("Entidad", x.Entidad),
                            //      new XElement("Placa", x.Placa),
                            //      new XElement("Total", !string.IsNullOrEmpty(x.TotalOriginal) ? $"${double.Parse(x.TotalOriginal ?? "0").ToString("N", culture)}" : "$ 0.00"),
                            //      new XElement("ArticuloLiteral", x.ArticuloLiteral),
                            //      new XElement("Fecha", x.FechaRegistro.ToString("dd/MM/yyyy HH:mm:ss")),
                            //      new XElement("Lugar", x.Lugar))).Take(3) : string.Empty
                            //),
                            //new XElement("CitacionesMsj", datos.Ant.Citaciones != null && datos.Ant.Citaciones.Any() && datos.Ant.Citaciones.Count() > 3 ? "SE MUESTRAN LAS TRES PRIMERAS CITACIONES" : string.Empty),
                            //new XElement("DetallePuntos", datos.Ant.DetallePuntos != null && datos.Ant.DetallePuntos.Any() ? datos.Ant.DetallePuntos.Select(x => new XElement("Punto",
                            //      new XElement("Fecha", x.Fecha.ToString("dd/MM/yyyy HH:mm:ss")),
                            //      new XElement("PuntosAnteriores", x.PuntosAnteriorOriginal),
                            //      new XElement("PuntosModificados", x.CantidadPuntosOriginal),
                            //      new XElement("PuntosActuales", x.SaldoPuntosOriginal),
                            //      new XElement("Observacion", x.Observacion))) : string.Empty
                            //),
                            new XElement("Autos", datos.Ant.Autos != null && datos.Ant.Autos.Any() ? autosValidos.Select(x => new XElement("Auto",
                                  new XElement("Placa", x.Placa),
                                  new XElement("Servicio", x.Servicio),
                                  new XElement("Caracteristicas", string.Join(" ", new[] { x.Clase, x.Marca, x.Color, x.Modelo, x.Anio.HasValue ? x.Anio.Value.ToString() : "N/A" }.Where(m => !string.IsNullOrWhiteSpace(m)).ToArray())),
                                  new XElement("FechaMatricula", x.FechaUltimaMatricula.HasValue && x.FechaUltimaMatricula.Value != default ? x.FechaUltimaMatricula.Value.ToString("dd/MM/yyyy") : "N/A"),
                                  new XElement("TotalMatricula", x.TotalMatricula))).Take(3) : string.Empty
                            ),
                            new XElement("AutosMsj", datos.Ant.Autos != null && datos.Ant.Autos.Any() && autosValidos.Count() > 3 ? "SE MUESTRAN LOS TRES PRIMEROS VEHÍCULOS" : string.Empty),
                            new XElement("Multas", datos.Ant.Multas != null && datos.Ant.Multas.Any() ? multasValidas.OrderBy(m => m.Pagada).Select(x => new XElement("Multa",
                                 new XElement("Citacion", x.Citacion),
                                 new XElement("Numero", x.Numero),
                                 new XElement("Puntos", x.Puntos),
                                 new XElement("Placa", x.Placa),
                                 new XElement("Estado", x.Pagada.HasValue && x.Pagada.Value && x.Anulada.HasValue && x.Anulada.Value ? "Anulada" : x.Pagada.HasValue && x.Pagada.Value ? "Pagada" : x.Reclamo.HasValue && x.Reclamo.Value ? "En Impugnación" : x.Anulada.HasValue && x.Anulada.Value ? "Anulada" : "Pendiente"),
                                 new XElement("Saldo", $"${x.Saldo.ToString("N", culture)}"),
                                 //new XElement("Tipo", x.Tipo),
                                 //new XElement("Emision", x.FechaEmision.ToString("dd/MM/yyyy")),
                                 new XElement("Registro", x.FechaRegistro.ToString("dd/MM/yyyy")),
                                 new XElement("Monto", $"${x.ValorEmision.ToString("N", culture)}"),
                                 //new XElement("Interes", $"${x.ValorInteres.ToString("N", culture)}"),
                                 new XElement("Total", $"${x.ValorTotal.ToString("N", culture)}"))).Take(3) : string.Empty
                            ),
                            new XElement("MultasMsj", datos.Ant.Multas != null && datos.Ant.Multas.Any() && multasValidas.Any() && multasValidas.Count > 3 ? "SE MUESTRAN LAS TRES PRIMERAS MULTAS" : string.Empty)
                        ) : string.Empty),
                        new XElement("AutosHistoricos", datos.AutosHistorico != null && datos.AutosHistorico.Any() ? datos.AutosHistorico.Take(3).Select(x => new XElement("Elementos",
                            new XElement("Placa", !string.IsNullOrEmpty(x.Placa) ? x.Placa : string.Empty),
                            new XElement("Motor", !string.IsNullOrEmpty(x.Motor) ? x.Motor : string.Empty),
                            new XElement("Cilindraje", !string.IsNullOrEmpty(x.Cilindraje) ? x.Cilindraje : string.Empty),
                            new XElement("Chasis", !string.IsNullOrEmpty(x.Chasis) ? x.Chasis : string.Empty),
                            new XElement("Clase", !string.IsNullOrEmpty(x.Clase) ? x.Clase : string.Empty),
                            new XElement("Servicio", !string.IsNullOrEmpty(x.Servicio) ? x.Servicio : string.Empty),
                            new XElement("Peso", !string.IsNullOrEmpty(x.Peso) ? x.Peso : string.Empty),
                            new XElement("Exoneracion", !string.IsNullOrEmpty(x.Exoneracion) ? x.Exoneracion : string.Empty),
                            new XElement("Matriculado", x.Matriculado.HasValue ? x.Matriculado.Value : string.Empty),
                            new XElement("Ramv", !string.IsNullOrEmpty(x.Ramv) ? x.Ramv : string.Empty),
                            new XElement("Canton", !string.IsNullOrEmpty(x.Canton) ? x.Canton : string.Empty),
                            new XElement("Avaluo", x.Avaluo.HasValue ? $"${x.Avaluo.Value.ToString("N", culture)}" : string.Empty),
                            new XElement("Marca", !string.IsNullOrEmpty(x.Marca) ? x.Marca : string.Empty),
                            new XElement("Tipo", !string.IsNullOrEmpty(x.Tipo) ? x.Tipo : string.Empty),
                            new XElement("Modelo", !string.IsNullOrEmpty(x.Modelo) ? x.Modelo : string.Empty),
                            new XElement("Anio", x.Anio.HasValue ? x.Anio.Value : string.Empty)
                        )) : string.Empty),
                        new XElement("AutosHistoricosMsj", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Count > 3 ? "SE MUESTRAN LOS TRES PRIMEROS VEHÍCULOS" : string.Empty),
                        new XElement("DireccionesAutosHistoricos", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Direccion)).GroupBy(x => x.Direccion).Count() > 0 ? datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Direccion)).GroupBy(x => x.Direccion).Take(10).Select(x => new XElement("Elementos", new XElement("Direccion", $"• {x.Key}"))) : string.Empty),
                        new XElement("DireccionesAutosHistoricosMsj", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Direccion)).GroupBy(x => x.Direccion).Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS DIRECCIONES" : string.Empty),
                        new XElement("TelefonosAutosHistoricos", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Telefono)).GroupBy(x => x.Telefono).Count() > 0 ? datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Telefono)).GroupBy(x => x.Telefono).Take(10).Select(x => new XElement("Elementos", new XElement("Telefono", $"• {x.Key}"))) : string.Empty),
                        new XElement("TelefonosAutosHistoricosMsj", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Telefono)).GroupBy(x => x.Telefono).Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS TELÉFONOS" : string.Empty),
                        new XElement("CorreosAutosHistoricos", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Correo)).GroupBy(x => x.Correo).Count() > 0 ? datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Correo)).GroupBy(x => x.Correo).Take(10).Select(x => new XElement("Elementos", new XElement("Correo", $"• {x.Key.ToLower()}"))) : string.Empty),
                        new XElement("CorreosAutosHistoricosMsj", datos.AutosHistorico != null && datos.AutosHistorico.Any() && datos.AutosHistorico.Where(x => !string.IsNullOrEmpty(x.Correo)).GroupBy(x => x.Correo).Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS CORREOS" : string.Empty),
                        new XElement("CachePensionAlimenticia", datos.CachePensionAlimenticia ? "SI" : "NO"),
                        new XElement("PensionAlimenticia", datos.PensionAlimenticia != null ? new XElement("Elementos",
                            new XElement("Nombre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Resultados", datos.PensionAlimenticia.Resultados != null && datos.PensionAlimenticia.Resultados.Any() ? datos.PensionAlimenticia.Resultados.Select(x => new XElement("Resultado",
                                  new XElement("CodigoTarjeta", x.CodigoTarjeta),
                                  new XElement("NroProcesoJudicial", x.NroProcesoJudicial),
                                  new XElement("TipoPension", x.TipoPension),
                                  new XElement("DependenciaJurisdiccional", x.DependenciaJurisdiccional),
                                  new XElement("Intervinientes", x.Intervinientes != null && x.Intervinientes.Any() ?
                                    x.Intervinientes.Select(y => new XElement("Interviniente",
                                        new XElement("Tipo", y.Tipo),
                                        new XElement("Nombre", y.Nombre),
                                        new XElement("NombreComprobado", GenerarInterviniente(datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty), y.Nombre) ? y.Tipo : string.Empty))) :
                                    lstPensionTemp.Select(y => new XElement("Interviniente",
                                        new XElement("Tipo", y.Tipo),
                                        new XElement("Nombre", y.Nombre),
                                        new XElement("NombreComprobado", y.NombreComprobado)))
                                  ),
                                  new XElement("ValorMesual", Math.Round(double.Parse(x.PensionActualOriginal.Replace(",", ".")), 2).ToString("N", culture)),
                                  new XElement("TotalPagado", Math.Round(x.Movimientos.Sum(t => double.Parse(t.ValorPagadoOriginal.Replace(",", "."))), 2).ToString("N", culture)),
                                  new XElement("TotalDeuda", Math.Round(x.Movimientos.Sum(t => double.Parse(t.ValorDeudaOriginal.Replace(",", "."))), 2).ToString("N", culture)),
                                  new XElement("ValorDeuda", Math.Round(x.Movimientos.Sum(t => double.Parse(t.ValorDeudaOriginal.Replace(",", "."))) - x.Movimientos.Sum(t => double.Parse(t.ValorPagadoOriginal.Replace(",", "."))), 2).ToString("N", culture)),
                                  new XElement("Estado", x.AlDia ? "Pagos al día" : "Pagos pendientes")
                                  )) : string.Empty),
                            new XElement("ValorMesualSuma", totalPensionActual.ToString("N", culture)),
                            new XElement("TotalPagadoSuma", totalPagado.ToString("N", culture)),
                            new XElement("TotalDeudaSuma", totalDeuda.ToString("N", culture)),
                            new XElement("ValorDeudaSuma", totalValorDeuda.ToString("N", culture))
                            ) : string.Empty),
                        new XElement("CacheSercop", datos.CacheSercop ? "SI" : "NO"),
                        new XElement("SERCOP",
                            new XElement("ProveedorIncumplido",
                            datos.Proveedor != null && datos.Proveedor.ProveedoresIncop != null && datos.Proveedor.ProveedoresIncop.Any() ? datos.Proveedor.ProveedoresIncop.Select(x => new XElement("Incumplido",
                                new XElement("Reportado", x.Reportado),
                                new XElement("Resolucion", x.Resolucion),
                                new XElement("Motivo", x.Motivo),
                                new XElement("FechaDesde", x.FechaDesde?.ToString("dd/MM/yyyy")),
                                new XElement("FechaHasta", x.FechaHasta?.ToString("dd/MM/yyyy")),
                                new XElement("Estado", x.Estado))) : string.Empty),
                            new XElement("IncumplidoContraloria",
                            datos.Proveedor != null && datos.Proveedor.ProveedoresContraloria != null && datos.Proveedor.ProveedoresContraloria.Any() ? datos.Proveedor.ProveedoresContraloria.Select(x => new XElement("Contraloria",
                                new XElement("Reportado", x.Reportado),
                                new XElement("Fecha", x.Fecha?.ToString("dd/MM/yyyy")),
                                new XElement("Estado", x.Estado)
                                )) : string.Empty)
                        ),
                        new XElement("CacheSercopContraloria", datos.CacheSercopContraloria ? "SI" : "NO"),
                        new XElement("SERCOPContraloria",
                            new XElement("Proveedores", datos.ProveedorContraloria != null && datos.ProveedorContraloria.Any() ? datos.ProveedorContraloria.Select(x => new XElement("Contraloria",
                                new XElement("Reportado", x.Reportado),
                                new XElement("Fecha", x.Fecha?.ToString("dd/MM/yyyy")),
                                new XElement("Estado", x.Estado)
                            )) : string.Empty)
                        ),
                        new XElement("CacheSuperBancoCedula", datos.CacheSuperBancoCedula ? "SI" : "NO"),
                        new XElement("SuperBancos", datos.SuperBancosCedula != null ? new XElement("Elementos",
                            new XElement("NombreTitular", !string.IsNullOrEmpty(datos.SuperBancosCedula.NombreTitular) ? datos.SuperBancosCedula.NombreTitular : string.Empty),
                            new XElement("IdentificacionTitular", !string.IsNullOrEmpty(datos.SuperBancosCedula.IdentificacionTitular) ? datos.SuperBancosCedula.IdentificacionTitular : string.Empty),
                            new XElement("TipoIdentificacion", !string.IsNullOrEmpty(datos.SuperBancosCedula.TipoIdentificacion) ? datos.SuperBancosCedula.TipoIdentificacion : string.Empty),
                            new XElement("Estado", !string.IsNullOrEmpty(datos.SuperBancosCedula.Estado) ? datos.SuperBancosCedula.Estado : string.Empty),
                            new XElement("FechaGeneracion", !string.IsNullOrEmpty(datos.SuperBancosCedula.FechaFormato) ? datos.SuperBancosCedula.FechaFormato : string.Empty),
                            new XElement("TiempoValidez", !string.IsNullOrEmpty(datos.SuperBancosCedula.TiempoValidezFormato) ? datos.SuperBancosCedula.TiempoValidezFormato : string.Empty),
                            new XElement("Codigo", !string.IsNullOrEmpty(datos.SuperBancosCedula.Codigo) ? datos.SuperBancosCedula.Codigo : string.Empty),
                            new XElement("DescripcionMulta", !string.IsNullOrEmpty(datos.SuperBancosCedula.DescripcionMulta1) ? datos.SuperBancosCedula.DescripcionMulta1 : string.Empty))
                        : string.Empty),
                        new XElement("CacheSuperBancoNatural", datos.CacheSuperBancoNatural ? "SI" : "NO"),
                        new XElement("SuperBancosNatural", datos.SuperBancosNatural != null ? new XElement("Elementos",
                            new XElement("NombreTitular", !string.IsNullOrEmpty(datos.SuperBancosNatural.NombreTitular) ? datos.SuperBancosNatural.NombreTitular : string.Empty),
                            new XElement("IdentificacionTitular", !string.IsNullOrEmpty(datos.SuperBancosNatural.IdentificacionTitular) ? datos.SuperBancosNatural.IdentificacionTitular : string.Empty),
                            new XElement("TipoIdentificacion", !string.IsNullOrEmpty(datos.SuperBancosNatural.TipoIdentificacion) ? datos.SuperBancosNatural.TipoIdentificacion : string.Empty),
                            new XElement("Estado", !string.IsNullOrEmpty(datos.SuperBancosNatural.Estado) ? datos.SuperBancosNatural.Estado : string.Empty),
                            new XElement("FechaGeneracion", !string.IsNullOrEmpty(datos.SuperBancosNatural.FechaFormato) ? datos.SuperBancosNatural.FechaFormato : string.Empty),
                            new XElement("TiempoValidez", !string.IsNullOrEmpty(datos.SuperBancosNatural.TiempoValidezFormato) ? datos.SuperBancosNatural.TiempoValidezFormato : string.Empty),
                            new XElement("Codigo", !string.IsNullOrEmpty(datos.SuperBancosNatural.Codigo) ? datos.SuperBancosNatural.Codigo : string.Empty),
                            new XElement("DescripcionMulta", !string.IsNullOrEmpty(datos.SuperBancosNatural.DescripcionMulta1) ? datos.SuperBancosNatural.DescripcionMulta1 : string.Empty))
                        : string.Empty),
                        new XElement("CacheSuperBancoEmpresa", datos.CacheSuperBancoEmpresa ? "SI" : "NO"),
                        new XElement("SuperBancosEmpresa", datos.SuperBancosEmpresa != null ? new XElement("Elementos",
                            new XElement("NombreTitular", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.NombreTitular) ? datos.SuperBancosEmpresa.NombreTitular : string.Empty),
                            new XElement("IdentificacionTitular", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.IdentificacionTitular) ? datos.SuperBancosEmpresa.IdentificacionTitular : string.Empty),
                            new XElement("TipoIdentificacion", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.TipoIdentificacion) ? datos.SuperBancosEmpresa.TipoIdentificacion : string.Empty),
                            new XElement("Estado", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.Estado) ? datos.SuperBancosEmpresa.Estado : string.Empty),
                            new XElement("FechaGeneracion", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.FechaFormato) ? datos.SuperBancosEmpresa.FechaFormato : string.Empty),
                            new XElement("TiempoValidez", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.TiempoValidezFormato) ? datos.SuperBancosEmpresa.TiempoValidezFormato : string.Empty),
                            new XElement("Codigo", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.Codigo) ? datos.SuperBancosEmpresa.Codigo : string.Empty),
                            new XElement("DescripcionMulta", !string.IsNullOrEmpty(datos.SuperBancosEmpresa.DescripcionMulta1) ? datos.SuperBancosEmpresa.DescripcionMulta1 : string.Empty))
                        : string.Empty),
                         new XElement("CacheAntecedentesPenales", datos.CacheAntecedentesPenales ? "SI" : "NO"),
                         new XElement("AntecedentesPenales", datos.AntecedentesPenales != null ? new XElement("Elementos",
                            new XElement("Nombre", !string.IsNullOrEmpty(datos.AntecedentesPenales.Nombre) ? datos.AntecedentesPenales.Nombre : string.Empty),
                            new XElement("Identificacion", !string.IsNullOrEmpty(datos.AntecedentesPenales.Identificacion) ? datos.AntecedentesPenales.Identificacion : string.Empty),
                            new XElement("TipoDocumento", !string.IsNullOrEmpty(datos.AntecedentesPenales.TipoDocumento) ? datos.AntecedentesPenales.TipoDocumento : string.Empty),
                            new XElement("Antecedente", !string.IsNullOrEmpty(datos.AntecedentesPenales.Antecedente) ? datos.AntecedentesPenales.Antecedente : string.Empty),
                            new XElement("NumeroCertificado", !string.IsNullOrEmpty(datos.AntecedentesPenales.NumeroCertificado) ? datos.AntecedentesPenales.NumeroCertificado : string.Empty),
                            new XElement("FechaEmision", !string.IsNullOrEmpty(datos.AntecedentesPenales.FechaEmision) ? datos.AntecedentesPenales.FechaEmision : string.Empty),
                            new XElement("FechaValidacion", !string.IsNullOrEmpty(datos.AntecedentesPenales.FechaValidacion) ? datos.AntecedentesPenales.FechaValidacion : string.Empty))
                        : string.Empty),
                         new XElement("CacheFuerzasArmadas", datos.CacheFuerzasArmadas ? "SI" : "NO"),
                         new XElement("FuerzasArmadas", datos.FuerzasArmadas != null ? new XElement("Elementos",
                            new XElement("Nombre", !string.IsNullOrEmpty(datos.FuerzasArmadas.NombreCompleto?.Trim()) ? datos.FuerzasArmadas.NombreCompleto.Trim().ToUpper() : string.Empty),
                            new XElement("Identificacion", !string.IsNullOrEmpty(datos.FuerzasArmadas.Identificacion?.Trim()) ? datos.FuerzasArmadas.Identificacion.Trim().ToUpper() : string.Empty),
                            new XElement("DatoMilitar", !string.IsNullOrEmpty(datos.FuerzasArmadas.NoTilde?.Trim()) ? datos.FuerzasArmadas.NoTilde.Trim().ToUpper() : string.Empty),
                            new XElement("TipoMilitar", !string.IsNullOrEmpty(datos.FuerzasArmadas.TipoMilitar?.Trim()) ? datos.FuerzasArmadas.TipoMilitar.Trim().ToUpper() : string.Empty),
                            new XElement("FechaInactivo", datos.FuerzasArmadas.FechaInactivo != default ? datos.FuerzasArmadas.FechaInactivo.ToString("dd/MM/yyyy") : datos.FuerzasArmadas.GradoFechaInactivo != default ? datos.FuerzasArmadas.GradoFechaInactivo.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("FechaBaja", datos.FuerzasArmadas.FechaBaja != default ? datos.FuerzasArmadas.FechaBaja.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("FechaAlta", datos.FuerzasArmadas.FechaAlta != default ? datos.FuerzasArmadas.FechaAlta.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("GradoTituloPuesto", !string.IsNullOrEmpty(datos.FuerzasArmadas.GradoTituloPuesto?.Trim()) ? datos.FuerzasArmadas.GradoTituloPuesto.Trim() : string.Empty),
                            new XElement("GradoTipoFuerza", !string.IsNullOrEmpty(datos.FuerzasArmadas.GradoTipoFuerza?.Trim()) ? datos.FuerzasArmadas.GradoTipoFuerza.Trim().ToUpper() : !string.IsNullOrEmpty(datos.FuerzasArmadas.Fuerza?.Trim()) ? datos.FuerzasArmadas.Fuerza.Trim().ToUpper() : string.Empty),
                            new XElement("Clasificacion", !string.IsNullOrEmpty(datos.FuerzasArmadas.Clasificacion?.Trim()) ? datos.FuerzasArmadas.Clasificacion.Trim().ToUpper() : string.Empty),
                            new XElement("Especialidad", !string.IsNullOrEmpty(datos.FuerzasArmadas.Especialidad?.Trim()) ? datos.FuerzasArmadas.Especialidad.Trim().ToUpper() : string.Empty),
                            new XElement("Status", !string.IsNullOrEmpty(datos.FuerzasArmadas.Status?.Trim()) ? datos.FuerzasArmadas.Status.Trim().ToUpper() : string.Empty)
                         ) : string.Empty),
                         new XElement("CacheDeNoBaja", datos.CacheDeNoBaja ? "SI" : "NO"),
                         new XElement("DeNoBaja", datos.DeNoBaja != null ? new XElement("ResultadoNoPolicia",
                            new XElement("EsPolicia", datos.DeNoBaja.EsPolicia),
                            datos.DeNoBaja.Resultado != null ? new XElement("Elementos",
                            new XElement("Nombre", !string.IsNullOrEmpty(datos.DeNoBaja.Resultado.Nombre) ? datos.DeNoBaja.Resultado.Nombre : string.Empty),
                            new XElement("Identificacion", !string.IsNullOrEmpty(datos.DeNoBaja.Resultado.Identificacion) ? datos.DeNoBaja.Resultado.Identificacion : string.Empty),
                            new XElement("NumeroCertificado", !string.IsNullOrEmpty(datos.DeNoBaja.Resultado.NumeroCertificado) ? datos.DeNoBaja.Resultado.NumeroCertificado : string.Empty),
                            new XElement("FechaEmision", !string.IsNullOrEmpty(datos.DeNoBaja.Resultado.FechaEmision) ? datos.DeNoBaja.Resultado.FechaEmision : string.Empty),
                            new XElement("FechaValidacion", !string.IsNullOrEmpty(datos.DeNoBaja.Resultado.FechaValidacion) ? datos.DeNoBaja.Resultado.FechaValidacion : string.Empty))
                          : string.Empty)
                        : string.Empty),
                         new XElement("CachePredios", datos.CachePredios ? "SI" : "NO"),
                         new XElement("CacheDetallePredios", datos.CacheDetallePredios ? "SI" : "NO"),
                         new XElement("PrediosRepresentante", datos.Predios != null ? new XElement("Elementos",
                            new XElement("Nombres", !string.IsNullOrEmpty(datos.Predios.Nombre) ? datos.Predios.Nombre : string.Empty),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Detalles", datos.Predios.Detalle != null && datos.Predios.Detalle.Any() ? datos.Predios.Detalle.Where(m => m.Anio == DateTime.Now.Year).Select(x => new XElement("Detalle",
                                 new XElement("Concepto", x.Concepto),
                                 new XElement("Numero", x.Numero),
                                 new XElement("NumeroTitulo", x.NumeroTitulo),
                                 new XElement("Anio", x.Anio),
                                 new XElement("Valor", x.Valor.ToString("N", culture)),
                                 //new XElement("DetallesPredio", x.Detalle != null && x.Detalle.Any() ?
                                 //   x.Detalle.Select(d => new XElement("DetallePredio",
                                 //       new XElement("Valor", d)))
                                 //: string.Empty),
                                 new XElement("Estado", x.Estado))).Take(10) : string.Empty
                            ),
                            new XElement("DetallesPredios", datos.DetallePredios != null && datos.DetallePredios.Any() ? datos.DetallePredios.Select(x => new XElement("Detalle",
                                 new XElement("Numero", x.Numero),
                                 new XElement("Direccion", $"{x.Parroquia} / {x.BarrioSector} / {x.Direccion}"),
                                 new XElement("Area", x.AreaEscrituraFormato),
                                 new XElement("AvaluoBienInmueble", x.AvaluoTotalBienInmuebleFormato))).Take(10) : string.Empty
                            ),
                            new XElement("PrediosRepresentanteMsj", datos.Predios.Detalle != null && datos.Predios.Detalle.Any(m => m.Anio == DateTime.Now.Year) && datos.Predios.Detalle.Count(m => m.Anio == DateTime.Now.Year) > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresa", datos.CachePrediosEmpresa ? "SI" : "NO"),
                        new XElement("CacheDetallePrediosEmpresa", datos.CacheDetallePrediosEmpresa ? "SI" : "NO"),
                        new XElement("PrediosEmpresa", datos.PrediosEmpresa != null ? new XElement("Elementos",
                            new XElement("Nombres", !string.IsNullOrEmpty(datos.PrediosEmpresa.Nombre) ? datos.PrediosEmpresa.Nombre : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Detalles", datos.PrediosEmpresa.Detalle != null && datos.PrediosEmpresa.Detalle.Any() ? datos.PrediosEmpresa.Detalle.Where(m => m.Anio == DateTime.Now.Year).Select(x => new XElement("Detalle",
                                    new XElement("Concepto", x.Concepto),
                                    new XElement("Numero", x.Numero),
                                    new XElement("NumeroTitulo", x.NumeroTitulo),
                                    new XElement("Anio", x.Anio),
                                    new XElement("Valor", x.Valor.ToString("N", culture)),
                                    //new XElement("DetallesPredio", x.Detalle != null && x.Detalle.Any() ?
                                    //   x.Detalle.Select(d => new XElement("DetallePredio",
                                    //       new XElement("Valor", d)))
                                    //: string.Empty),
                                    new XElement("Estado", x.Estado))).Take(10) : string.Empty
                            ),
                            new XElement("DetallesPrediosEmpresa", datos.DetallePrediosEmpresa != null && datos.DetallePrediosEmpresa.Any() ? datos.DetallePrediosEmpresa.Select(x => new XElement("Detalle",
                                    new XElement("Numero", x.Numero),
                                    new XElement("Direccion", $"{x.Parroquia} / {x.BarrioSector} / {x.Direccion}"),
                                    new XElement("Area", x.AreaEscrituraFormato),
                                    new XElement("AvaluoBienInmueble", x.AvaluoTotalBienInmuebleFormato))).Take(10) : string.Empty
                            ),
                            new XElement("PrediosEmpresaMsj", datos.PrediosEmpresa.Detalle != null && datos.PrediosEmpresa.Detalle.Any(m => m.Anio == DateTime.Now.Year) && datos.PrediosEmpresa.Detalle.Count(m => m.Anio == DateTime.Now.Year) > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistenPrediosQuito", (datos.Predios != null && datos.Predios.Detalle.Any()) || (datos.PrediosEmpresa != null && datos.PrediosEmpresa.Detalle.Any()) ? "SI" : string.Empty),
                        new XElement("CachePrediosCuenca", datos.CachePrediosCuenca ? "SI" : "NO"),
                        new XElement("ExistenPrediosCuenca", (datos.PrediosCuenca != null && datos.PrediosCuenca.InformePredial != null && datos.PrediosCuenca.InformePredial.Detalle != null && datos.PrediosCuenca.InformePredial.Detalle.Any()) || (datos.PrediosEmpresaCuenca != null && datos.PrediosEmpresaCuenca.InformePredial != null && datos.PrediosEmpresaCuenca.InformePredial.Detalle != null && datos.PrediosEmpresaCuenca.InformePredial.Detalle.Any()) ? "SI" : string.Empty),
                        new XElement("PrediosRepresentanteCuenca", datos.PrediosCuenca != null && datos.PrediosCuenca.InformePredial != null ? new XElement("Elementos",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            //new XElement("Detalles", detallePredioCuenca.Any() ? detallePredioCuenca.OrderByDescending(m => m.Estado).Select(x => new XElement("Detalle",
                            //        new XElement("Clave", x.Clave),
                            //        new XElement("Titulo", x.Titulo),
                            //        new XElement("Anio", x.Anio),
                            //        new XElement("Rubro", x.DescripcionRubro),
                            //        new XElement("FechaEmision", x.FechaEmision),
                            //        new XElement("Total", x.Total.ToString("N", culture)),
                            //        new XElement("Estado", x.Estado))).Take(10) : string.Empty
                            //), 
                            new XElement("DetallesInforme", datos.PrediosCuenca != null && datos.PrediosCuenca.InformePredial != null && datos.PrediosCuenca.InformePredial.Detalle != null && datos.PrediosCuenca.InformePredial.Detalle.Any() ? datos.PrediosCuenca.InformePredial.Detalle.Select(x => new XElement("Detalle",
                                    new XElement("ClaveAnterior", x.ClaveAnterior),
                                    new XElement("ClaveActual", x.ClaveCatastral),
                                    new XElement("Direccion", $"{x.Parroquia} / {x.Calle} {x.Numero}"),
                                    new XElement("ValorTerreno", $"{x.AreaTerreno} m2 avaluados en: {x.AvaluoTerreno?.ToString("N", culture)}"),
                                    new XElement("ValorConstruccion", $"{x.AreaConstruccion} m2 avaluados en: {x.AvaluoConstruccion?.ToString("N", culture)}"),
                                    new XElement("Total", $"${((x.AvaluoTerreno ?? 0) + (x.AvaluoConstruccion ?? 0))}"))).Take(10) : string.Empty
                            ),
                            //    new XElement("PrediosRepresentanteCuencaMsj", detallePredioCuenca.Any() && detallePredioCuenca.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            //) : string.Empty),
                            new XElement("PrediosRepresentanteCuencaMsj", datos.PrediosCuenca != null && datos.PrediosCuenca.InformePredial != null && datos.PrediosCuenca.InformePredial.Detalle != null && datos.PrediosCuenca.InformePredial.Detalle.Any() && datos.PrediosCuenca.InformePredial.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaCuenca", datos.CachePrediosEmpresaCuenca ? "SI" : "NO"),
                        new XElement("PrediosEmpresaCuenca", datos.PrediosEmpresaCuenca != null && datos.PrediosEmpresaCuenca.InformePredial != null ? new XElement("Elementos",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            //new XElement("Detalles", detallePredioEmpresaCuenca.Any() ? detallePredioEmpresaCuenca.OrderByDescending(m => m.Estado).Select(x => new XElement("Detalle",
                            //        new XElement("Clave", x.Clave),
                            //        new XElement("Titulo", x.Titulo),
                            //        new XElement("Anio", x.Anio),
                            //        new XElement("Rubro", x.DescripcionRubro),
                            //        new XElement("FechaEmision", x.FechaEmision),
                            //        new XElement("Total", x.Total.ToString("N", culture)),
                            //        new XElement("Estado", x.Estado))).Take(10) : string.Empty
                            //),
                            new XElement("DetallesInforme", datos.PrediosEmpresaCuenca != null && datos.PrediosEmpresaCuenca.InformePredial != null && datos.PrediosEmpresaCuenca.InformePredial.Detalle != null && datos.PrediosEmpresaCuenca.InformePredial.Detalle.Any() ? datos.PrediosEmpresaCuenca.InformePredial.Detalle.Select(x => new XElement("Detalle",
                                    new XElement("ClaveAnterior", x.ClaveAnterior),
                                    new XElement("ClaveActual", x.ClaveCatastral),
                                    new XElement("Direccion", $"{x.Parroquia} / {x.Calle} {x.Numero}"),
                                    new XElement("ValorTerreno", $"{x.AreaTerreno} m2 avaluados en: {x.AvaluoTerreno?.ToString("N", culture)}"),
                                    new XElement("ValorConstruccion", $"{x.AreaConstruccion} m2 avaluados en: {x.AvaluoConstruccion?.ToString("N", culture)}"),
                                    new XElement("Total", $"${((x.AvaluoTerreno ?? 0) + (x.AvaluoConstruccion ?? 0))}"))).Take(10) : string.Empty
                            ),
                            //    new XElement("PrediosEmpresaCuencaMsj", detallePredioEmpresaCuenca.Any() && detallePredioEmpresaCuenca.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            //) : string.Empty),
                            new XElement("PrediosEmpresaCuencaMsj", datos.PrediosEmpresaCuenca != null && datos.PrediosEmpresaCuenca.InformePredial != null && datos.PrediosEmpresaCuenca.InformePredial.Detalle != null && datos.PrediosEmpresaCuenca.InformePredial.Detalle.Any() && datos.PrediosEmpresaCuenca.InformePredial.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosStoDomingo", datos.CachePrediosStoDomingo ? "SI" : "NO"),
                        new XElement("ExistenPrediosStoDomingo", (datos.PrediosStoDomingo != null && datos.PrediosStoDomingo.Detalle != null && datos.PrediosStoDomingo.Detalle.Any()) || (datos.PrediosEmpresaStoDomingo != null && datos.PrediosEmpresaStoDomingo.Detalle != null && datos.PrediosEmpresaStoDomingo.Detalle.Any()) ? "SI" : string.Empty),
                        new XElement("PrediosRepresentanteStoDomingo", datos.PrediosStoDomingo != null ? new XElement("Elementos",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Detalles", datos.PrediosStoDomingo.Detalle != null && datos.PrediosStoDomingo.Detalle.Any() ? datos.PrediosStoDomingo.Detalle.Where(x => x.Anio == DateTime.Now.Year.ToString()).OrderByDescending(x => x.Anio).Take(10).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", x.Clave),
                                new XElement("Impuesto", x.Impuesto),
                                new XElement("Anio", x.Anio),
                                new XElement("Emitido", x.Emitido.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Total", (x.Emitido + x.Interes + x.Recargo + x.Coactiva - x.Descuento).ToString("N", culture))
                            )) : string.Empty),
                            new XElement("PrediosRepresentanteStoDomingoMsj", datos.PrediosStoDomingo != null && datos.PrediosStoDomingo.Detalle != null && datos.PrediosStoDomingo.Detalle.Any() && datos.PrediosStoDomingo.Detalle.Count(x => x.Anio == DateTime.Now.Year.ToString()) > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                        new XElement("CachePrediosEmpresaStoDomingo", datos.CachePrediosEmpresaStoDomingo ? "SI" : "NO"),
                        new XElement("PrediosEmpresaStoDomingo", datos.PrediosEmpresaStoDomingo != null ? new XElement("Elementos",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Detalles", datos.PrediosEmpresaStoDomingo.Detalle != null && datos.PrediosEmpresaStoDomingo.Detalle.Any() ? datos.PrediosEmpresaStoDomingo.Detalle.Where(x => x.Anio == DateTime.Now.Year.ToString()).OrderByDescending(x => x.Anio).Take(10).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", x.Clave),
                                new XElement("Impuesto", x.Impuesto),
                                new XElement("Anio", x.Anio),
                                new XElement("Emitido", x.Emitido.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Total", (x.Emitido + x.Interes + x.Recargo + x.Coactiva - x.Descuento).ToString("N", culture))
                            )) : string.Empty),
                            new XElement("PrediosEmpresaStoDomingoMsj", datos.PrediosEmpresaStoDomingo != null && datos.PrediosEmpresaStoDomingo.Detalle != null && datos.PrediosEmpresaStoDomingo.Detalle.Any() && datos.PrediosEmpresaStoDomingo.Detalle.Count(x => x.Anio == DateTime.Now.Year.ToString()) > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                        new XElement("ExistenPrediosRuminahui", (datos.PrediosRuminahui != null && datos.PrediosRuminahui.Detalle != null && datos.PrediosRuminahui.Detalle.Any()) || (datos.PrediosEmpresaRuminahui != null && datos.PrediosEmpresaRuminahui.Detalle != null && datos.PrediosEmpresaRuminahui.Detalle.Any()) ? "SI" : string.Empty),
                        new XElement("CachePrediosRuminahui", datos.CachePrediosRuminahui ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteRuminahui", datos.PrediosRuminahui != null ? new XElement("Elementos",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Detalles", datos.PrediosRuminahui.Detalle != null && datos.PrediosRuminahui.Detalle.Any() ? datos.PrediosRuminahui.Detalle.Where(x => x.Anio == DateTime.Now.Year).OrderByDescending(x => x.Anio).Take(10).Select(x => new XElement("Detalle",
                                new XElement("NumCop", x.NumeroComprobante),
                                new XElement("ClaveCatastral", x.ClaveCatastral),
                                new XElement("RazonSocial", x.RazonSocial),
                                new XElement("Concepto", x.Concepto),
                                new XElement("Periodo", x.Anio),
                                new XElement("ValorPagar", !string.IsNullOrEmpty(x.ValorPagar) && decimal.TryParse(x.ValorPagar, out _) ? decimal.Parse(x.ValorPagar).ToString("N", culture) : string.Empty)
                            )) : string.Empty),
                            new XElement("PrediosRepresentanteRuminahuiMsj", datos.PrediosRuminahui != null && datos.PrediosRuminahui.Detalle != null && datos.PrediosRuminahui.Detalle.Any() && datos.PrediosRuminahui.Detalle.OrderByDescending(x => x.Anio).Count(x => x.Anio == DateTime.Now.Year) > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                        new XElement("CachePrediosEmpresaRuminahui", datos.CachePrediosEmpresaRuminahui ? "SI" : "NO"),
                        new XElement("PrediosEmpresaRuminahui", datos.PrediosEmpresaRuminahui != null ? new XElement("Elementos",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Detalles", datos.PrediosEmpresaRuminahui.Detalle != null && datos.PrediosEmpresaRuminahui.Detalle.Any() ? datos.PrediosEmpresaRuminahui.Detalle.Where(x => x.Anio == DateTime.Now.Year).OrderByDescending(x => x.Anio).Take(10).Select(x => new XElement("Detalle",
                                new XElement("NumCop", x.NumeroComprobante),
                                new XElement("ClaveCatastral", x.ClaveCatastral),
                                new XElement("RazonSocial", x.RazonSocial),
                                new XElement("Concepto", x.Concepto),
                                new XElement("Periodo", x.Anio),
                                new XElement("ValorPagar", !string.IsNullOrEmpty(x.ValorPagar) && decimal.TryParse(x.ValorPagar, out _) ? decimal.Parse(x.ValorPagar).ToString("N", culture) : string.Empty)
                            )) : string.Empty),
                            new XElement("PrediosEmpresaRuminahuiMsj", datos.PrediosEmpresaRuminahui != null && datos.PrediosEmpresaRuminahui.Detalle != null && datos.PrediosEmpresaRuminahui.Detalle.Any() && datos.PrediosEmpresaRuminahui.Detalle.OrderByDescending(x => x.Anio).Count(x => x.Anio == DateTime.Now.Year) > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                        new XElement("ExistenPrediosQuininde", detallePredioQuininde.Any() || detallePredioEmpresaQuininde.Any() ? "SI" : string.Empty),
                        new XElement("CachePrediosQuininde", datos.CachePrediosQuininde ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteQuininde", detallePredioQuininde.Any() ? new XElement("Elementos",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Detalles", detallePredioQuininde.Any() ? detallePredioQuininde.OrderByDescending(x => x.Estado).Select(x => new XElement("Detalle",
                                new XElement("DescripcionPredio", x.DescripcionPredio),
                                new XElement("Estado", x.Estado),
                                new XElement("SubTotalDescripcion", x.SubTotalDescripcion),
                                new XElement("InformacionPredio", x.InformacionPredio.Select(m => new XElement("Predio",
                                    new XElement("NumeroEmision", m.NumeroEmision),
                                    new XElement("Clave", m.Clave),
                                    new XElement("Periodo", m.Periodo),
                                    new XElement("Valor", !string.IsNullOrEmpty(m.Valor) && decimal.TryParse(m.Valor, out _) ? decimal.Parse(m.Valor).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Interes", !string.IsNullOrEmpty(m.Interes) && decimal.TryParse(m.Interes, out _) ? decimal.Parse(m.Interes).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Descuento", !string.IsNullOrEmpty(m.Descuento) && decimal.TryParse(m.Descuento, out _) ? decimal.Parse(m.Descuento).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Coactiva", !string.IsNullOrEmpty(m.Coactiva) && decimal.TryParse(m.Coactiva, out _) ? decimal.Parse(m.Coactiva).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Total", !string.IsNullOrEmpty(m.Total) && decimal.TryParse(m.Total, out _) ? decimal.Parse(m.Total).ToString("N", culture) : 0.ToString("N", culture))
                                ))),
                                new XElement("SubTotal", x.InformacionPredio.Sum(m => !string.IsNullOrEmpty(m.Total) && decimal.TryParse(m.Total, out _) ? decimal.Parse(m.Total) : 0).ToString("N", culture))
                            )).Take(10) : string.Empty),
                            new XElement("PrediosRepresentanteQuinindeMsj", detallePredioQuininde.Any() && detallePredioQuininde.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaQuininde", datos.CachePrediosEmpresaQuininde ? "SI" : "NO"),
                        new XElement("PrediosEmpresaQuininde", detallePredioEmpresaQuininde.Any() ? new XElement("Elementos",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Detalles", detallePredioEmpresaQuininde.Any() ? detallePredioEmpresaQuininde.OrderByDescending(x => x.Estado).Select(x => new XElement("Detalle",
                                new XElement("DescripcionPredio", x.DescripcionPredio),
                                new XElement("Estado", x.Estado),
                                new XElement("SubTotalDescripcion", x.SubTotalDescripcion),
                                new XElement("InformacionPredio", x.InformacionPredio.Select(m => new XElement("Predio",
                                    new XElement("NumeroEmision", m.NumeroEmision),
                                    new XElement("Clave", m.Clave),
                                    new XElement("Periodo", m.Periodo),
                                    new XElement("Valor", !string.IsNullOrEmpty(m.Valor) && decimal.TryParse(m.Valor, out _) ? decimal.Parse(m.Valor).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Interes", !string.IsNullOrEmpty(m.Interes) && decimal.TryParse(m.Interes, out _) ? decimal.Parse(m.Interes).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Descuento", !string.IsNullOrEmpty(m.Descuento) && decimal.TryParse(m.Descuento, out _) ? decimal.Parse(m.Descuento).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Coactiva", !string.IsNullOrEmpty(m.Coactiva) && decimal.TryParse(m.Coactiva, out _) ? decimal.Parse(m.Coactiva).ToString("N", culture) : 0.ToString("N", culture)),
                                    new XElement("Total", !string.IsNullOrEmpty(m.Total) && decimal.TryParse(m.Total, out _) ? decimal.Parse(m.Total).ToString("N", culture) : 0.ToString("N", culture))
                                ))),
                                new XElement("SubTotal", x.InformacionPredio.Sum(m => !string.IsNullOrEmpty(m.Total) && decimal.TryParse(m.Total, out _) ? decimal.Parse(m.Total) : 0).ToString("N", culture))
                            )).Take(10) : string.Empty),
                            new XElement("PrediosEmpresaQuinindeMsj", detallePredioEmpresaQuininde.Any() && detallePredioEmpresaQuininde.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistenPrediosLatacunga", existePredioLatacunga ? "SI" : string.Empty),
                        new XElement("CachePrediosLatacunga", datos.CachePrediosLatacunga ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteLatacunga", datos.PrediosLatacunga != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("PrediosValoresRepresentanteLatacunga", datos.PrediosLatacunga.ValoresPagos != null && datos.PrediosLatacunga.ValoresPagos.Any() ? new XElement("Elementos",
                                new XElement("ValoresPagos", datos.PrediosLatacunga.ValoresPagos.Take(10).Select(x => new XElement("Detalle",
                                    new XElement("Ciu", !string.IsNullOrEmpty(x.Ciu) ? x.Ciu : "N/A"),
                                    new XElement("Identificacion", !string.IsNullOrEmpty(x.Identificacion) ? x.Identificacion : "N/A"),
                                    new XElement("Rubro", !string.IsNullOrEmpty(x.Rubro) ? x.Rubro : "N/A"),
                                    new XElement("NumTitulos", x.NumTitulos.ToString("N", culture)),
                                    new XElement("VTitulos", x.VTitulos.ToString("N", culture)),
                                    new XElement("Interes", x.Interes.ToString("N", culture)),
                                    new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                    new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                    new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                    new XElement("TotalRubro", x.TotalRubro.ToString("N", culture))
                                ))),
                                new XElement("ValoresPagosSuma", datos.PrediosLatacunga.ValoresPagos.Sum(x => x.TotalRubro).ToString("N", culture)),
                                new XElement("PrediosValoresRepresentanteLatacungaMsj", datos.PrediosLatacunga.ValoresPagos.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty),
                            new XElement("PrediosDetalleRepresentanteLatacunga", datos.PrediosLatacunga.Detalle != null && datos.PrediosLatacunga.Detalle.Any() ? new XElement("Elementos",
                                new XElement("DetallesLatacunga", datos.PrediosLatacunga.Detalle.OrderByDescending(x => x.ClaveCatastral).Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("Zona", !string.IsNullOrEmpty(x.Zona) ? x.Zona : "N/A"),
                                    new XElement("ClaveAnterior", !string.IsNullOrEmpty(x.ClaveAnterior) ? x.ClaveAnterior : "N/A"),
                                    new XElement("Area", x.Area.ToString("N", culture)),
                                    new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                    new XElement("Perimetro", x.Perimetro.ToString("N", culture)),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("UsoPredio", !string.IsNullOrEmpty(x.UsoPredio) ? x.UsoPredio : "N/A")
                                //new XElement("CentroideX", x.CentroideX),
                                //new XElement("CentroideY", x.CentroideY),
                                //new XElement("Lote", x.Lote.ToString("N", culture)),
                                //new XElement("Frente", x.Frente.ToString("N", culture)),
                                //new XElement("Altura", x.Altura.ToString("N", culture)),
                                //new XElement("CosPb", x.CosPb.ToString("N", culture)),
                                //new XElement("CostT", x.CostT.ToString("N", culture)),
                                //new XElement("FormaOcup", !string.IsNullOrEmpty(x.FormaOcup) ? x.FormaOcup : "N/A"),
                                //new XElement("Codigo", !string.IsNullOrEmpty(x.Codigo) ? x.Codigo : "N/A"),
                                //new XElement("RetPost", x.RetPost.ToString("N", culture)),
                                //new XElement("Portal", x.Portal.ToString("N", culture)),
                                //new XElement("RetFront", x.RetFront.ToString("N", culture)),
                                //new XElement("RetLat1", x.RetLat1.ToString("N", culture)),
                                //new XElement("RetLat2", x.RetLat2.ToString("N", culture)),
                                //new XElement("Pit", x.Pit.ToString("N", culture)),
                                //new XElement("Perimetro", x.Perimetro.ToString("N", culture)),
                                //new XElement("AreaZonificacion", x.AreaZonificacion.ToString("N", culture)),
                                //new XElement("ZonifProp", !string.IsNullOrEmpty(x.ZonifProp) ? x.ZonifProp : "N/A"),
                                //new XElement("NumPisos", x.NumPisos.ToString("N", culture))
                                )).Take(5)),
                                new XElement("PrediosDetalleRepresentanteLatacungaMsj", datos.PrediosLatacunga.Detalle.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty),
                                new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                                new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty))
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaLatacunga", datos.CachePrediosEmpresaLatacunga ? "SI" : "NO"),
                        new XElement("PrediosEmpresaLatacunga", datos.PrediosEmpresaLatacunga != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("PrediosValoresEmpresaLatacunga", datos.PrediosEmpresaLatacunga.ValoresPagos != null && datos.PrediosEmpresaLatacunga.ValoresPagos.Any() ? new XElement("Elementos",
                            new XElement("ValoresPagos", datos.PrediosEmpresaLatacunga.ValoresPagos.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Ciu", !string.IsNullOrEmpty(x.Ciu) ? x.Ciu : "N/A"),
                                new XElement("Identificacion", !string.IsNullOrEmpty(x.Identificacion) ? x.Identificacion : "N/A"),
                                new XElement("Rubro", !string.IsNullOrEmpty(x.Rubro) ? x.Rubro : "N/A"),
                                new XElement("NumTitulos", x.NumTitulos.ToString("N", culture)),
                                new XElement("VTitulos", x.VTitulos.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("TotalRubro", x.TotalRubro.ToString("N", culture))
                            ))),
                            new XElement("ValoresPagosSuma", datos.PrediosEmpresaLatacunga.ValoresPagos.Sum(x => x.TotalRubro).ToString("N", culture)),
                            new XElement("PrediosValoresEmpresaLatacungaMsj", datos.PrediosEmpresaLatacunga.ValoresPagos.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                        new XElement("PrediosDetalleEmpresaLatacunga", datos.PrediosEmpresaLatacunga.Detalle != null && datos.PrediosEmpresaLatacunga.Detalle.Any() ? new XElement("Elementos",
                            new XElement("DetallesLatacunga", datos.PrediosEmpresaLatacunga.Detalle.OrderByDescending(x => x.ClaveCatastral).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                new XElement("Zona", !string.IsNullOrEmpty(x.Zona) ? x.Zona : "N/A"),
                                new XElement("ClaveAnterior", !string.IsNullOrEmpty(x.ClaveAnterior) ? x.ClaveAnterior : "N/A"),
                                new XElement("Area", x.Area.ToString("N", culture)),
                                new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                new XElement("Perimetro", x.Perimetro.ToString("N", culture)),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                new XElement("UsoPredio", !string.IsNullOrEmpty(x.UsoPredio) ? x.UsoPredio : "N/A")
                            //new XElement("CentroideX", x.CentroideX),
                            //new XElement("CentroideY", x.CentroideY),
                            //new XElement("Lote", x.Lote.ToString("N", culture)),
                            //new XElement("Frente", x.Frente.ToString("N", culture)),
                            //new XElement("Altura", x.Altura.ToString("N", culture)),
                            //new XElement("CosPb", x.CosPb.ToString("N", culture)),
                            //new XElement("CostT", x.CostT.ToString("N", culture)),
                            //new XElement("FormaOcup", !string.IsNullOrEmpty(x.FormaOcup) ? x.FormaOcup : "N/A"),
                            //new XElement("Codigo", !string.IsNullOrEmpty(x.Codigo) ? x.Codigo : "N/A"),
                            //new XElement("RetPost", x.RetPost.ToString("N", culture)),
                            //new XElement("Portal", x.Portal.ToString("N", culture)),
                            //new XElement("RetFront", x.RetFront.ToString("N", culture)),
                            //new XElement("RetLat1", x.RetLat1.ToString("N", culture)),
                            //new XElement("RetLat2", x.RetLat2.ToString("N", culture)),
                            //new XElement("Pit", x.Pit.ToString("N", culture)),
                            //new XElement("Perimetro", x.Perimetro.ToString("N", culture)),
                            //new XElement("AreaZonificacion", x.AreaZonificacion.ToString("N", culture)),
                            //new XElement("ZonifProp", !string.IsNullOrEmpty(x.ZonifProp) ? x.ZonifProp : "N/A"),
                            //new XElement("NumPisos", x.NumPisos.ToString("N", culture))
                            )).Take(5)),
                            new XElement("PrediosDetalleEmpresaLatacungaMsj", datos.PrediosEmpresaLatacunga.Detalle.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistenPrediosManta", existePredioManta ? "SI" : string.Empty),
                        new XElement("CachePrediosManta", datos.CachePrediosManta ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteManta", datos.PrediosManta != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("PrediosDetalleRepresentanteManta", datos.PrediosManta.DetallesPredio != null && datos.PrediosManta.DetallesPredio.Any() ? new XElement("Elementos",
                                new XElement("DetallePredios", datos.PrediosManta.DetallesPredio.Take(3).Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("Zona", !string.IsNullOrEmpty(x.Zona) ? x.Zona : "N/A"),
                                    new XElement("Parroquia", !string.IsNullOrEmpty(x.Parroquia) ? x.Parroquia : "N/A"),
                                    new XElement("Barrio", !string.IsNullOrEmpty(x.Barrio) ? x.Barrio : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("DeudasAniosAnteriores", x.DeudasAniosAnteriores.ToString("N", culture)),
                                    new XElement("DeudaActual", x.DeudaActual.ToString("N", culture)),
                                    new XElement("DeudaTotal", x.DeudaTotal.ToString("N", culture)),
                                    new XElement("DetalleAnios", x.DatosAnios != null && x.DatosAnios.Any() ?
                                        x.DatosAnios.OrderByDescending(x => x.Anio).Take(5).Select(x => new XElement("Valores",
                                            new XElement("Anios", x.Anio),
                                            new XElement("Valor", x.Valor.ToString("N", culture)),
                                            new XElement("ValorPagado", x.ValorPagado.ToString("N", culture)),
                                            new XElement("Deuda", x.Deuda.ToString("N", culture)),
                                            new XElement("Estado", !string.IsNullOrEmpty(x.Estado) ? x.Estado : "N/A")
                                        )) : string.Empty)
                                ))),
                                new XElement("PrediosDetalleRepresentanteMantaMsj", datos.PrediosManta.DetallesPredio.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty),
                            new XElement("DetalleDeudas", datos.PrediosManta.DeudasPredios != null && datos.PrediosManta.DeudasPredios.Any() ? new XElement("Elementos",
                                new XElement("DeudasPredios", datos.PrediosManta.DeudasPredios.Take(3).Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("Estado", !string.IsNullOrEmpty(x.Estado) ? x.Estado : "N/A"),
                                    new XElement("Valor", x.Valor.ToString("N", culture))))),
                                new XElement("DeudasPrediosTotal", datos.PrediosManta.DeudasPredios.Take(3).Sum(x => x.Valor).ToString("N", culture)),
                                new XElement("DeudasPrediosMsj", datos.PrediosManta.DeudasPredios.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty),
                            new XElement("DetalleDeudasEPAM", datos.PrediosManta.DeudasEPAM != null && datos.PrediosManta.DeudasEPAM.Any() ? new XElement("Elementos",
                                new XElement("DeudasPredios", datos.PrediosManta.DeudasEPAM.Take(3).Select(x => new XElement("Detalle",
                                    new XElement("Identificacion", !string.IsNullOrEmpty(x.Identificacion) ? x.Identificacion : "N/A"),
                                    new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                                    new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle) ? x.Detalle : "N/A"),
                                    new XElement("Deuda", x.Deuda.ToString("N", culture))
                                ))),
                                new XElement("DetalleDeudasEPAMTotal", datos.PrediosManta.DeudasEPAM.Take(3).Sum(x => x.Deuda).ToString("N", culture)),
                                new XElement("DetalleDeudasEPAMMsj", datos.PrediosManta.DeudasEPAM.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaManta", datos.CachePrediosEmpresaManta ? "SI" : "NO"),
                         new XElement("PrediosEmpresaManta", datos.PrediosEmpresaManta != null ? new XElement("Predios",
                             new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("PrediosDetalleEmpresaManta", datos.PrediosEmpresaManta.DetallesPredio != null && datos.PrediosEmpresaManta.DetallesPredio.Any() ? new XElement("Elementos",
                                new XElement("DetallePredios", datos.PrediosEmpresaManta.DetallesPredio.Take(3).Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("Zona", !string.IsNullOrEmpty(x.Zona) ? x.Zona : "N/A"),
                                    new XElement("Parroquia", !string.IsNullOrEmpty(x.Parroquia) ? x.Parroquia : "N/A"),
                                    new XElement("Barrio", !string.IsNullOrEmpty(x.Barrio) ? x.Barrio : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("DeudasAniosAnteriores", x.DeudasAniosAnteriores.ToString("N", culture)),
                                    new XElement("DeudaActual", x.DeudaActual.ToString("N", culture)),
                                    new XElement("DeudaTotal", x.DeudaTotal.ToString("N", culture)),
                                    new XElement("DetalleAnios", x.DatosAnios != null && x.DatosAnios.Any() ?
                                        x.DatosAnios.OrderByDescending(x => x.Anio).Take(5).Select(x => new XElement("Valores",
                                            new XElement("Anios", x.Anio),
                                            new XElement("Valor", x.Valor.ToString("N", culture)),
                                            new XElement("ValorPagado", x.ValorPagado.ToString("N", culture)),
                                            new XElement("Deuda", x.Deuda.ToString("N", culture)),
                                            new XElement("Estado", !string.IsNullOrEmpty(x.Estado) ? x.Estado : "N/A")
                                        )) : string.Empty)
                                ))),
                                new XElement("PrediosDetalleEmpresaMantaMsj", datos.PrediosEmpresaManta.DetallesPredio.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty),
                            new XElement("DetalleDeudas", datos.PrediosEmpresaManta.DeudasPredios != null && datos.PrediosEmpresaManta.DeudasPredios.Any() ? new XElement("Elementos",
                                new XElement("DeudasPredios", datos.PrediosEmpresaManta.DeudasPredios.Take(3).Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("Estado", !string.IsNullOrEmpty(x.Estado) ? x.Estado : "N/A"),
                                    new XElement("Valor", x.Valor.ToString("N", culture))))),
                                new XElement("DeudasPrediosTotal", datos.PrediosEmpresaManta.DeudasPredios.Take(3).Sum(x => x.Valor).ToString("N", culture)),
                                new XElement("DeudasPrediosMsj", datos.PrediosEmpresaManta.DeudasPredios.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty),
                            new XElement("DetalleDeudasEPAM", datos.PrediosEmpresaManta.DeudasEPAM != null && datos.PrediosEmpresaManta.DeudasEPAM.Any() ? new XElement("Elementos",
                                new XElement("DeudasPredios", datos.PrediosEmpresaManta.DeudasEPAM.Take(3).Select(x => new XElement("Detalle",
                                    new XElement("Identificacion", !string.IsNullOrEmpty(x.Identificacion) ? x.Identificacion : "N/A"),
                                    new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                                    new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle) ? x.Detalle : "N/A"),
                                    new XElement("Deuda", x.Deuda.ToString("N", culture))
                                ))),
                                new XElement("DetalleDeudasEPAMTotal", datos.PrediosEmpresaManta.DeudasEPAM.Take(3).Sum(x => x.Deuda).ToString("N", culture)),
                                new XElement("DetalleDeudasEPAMMsj", datos.PrediosEmpresaManta.DeudasEPAM.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                                ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistenPrediosAmbato", datos.PrediosAmbato != null || datos.PrediosEmpresaAmbato != null ? "SI" : string.Empty),
                        new XElement("CachePrediosAmbato", datos.CachePrediosAmbato ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteAmbato", datos.PrediosAmbato != null && datos.PrediosAmbato.Detalle != null && datos.PrediosAmbato.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosAmbato.Detalle.Take(10).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                new XElement("TipoPredio", !string.IsNullOrEmpty(x.TipoPredio) ? x.TipoPredio : "N/A"),
                                new XElement("Parroquia", !string.IsNullOrEmpty(x.Parroquia) ? x.Parroquia : "N/A"),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                new XElement("AreaTerreno", x.AreaTerreno.ToString("N", culture)),
                                new XElement("AvaluoTerreno", x.AvaluoTerreno.ToString("N", culture)),
                                new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                new XElement("AvaluoConstruccion", x.AvaluoConstruccion.ToString("N", culture)),
                                new XElement("AvaluoTotal", x.AvaluoTotal.ToString("N", culture))
                            ))),
                            new XElement("TotalAvaluoTerreno", datos.PrediosAmbato.Detalle.Take(10).Sum(x => x.AvaluoTerreno).ToString("N", culture)),
                            new XElement("TotalAvaluoConstruccion", datos.PrediosAmbato.Detalle.Take(10).Sum(x => x.AvaluoConstruccion).ToString("N", culture)),
                            new XElement("TotalAvaluo", datos.PrediosAmbato.Detalle.Take(10).Sum(x => x.AvaluoTotal).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosAmbato.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaAmbato", datos.CachePrediosEmpresaAmbato ? "SI" : "NO"),
                         new XElement("PrediosEmpresaAmbato", datos.PrediosEmpresaAmbato != null && datos.PrediosEmpresaAmbato.Detalle != null && datos.PrediosEmpresaAmbato.Detalle.Any() ? new XElement("Predios",
                           new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaAmbato.Detalle.Take(10).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                new XElement("TipoPredio", !string.IsNullOrEmpty(x.TipoPredio) ? x.TipoPredio : "N/A"),
                                new XElement("Parroquia", !string.IsNullOrEmpty(x.Parroquia) ? x.Parroquia : "N/A"),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                new XElement("AreaTerreno", x.AreaTerreno.ToString("N", culture)),
                                new XElement("AvaluoTerreno", x.AvaluoTerreno.ToString("N", culture)),
                                new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                new XElement("AvaluoConstruccion", x.AvaluoConstruccion.ToString("N", culture)),
                                new XElement("AvaluoTotal", x.AvaluoTotal.ToString("N", culture))
                            ))),
                            new XElement("TotalAvaluoTerreno", datos.PrediosEmpresaAmbato.Detalle.Take(10).Sum(x => x.AvaluoTerreno).ToString("N", culture)),
                            new XElement("TotalAvaluoConstruccion", datos.PrediosEmpresaAmbato.Detalle.Take(10).Sum(x => x.AvaluoConstruccion).ToString("N", culture)),
                            new XElement("TotalAvaluo", datos.PrediosEmpresaAmbato.Detalle.Take(10).Sum(x => x.AvaluoTotal).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaAmbato.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistenPrediosIbarra", existePredioIbarra ? "SI" : string.Empty),
                        new XElement("CachePrediosIbarra", datos.CachePrediosIbarra ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteIbarra", datos.PrediosIbarra != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallesPredios", datos.PrediosIbarra.Detalle != null && datos.PrediosIbarra.Detalle.Any() ? new XElement("Elementos",
                                new XElement("PrediosIbarra", datos.PrediosIbarra.Detalle.Take(5).Select(x => new XElement("Predio",
                                    new XElement("CodigoCatastral", !string.IsNullOrEmpty(x.CodigoCatastral) ? x.CodigoCatastral : "N/A"),
                                    new XElement("Tipo", !string.IsNullOrEmpty(x.Tipo) ? x.Tipo : "N/A"),
                                    new XElement("Dominio", !string.IsNullOrEmpty(x.Dominio) ? x.Dominio : "N/A"),
                                    new XElement("Barrio", !string.IsNullOrEmpty(x.Barrio) ? x.Barrio : "N/A"),
                                    new XElement("Calle", $"{(!string.IsNullOrEmpty(x.Calle) ? x.Calle : "N/A")}. {(!string.IsNullOrEmpty(x.Numero) ? x.Numero : string.Empty)}"),
                                    new XElement("AreaTotal", x.AreaTotal.ToString("N", culture)),
                                    new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                    new XElement("ValorComercial", x.ValorComercial.ToString("N", culture))
                                ))),
                                new XElement("DetallesPrediosMsj", datos.PrediosIbarra.Detalle.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty),
                                new XElement("TotalValorTerreno", datos.PrediosIbarra.Detalle.Take(5).Sum(x => x.ValorTerreno).ToString("N", culture)),
                                new XElement("TotalValorEdificacion", datos.PrediosIbarra.Detalle.Take(5).Sum(x => x.ValorEdificacion).ToString("N", culture)),
                                new XElement("TotalValorComercial", datos.PrediosIbarra.Detalle.Take(5).Sum(x => x.ValorComercial).ToString("N", culture))
                            ) : string.Empty),
                            new XElement("ValoresPredios", datos.PrediosIbarra.Impuestos != null && datos.PrediosIbarra.Impuestos.Any() ? new XElement("Detalle",
                                new XElement("ValoresIbarra", datos.PrediosIbarra.Impuestos.Take(5).Select(x => new XElement("Valor",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("FechaIngreso", x.FechaIngreso != default ? x.FechaIngreso.ToString(("dd/MM/yyyy")) : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString(("dd/MM/yyyy")) : "N/A"),
                                    new XElement("Comentario", !string.IsNullOrEmpty(x.Comentario) ? x.Comentario : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("Subtotal", x.Subtotal.ToString("N", culture))
                                ))),
                                new XElement("ValoresIbarraMsj", datos.PrediosIbarra.Impuestos.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty),
                                new XElement("TotalSubtotal", datos.PrediosIbarra.Impuestos.Take(5).Sum(x => x.Subtotal).ToString("N", culture))
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaIbarra", datos.CachePrediosEmpresaIbarra ? "SI" : "NO"),
                        new XElement("PrediosEmpresaIbarra", datos.PrediosEmpresaIbarra != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallesPredios", datos.PrediosEmpresaIbarra.Detalle != null && datos.PrediosEmpresaIbarra.Detalle.Any() ? new XElement("Elementos",
                                new XElement("PrediosIbarra", datos.PrediosEmpresaIbarra.Detalle.Take(5).Select(x => new XElement("Predio",
                                    new XElement("CodigoCatastral", !string.IsNullOrEmpty(x.CodigoCatastral) ? x.CodigoCatastral : "N/A"),
                                    new XElement("Tipo", !string.IsNullOrEmpty(x.Tipo) ? x.Tipo : "N/A"),
                                    new XElement("Dominio", !string.IsNullOrEmpty(x.Dominio) ? x.Dominio : "N/A"),
                                    new XElement("Barrio", !string.IsNullOrEmpty(x.Barrio) ? x.Barrio : "N/A"),
                                    new XElement("Calle", $"{(!string.IsNullOrEmpty(x.Calle) ? x.Calle : "N/A")}. {(!string.IsNullOrEmpty(x.Numero) ? x.Numero : string.Empty)}"),
                                    new XElement("AreaTotal", x.AreaTotal.ToString("N", culture)),
                                    new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                    new XElement("ValorComercial", x.ValorComercial.ToString("N", culture))
                                ))),
                                new XElement("DetallesPrediosMsj", datos.PrediosEmpresaIbarra.Detalle.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty),
                                new XElement("TotalValorTerreno", datos.PrediosEmpresaIbarra.Detalle.Take(5).Sum(x => x.ValorTerreno).ToString("N", culture)),
                                new XElement("TotalValorEdificacion", datos.PrediosEmpresaIbarra.Detalle.Take(5).Sum(x => x.ValorEdificacion).ToString("N", culture)),
                                new XElement("TotalValorComercial", datos.PrediosEmpresaIbarra.Detalle.Take(5).Sum(x => x.ValorComercial).ToString("N", culture))
                            ) : string.Empty),
                            new XElement("ValoresPredios", datos.PrediosEmpresaIbarra.Impuestos != null && datos.PrediosEmpresaIbarra.Impuestos.Any() ? new XElement("Detalle",
                                new XElement("ValoresIbarra", datos.PrediosEmpresaIbarra.Impuestos.Take(5).Select(x => new XElement("Valor",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral) ? x.ClaveCatastral : "N/A"),
                                    new XElement("FechaIngreso", x.FechaIngreso != default ? x.FechaIngreso.ToString(("dd/MM/yyyy")) : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString(("dd/MM/yyyy")) : "N/A"),
                                    new XElement("Comentario", !string.IsNullOrEmpty(x.Comentario) ? x.Comentario : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                                    new XElement("Subtotal", x.Subtotal.ToString("N", culture))
                                ))),
                                new XElement("ValoresIbarraMsj", datos.PrediosEmpresaIbarra.Impuestos.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty),
                                new XElement("TotalSubtotal", datos.PrediosEmpresaIbarra.Impuestos.Take(5).Sum(x => x.Subtotal).ToString("N", culture))
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioSanCristobal", existePredioSanCristobal ? "SI" : string.Empty),
                        new XElement("CachePrediosSanCristobal", datos.CachePrediosSanCristobal ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteSanCristobal", datos.PrediosSanCristobal != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                                new XElement("DetallePredios", datos.PrediosSanCristobal.DetallesPredio != null && datos.PrediosSanCristobal.DetallesPredio.Any() ? new XElement("Elementos",
                                    new XElement("PrediosSanCristobal", datos.PrediosSanCristobal.DetallesPredio.Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                    new XElement("Identificador", !string.IsNullOrEmpty(x.Identificador?.Trim()) ? x.Identificador.Trim() : "N/A"),
                                    new XElement("ValorEmitido", x.ValorEmitido.ToString("N", culture)),
                                    new XElement("Iva", x.Iva.ToString("N", culture)),
                                    new XElement("Interes", x.Interes.ToString("N", culture)),
                                    new XElement("Descuentos", x.Descuentos.ToString("N", culture)),
                                    new XElement("RecargosMultas", x.RecargosMultas.ToString("N", culture)),
                                    new XElement("Abono", x.Abono.ToString("N", culture)),
                                    new XElement("Pagar", x.Pagar.ToString("N", culture))
                                )).Take(5)),
                            new XElement("TotalPagar", datos.PrediosSanCristobal.DetallesPredio.Take(5).Sum(x => x.Pagar).ToString("N", culture)),
                            new XElement("DetallePrediosMsj", datos.PrediosSanCristobal.DetallesPredio.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaSanCristobal", datos.CachePrediosEmpresaSanCristobal ? "SI" : "NO"),
                        new XElement("PrediosEmpresaSanCristobal", datos.PrediosEmpresaSanCristobal != null ? new XElement("Predios",
                             new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                                new XElement("DetallePredios", datos.PrediosEmpresaSanCristobal.DetallesPredio != null && datos.PrediosEmpresaSanCristobal.DetallesPredio.Any() ? new XElement("Elementos",
                                    new XElement("PrediosSanCristobal", datos.PrediosEmpresaSanCristobal.DetallesPredio.Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                    new XElement("Identificador", !string.IsNullOrEmpty(x.Identificador?.Trim()) ? x.Identificador.Trim() : "N/A"),
                                    new XElement("ValorEmitido", x.ValorEmitido.ToString("N", culture)),
                                    new XElement("Iva", x.Iva.ToString("N", culture)),
                                    new XElement("Interes", x.Interes.ToString("N", culture)),
                                    new XElement("Descuentos", x.Descuentos.ToString("N", culture)),
                                    new XElement("RecargosMultas", x.RecargosMultas.ToString("N", culture)),
                                    new XElement("Abono", x.Abono.ToString("N", culture)),
                                    new XElement("Pagar", x.Pagar.ToString("N", culture))
                                )).Take(5)),
                            new XElement("TotalPagar", datos.PrediosEmpresaSanCristobal.DetallesPredio.Take(5).Sum(x => x.Pagar).ToString("N", culture)),
                            new XElement("DetallePrediosMsj", datos.PrediosEmpresaSanCristobal.DetallesPredio.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioDuran", existePredioDuran ? "SI" : string.Empty),
                        new XElement("CachePrediosDuran", datos.CachePrediosDuran ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteDuran", datos.PrediosDuran != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredios", datos.PrediosDuran.DetallesTramitesPredio != null && datos.PrediosDuran.DetallesTramitesPredio.Any() ? new XElement("Elementos",
                                new XElement("PrediosDuran", datos.PrediosDuran.DetallesTramitesPredio.Select(x => new XElement("Detalle",
                                    new XElement("Suministro", !string.IsNullOrEmpty(x.Secuencia?.Trim()) ? x.Secuencia.Trim() : "N/A"),
                                    new XElement("Fecha", x.Fecha != default ? x.Fecha.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("TipoTramite", !string.IsNullOrEmpty(x.TipoTramite?.Trim()) ? x.TipoTramite.Trim() : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                    new XElement("Predio", !string.IsNullOrEmpty(x.Predio?.Trim()) ? x.Predio.Trim() : "N/A"),
                                    new XElement("Pasos", x.Pasos != null && x.Pasos.Any() ? x.Pasos.Select(x => new XElement("Detalle",
                                        new XElement("Secuencia", !string.IsNullOrEmpty(x.Secuencia?.Trim()) ? x.Secuencia.Trim() : "N/A"),
                                        new XElement("Observacion", !string.IsNullOrEmpty(x.Observacion?.Trim()) ? x.Observacion.Trim() : "N/A"),
                                        new XElement("Paso", !string.IsNullOrEmpty(x.Paso?.Trim()) ? x.Paso.Trim() : "N/A"),
                                        new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A")
                                    )).TakeLast(1) : string.Empty)
                                )).Take(3)),
                                new XElement("DetallePrediosMsj", datos.PrediosDuran.DetallesTramitesPredio.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaDuran", datos.CachePrediosEmpresaDuran ? "SI" : "NO"),
                        new XElement("PrediosEmpresaDuran", datos.PrediosEmpresaDuran != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredios", datos.PrediosEmpresaDuran.DetallesTramitesPredio != null && datos.PrediosEmpresaDuran.DetallesTramitesPredio.Any() ? new XElement("Elementos",
                                new XElement("PrediosDuran", datos.PrediosEmpresaDuran.DetallesTramitesPredio.Select(x => new XElement("Detalle",
                                    new XElement("Suministro", !string.IsNullOrEmpty(x.Secuencia?.Trim()) ? x.Secuencia.Trim() : "N/A"),
                                    new XElement("Fecha", x.Fecha != default ? x.Fecha.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("TipoTramite", !string.IsNullOrEmpty(x.TipoTramite?.Trim()) ? x.TipoTramite.Trim() : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                    new XElement("Predio", !string.IsNullOrEmpty(x.Predio?.Trim()) ? x.Predio.Trim() : "N/A"),
                                    new XElement("Pasos", x.Pasos != null && x.Pasos.Any() ? x.Pasos.Select(x => new XElement("Detalle",
                                        new XElement("Secuencia", !string.IsNullOrEmpty(x.Secuencia?.Trim()) ? x.Secuencia.Trim() : "N/A"),
                                        new XElement("Observacion", !string.IsNullOrEmpty(x.Observacion?.Trim()) ? x.Observacion.Trim() : "N/A"),
                                        new XElement("Paso", !string.IsNullOrEmpty(x.Paso?.Trim()) ? x.Paso.Trim() : "N/A"),
                                        new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A")
                                    )).TakeLast(1) : string.Empty)
                                )).Take(3)),
                                new XElement("DetallePrediosMsj", datos.PrediosEmpresaDuran.DetallesTramitesPredio.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioLagoAgrio", existePredioLagoAgrio ? "SI" : string.Empty),
                        new XElement("CachePrediosLagoAgrio", datos.CachePrediosLagoAgrio ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteLagoAgrio", datos.PrediosLagoAgrio != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DatosResumen", datos.PrediosLagoAgrio.DatosDeudasResumenLagoAgrio != null ? new XElement("Datos",
                                new XElement("DeudaVencida", datos.PrediosLagoAgrio.DatosDeudasResumenLagoAgrio.DeudaVencida.ToString("N", culture)),
                                new XElement("TotalSinIva", datos.PrediosLagoAgrio.DatosDeudasResumenLagoAgrio.TotalSinIva.ToString("N", culture)),
                                new XElement("Iva", datos.PrediosLagoAgrio.DatosDeudasResumenLagoAgrio.Iva.ToString("N", culture)),
                                new XElement("TotalConIva", datos.PrediosLagoAgrio.DatosDeudasResumenLagoAgrio.TotalConIva.ToString("N", culture))
                            ) : string.Empty),
                            new XElement("DetallePredios", datos.PrediosLagoAgrio.DetallesDeudasPredio != null && datos.PrediosLagoAgrio.DetallesDeudasPredio.Any() ? new XElement("Elementos",
                                new XElement("PrediosLagoAgrio", datos.PrediosLagoAgrio.DetallesDeudasPredio.Select(x => new XElement("Detalle",
                                    new XElement("Codigo", !string.IsNullOrEmpty(x.Codigo?.Trim()) ? x.Codigo.Trim() : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                    new XElement("Mora", x.Mora.ToString("N", culture)),
                                    new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                    new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                    new XElement("Iva", x.Iva.ToString("N", culture)),
                                    new XElement("Saldo", x.Saldo.ToString("N", culture)),
                                    new XElement("Monto", x.Monto.ToString("N", culture))
                                )).Take(3)),
                                new XElement("SumaMonto", datos.PrediosLagoAgrio.DetallesDeudasPredio.Take(3).Sum(x => x.Monto).ToString("N", culture)),
                                new XElement("DetallePrediosMsj", datos.PrediosLagoAgrio.DetallesDeudasPredio.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            )
                            : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaLagoAgrio", datos.CachePrediosEmpresaLagoAgrio ? "SI" : "NO"),
                        new XElement("PrediosEmpresaLagoAgrio", datos.PrediosEmpresaLagoAgrio != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DatosResumen", datos.PrediosEmpresaLagoAgrio.DatosDeudasResumenLagoAgrio != null ? new XElement("Datos",
                                new XElement("DeudaVencida", datos.PrediosEmpresaLagoAgrio.DatosDeudasResumenLagoAgrio.DeudaVencida.ToString("N", culture)),
                                new XElement("TotalSinIva", datos.PrediosEmpresaLagoAgrio.DatosDeudasResumenLagoAgrio.TotalSinIva.ToString("N", culture)),
                                new XElement("Iva", datos.PrediosEmpresaLagoAgrio.DatosDeudasResumenLagoAgrio.Iva.ToString("N", culture)),
                                new XElement("TotalConIva", datos.PrediosEmpresaLagoAgrio.DatosDeudasResumenLagoAgrio.TotalConIva.ToString("N", culture))
                            ) : string.Empty),
                            new XElement("DetallePredios", datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio != null && datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio.Any() ? new XElement("Elementos",
                                new XElement("PrediosLagoAgrio", datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio.Select(x => new XElement("Detalle",
                                    new XElement("Codigo", !string.IsNullOrEmpty(x.Codigo?.Trim()) ? x.Codigo.Trim() : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                    new XElement("Mora", x.Mora.ToString("N", culture)),
                                    new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                    new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                    new XElement("Iva", x.Iva.ToString("N", culture)),
                                    new XElement("Saldo", x.Saldo.ToString("N", culture)),
                                    new XElement("Monto", x.Monto.ToString("N", culture))
                                )).Take(3)),
                                new XElement("SumaMonto", datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio.Take(3).Sum(x => x.Monto).ToString("N", culture)),
                                new XElement("DetallePrediosMsj", datos.PrediosEmpresaLagoAgrio.DetallesDeudasPredio.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            )
                            : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioSantaRosa", existePredioSantaRosa ? "SI" : string.Empty),
                        new XElement("CachePrediosSantaRosa", datos.CachePrediosSantaRosa ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteSantaRosa", datos.PrediosSantaRosa != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("SinDeudas", datos.PrediosSantaRosa.SinDeudas && datos.PrediosSantaRosa.DatosAnios != null && !datos.PrediosSantaRosa.DatosAnios.Any() ? "NO PRESENTA DEUDAS PREDIALES EN SANTA ROSA" : string.Empty),
                            new XElement("DatosResumen", datos.PrediosSantaRosa.DatosAnios != null && datos.PrediosSantaRosa.DatosAnios.Any() ? new XElement("Elementos",
                                new XElement("PrediosSantaRosa", datos.PrediosSantaRosa.DatosAnios.Select(x => new XElement("Detalle",
                                    new XElement("DatosDetalle", x.Detalle != null && x.Detalle.Any() ? x.Detalle.Select(x => new XElement("PredioDetalle",
                                            new XElement("CodigoPredial", !string.IsNullOrEmpty(x.CodigoPredial?.Trim()) ? x.CodigoPredial.Trim() : "N/A"),
                                            new XElement("Parroquia", !string.IsNullOrEmpty(x.Parroquia?.Trim()) ? x.Parroquia.Trim() : "N/A"),
                                            new XElement("NombrePropiedad", !string.IsNullOrEmpty(x.NombrePropiedad?.Trim()) ? x.NombrePropiedad.Trim() : "N/A"),
                                            new XElement("Sitio", !string.IsNullOrEmpty(x.Sitio?.Trim()) ? x.Sitio.Trim() : "N/A"),
                                            new XElement("AvaluoSolar", x.AvaluoSolar.ToString("N", culture)),
                                            new XElement("AvaluoConstruccion", x.AvaluoConstruccion.ToString("N", culture)),
                                            new XElement("AvaluoMunicipal", x.AvaluoMunicipal.ToString("N", culture)),
                                            new XElement("TotalPagar", x.TotalPagar.ToString("N", culture))
                                        )).Take(3)
                                     : string.Empty),
                                    new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                    new XElement("PredioRustico", x.PredioRustico.ToString("N", culture)),
                                    new XElement("PredioUrbano", x.PredioUrbano.ToString("N", culture)),
                                    new XElement("Mejoras", x.Mejoras.ToString("N", culture)),
                                    new XElement("Patente", x.Patente.ToString("N", culture)),
                                    new XElement("Otros", x.Otros.ToString("N", culture)),
                                    new XElement("Descuentos", x.Descuentos.ToString("N", culture)),
                                    new XElement("Abonos", x.Abonos.ToString("N", culture)),
                                    new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                    new XElement("Mora", x.Mora.ToString("N", culture)),
                                    new XElement("Total", x.Total.ToString("N", culture))
                                )).Take(3)),
                                new XElement("DetallePrediosMsj", datos.PrediosSantaRosa.DatosAnios.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaSantaRosa", datos.CachePrediosEmpresaSantaRosa ? "SI" : "NO"),
                        new XElement("PrediosEmpresaSantaRosa", datos.PrediosEmpresaSantaRosa != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("SinDeudas", datos.PrediosEmpresaSantaRosa.SinDeudas && datos.PrediosEmpresaSantaRosa.DatosAnios != null && !datos.PrediosEmpresaSantaRosa.DatosAnios.Any() ? "NO PRESENTA DEUDAS PREDIALES EN SANTA ROSA" : string.Empty),
                            new XElement("DatosResumen", datos.PrediosEmpresaSantaRosa.DatosAnios != null && datos.PrediosEmpresaSantaRosa.DatosAnios.Any() ? new XElement("Elementos",
                                new XElement("PrediosSantaRosa", datos.PrediosEmpresaSantaRosa.DatosAnios.Select(x => new XElement("Detalle",
                                    new XElement("DatosDetalle", x.Detalle != null && x.Detalle.Any() ? x.Detalle.Select(x => new XElement("PredioDetalle",
                                            new XElement("CodigoPredial", !string.IsNullOrEmpty(x.CodigoPredial?.Trim()) ? x.CodigoPredial.Trim() : "N/A"),
                                            new XElement("Parroquia", !string.IsNullOrEmpty(x.Parroquia?.Trim()) ? x.Parroquia.Trim() : "N/A"),
                                            new XElement("NombrePropiedad", !string.IsNullOrEmpty(x.NombrePropiedad?.Trim()) ? x.NombrePropiedad.Trim() : "N/A"),
                                            new XElement("Sitio", !string.IsNullOrEmpty(x.Sitio?.Trim()) ? x.Sitio.Trim() : "N/A"),
                                            new XElement("AvaluoSolar", x.AvaluoSolar.ToString("N", culture)),
                                            new XElement("AvaluoConstruccion", x.AvaluoConstruccion.ToString("N", culture)),
                                            new XElement("AvaluoMunicipal", x.AvaluoMunicipal.ToString("N", culture)),
                                            new XElement("TotalPagar", x.TotalPagar.ToString("N", culture))
                                        )).Take(3)
                                     : string.Empty),
                                    new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                    new XElement("PredioRustico", x.PredioRustico.ToString("N", culture)),
                                    new XElement("PredioUrbano", x.PredioUrbano.ToString("N", culture)),
                                    new XElement("Mejoras", x.Mejoras.ToString("N", culture)),
                                    new XElement("Patente", x.Patente.ToString("N", culture)),
                                    new XElement("Otros", x.Otros.ToString("N", culture)),
                                    new XElement("Descuentos", x.Descuentos.ToString("N", culture)),
                                    new XElement("Abonos", x.Abonos.ToString("N", culture)),
                                    new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                    new XElement("Mora", x.Mora.ToString("N", culture)),
                                    new XElement("Total", x.Total.ToString("N", culture))
                                )).Take(3)),
                                new XElement("DetallePrediosMsj", datos.PrediosEmpresaSantaRosa.DatosAnios.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioSucua", existePredioSucua ? "SI" : string.Empty),
                        new XElement("CachePrediosSucua", datos.CachePrediosSucua ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteSucua", datos.PrediosSucua != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DatosResumen", datos.PrediosSucua.Detalle != null && datos.PrediosSucua.Detalle.Any() ? new XElement("Elementos",
                                new XElement("PrediosSucua", datos.PrediosSucua.Detalle.Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                    new XElement("Nombres", !string.IsNullOrEmpty(x.Nombres?.Trim()) ? x.Nombres.Trim() : string.Empty),
                                    new XElement("Apellidos", !string.IsNullOrEmpty(x.Apellidos?.Trim()) ? x.Apellidos.Trim() : string.Empty),
                                    new XElement("Tributo", !string.IsNullOrEmpty(x.Tributo?.Trim()) ? x.Tributo.Trim() : "N/A"),
                                    new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A"),
                                    new XElement("Valor", x.Valor.ToString("N", culture)),
                                    new XElement("Iva", x.Iva.ToString("N", culture)),
                                    new XElement("Total", (x.Valor + x.Iva).ToString("N", culture))
                                )).Take(5)),
                                new XElement("TotalPredios", datos.PrediosSucua.Detalle.Take(5).Sum(x => x.Valor + x.Iva).ToString("N", culture)),
                                new XElement("DetallePrediosMsj", datos.PrediosSucua.Detalle.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaSucua", datos.CachePrediosEmpresaSucua ? "SI" : "NO"),
                        new XElement("PrediosEmpresaSucua", datos.PrediosEmpresaSucua != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DatosResumen", datos.PrediosEmpresaSucua.Detalle != null && datos.PrediosEmpresaSucua.Detalle.Any() ? new XElement("Elementos",
                                new XElement("PrediosSucua", datos.PrediosEmpresaSucua.Detalle.Select(x => new XElement("Detalle",
                                    new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                    new XElement("Nombres", !string.IsNullOrEmpty(x.Nombres?.Trim()) ? x.Nombres.Trim() : string.Empty),
                                    new XElement("Apellidos", !string.IsNullOrEmpty(x.Apellidos?.Trim()) ? x.Apellidos.Trim() : string.Empty),
                                    new XElement("Tributo", !string.IsNullOrEmpty(x.Tributo?.Trim()) ? x.Tributo.Trim() : "N/A"),
                                    new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A"),
                                    new XElement("Valor", x.Valor.ToString("N", culture)),
                                    new XElement("Iva", x.Iva.ToString("N", culture)),
                                    new XElement("Total", (x.Valor + x.Iva).ToString("N", culture))
                                )).Take(5)),
                                new XElement("TotalPredios", datos.PrediosEmpresaSucua.Detalle.Take(5).Sum(x => x.Valor + x.Iva).ToString("N", culture)),
                                new XElement("DetallePrediosMsj", datos.PrediosEmpresaSucua.Detalle.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioSigSig", existePredioSigSig ? "SI" : string.Empty),
                        new XElement("CachePrediosSigSig", datos.CachePrediosSigSig ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteSigSig", datos.PrediosSigSig != null ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DatosResumen", datos.PrediosSigSig.DetalleDeuda != null && datos.PrediosSigSig.DetalleDeuda.Any() ? new XElement("Elementos",
                                new XElement("DetalleDeudas", datos.PrediosSigSig.DetalleDeuda.OrderByDescending(x => x.FechaEmision).Select(x => new XElement("Detalle",
                                    new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("DetalleImpuesto", !string.IsNullOrEmpty(x.DetalleImpuesto?.Trim()) ? x.DetalleImpuesto.Trim() : "N/A"),
                                    new XElement("ValorEmitido", x.ValorEmitido.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleDeudaTotal", datos.PrediosSigSig.DetalleDeuda.Take(5).Sum(x => x.ValorEmitido).ToString("N", culture)),
                                new XElement("DetalleDeudaMsj", datos.PrediosSigSig.DetalleDeuda.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                            new XElement("DatosResumenAguaPotable", datos.PrediosSigSig.DetalleDeudaAguaPotable != null && datos.PrediosSigSig.DetalleDeudaAguaPotable.Any() ? new XElement("Elementos",
                                new XElement("DetalleDeudasAguaPotable", datos.PrediosSigSig.DetalleDeudaAguaPotable.OrderByDescending(x => x.FechaEmision).Select(x => new XElement("Detalle",
                                    new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Ruta", !string.IsNullOrEmpty(x.Ruta?.Trim()) ? x.Ruta.Trim() : "N/A"),
                                    new XElement("Ubicacion", !string.IsNullOrEmpty(x.Ubicacion?.Trim()) ? x.Ubicacion.Trim() : "N/A"),
                                    new XElement("Rubro", !string.IsNullOrEmpty(x.Rubro?.Trim()) ? x.Rubro.Trim() : "N/A"),
                                    new XElement("ValorEmitido", x.ValorEmitido.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleDeudaAguaPotableTotal", datos.PrediosSigSig.DetalleDeudaAguaPotable.Take(5).Sum(x => x.ValorEmitido).ToString("N", culture)),
                               new XElement("DetalleDeudaAguaPotableMsj", datos.PrediosSigSig.DetalleDeudaAguaPotable.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaSigSig", datos.CachePrediosEmpresaSigSig ? "SI" : "NO"),
                        new XElement("PrediosEmpresaSigSig", datos.PrediosEmpresaSigSig != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DatosResumen", datos.PrediosEmpresaSigSig.DetalleDeuda != null && datos.PrediosEmpresaSigSig.DetalleDeuda.Any() ? new XElement("Elementos",
                                new XElement("DetalleDeudas", datos.PrediosEmpresaSigSig.DetalleDeuda.OrderByDescending(x => x.FechaEmision).Select(x => new XElement("Detalle",
                                    new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("DetalleImpuesto", !string.IsNullOrEmpty(x.DetalleImpuesto?.Trim()) ? x.DetalleImpuesto.Trim() : "N/A"),
                                    new XElement("ValorEmitido", x.ValorEmitido.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleDeudaTotal", datos.PrediosEmpresaSigSig.DetalleDeuda.Take(5).Sum(x => x.ValorEmitido).ToString("N", culture)),
                                new XElement("DetalleDeudaMsj", datos.PrediosEmpresaSigSig.DetalleDeuda.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                            new XElement("DatosResumenAguaPotable", datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable != null && datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable.Any() ? new XElement("Elementos",
                                new XElement("DetalleDeudasAguaPotable", datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable.OrderByDescending(x => x.FechaEmision).Select(x => new XElement("Detalle",
                                    new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Ruta", !string.IsNullOrEmpty(x.Ruta?.Trim()) ? x.Ruta.Trim() : "N/A"),
                                    new XElement("Ubicacion", !string.IsNullOrEmpty(x.Ubicacion?.Trim()) ? x.Ubicacion.Trim() : "N/A"),
                                    new XElement("Rubro", !string.IsNullOrEmpty(x.Rubro?.Trim()) ? x.Rubro.Trim() : "N/A"),
                                    new XElement("ValorEmitido", x.ValorEmitido.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleDeudaAguaPotableTotal", datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable.Take(5).Sum(x => x.ValorEmitido).ToString("N", culture)),
                               new XElement("DetalleDeudaAguaPotableMsj", datos.PrediosEmpresaSigSig.DetalleDeudaAguaPotable.Count() > 5 ? "SE MUESTRAN LOS 5 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioMejia", existePredioMejia ? "SI" : string.Empty),
                        new XElement("CachePrediosMejia", datos.CachePrediosMejia ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteMejia", datos.PrediosMejia != null && datos.PrediosMejia.Detalle != null && datos.PrediosMejia.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosMejia.Detalle.Take(10).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                new XElement("Tributo", !string.IsNullOrEmpty(x.Tributo?.Trim()) ? x.Tributo.Trim() : "N/A"),
                                new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A"),
                                new XElement("Valor", x.Valor.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosMejia.Detalle.Take(10).Sum(x => x.Valor).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosMejia.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaMejia", datos.CachePrediosEmpresaMejia ? "SI" : "NO"),
                        new XElement("PrediosEmpresaMejia", datos.PrediosEmpresaMejia != null && datos.PrediosEmpresaMejia.Detalle != null && datos.PrediosEmpresaMejia.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaMejia.Detalle.Take(10).Select(x => new XElement("Detalle",
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                new XElement("Tributo", !string.IsNullOrEmpty(x.Tributo?.Trim()) ? x.Tributo.Trim() : "N/A"),
                                new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A"),
                                new XElement("Valor", x.Valor.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosEmpresaMejia.Detalle.Take(10).Sum(x => x.Valor).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaMejia.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioMorona", existePredioMorona ? "SI" : string.Empty),
                        new XElement("CachePrediosMorona", datos.CachePrediosMorona ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteMorona", prediosDetalleMorona != null && prediosDetalleMorona.Any() ? new XElement("Predios",
                           new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                           new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                           new XElement("DetallePredio", prediosDetalleMorona.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Clave", !string.IsNullOrEmpty(x.Clave?.Trim()) ? x.Clave.Trim() : "N/A"),
                                new XElement("Denominacion", !string.IsNullOrEmpty(x.Denominacion?.Trim()) ? x.Denominacion.Trim() : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("Valor", x.Valor.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Multa", x.Multa.ToString("N", culture)),
                                new XElement("Mora", x.Mora.ToString("N", culture)),
                                new XElement("Iva", x.Iva.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                           ))),
                           new XElement("TotalValor", prediosDetalleMorona.Take(10).Sum(x => x.Total).ToString("N", culture)),
                           new XElement("DetallePredioMsj", prediosDetalleMorona.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaMorona", datos.CachePrediosEmpresaMorona ? "SI" : "NO"),
                        new XElement("PrediosEmpresaMorona", prediosDetalleEmpresaMorona != null && prediosDetalleEmpresaMorona.Any() ? new XElement("Predios",
                           new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                           new XElement("DetallePredio", prediosDetalleEmpresaMorona.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Clave", !string.IsNullOrEmpty(x.Clave?.Trim()) ? x.Clave.Trim() : "N/A"),
                                new XElement("Denominacion", !string.IsNullOrEmpty(x.Denominacion?.Trim()) ? x.Denominacion.Trim() : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("Valor", x.Valor.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Multa", x.Multa.ToString("N", culture)),
                                new XElement("Mora", x.Mora.ToString("N", culture)),
                                new XElement("Iva", x.Iva.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                           ))),
                           new XElement("TotalValor", prediosDetalleEmpresaMorona.Take(10).Sum(x => x.Total).ToString("N", culture)),
                           new XElement("DetallePredioMsj", prediosDetalleEmpresaMorona.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioTena", existePredioTena ? "SI" : string.Empty),
                        new XElement("CachePrediosTena", datos.CachePrediosTena ? "SI" : "NO"),
                         new XElement("PrediosRepresentanteTena", datos.PrediosTena != null && datos.PrediosTena.Detalle != null && datos.PrediosTena.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosTena.Detalle.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Clave", !string.IsNullOrEmpty(x.Clave?.Trim()) ? x.Clave.Trim() : "N/A"),
                                new XElement("Impuesto", !string.IsNullOrEmpty(x.Impuesto?.Trim()) ? x.Impuesto.Trim() : "N/A"),
                                new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo?.Trim()) ? x.Titulo.Trim() : "N/A"),
                                new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                new XElement("Mes", !string.IsNullOrEmpty(x.Mes?.Trim()) ? x.Mes.Trim() : "N/A"),
                                new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A"),
                                new XElement("APagar", x.APagar.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                                ))),
                            new XElement("TotalValor", datos.PrediosTena.Detalle.Take(10).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosTena.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaTena", datos.CachePrediosEmpresaTena ? "SI" : "NO"),
                         new XElement("PrediosEmpresaTena", datos.PrediosEmpresaTena != null && datos.PrediosEmpresaTena.Detalle != null && datos.PrediosEmpresaTena.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaTena.Detalle.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Clave", !string.IsNullOrEmpty(x.Clave?.Trim()) ? x.Clave.Trim() : "N/A"),
                                new XElement("Impuesto", !string.IsNullOrEmpty(x.Impuesto?.Trim()) ? x.Impuesto.Trim() : "N/A"),
                                new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo?.Trim()) ? x.Titulo.Trim() : "N/A"),
                                new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                new XElement("Mes", !string.IsNullOrEmpty(x.Mes?.Trim()) ? x.Mes.Trim() : "N/A"),
                                new XElement("Estado", !string.IsNullOrEmpty(x.Estado?.Trim()) ? x.Estado.Trim() : "N/A"),
                                new XElement("APagar", x.APagar.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                                ))),
                            new XElement("TotalValor", datos.PrediosEmpresaTena.Detalle.Take(10).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaTena.Detalle.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioCatamayo", existePredioCatamayo ? "SI" : string.Empty),
                        new XElement("CachePrediosCatamayo", datos.CachePrediosCatamayo ? "SI" : "NO"),
                         new XElement("PrediosRepresentanteCatamayo", datos.PrediosCatamayo != null && datos.PrediosCatamayo.DetalleDeuda != null && datos.PrediosCatamayo.DetalleDeuda.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosCatamayo.DetalleDeuda.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Numero", !string.IsNullOrEmpty(x.Numero?.Trim()) ? x.Numero.Trim() : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Clave", !string.IsNullOrEmpty(x.Clave?.Trim()) ? x.Clave.Trim() : "N/A"),
                                new XElement("DiasVencido", !string.IsNullOrEmpty(x.DiasVencido?.Trim()) ? x.DiasVencido.Trim() : "N/A"),
                                new XElement("Avaluo", x.Avaluo.ToString("N", culture)),
                                new XElement("Subtotal", x.Subtotal.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("ProntoPago", x.ProntoPago.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                                ))),
                            new XElement("TotalValor", datos.PrediosCatamayo.DetalleDeuda.Take(10).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosCatamayo.DetalleDeuda.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaCatamayo", datos.CachePrediosEmpresaCatamayo ? "SI" : "NO"),
                        new XElement("PrediosEmpresaCatamayo", datos.PrediosEmpresaCatamayo != null && datos.PrediosEmpresaCatamayo.DetalleDeuda != null && datos.PrediosEmpresaCatamayo.DetalleDeuda.Any() ? new XElement("Predios",
                             new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaCatamayo.DetalleDeuda.Take(10).Select(x => new XElement("Detalle",
                                new XElement("Numero", !string.IsNullOrEmpty(x.Numero?.Trim()) ? x.Numero.Trim() : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("FechaEmision", x.FechaEmision != default ? x.FechaEmision.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaVencimiento", x.FechaVencimiento != default ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Clave", !string.IsNullOrEmpty(x.Clave?.Trim()) ? x.Clave.Trim() : "N/A"),
                                new XElement("DiasVencido", !string.IsNullOrEmpty(x.DiasVencido?.Trim()) ? x.DiasVencido.Trim() : "N/A"),
                                new XElement("Avaluo", x.Avaluo.ToString("N", culture)),
                                new XElement("Subtotal", x.Subtotal.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("ProntoPago", x.ProntoPago.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                                ))),
                            new XElement("TotalValor", datos.PrediosEmpresaCatamayo.DetalleDeuda.Take(10).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaCatamayo.DetalleDeuda.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioLoja", existePredioLoja ? "SI" : string.Empty),
                        new XElement("CachePrediosLoja", datos.CachePrediosLoja ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteLoja", (datos.PrediosLoja != null && datos.PrediosLoja.DetalleImpuestos != null && datos.PrediosLoja.DetalleImpuestos.Any()) || (datos.PrediosDetallePropiedadesLoja != null && datos.PrediosDetallePropiedadesLoja.Any()) ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosLoja?.DetalleImpuestos.Where(x => x.FechaServicio.Year == DateTime.Now.Year).Take(10).Select(x => new XElement("Detalle",
                                new XElement("CodigoServicio", x.CodigoServicio),
                                new XElement("Rubro", x.Rubro),
                                new XElement("FechaServicio", x.FechaServicio != default ? x.FechaServicio.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaExpiracion", x.FechaExpiracion != default ? x.FechaExpiracion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Valor", x.Valor.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosLoja?.DetalleImpuestos.Take(10).Sum(x => x.Valor).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosLoja?.DetalleImpuestos.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty),
                            new XElement("PrediosDetallePropiedadesLoja", datos.PrediosDetallePropiedadesLoja != null && datos.PrediosDetallePropiedadesLoja.Any() ? new XElement("DetallePropiedades",
                                datos.PrediosDetallePropiedadesLoja.Take(10).Select(x => new XElement("Detalles",
                                    new XElement("Codigo", !string.IsNullOrEmpty(x.Numero?.Trim()) ? x.Numero.Trim() : "N/A"),
                                    new XElement("Cedula", !string.IsNullOrEmpty(x.Cedula?.Trim()) ? x.Cedula.Trim() : "N/A"),
                                    new XElement("Barrio", !string.IsNullOrEmpty(x.Barrio?.Trim()) ? x.Barrio.Trim() : "N/A"),
                                    new XElement("AreaTerreno", x.DetallePropiedad != null && !string.IsNullOrEmpty(x.DetallePropiedad.AreaTerreno?.Trim()) ? x.DetallePropiedad.AreaTerreno.Trim() : "N/A"),
                                    new XElement("AreaTotalConstruccion", x.DetallePropiedad != null && !string.IsNullOrEmpty(x.DetallePropiedad.AreaTotalConstruccion?.Trim()) ? x.DetallePropiedad.AreaTotalConstruccion.Trim() : "N/A"),
                                    new XElement("Ubicacion", x.DetallePropiedad != null && !string.IsNullOrEmpty(x.DetallePropiedad.Ubicacion?.Trim()) ? x.DetallePropiedad.Ubicacion.Trim() : "N/A")
                                ))) : string.Empty),
                            new XElement("DetallePredioPropiedadesMsj", datos.PrediosDetallePropiedadesLoja != null && datos.PrediosDetallePropiedadesLoja.Any() && datos.PrediosDetallePropiedadesLoja.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                         new XElement("CachePrediosEmpresaLoja", datos.CachePrediosEmpresaLoja ? "SI" : "NO"),
                        new XElement("PrediosEmpresaLoja", (datos.PrediosEmpresaLoja != null && datos.PrediosEmpresaLoja.DetalleImpuestos != null && datos.PrediosEmpresaLoja.DetalleImpuestos.Any()) || (datos.PrediosDetallePropiedadesEmpresaLoja != null && datos.PrediosDetallePropiedadesEmpresaLoja.Any()) ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaLoja?.DetalleImpuestos.Where(x => x.FechaServicio.Year == DateTime.Now.Year).Take(10).Select(x => new XElement("Detalle",
                                new XElement("CodigoServicio", x.CodigoServicio),
                                new XElement("Rubro", x.Rubro),
                                new XElement("FechaServicio", x.FechaServicio != default ? x.FechaServicio.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaExpiracion", x.FechaExpiracion != default ? x.FechaExpiracion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Valor", x.Valor.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosEmpresaLoja?.DetalleImpuestos.Take(10).Sum(x => x.Valor).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaLoja?.DetalleImpuestos.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty),
                            new XElement("PrediosDetallePropiedadesEmpresaLoja", datos.PrediosDetallePropiedadesEmpresaLoja != null && datos.PrediosDetallePropiedadesEmpresaLoja.Any() ? new XElement("DetallePropiedades",
                                datos.PrediosDetallePropiedadesEmpresaLoja.Take(10).Select(x => new XElement("Detalles",
                                    new XElement("Codigo", !string.IsNullOrEmpty(x.Numero?.Trim()) ? x.Numero.Trim() : "N/A"),
                                    new XElement("Cedula", !string.IsNullOrEmpty(x.Cedula?.Trim()) ? x.Cedula.Trim() : "N/A"),
                                    new XElement("Barrio", !string.IsNullOrEmpty(x.Barrio?.Trim()) ? x.Barrio.Trim() : "N/A"),
                                    new XElement("AreaTerreno", x.DetallePropiedad != null && !string.IsNullOrEmpty(x.DetallePropiedad.AreaTerreno?.Trim()) ? x.DetallePropiedad.AreaTerreno.Trim() : "N/A"),
                                    new XElement("AreaTotalConstruccion", x.DetallePropiedad != null && !string.IsNullOrEmpty(x.DetallePropiedad.AreaTotalConstruccion?.Trim()) ? x.DetallePropiedad.AreaTotalConstruccion.Trim() : "N/A"),
                                    new XElement("Ubicacion", x.DetallePropiedad != null && !string.IsNullOrEmpty(x.DetallePropiedad.Ubicacion?.Trim()) ? x.DetallePropiedad.Ubicacion.Trim() : "N/A")
                                ))) : string.Empty),
                            new XElement("DetallePredioPropiedadesMsj", datos.PrediosDetallePropiedadesEmpresaLoja != null && datos.PrediosDetallePropiedadesEmpresaLoja.Any() && datos.PrediosDetallePropiedadesEmpresaLoja.Count() > 10 ? "SE MUESTRAN LOS 10 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioSamborondon", existePredioSamborondon ? "SI" : string.Empty),
                        new XElement("CachePrediosSamborondon", datos.CachePrediosSamborondon ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteSamborondon", datos.PrediosSamborondon != null && datos.PrediosSamborondon.DetalleDeuda != null && datos.PrediosSamborondon.DetalleDeuda.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosSamborondon.DetalleDeuda.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Liquidacion", !string.IsNullOrEmpty(x.Liquidacion?.Trim()) ? x.Liquidacion.Trim() : "N/A"),
                                new XElement("TipoLiquidacion", !string.IsNullOrEmpty(x.TipoLiquidacion?.Trim()) ? x.TipoLiquidacion.Trim() : "N/A"),
                                new XElement("Matricula", !string.IsNullOrEmpty(x.Matricula?.Trim()) ? x.Matricula.Trim() : "N/A"),
                                new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                new XElement("Local", !string.IsNullOrEmpty(x.Local?.Trim()) ? x.Local.Trim() : "N/A"),
                                new XElement("TotalDetalleMatricula", x.TotalDetalleMatricula.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture)),
                                new XElement("DetalleMatricula", x.DetalleMatricula != null && x.DetalleMatricula.Any() ? new XElement("Detalle",
                                    new XElement("DescripcionMatricula", x.DetalleMatricula.Take(5).Select(y => new XElement("Matricula",
                                        new XElement("Anio", !string.IsNullOrEmpty(y.Anio?.Trim()) ? y.Anio.Trim() : "N/A"),
                                        new XElement("Contribuyente", !string.IsNullOrEmpty(y.Contribuyente?.Trim()) ? y.Contribuyente.Trim() : "N/A"),
                                        new XElement("ImpuestoYAdicional", y.ImpuestoYAdicional.ToString("N", culture)),
                                        new XElement("Descuento", y.Descuento.ToString("N", culture)),
                                        new XElement("Recargo", y.Recargo.ToString("N", culture)),
                                        new XElement("Interes", y.Interes.ToString("N", culture)),
                                        new XElement("Coactiva", y.Coactiva.ToString("N", culture)),
                                        new XElement("Total", y.Total.ToString("N", culture))
                                    ))),
                                    new XElement("TotalValor", x.DetalleMatricula.Take(5).Sum(x => x.Total).ToString("N", culture)))
                                : string.Empty)
                            ))),
                            new XElement("DetallePredioMsj", datos.PrediosSamborondon.DetalleDeuda.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                         new XElement("CachePrediosEmpresaSamborondon", datos.CachePrediosEmpresaSamborondon ? "SI" : "NO"),
                        new XElement("PrediosEmpresaSamborondon", datos.PrediosEmpresaSamborondon != null && datos.PrediosEmpresaSamborondon.DetalleDeuda != null && datos.PrediosEmpresaSamborondon.DetalleDeuda.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaSamborondon.DetalleDeuda.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Liquidacion", !string.IsNullOrEmpty(x.Liquidacion?.Trim()) ? x.Liquidacion.Trim() : "N/A"),
                                new XElement("TipoLiquidacion", !string.IsNullOrEmpty(x.TipoLiquidacion?.Trim()) ? x.TipoLiquidacion.Trim() : "N/A"),
                                new XElement("Matricula", !string.IsNullOrEmpty(x.Matricula?.Trim()) ? x.Matricula.Trim() : "N/A"),
                                new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                new XElement("Local", !string.IsNullOrEmpty(x.Local?.Trim()) ? x.Local.Trim() : "N/A"),
                                new XElement("TotalDetalleMatricula", x.TotalDetalleMatricula.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture)),
                                new XElement("DetalleMatricula", x.DetalleMatricula != null && x.DetalleMatricula.Any() ? new XElement("Detalle",
                                    new XElement("DescripcionMatricula", x.DetalleMatricula.Take(5).Select(y => new XElement("Matricula",
                                        new XElement("Anio", !string.IsNullOrEmpty(y.Anio?.Trim()) ? y.Anio.Trim() : "N/A"),
                                        new XElement("Contribuyente", !string.IsNullOrEmpty(y.Contribuyente?.Trim()) ? y.Contribuyente.Trim() : "N/A"),
                                        new XElement("ImpuestoYAdicional", y.ImpuestoYAdicional.ToString("N", culture)),
                                        new XElement("Descuento", y.Descuento.ToString("N", culture)),
                                        new XElement("Recargo", y.Recargo.ToString("N", culture)),
                                        new XElement("Interes", y.Interes.ToString("N", culture)),
                                        new XElement("Coactiva", y.Coactiva.ToString("N", culture)),
                                        new XElement("Total", y.Total.ToString("N", culture))
                                    ))),
                                    new XElement("TotalValor", x.DetalleMatricula.Take(5).Sum(x => x.Total).ToString("N", culture)))
                                : string.Empty)
                            ))),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaSamborondon.DetalleDeuda.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioDaule", existePredioDaule ? "SI" : string.Empty),
                        new XElement("CachePrediosDaule", datos.CachePrediosDaule ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteDaule", datos.PrediosDaule != null && datos.PrediosDaule.DetalleImpuestos != null && datos.PrediosDaule.DetalleImpuestos.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosDaule.DetalleImpuestos.Take(3).Select(x => new XElement("Detalle",
                                new XElement("IdPredio", !string.IsNullOrEmpty(x.Id?.Trim()) ? x.Id.Trim() : "N/A"),
                                new XElement("Modulo", !string.IsNullOrEmpty(x.Modulo?.Trim()) ? x.Modulo.Trim() : "N/A"),
                                new XElement("IdPropietarioEmision", !string.IsNullOrEmpty(x.IdPropietarioEmision?.Trim()) ? x.IdPropietarioEmision.Trim() : "N/A"),
                                new XElement("FechaCreacion", x.FechaCreacion != default ? x.FechaCreacion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("DescuentoRecargo", x.DescuentoRecargo.ToString("N", culture)),
                                new XElement("TotalTarifa", x.TotalTarifa.ToString("N", culture)),
                                new XElement("DetalleFactura", x.DetalleFactura != null && x.DetalleFactura.Any() ? new XElement("Detalle",
                                    new XElement("DescripcionFactura", x.DetalleFactura.Take(5).Select(y => new XElement("Factura",
                                        new XElement("IdFactura", !string.IsNullOrEmpty(y.Id?.Trim()) ? y.Id.Trim() : "N/A"),
                                        new XElement("RubroDescripcio", !string.IsNullOrEmpty(y.RubroDescripcio?.Trim()) ? y.RubroDescripcio.Trim() : "N/A"),
                                        new XElement("Estado", !string.IsNullOrEmpty(y.Estado?.Trim()) ? y.Estado.Trim() : "N/A"),
                                        new XElement("Cantidad", y.Cantidad.ToString("N", culture)),
                                        new XElement("ValorUnitario", y.ValorUnitario.ToString("N", culture))
                                    ))),
                                    new XElement("TotalValor", x.DetalleFactura.Take(5).Sum(x => x.ValorUnitario).ToString("N", culture))
                                ) : string.Empty)
                            ))),
                            new XElement("DetallePredioMsj", datos.PrediosDaule.DetalleImpuestos.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaDaule", datos.CachePrediosEmpresaDaule ? "SI" : "NO"),
                        new XElement("PrediosEmpresaDaule", datos.PrediosEmpresaDaule != null && datos.PrediosEmpresaDaule.DetalleImpuestos != null && datos.PrediosEmpresaDaule.DetalleImpuestos.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaDaule.DetalleImpuestos.Take(3).Select(x => new XElement("Detalle",
                                new XElement("IdPredio", !string.IsNullOrEmpty(x.Id?.Trim()) ? x.Id.Trim() : "N/A"),
                                new XElement("Modulo", !string.IsNullOrEmpty(x.Modulo?.Trim()) ? x.Modulo.Trim() : "N/A"),
                                new XElement("IdPropietarioEmision", !string.IsNullOrEmpty(x.IdPropietarioEmision?.Trim()) ? x.IdPropietarioEmision.Trim() : "N/A"),
                                new XElement("FechaCreacion", x.FechaCreacion != default ? x.FechaCreacion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("DescuentoRecargo", x.DescuentoRecargo.ToString("N", culture)),
                                new XElement("TotalTarifa", x.TotalTarifa.ToString("N", culture)),
                                new XElement("DetalleFactura", x.DetalleFactura != null && x.DetalleFactura.Any() ? new XElement("Detalle",
                                    new XElement("DescripcionFactura", x.DetalleFactura.Take(5).Select(y => new XElement("Factura",
                                        new XElement("IdFactura", !string.IsNullOrEmpty(y.Id?.Trim()) ? y.Id.Trim() : "N/A"),
                                        new XElement("RubroDescripcio", !string.IsNullOrEmpty(y.RubroDescripcio?.Trim()) ? y.RubroDescripcio.Trim() : "N/A"),
                                        new XElement("Estado", !string.IsNullOrEmpty(y.Estado?.Trim()) ? y.Estado.Trim() : "N/A"),
                                        new XElement("Cantidad", y.Cantidad.ToString("N", culture)),
                                        new XElement("ValorUnitario", y.ValorUnitario.ToString("N", culture))
                                    ))),
                                    new XElement("TotalValor", x.DetalleFactura.Take(5).Sum(x => x.ValorUnitario).ToString("N", culture))
                                ) : string.Empty)
                            ))),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaDaule.DetalleImpuestos.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioCayambe", existePredioCayambe ? "SI" : string.Empty),
                        new XElement("CachePrediosCayambe", datos.CachePrediosCayambe ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteCayambe", datos.PrediosCayambe != null && datos.PrediosCayambe.Detalle != null && datos.PrediosCayambe.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosCayambe.Detalle.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Propiedad", !string.IsNullOrEmpty(x.Propiedad?.Trim()) ? x.Propiedad.Trim() : "N/A"),
                                new XElement("NombreImpuesto", !string.IsNullOrEmpty(x.NombreImpuesto?.Trim()) ? x.NombreImpuesto.Trim() : "N/A"),
                                new XElement("FechaEmision", !string.IsNullOrEmpty(x.FechaEmision?.Trim()) ? x.FechaEmision.Trim() : "N/A"),
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                new XElement("AvaluoPropiedad", x.AvaluoPropiedad.ToString("N", culture)),
                                new XElement("CostasJu", x.CostasJu.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("InteresMora", x.InteresMora.ToString("N", culture)),
                                new XElement("Subtotal", x.Subtotal.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosCayambe.Detalle.Take(3).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosCayambe.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaCayambe", datos.CachePrediosEmpresaCayambe ? "SI" : "NO"),
                        new XElement("PrediosEmpresaCayambe", datos.PrediosEmpresaCayambe != null && datos.PrediosEmpresaCayambe.Detalle != null && datos.PrediosEmpresaCayambe.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaCayambe.Detalle.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Propiedad", !string.IsNullOrEmpty(x.Propiedad?.Trim()) ? x.Propiedad.Trim() : "N/A"),
                                new XElement("NombreImpuesto", !string.IsNullOrEmpty(x.NombreImpuesto?.Trim()) ? x.NombreImpuesto.Trim() : "N/A"),
                                new XElement("FechaEmision", !string.IsNullOrEmpty(x.FechaEmision?.Trim()) ? x.FechaEmision.Trim() : "N/A"),
                                new XElement("ClaveCatastral", !string.IsNullOrEmpty(x.ClaveCatastral?.Trim()) ? x.ClaveCatastral.Trim() : "N/A"),
                                new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                new XElement("AvaluoPropiedad", x.AvaluoPropiedad.ToString("N", culture)),
                                new XElement("CostasJu", x.CostasJu.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("InteresMora", x.InteresMora.ToString("N", culture)),
                                new XElement("Subtotal", x.Subtotal.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosEmpresaCayambe.Detalle.Take(3).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaCayambe.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioAzogues", existePredioAzogues ? "SI" : string.Empty),
                        new XElement("CachePrediosAzogues", datos.CachePrediosAzogues ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteAzogues", datos.PrediosAzogues != null && datos.PrediosAzogues.Detalle != null && datos.PrediosAzogues.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosAzogues.Detalle.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                new XElement("Mes", !string.IsNullOrEmpty(x.Mes?.Trim()) ? x.Mes.Trim() : "N/A"),
                                new XElement("Secundario", !string.IsNullOrEmpty(x.Secundario?.Trim()) ? x.Secundario.Trim() : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle?.Trim()) ? x.Detalle.Trim() : "N/A"),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Valor", x.Valor.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosAzogues.Detalle.Take(3).Sum(x => x.Valor).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosAzogues.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaAzogues", datos.CachePrediosEmpresaAzogues ? "SI" : "NO"),
                        new XElement("PrediosEmpresaAzogues", datos.PrediosEmpresaAzogues != null && datos.PrediosEmpresaAzogues.Detalle != null && datos.PrediosEmpresaAzogues.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaAzogues.Detalle.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                new XElement("Mes", !string.IsNullOrEmpty(x.Mes?.Trim()) ? x.Mes.Trim() : "N/A"),
                                new XElement("Secundario", !string.IsNullOrEmpty(x.Secundario?.Trim()) ? x.Secundario.Trim() : "N/A"),
                                new XElement("Concepto", !string.IsNullOrEmpty(x.Concepto?.Trim()) ? x.Concepto.Trim() : "N/A"),
                                new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle?.Trim()) ? x.Detalle.Trim() : "N/A"),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Valor", x.Valor.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosEmpresaAzogues.Detalle.Take(3).Sum(x => x.Valor).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaAzogues.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioEsmeraldas", existePredioEsmeraldas ? "SI" : string.Empty),
                       new XElement("CachePrediosRepresentanteEsmeraldas", datos.CachePrediosEsmeraldas ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteEsmeraldas", datos.PrediosEsmeraldas != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DatosResumen", datos.PrediosEsmeraldas.Detalle != null && datos.PrediosEsmeraldas.Detalle.Any() ? new XElement("Elementos",
                                new XElement("DetallePredios", datos.PrediosEsmeraldas.Detalle.OrderByDescending(x => x.Predio).Take(3).Select(x => new XElement("Detalle",
                                    new XElement("Predio", !string.IsNullOrEmpty(x.Predio?.Trim()) ? x.Predio.Trim() : "N/A"),
                                    new XElement("Referencia", !string.IsNullOrEmpty(x.Referencia?.Trim()) ? x.Referencia.Trim() : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                    new XElement("AreaTerreno", x.AreaTerreno.ToString("N", culture)),
                                    new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                    new XElement("AvaluoReal", x.AvaluoReal.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleTotal", datos.PrediosEsmeraldas.Detalle.Take(3).Sum(x => x.AvaluoReal).ToString("N", culture)),
                                new XElement("DetalleMsj", datos.PrediosEsmeraldas.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                           new XElement("DatosResumenDeuda", datos.PrediosEsmeraldas.DatosDeudas != null && datos.PrediosEsmeraldas.DatosDeudas.Any() ? new XElement("Elementos",
                                new XElement("DetalleDeudas", datos.PrediosEsmeraldas.DatosDeudas.OrderByDescending(x => x.Anio).Take(3).Select(x => new XElement("Detalle",
                                    new XElement("Impuesto", !string.IsNullOrEmpty(x.Impuesto?.Trim()) ? x.Impuesto.Trim() : "N/A"),
                                    new XElement("Anio", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                    new XElement("Titulo", !string.IsNullOrEmpty(x.TItulo?.Trim()) ? x.TItulo.Trim() : "N/A"),
                                    new XElement("Referencia", !string.IsNullOrEmpty(x.Referencia?.Trim()) ? x.Referencia.Trim() : "N/A"),
                                    new XElement("Fecha", !string.IsNullOrEmpty(x.Fecha?.Trim()) ? x.Fecha.Trim() : "N/A"),
                                    new XElement("Descripcion", !string.IsNullOrEmpty(x.Descripcion?.Trim()) ? x.Descripcion.Trim() : "N/A"),
                                    new XElement("DetalleImpuesto", !string.IsNullOrEmpty(x.DetalleImpuesto?.Trim()) ? x.DetalleImpuesto.Trim() : "N/A"),
                                    new XElement("Emision", x.Emision.ToString("N", culture)),
                                    new XElement("Interes", x.Interes.ToString("N", culture)),
                                    new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                    new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                    new XElement("Total", x.Total.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleDeudaTotal", datos.PrediosEsmeraldas.DatosDeudas.Take(3).Sum(x => x.Total).ToString("N", culture)),
                                new XElement("DetalleDeudaMsj", datos.PrediosEsmeraldas.DatosDeudas.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaEsmeraldas", datos.CachePrediosEmpresaEsmeraldas ? "SI" : "NO"),
                        new XElement("PrediosEmpresaEsmeraldas", datos.PrediosEmpresaEsmeraldas != null ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DatosResumen", datos.PrediosEmpresaEsmeraldas.Detalle != null && datos.PrediosEmpresaEsmeraldas.Detalle.Any() ? new XElement("Elementos",
                                new XElement("DetallePredios", datos.PrediosEmpresaEsmeraldas.Detalle.OrderByDescending(x => x.Predio).Take(3).Select(x => new XElement("Detalle",
                                    new XElement("Predio", !string.IsNullOrEmpty(x.Predio?.Trim()) ? x.Predio.Trim() : "N/A"),
                                    new XElement("Referencia", !string.IsNullOrEmpty(x.Referencia?.Trim()) ? x.Referencia.Trim() : "N/A"),
                                    new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion?.Trim()) ? x.Direccion.Trim() : "N/A"),
                                    new XElement("AreaTerreno", x.AreaTerreno.ToString("N", culture)),
                                    new XElement("AreaConstruccion", x.AreaConstruccion.ToString("N", culture)),
                                    new XElement("AvaluoReal", x.AvaluoReal.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleTotal", datos.PrediosEmpresaEsmeraldas.Detalle.Take(3).Sum(x => x.AvaluoReal).ToString("N", culture)),
                                new XElement("DetalleMsj", datos.PrediosEmpresaEsmeraldas.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty),
                           new XElement("DatosResumenDeuda", datos.PrediosEmpresaEsmeraldas.DatosDeudas != null && datos.PrediosEmpresaEsmeraldas.DatosDeudas.Any() ? new XElement("Elementos",
                                new XElement("DetalleDeudas", datos.PrediosEmpresaEsmeraldas.DatosDeudas.OrderByDescending(x => x.Anio).Take(3).Select(x => new XElement("Detalle",
                                    new XElement("Impuesto", !string.IsNullOrEmpty(x.Impuesto?.Trim()) ? x.Impuesto.Trim() : "N/A"),
                                    new XElement("Año", !string.IsNullOrEmpty(x.Anio?.Trim()) ? x.Anio.Trim() : "N/A"),
                                    new XElement("TItulo", !string.IsNullOrEmpty(x.TItulo?.Trim()) ? x.TItulo.Trim() : "N/A"),
                                    new XElement("Referencia", !string.IsNullOrEmpty(x.Referencia?.Trim()) ? x.Referencia.Trim() : "N/A"),
                                    new XElement("Fecha", !string.IsNullOrEmpty(x.Fecha?.Trim()) ? x.Fecha.Trim() : "N/A"),
                                    new XElement("Descripcion", !string.IsNullOrEmpty(x.Descripcion?.Trim()) ? x.Descripcion.Trim() : "N/A"),
                                    new XElement("DetalleImpuesto", !string.IsNullOrEmpty(x.DetalleImpuesto?.Trim()) ? x.DetalleImpuesto.Trim() : "N/A"),
                                    new XElement("Emision", x.Emision.ToString("N", culture)),
                                    new XElement("Interes", x.Interes.ToString("N", culture)),
                                    new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                    new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                    new XElement("Total", x.Total.ToString("N", culture))
                                )).Take(5)),
                                new XElement("DetalleDeudaTotal", datos.PrediosEmpresaEsmeraldas.DatosDeudas.Take(3).Sum(x => x.Total).ToString("N", culture)),
                                new XElement("DetalleDeudaMsj", datos.PrediosEmpresaEsmeraldas.DatosDeudas.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                            ) : string.Empty)
                        ) : string.Empty),
                        new XElement("ExistePredioCotacachi", existePredioCotacachi ? "SI" : string.Empty),
                        new XElement("CachePrediosCotacachi", datos.CachePrediosCotacachi ? "SI" : "NO"),
                        new XElement("PrediosRepresentanteCotacachi", datos.PrediosCotacachi != null && datos.PrediosCotacachi.Detalle != null && datos.PrediosCotacachi.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("DetallePredio", datos.PrediosCotacachi.Detalle.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Impuesto", !string.IsNullOrEmpty(x.Impuesto?.Trim()) ? x.Impuesto.Trim() : "N/A"),
                                new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo?.Trim()) ? x.Titulo.Trim() : "N/A"),
                                new XElement("Año", !string.IsNullOrEmpty(x.Anio.ToString()) ? x.Anio.ToString() : "N/A"),
                                new XElement("Mes", !string.IsNullOrEmpty(x.Mes.ToString()) ? x.Mes.ToString() : "N/A"),
                                new XElement("Referencia", !string.IsNullOrEmpty(x.Referencia?.Trim()) ? x.Referencia.Trim() : "N/A"),
                                new XElement("Fecha", x.Fecha != default ? x.Fecha.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Emision", x.Emision.ToString("N", culture)),
                                new XElement("Abonos", x.Abonos.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosCotacachi.Detalle.Take(3).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosCotacachi.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CachePrediosEmpresaCotacachi", datos.CachePrediosEmpresaCotacachi ? "SI" : "NO"),
                        new XElement("PrediosEmpresaCotacachi", datos.PrediosEmpresaCotacachi != null && datos.PrediosEmpresaCotacachi.Detalle != null && datos.PrediosEmpresaCotacachi.Detalle.Any() ? new XElement("Predios",
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("DetallePredio", datos.PrediosEmpresaCotacachi.Detalle.Take(3).Select(x => new XElement("Detalle",
                                new XElement("Impuesto", !string.IsNullOrEmpty(x.Impuesto?.Trim()) ? x.Impuesto.Trim() : "N/A"),
                                new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo?.Trim()) ? x.Titulo.Trim() : "N/A"),
                                new XElement("Año", !string.IsNullOrEmpty(x.Anio.ToString()) ? x.Anio.ToString() : "N/A"),
                                new XElement("Mes", !string.IsNullOrEmpty(x.Mes.ToString()) ? x.Mes.ToString() : "N/A"),
                                new XElement("Referencia", !string.IsNullOrEmpty(x.Referencia?.Trim()) ? x.Referencia.Trim() : "N/A"),
                                new XElement("Fecha", x.Fecha != default ? x.Fecha.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("Emision", x.Emision.ToString("N", culture)),
                                new XElement("Abonos", x.Abonos.ToString("N", culture)),
                                new XElement("Interes", x.Interes.ToString("N", culture)),
                                new XElement("Coactiva", x.Coactiva.ToString("N", culture)),
                                new XElement("Recargo", x.Recargo.ToString("N", culture)),
                                new XElement("Descuento", x.Descuento.ToString("N", culture)),
                                new XElement("Total", x.Total.ToString("N", culture))
                            ))),
                            new XElement("TotalValor", datos.PrediosEmpresaCotacachi.Detalle.Take(3).Sum(x => x.Total).ToString("N", culture)),
                            new XElement("DetallePredioMsj", datos.PrediosEmpresaCotacachi.Detalle.Count() > 3 ? "SE MUESTRAN LOS 3 PRIMEROS REGISTROS" : string.Empty)
                        ) : string.Empty),
                        new XElement("CacheOnu", datos.CacheOnu ? "SI" : "NO"),
                        new XElement("UafeOnuPersona", datos.ONU != null && datos.ONU.Individuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Id", datos.ONU.Individuo.Dataid),
                            new XElement("Referencia", datos.ONU.Individuo.ReferenceNumber),
                            //new XElement("Nombres", string.Join(" ", new[] { datos.ONU.Individuo.FourthName, datos.ONU.Individuo.ThirdName, datos.ONU.Individuo.SecondName, datos.ONU.Individuo.FirstName }.Where(m => !string.IsNullOrEmpty(m)).ToArray())),
                            new XElement("Nacionalidad", datos.ONU.Individuo.Nationality != null && datos.ONU.Individuo.Nationality.Value != null && datos.ONU.Individuo.Nationality.Value.Any(m => !string.IsNullOrEmpty(m)) ? datos.ONU.Individuo.Nationality.Value.FirstOrDefault(m => !string.IsNullOrEmpty(m)) : string.Empty),
                            new XElement("Tipo", datos.ONU.Individuo.UnListType),
                            new XElement("Registro", datos.ONU.Individuo.ListedOn),
                            new XElement("Comentarios", datos.ONU.Individuo.Comments1),
                            new XElement("Actualizaciones", datos.ONU.Individuo.LastDayUpdated != null && datos.ONU.Individuo.LastDayUpdated.Value != null && datos.ONU.Individuo.LastDayUpdated.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Individuo.LastDayUpdated.Value) : string.Empty),
                            new XElement("Alias", datos.ONU.Individuo.IndividualAlias != null && datos.ONU.Individuo.IndividualAlias.Any(m => !string.IsNullOrEmpty(m.AliasName)) ? string.Join(" | ", datos.ONU.Individuo.IndividualAlias.Select(m => m.AliasName)) : string.Empty),
                            new XElement("Titulos", datos.ONU.Individuo.Title != null && datos.ONU.Individuo.Title.Value != null && datos.ONU.Individuo.Title.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Individuo.Title.Value) : string.Empty),
                            new XElement("Designaciones", datos.ONU.Individuo.Designation != null && datos.ONU.Individuo.Designation.Value != null && datos.ONU.Individuo.Designation.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Individuo.Designation.Value) : string.Empty),
                            new XElement("Direcciones", datos.ONU.Individuo.IndividualAddress != null && datos.ONU.Individuo.IndividualAddress.Any(m => m != null) ? datos.ONU.Individuo.IndividualAddress.Take(10).Select(x => new XElement("Direccion", $"• {string.Join("/", new[] { x.Country, x.StateProvince, x.City, x.Street }.Where(m => !string.IsNullOrEmpty(m)).ToArray())}")) : string.Empty),
                            new XElement("Documentos", datos.ONU.Individuo.IndividualDocument != null && datos.ONU.Individuo.IndividualDocument.Any(m => m != null) ? datos.ONU.Individuo.IndividualDocument.Take(10).Select(x => new XElement("Documento", $"• {x.Number} ({x.TypeOfDocument})")) : string.Empty))
                        : string.Empty),
                        new XElement("UafeOnuEmpresa", datos.ONU != null && datos.ONU.Entidad != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Id", datos.ONU.Entidad.Dataid),
                            new XElement("Referencia", datos.ONU.Entidad.ReferenceNumber),
                            //new XElement("Nombres", datos.ONU.Entidad.FirstName),
                            new XElement("Tipo", datos.ONU.Entidad.UnListType),
                            new XElement("Registro", datos.ONU.Entidad.ListedOn),
                            new XElement("Comentarios", datos.ONU.Entidad.Comments1),
                            new XElement("Actualizaciones", datos.ONU.Entidad.LastDayUpdated != null && datos.ONU.Entidad.LastDayUpdated.Value != null && datos.ONU.Entidad.LastDayUpdated.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Entidad.LastDayUpdated.Value) : string.Empty),
                            new XElement("Alias", datos.ONU.Entidad.EntityAlias != null && datos.ONU.Entidad.EntityAlias.Any(m => !string.IsNullOrEmpty(m.AliasName)) ? string.Join(" | ", datos.ONU.Entidad.EntityAlias.Select(m => m.AliasName)) : string.Empty),
                            new XElement("Direcciones", datos.ONU.Entidad.EntityAddress != null && datos.ONU.Entidad.EntityAddress.Any(m => m != null) ? datos.ONU.Entidad.EntityAddress.Take(10).Select(x => new XElement("Direccion", $"• {string.Join("/", new[] { x.Country, x.StateProvince, x.City, x.Street }.Where(m => !string.IsNullOrEmpty(m)).ToArray())}")) : string.Empty))
                        : string.Empty),
                        new XElement("CacheOnu20226", datos.CacheOnu20226 ? "SI" : "NO"),
                        new XElement("UafeOnuPersona2206", datos.ONU2206 != null && datos.ONU2206.Individuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Id", datos.ONU2206.Individuo.Dataid),
                            new XElement("Referencia", datos.ONU2206.Individuo.ReferenceNumber),
                            //new XElement("Nombres", string.Join(" ", new[] { datos.ONU2206.Individuo.FourthName, datos.ONU2206.Individuo.ThirdName, datos.ONU2206.Individuo.SecondName, datos.ONU2206.Individuo.FirstName }.Where(m => !string.IsNullOrEmpty(m)).ToArray())),
                            new XElement("Nacionalidad", datos.ONU2206.Individuo.Nationality != null && datos.ONU2206.Individuo.Nationality.Value != null && datos.ONU2206.Individuo.Nationality.Value.Any(m => !string.IsNullOrEmpty(m)) ? datos.ONU2206.Individuo.Nationality.Value.FirstOrDefault(m => !string.IsNullOrEmpty(m)) : string.Empty),
                            new XElement("Tipo", datos.ONU2206.Individuo.UnListType),
                            new XElement("Registro", datos.ONU2206.Individuo.ListedOn),
                            new XElement("Comentarios", datos.ONU2206.Individuo.Comments1),
                            new XElement("Actualizaciones", datos.ONU2206.Individuo.LastDayUpdated != null && datos.ONU2206.Individuo.LastDayUpdated.Value != null && datos.ONU2206.Individuo.LastDayUpdated.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU2206.Individuo.LastDayUpdated.Value) : string.Empty),
                            new XElement("Alias", datos.ONU2206.Individuo.IndividualAlias != null && datos.ONU2206.Individuo.IndividualAlias.Any(m => !string.IsNullOrEmpty(m.AliasName)) ? string.Join(" | ", datos.ONU2206.Individuo.IndividualAlias.Select(m => m.AliasName)) : string.Empty),
                            new XElement("Titulos", datos.ONU2206.Individuo.Title != null && datos.ONU2206.Individuo.Title.Value != null && datos.ONU2206.Individuo.Title.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU2206.Individuo.Title.Value) : string.Empty),
                            new XElement("Designaciones", datos.ONU2206.Individuo.Designation != null && datos.ONU2206.Individuo.Designation.Value != null && datos.ONU2206.Individuo.Designation.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU2206.Individuo.Designation.Value) : string.Empty),
                            new XElement("Direcciones", datos.ONU2206.Individuo.IndividualAddress != null && datos.ONU2206.Individuo.IndividualAddress.Any(m => m != null) ? datos.ONU2206.Individuo.IndividualAddress.Take(10).Select(x => new XElement("Direccion", $"• {string.Join("/", new[] { x.Country, x.StateProvince, x.City, x.Street }.Where(m => !string.IsNullOrEmpty(m)).ToArray())}")) : string.Empty),
                            new XElement("Documentos", datos.ONU2206.Individuo.IndividualDocument != null && datos.ONU2206.Individuo.IndividualDocument.Any(m => m != null) ? datos.ONU2206.Individuo.IndividualDocument.Take(10).Select(x => new XElement("Documento", $"• {x.Number} ({x.TypeOfDocument})")) : string.Empty))
                        : string.Empty),
                         new XElement("CacheOfac", datos.CacheOfac ? "SI" : "NO"),
                         new XElement("UafeOfacPersona", datos.OFAC != null && datos.OFAC.ContenidoIndividuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Contenido", datos.OFAC.ContenidoIndividuo))
                        : string.Empty),
                         new XElement("UafeOfacEmpresa", datos.OFAC != null && datos.OFAC.ContenidoEmpresa != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Contenido", datos.OFAC.ContenidoEmpresa))
                        : string.Empty),
                        new XElement("CacheInterpol", datos.CacheInterpol ? "SI" : "NO"),
                         new XElement("UafeInterpol", datos.Interpol != null && datos.Interpol.NoticiaIndividuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Id", datos.Interpol.NoticiaIndividuo.EntityId),
                            new XElement("FechaNacimiento", datos.Interpol.NoticiaIndividuo.DateOfBirth),
                            new XElement("Nacionalidades", ReporteViewModel.NacionalidadesInterpol(datos.Interpol.NoticiaIndividuo.Nationalities)?.ToUpper()),
                            new XElement("Idiomas", datos.Interpol.Detalle != null ? string.Join(" | ", datos.Interpol.Detalle.LanguagesSpokenIds.Where(m => !string.IsNullOrEmpty(m))) : string.Empty),
                            new XElement("Genero", datos.Interpol.Detalle != null ? datos.Interpol.Detalle.SexId == "M" ? "MASCULINO" : "FEMENINO" : string.Empty),
                            new XElement("LugarNacimiento", datos.Interpol.Detalle != null ? datos.Interpol.Detalle.PlaceOfBirth?.ToUpper() : string.Empty),
                            new XElement("Cargos", datos.Interpol.Detalle != null && datos.Interpol.Detalle.ArrestWarrants != null && datos.Interpol.Detalle.ArrestWarrants.Any(m => m != null) ? datos.Interpol.Detalle.ArrestWarrants.Select(x => new XElement("Cargo", $"• {x.Charge.ToUpper()}")) : string.Empty))
                        : string.Empty),
                        new XElement("CacheDirectorioCompanias", datos.CacheDirectorioCompanias ? "SI" : "NO"),
                        new XElement("DirectCompania", datos.DirectorioCompania != null ? new XElement("Elementos",
                            new XElement("Ruc", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("RazonSocial", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("CiiuNivel1", !string.IsNullOrEmpty(datos.DirectorioCompania.CiiuNivelUno) ? datos.DirectorioCompania.CiiuNivelUno : string.Empty),
                            new XElement("CiiuNivel6", !string.IsNullOrEmpty(datos.DirectorioCompania.CiiuNivelSeis) ? datos.DirectorioCompania.CiiuNivelSeis : string.Empty),
                            new XElement("Expediente", datos.DirectorioCompania.Expediente != 0 ? datos.DirectorioCompania.Expediente : string.Empty),
                            new XElement("SituacionLegal", !string.IsNullOrEmpty(datos.DirectorioCompania.SituacionLegal) ? datos.DirectorioCompania.SituacionLegal : string.Empty),
                            new XElement("FechaConstitucion", datos.DirectorioCompania.FechaConstitucion.HasValue && datos.DirectorioCompania.FechaConstitucion.Value != default ? datos.DirectorioCompania.FechaConstitucion.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("CapitalSuscrito", datos.DirectorioCompania.CapitalSuscrito.HasValue ? $"${datos.DirectorioCompania.CapitalSuscrito.Value.ToString("N", culture)}" : string.Empty),
                            new XElement("UltimoBalance", datos.DirectorioCompania.UltimoBalance != 0 ? datos.DirectorioCompania.UltimoBalance : string.Empty),
                            new XElement("CedulaRepresentante", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RepresentanteLegal) && !string.IsNullOrEmpty(datos.Sri.AgenteRepresentante) && !string.IsNullOrEmpty(datos.DirectorioCompania.Representante) && datos.Sri.AgenteRepresentante.ToUpper().Trim() == datos.DirectorioCompania.Representante.ToUpper().Trim() ? datos.Sri.RepresentanteLegal : string.Empty),
                            new XElement("NombreRepresentante", !string.IsNullOrEmpty(datos.DirectorioCompania.Representante) ? datos.DirectorioCompania.Representante : datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.AgenteRepresentante) ? datos.Sri.AgenteRepresentante : string.Empty),
                            new XElement("CargoRepresentante", !string.IsNullOrEmpty(datos.DirectorioCompania.Cargo) ? datos.DirectorioCompania.Cargo : string.Empty),
                            new XElement("Pais", !string.IsNullOrEmpty(datos.DirectorioCompania.Pais) ? datos.DirectorioCompania.Pais : string.Empty),
                            new XElement("Provincia", !string.IsNullOrEmpty(datos.DirectorioCompania.Provincia) ? datos.DirectorioCompania.Provincia : string.Empty),
                            new XElement("Ciudad", !string.IsNullOrEmpty(datos.DirectorioCompania.Ciudad) ? datos.DirectorioCompania.Ciudad : string.Empty),
                            new XElement("Barrio", !string.IsNullOrEmpty(datos.DirectorioCompania.Barrio) ? datos.DirectorioCompania.Barrio : string.Empty),
                            new XElement("Calle", !string.IsNullOrEmpty(datos.DirectorioCompania.Calle) ? datos.DirectorioCompania.Calle : string.Empty),
                            new XElement("Numero", !string.IsNullOrEmpty(datos.DirectorioCompania.Numero) ? datos.DirectorioCompania.Numero : string.Empty),
                            new XElement("Interseccion", !string.IsNullOrEmpty(datos.DirectorioCompania.Interseccion) ? datos.DirectorioCompania.Interseccion : string.Empty),
                            new XElement("Telefono", !string.IsNullOrEmpty(datos.DirectorioCompania.Telefono) ? datos.DirectorioCompania.Telefono : string.Empty))
                        : string.Empty),
                        new XElement("Accionistas", datos.Accionistas != null && datos.Accionistas.Any() ? datos.Accionistas.OrderByDescending(x => !string.IsNullOrEmpty(x.ValorTransaccionOriginal) && decimal.TryParse(x.ValorTransaccionOriginal, out _) ? decimal.Parse(x.ValorTransaccionOriginal) : 0).Select(x => new XElement("Elementos",
                            new XElement("Identificacion", !string.IsNullOrEmpty(x.IdentificacionAccionista) ? x.IdentificacionAccionista : "N/A"),
                            new XElement("Nombre", !string.IsNullOrEmpty(x.NombreAccionista) ? x.NombreAccionista : "N/A"),
                            new XElement("TipoInversion", !string.IsNullOrEmpty(x.TipoInversion) ? x.TipoInversion : "N/A"),
                            new XElement("FechaIngreso", x.FechaIngresoActoJuridico.HasValue ? x.FechaIngresoActoJuridico.Value.ToString("dd/MM/yyyy") : string.Empty),
                            new XElement("PorcentajeParticipacion", sumaTotalAccionista > 0 && !string.IsNullOrEmpty(x.ValorTransaccionOriginal) ? ((decimal.Parse(x.ValorTransaccionOriginal) * 100) / sumaTotalAccionista).ToString("N", culture) : 0),
                            new XElement("ValorTransaccion", !string.IsNullOrEmpty(x.ValorTransaccionOriginal) ? decimal.Parse(x.ValorTransaccionOriginal).ToString("N", culture) : 0m)
                        )).Take(10) : string.Empty),
                        new XElement("AccionistasMsj", datos.Accionistas != null && datos.Accionistas.Any() && datos.Accionistas.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS ACCIONISTAS" : string.Empty),
                        new XElement("RepresentantEmpresa", datos.RepresentantesEmpresas != null ? new XElement("Elementos",
                            new XElement("RepresentantesEmpresas", datos.RepresentantesEmpresas != null && datos.RepresentantesEmpresas.Any() ? datos.RepresentantesEmpresas.Take(10).Select(x => new XElement("RepresentanteEmpresa", $"• {x.Ruc} - {x.Nombre}")) : string.Empty),
                            new XElement("RepresentantesEmpresasMsj", datos.RepresentantesEmpresas != null && datos.RepresentantesEmpresas.Any() && datos.RepresentantesEmpresas.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS EMPRESAS" : string.Empty))
                        : string.Empty),
                         new XElement("VerificarAccionistas", datos.BalancesVerificarAccionistas != null && datos.BalancesVerificarAccionistas.Detalle != null && datos.BalancesVerificarAccionistas.Detalle.Any() ? datos.BalancesVerificarAccionistas.Detalle.OrderByDescending(x => x.Capital).Select(x => new XElement("Elementos",
                            new XElement("Identificacion", !string.IsNullOrEmpty(x.Identificacion) ? x.Identificacion : "N/A"),
                            new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                            new XElement("Nacionalidad", !string.IsNullOrEmpty(x.Nacionalidad) ? x.Nacionalidad : "N/A"),
                            new XElement("TipoInversion", !string.IsNullOrEmpty(x.TipoInversion) ? x.TipoInversion : "N/A"),
                            new XElement("PorcentajeInversion", sumaTotalVerificarAccionista > 0 ? ((x.Capital * 100) / sumaTotalVerificarAccionista).ToString("N", culture) : 0),
                            new XElement("Capital", $"{(x.Capital / 10000).ToString("N", culture)}"),
                            new XElement("Restriccion", !string.IsNullOrEmpty(x.Restriccion) ? x.Restriccion : "N/A")
                        )).Take(10) : string.Empty),
                         new XElement("VerificarAccionistasMsj", datos.BalancesVerificarAccionistas != null && datos.BalancesVerificarAccionistas.Detalle != null && datos.BalancesVerificarAccionistas.Detalle.Any() && datos.BalancesVerificarAccionistas.Detalle.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS ACCIONISTAS" : string.Empty),
                        new XElement("EmpresasAccionista", datos.EmpresasAccionista != null ? new XElement("Elementos",
                            new XElement("Empresas", datos.EmpresasAccionista != null && datos.EmpresasAccionista.Any() ? datos.EmpresasAccionista.OrderBy(x => x.RazonSocial).Take(10).Select(x => new XElement("EmpresaAccionista", $"• {x.Ruc} - {x.RazonSocial}")) : string.Empty),
                            new XElement("EmpresasAccionistaMsj", datos.EmpresasAccionista != null && datos.EmpresasAccionista.Any() && datos.EmpresasAccionista.Count() > 10 ? "SE MUESTRAN LAS DIEZ PRIMERAS EMPRESAS" : string.Empty))
                        : string.Empty),
                        new XElement("CacheBalances", datos.CacheBalances ? "SI" : "NO"),
                        new XElement("BalancePeriodo",
                            new XElement("Anio", datos.Balance != null && datos.Balance.Periodo != 0 ? datos.Balance.Periodo : string.Empty),
                            new XElement("Indices",
                                new XElement("UtilidadBruta", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.UtilidadBruta.ToString("N", culture)}" : string.Empty),
                                new XElement("UtilidadOperacional", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.UtilidadOperacional.ToString("N", culture)}" : string.Empty),
                                new XElement("GananciaAntesDe15x100YImpuestos", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.GananciaAntesDe15x100YImpuestos.ToString("N", culture)}" : string.Empty),
                                new XElement("GananciaAntesDeImpuestos", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.GananciaAntesDeImpuestos.ToString("N", culture)}" : string.Empty),
                                new XElement("GananciaNeta", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.GananciaNeta.ToString("N", culture)}" : string.Empty),
                                new XElement("EBITDA", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.EBITDA.ToString("N", culture)}" : string.Empty),
                                new XElement("CapitalTrabajo", datos.Balance != null && datos.Balance.Indices != null ? $"${datos.Balance.Indices.CapitalTrabajo.ToString("N", culture)}" : string.Empty),
                                new XElement("MargenBruto", datos.Balance != null && datos.Balance.Indices != null ? $"{(datos.Balance.Indices.MargenBruto * 100).ToString("N", culture)}%" : string.Empty),
                                new XElement("MargenOperacional", datos.Balance != null && datos.Balance.Indices != null ? $"{(datos.Balance.Indices.MargenOperacional * 100).ToString("N", culture)}%" : string.Empty),
                                new XElement("MargenNeto", datos.Balance != null && datos.Balance.Indices != null ? $"{(datos.Balance.Indices.MargenNeto * 100).ToString("N", culture)}%" : string.Empty),
                                new XElement("EndeudamientoActivo", datos.Balance != null && datos.Balance.Indices != null ? $"{datos.Balance.Indices.EndeudamientoActivo.ToString("N", culture)}%" : string.Empty),
                                new XElement("ROA", datos.Balance != null && datos.Balance.Indices != null ? $"{(datos.Balance.Indices.ROA * 100).ToString("N", culture)}%" : string.Empty),
                                new XElement("ROE", datos.Balance != null && datos.Balance.Indices != null ? $"{(datos.Balance.Indices.ROE * 100).ToString("N", culture)}%" : string.Empty),
                                new XElement("CoberturaIntereses", datos.Balance != null && datos.Balance.Indices != null ? $"{datos.Balance.Indices.CoberturaIntereses.ToString("N", culture)} VECES" : string.Empty),
                                new XElement("DiasInventario", datos.Balance != null && datos.Balance.Indices != null ? $"{datos.Balance.Indices.DiasInventario.ToString("N", culture)} DÍAS" : string.Empty),
                                new XElement("PeriodoPromCobro", datos.Balance != null && datos.Balance.Indices != null ? $"{datos.Balance.Indices.PeriodoPromCobro.ToString("N", culture)} DÍAS" : string.Empty),
                                new XElement("PeriodoPromPago", datos.Balance != null && datos.Balance.Indices != null ? $"{datos.Balance.Indices.PeriodoPromPago} DÍAS" : string.Empty),
                                new XElement("PruebaAcida", datos.Balance != null && datos.Balance.Indices != null ? datos.Balance.Indices.PruebaAcida.ToString("N", culture) : string.Empty),
                                new XElement("LiquidezCorriente", datos.Balance != null && datos.Balance.Indices != null ? datos.Balance.Indices.LiquidezCorriente.ToString("N", culture) : string.Empty)
                            ),
                            new XElement("Activos",
                                new XElement("TotalActivoCorriente", datos.Balance != null && datos.Balance.Activos != null ? $"${datos.Balance.Activos.TotalActivoCorriente.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalActivoNoCorriente", datos.Balance != null && datos.Balance.Activos != null ? $"${datos.Balance.Activos.TotalActivoNoCorriente.ToString("N", culture)}" : string.Empty),
                                new XElement("OtrosActivosCorrientes", datos.Balance != null && datos.Balance.Activos != null ? $"${datos.Balance.Activos.OtrosActivosCorrientes.ToString("N", culture)}" : string.Empty),
                                new XElement("OtrosActivosNoCorrientes", datos.Balance != null && datos.Balance.Activos != null ? $"${datos.Balance.Activos.OtrosActivosNoCorrientes.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalActivo", datos.Balance != null && datos.Balance.Activos != null ? $"${datos.Balance.Activos.TotalActivo.ToString("N", culture)}" : string.Empty)
                            ),
                            new XElement("Pasivos",
                                new XElement("OtrosPasivosCorrientes", datos.Balance != null && datos.Balance.Pasivos != null ? $"${datos.Balance.Pasivos.OtrosPasivosCorrientes.ToString("N", culture)}" : string.Empty),
                                new XElement("OtrosPasivosNoCorrientes", datos.Balance != null && datos.Balance.Pasivos != null ? $"${datos.Balance.Pasivos.OtrosPasivosNoCorrientes.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalPasivoCorriente", datos.Balance != null && datos.Balance.Pasivos != null ? $"${datos.Balance.Pasivos.TotalPasivoCorriente.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalPasivoNoCorriente", datos.Balance != null && datos.Balance.Pasivos != null ? $"${datos.Balance.Pasivos.TotalPasivoNoCorriente.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalPasivo", datos.Balance != null && datos.Balance.Pasivos != null ? $"${datos.Balance.Pasivos.TotalPasivo.ToString("N", culture)}" : string.Empty)
                            ),
                            new XElement("Patrimonio",
                                new XElement("CapitalSuscrito", datos.Balance != null && datos.Balance.Patrimonio != null ? $"${datos.Balance.Patrimonio.CapitalSuscrito.ToString("N", culture)}" : string.Empty),
                                new XElement("PatrimonioNeto", datos.Balance != null && datos.Balance.Patrimonio != null ? $"${datos.Balance.Patrimonio.PatrimonioNeto.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalPatrimonio", datos.Balance != null && datos.Balance.Patrimonio != null ? $"${datos.Balance.Patrimonio.TotalPasivoPatrimonio.ToString("N", culture)}" : string.Empty)
                            ),
                            new XElement("Ingresos",
                                new XElement("Inventarios", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.Inventarios.ToString("N", culture)}" : string.Empty),
                                new XElement("EfectivoYCaja", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.EfectivoYCaja.ToString("N", culture)}" : string.Empty),
                                new XElement("PropiedadPlantaEquipo", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.PropiedadPlantaEquipo.ToString("N", culture)}" : string.Empty),
                                new XElement("AportesSociosFuturasCap", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.AportesSociosFuturasCap.ToString("N", culture)}" : string.Empty),
                                new XElement("ReservaLegal", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ReservaLegal.ToString("N", culture)}" : string.Empty),
                                new XElement("Ventas", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.Ventas.ToString("N", culture)}" : string.Empty),
                                new XElement("Servicios", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.Servicios.ToString("N", culture)}" : string.Empty),
                                new XElement("TotalIngresos", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.TotalIngresos.ToString("N", culture)}" : string.Empty),
                                new XElement("ImpuestoRenta", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ImpuestoRenta.ToString("N", culture)}" : string.Empty),
                                new XElement("CostoDeVentas", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.CostoDeVentas.ToString("N", culture)}" : string.Empty),
                                new XElement("CostosOperacionales", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.CostosOperacionales.ToString("N", culture)}" : string.Empty),
                                new XElement("IngresosOperacionales", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.IngresosOperacionales.ToString("N", culture)}" : string.Empty),
                                new XElement("IngresosNoOperacionales", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.IngresosNoOperacionales.ToString("N", culture)}" : string.Empty),
                                new XElement("OtrosIngresosNoOperacionales", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.OtrosIngresosNoOperacionales.ToString("N", culture)}" : string.Empty),
                                new XElement("CxCComercialesTerceros", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.Inventarios.ToString("N", culture)}" : string.Empty),
                                new XElement("CxCAccionistasYRelacionados", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.CxCAccionistasYRelacionados.ToString("N", culture)}" : string.Empty),
                                new XElement("ProvisionesCorrientes", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ProvisionesCorrientes.ToString("N", culture)}" : string.Empty),
                                new XElement("ProvisionesNoCorrientes", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ProvisionesNoCorrientes.ToString("N", culture)}" : string.Empty),
                                new XElement("ProvisionesBeneficiosEmpleados", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ProvisionesBeneficiosEmpleados.ToString("N", culture)}" : string.Empty)
                            ),
                            new XElement("Gastos",
                                new XElement("GastosOperacionales", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.GastosOperacionales.ToString("N", culture)}" : string.Empty),
                                new XElement("GastosFinancieros", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.GastosFinancieros.ToString("N", culture)}" : string.Empty),
                                new XElement("P15x100Trabajadores", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.P15x100Trabajadores.ToString("N", culture)}" : string.Empty),
                                new XElement("CxPProveedoresTerceros", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.CxPProveedoresTerceros.ToString("N", culture)}" : string.Empty),
                                new XElement("CxPAccionistasYRelacionados", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.CxPAccionistasYRelacionados.ToString("N", culture)}" : string.Empty),
                                new XElement("ObFinancierasCortoPlazo", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ObFinancierasCortoPlazo.ToString("N", culture)}" : string.Empty),
                                new XElement("OBFinancierasLargoPlazo", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.OBFinancierasLargoPlazo.ToString("N", culture)}" : string.Empty),
                                new XElement("Depreciaciones", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.Depreciaciones.ToString("N", culture)}" : string.Empty)
                            ),
                            new XElement("Resultados",
                                new XElement("UtilidadEjercicio", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.UtilidadEjercicio.ToString("N", culture)}" : string.Empty),
                                new XElement("PerdidaEjercicio", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.PerdidaEjercicio.ToString("N", culture)}" : string.Empty),
                                new XElement("ResultadosAcumulados", datos.Balance != null && datos.Balance.Otros != null ? $"${datos.Balance.Otros.ResultadosAcumulados.ToString("N", culture)}" : string.Empty)
                            )
                        ),
                        new XElement("BalancesPeriodos", datos.Balances != null && datos.Balances.Any() ? datos.Balances.Select(x => new XElement("Periodo",
                              new XElement("Anio", x.Periodo),
                              new XElement("Indices",
                                  new XElement("UtilidadBruta", $"${x.Indices.UtilidadBruta.ToString("N", culture)}"),
                                  new XElement("UtilidadOperacional", $"${x.Indices.UtilidadOperacional.ToString("N", culture)}"),
                                  new XElement("GananciaAntesDe15x100YImpuestos", $"${x.Indices.GananciaAntesDe15x100YImpuestos.ToString("N", culture)}"),
                                  new XElement("GananciaAntesDeImpuestos", $"${x.Indices.GananciaAntesDeImpuestos.ToString("N", culture)}"),
                                  new XElement("GananciaNeta", $"${x.Indices.GananciaNeta.ToString("N", culture)}"),
                                  new XElement("EBITDA", $"${x.Indices.EBITDA.ToString("N", culture)}"),
                                  new XElement("CapitalTrabajo", $"${x.Indices.CapitalTrabajo.ToString("N", culture)}"),
                                  new XElement("MargenBruto", $"{(x.Indices.MargenBruto * 100).ToString("N", culture)}%"),
                                  new XElement("MargenOperacional", $"{(x.Indices.MargenOperacional * 100).ToString("N", culture)}%"),
                                  new XElement("MargenNeto", $"{(x.Indices.MargenNeto * 100).ToString("N", culture)}%"),
                                  new XElement("EndeudamientoActivo", $"{x.Indices.EndeudamientoActivo.ToString("N", culture)}%"),
                                  new XElement("ROA", $"{(x.Indices.ROA * 100).ToString("N", culture)}%"),
                                  new XElement("ROE", $"{(x.Indices.ROE * 100).ToString("N", culture)}%"),
                                  new XElement("CoberturaIntereses", $"{x.Indices.CoberturaIntereses.ToString("N", culture)} VECES"),
                                  new XElement("DiasInventario", $"{x.Indices.DiasInventario.ToString("N", culture)} DÍAS"),
                                  new XElement("PeriodoPromCobro", $"{x.Indices.PeriodoPromCobro.ToString("N", culture)} DÍAS"),
                                  new XElement("PeriodoPromPago", $"{x.Indices.PeriodoPromPago} DÍAS"),
                                  new XElement("PruebaAcida", x.Indices.PruebaAcida.ToString("N", culture)),
                                  new XElement("LiquidezCorriente", x.Indices.LiquidezCorriente.ToString("N", culture))
                              ),
                              new XElement("Activos",
                                  new XElement("TotalActivoCorriente", $"${x.Activos.TotalActivoCorriente.ToString("N", culture)}"),
                                  new XElement("TotalActivoNoCorriente", $"${x.Activos.TotalActivoNoCorriente.ToString("N", culture)}"),
                                  new XElement("OtrosActivosCorrientes", $"${x.Activos.OtrosActivosCorrientes.ToString("N", culture)}"),
                                  new XElement("OtrosActivosNoCorrientes", $"${x.Activos.OtrosActivosNoCorrientes.ToString("N", culture)}"),
                                  new XElement("TotalActivo", $"${x.Activos.TotalActivo.ToString("N", culture)}")
                              ),
                              new XElement("Pasivos",
                                  new XElement("TotalPasivoCorriente", $"${x.Pasivos.TotalPasivoCorriente.ToString("N", culture)}"),
                                  new XElement("TotalPasivoNoCorriente", $"${x.Pasivos.TotalPasivoNoCorriente.ToString("N", culture)}"),
                                  new XElement("OtrosPasivosCorrientes", $"${x.Pasivos.OtrosPasivosCorrientes.ToString("N", culture)}"),
                                  new XElement("OtrosPasivosNoCorrientes", $"${x.Pasivos.OtrosPasivosNoCorrientes.ToString("N", culture)}"),
                                  new XElement("TotalPasivo", $"${x.Pasivos.TotalPasivo.ToString("N", culture)}")
                              ),
                              new XElement("Patrimonio",
                                  new XElement("CapitalSuscrito", $"${x.Patrimonio.CapitalSuscrito.ToString("N", culture)}"),
                                  new XElement("PatrimonioNeto", $"${x.Patrimonio.PatrimonioNeto.ToString("N", culture)}"),
                                  new XElement("TotalPatrimonio", $"${x.Patrimonio.TotalPasivoPatrimonio.ToString("N", culture)}")
                              ),
                              new XElement("Ingresos",
                                  new XElement("Inventarios", $"${x.Otros.Inventarios.ToString("N", culture)}"),
                                  new XElement("EfectivoYCaja", $"${x.Otros.EfectivoYCaja.ToString("N", culture)}"),
                                  new XElement("PropiedadPlantaEquipo", $"${x.Otros.PropiedadPlantaEquipo.ToString("N", culture)}"),
                                  new XElement("AportesSociosFuturasCap", $"${x.Otros.AportesSociosFuturasCap.ToString("N", culture)}"),
                                  new XElement("ReservaLegal", $"${x.Otros.ReservaLegal.ToString("N", culture)}"),
                                  new XElement("Ventas", $"${x.Otros.Ventas.ToString("N", culture)}"),
                                  new XElement("Servicios", $"${x.Otros.Servicios.ToString("N", culture)}"),
                                  new XElement("TotalIngresos", $"${x.Otros.TotalIngresos.ToString("N", culture)}"),
                                  new XElement("ImpuestoRenta", $"${x.Otros.ImpuestoRenta.ToString("N", culture)}"),
                                  new XElement("CostoDeVentas", $"${x.Otros.CostoDeVentas.ToString("N", culture)}"),
                                  new XElement("CostosOperacionales", $"${x.Otros.CostosOperacionales.ToString("N", culture)}"),
                                  new XElement("IngresosOperacionales", $"${x.Otros.IngresosOperacionales.ToString("N", culture)}"),
                                  new XElement("IngresosNoOperacionales", $"${x.Otros.IngresosNoOperacionales.ToString("N", culture)}"),
                                  new XElement("OtrosIngresosNoOperacionales", $"${x.Otros.OtrosIngresosNoOperacionales.ToString("N", culture)}"),
                                  new XElement("CxCComercialesTerceros", $"${x.Otros.Inventarios.ToString("N", culture)}"),
                                  new XElement("CxCAccionistasYRelacionados", $"${x.Otros.CxCAccionistasYRelacionados.ToString("N", culture)}"),
                                  new XElement("ProvisionesCorrientes", $"${x.Otros.ProvisionesCorrientes.ToString("N", culture)}"),
                                  new XElement("ProvisionesNoCorrientes", $"${x.Otros.ProvisionesNoCorrientes.ToString("N", culture)}"),
                                  new XElement("ProvisionesBeneficiosEmpleados", $"${x.Otros.ProvisionesBeneficiosEmpleados.ToString("N", culture)}")
                              ),
                              new XElement("Gastos",
                                  new XElement("GastosOperacionales", $"${x.Otros.GastosOperacionales.ToString("N", culture)}"),
                                  new XElement("GastosFinancieros", $"${x.Otros.GastosFinancieros.ToString("N", culture)}"),
                                  new XElement("P15x100Trabajadores", $"${x.Otros.P15x100Trabajadores.ToString("N", culture)}"),
                                  new XElement("CxPProveedoresTerceros", $"${x.Otros.CxPProveedoresTerceros.ToString("N", culture)}"),
                                  new XElement("CxPAccionistasYRelacionados", $"${x.Otros.CxPAccionistasYRelacionados.ToString("N", culture)}"),
                                  new XElement("ObFinancierasCortoPlazo", $"${x.Otros.ObFinancierasCortoPlazo.ToString("N", culture)}"),
                                  new XElement("OBFinancierasLargoPlazo", $"${x.Otros.OBFinancierasLargoPlazo.ToString("N", culture)}"),
                                  new XElement("Depreciaciones", $"${x.Otros.Depreciaciones.ToString("N", culture)}")
                              ),
                              new XElement("Resultados",
                                  new XElement("UtilidadEjercicio", $"${x.Otros.UtilidadEjercicio.ToString("N", culture)}"),
                                  new XElement("PerdidaEjercicio", $"${x.Otros.PerdidaEjercicio.ToString("N", culture)}"),
                                  new XElement("ResultadosAcumulados", $"${x.Otros.ResultadosAcumulados.ToString("N", culture)}")
                              ))) : string.Empty),
                        new XElement("CacheAnalisisHorizontal", datos.CacheAnalisisHorizontal ? "SI" : "NO"),
                        new XElement("AnalisisHorizontal", datos.AnalisisHorizontal != null && datos.AnalisisHorizontal.Any() ? datos.AnalisisHorizontal.Select(x => new XElement("Periodo",
                              new XElement("Anio", x.Periodo.ToString().Length == 4 ? x.Periodo : "ANÁLISIS"),
                              new XElement("Indices",
                                  new XElement("UtilidadBruta", x.Periodo.ToString().Length == 4 ? $"${x.Indices.UtilidadBruta.Value.ToString("N", culture)}" : x.Indices.UtilidadBruta.HasValue ? $"{x.Indices.UtilidadBruta.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("UtilidadOperacional", x.Periodo.ToString().Length == 4 ? $"${x.Indices.UtilidadOperacional.Value.ToString("N", culture)}" : x.Indices.UtilidadOperacional.HasValue ? $"{x.Indices.UtilidadOperacional.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("GananciaAntesDe15x100YImpuestos", x.Periodo.ToString().Length == 4 ? $"${x.Indices.GananciaAntesDe15x100YImpuestos.Value.ToString("N", culture)}" : x.Indices.GananciaAntesDe15x100YImpuestos.HasValue ? $"{x.Indices.GananciaAntesDe15x100YImpuestos.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("GananciaAntesDeImpuestos", x.Periodo.ToString().Length == 4 ? $"${x.Indices.GananciaAntesDeImpuestos.Value.ToString("N", culture)}" : x.Indices.GananciaAntesDeImpuestos.HasValue ? $"{x.Indices.GananciaAntesDeImpuestos.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("GananciaNeta", x.Periodo.ToString().Length == 4 ? $"${x.Indices.GananciaNeta.Value.ToString("N", culture)}" : x.Indices.GananciaNeta.HasValue ? $"{x.Indices.GananciaNeta.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("EBITDA", x.Periodo.ToString().Length == 4 ? $"${x.Indices.EBITDA.Value.ToString("N", culture)}" : x.Indices.EBITDA.HasValue ? $"{x.Indices.EBITDA.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CapitalTrabajo", x.Periodo.ToString().Length == 4 ? $"${x.Indices.CapitalTrabajo.Value.ToString("N", culture)}" : x.Indices.CapitalTrabajo.HasValue ? $"{x.Indices.CapitalTrabajo.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("MargenBruto", x.Periodo.ToString().Length == 4 ? $"{(x.Indices.MargenBruto * 100).Value.ToString("N", culture)}%" : x.Indices.MargenBruto.HasValue ? $"{x.Indices.MargenBruto.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("MargenOperacional", x.Periodo.ToString().Length == 4 ? $"{(x.Indices.MargenOperacional * 100).Value.ToString("N", culture)}%" : x.Indices.MargenOperacional.HasValue ? $"{x.Indices.MargenOperacional.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("MargenNeto", x.Periodo.ToString().Length == 4 ? $"{(x.Indices.MargenNeto * 100).Value.ToString("N", culture)}%" : x.Indices.MargenNeto.HasValue ? $"{x.Indices.MargenNeto.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("EndeudamientoActivo", x.Periodo.ToString().Length == 4 ? $"{x.Indices.EndeudamientoActivo.Value.ToString("N", culture)}%" : x.Indices.EndeudamientoActivo.HasValue ? $"{x.Indices.EndeudamientoActivo.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ROA", x.Periodo.ToString().Length == 4 ? $"{(x.Indices.ROA * 100).Value.ToString("N", culture)}%" : x.Indices.ROA.HasValue ? $"{x.Indices.ROA.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ROE", x.Periodo.ToString().Length == 4 ? $"{(x.Indices.ROE * 100).Value.ToString("N", culture)}%" : x.Indices.ROE.HasValue ? $"{x.Indices.ROE.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CoberturaIntereses", x.Periodo.ToString().Length == 4 ? $"{x.Indices.CoberturaIntereses.Value.ToString("N", culture)} VECES" : x.Indices.CoberturaIntereses.HasValue ? $"{x.Indices.CoberturaIntereses.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("DiasInventario", x.Periodo.ToString().Length == 4 ? $"{x.Indices.DiasInventario.Value.ToString("N", culture)} DÍAS" : x.Indices.DiasInventario.HasValue ? $"{x.Indices.DiasInventario.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("PeriodoPromCobro", x.Periodo.ToString().Length == 4 ? $"{x.Indices.PeriodoPromCobro.Value.ToString("N", culture)} DÍAS" : x.Indices.PeriodoPromCobro.HasValue ? $"{x.Indices.PeriodoPromCobro.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("PeriodoPromPago", x.Periodo.ToString().Length == 4 ? $"{x.Indices.PeriodoPromPago} DÍAS" : x.Indices.PeriodoPromPago.HasValue ? $"{x.Indices.PeriodoPromPago.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("PruebaAcida", x.Periodo.ToString().Length == 4 ? x.Indices.PruebaAcida.Value.ToString("N", culture) : x.Indices.PruebaAcida.HasValue ? $"{x.Indices.PruebaAcida.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("LiquidezCorriente", x.Periodo.ToString().Length == 4 ? x.Indices.LiquidezCorriente.Value.ToString("N", culture) : x.Indices.LiquidezCorriente.HasValue ? $"{x.Indices.LiquidezCorriente.Value.ToString("N", culture)}%" : string.Empty)
                              ),
                              new XElement("Activos",
                                  new XElement("TotalActivoCorriente", x.Periodo.ToString().Length == 4 ? $"${x.Activos.TotalActivoCorriente.Value.ToString("N", culture)}" : x.Activos.TotalActivoCorriente.HasValue ? $"{x.Activos.TotalActivoCorriente.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("TotalActivoNoCorriente", x.Periodo.ToString().Length == 4 ? $"${x.Activos.TotalActivoNoCorriente.Value.ToString("N", culture)}" : x.Activos.TotalActivoNoCorriente.HasValue ? $"{x.Activos.TotalActivoNoCorriente.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("OtrosActivosCorrientes", x.Periodo.ToString().Length == 4 ? $"${x.Activos.OtrosActivosCorrientes.Value.ToString("N", culture)}" : x.Activos.OtrosActivosCorrientes.HasValue ? $"{x.Activos.OtrosActivosCorrientes.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("OtrosActivosNoCorrientes", x.Periodo.ToString().Length == 4 ? $"${x.Activos.OtrosActivosNoCorrientes.Value.ToString("N", culture)}" : x.Activos.OtrosActivosNoCorrientes.HasValue ? $"{x.Activos.OtrosActivosNoCorrientes.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("TotalActivo", x.Periodo.ToString().Length == 4 ? $"${x.Activos.TotalActivo.Value.ToString("N", culture)}" : x.Activos.TotalActivo.HasValue ? $"{x.Activos.TotalActivo.Value.ToString("N", culture)}%" : string.Empty)
                              ),
                              new XElement("Pasivos",
                                  new XElement("TotalPasivoCorriente", x.Periodo.ToString().Length == 4 ? $"${x.Pasivos.TotalPasivoCorriente.Value.ToString("N", culture)}" : x.Pasivos.TotalPasivoCorriente.HasValue ? $"{x.Pasivos.TotalPasivoCorriente.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("TotalPasivoNoCorriente", x.Periodo.ToString().Length == 4 ? $"${x.Pasivos.TotalPasivoNoCorriente.Value.ToString("N", culture)}" : x.Pasivos.TotalPasivoNoCorriente.HasValue ? $"{x.Pasivos.TotalPasivoNoCorriente.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("OtrosPasivosCorrientes", x.Periodo.ToString().Length == 4 ? $"${x.Pasivos.OtrosPasivosCorrientes.Value.ToString("N", culture)}" : x.Pasivos.OtrosPasivosCorrientes.HasValue ? $"{x.Pasivos.OtrosPasivosCorrientes.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("OtrosPasivosNoCorrientes", x.Periodo.ToString().Length == 4 ? $"${x.Pasivos.OtrosPasivosNoCorrientes.Value.ToString("N", culture)}" : x.Pasivos.OtrosPasivosNoCorrientes.HasValue ? $"{x.Pasivos.OtrosPasivosNoCorrientes.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("TotalPasivo", x.Periodo.ToString().Length == 4 ? $"${x.Pasivos.TotalPasivo.Value.ToString("N", culture)}" : x.Pasivos.TotalPasivo.HasValue ? $"{x.Pasivos.TotalPasivo.Value.ToString("N", culture)}%" : string.Empty)
                              ),
                              new XElement("Patrimonio",
                                  new XElement("CapitalSuscrito", x.Periodo.ToString().Length == 4 ? $"${x.Patrimonio.CapitalSuscrito.Value.ToString("N", culture)}" : x.Patrimonio.CapitalSuscrito.HasValue ? $"{x.Patrimonio.CapitalSuscrito.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("PatrimonioNeto", x.Periodo.ToString().Length == 4 ? $"${x.Patrimonio.PatrimonioNeto.Value.ToString("N", culture)}" : x.Patrimonio.PatrimonioNeto.HasValue ? $"{x.Patrimonio.PatrimonioNeto.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("TotalPatrimonio", x.Periodo.ToString().Length == 4 ? $"${x.Patrimonio.TotalPasivoPatrimonio.Value.ToString("N", culture)}" : x.Patrimonio.TotalPasivoPatrimonio.HasValue ? $"{x.Patrimonio.TotalPasivoPatrimonio.Value.ToString("N", culture)}%" : string.Empty)
                              ),
                              new XElement("Ingresos",
                                  new XElement("Inventarios", x.Periodo.ToString().Length == 4 ? $"${x.Otros.Inventarios.Value.ToString("N", culture)}" : x.Otros.Inventarios.HasValue ? $"{x.Otros.Inventarios.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("EfectivoYCaja", x.Periodo.ToString().Length == 4 ? $"${x.Otros.EfectivoYCaja.Value.ToString("N", culture)}" : x.Otros.EfectivoYCaja.HasValue ? $"{x.Otros.EfectivoYCaja.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("PropiedadPlantaEquipo", x.Periodo.ToString().Length == 4 ? $"${x.Otros.PropiedadPlantaEquipo.Value.ToString("N", culture)}" : x.Otros.PropiedadPlantaEquipo.HasValue ? $"{x.Otros.PropiedadPlantaEquipo.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("AportesSociosFuturasCap", x.Periodo.ToString().Length == 4 ? $"${x.Otros.AportesSociosFuturasCap.Value.ToString("N", culture)}" : x.Otros.AportesSociosFuturasCap.HasValue ? $"{x.Otros.AportesSociosFuturasCap.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ReservaLegal", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ReservaLegal.Value.ToString("N", culture)}" : x.Otros.ReservaLegal.HasValue ? $"{x.Otros.ReservaLegal.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("Ventas", x.Periodo.ToString().Length == 4 ? $"${x.Otros.Ventas.Value.ToString("N", culture)}" : x.Otros.Ventas.HasValue ? $"{x.Otros.Ventas.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("Servicios", x.Periodo.ToString().Length == 4 ? $"${x.Otros.Servicios.Value.ToString("N", culture)}" : x.Otros.Servicios.HasValue ? $"{x.Otros.Servicios.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("TotalIngresos", x.Periodo.ToString().Length == 4 ? $"${x.Otros.TotalIngresos.Value.ToString("N", culture)}" : x.Otros.TotalIngresos.HasValue ? $"{x.Otros.TotalIngresos.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ImpuestoRenta", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ImpuestoRenta.Value.ToString("N", culture)}" : x.Otros.ImpuestoRenta.HasValue ? $"{x.Otros.ImpuestoRenta.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CostoDeVentas", x.Periodo.ToString().Length == 4 ? $"${x.Otros.CostoDeVentas.Value.ToString("N", culture)}" : x.Otros.CostoDeVentas.HasValue ? $"{x.Otros.CostoDeVentas.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CostosOperacionales", x.Periodo.ToString().Length == 4 ? $"${x.Otros.CostosOperacionales.Value.ToString("N", culture)}" : x.Otros.CostosOperacionales.HasValue ? $"{x.Otros.CostosOperacionales.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("IngresosOperacionales", x.Periodo.ToString().Length == 4 ? $"${x.Otros.IngresosOperacionales.Value.ToString("N", culture)}" : x.Otros.IngresosOperacionales.HasValue ? $"{x.Otros.IngresosOperacionales.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("IngresosNoOperacionales", x.Periodo.ToString().Length == 4 ? $"${x.Otros.IngresosNoOperacionales.Value.ToString("N", culture)}" : x.Otros.IngresosNoOperacionales.HasValue ? $"{x.Otros.IngresosNoOperacionales.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("OtrosIngresosNoOperacionales", x.Periodo.ToString().Length == 4 ? $"${x.Otros.OtrosIngresosNoOperacionales.Value.ToString("N", culture)}" : x.Otros.OtrosIngresosNoOperacionales.HasValue ? $"{x.Otros.OtrosIngresosNoOperacionales.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CxCComercialesTerceros", x.Periodo.ToString().Length == 4 ? $"${x.Otros.CxCComercialesTerceros.Value.ToString("N", culture)}" : x.Otros.CxCComercialesTerceros.HasValue ? $"{x.Otros.CxCComercialesTerceros.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CxCAccionistasYRelacionados", x.Periodo.ToString().Length == 4 ? $"${x.Otros.CxCAccionistasYRelacionados.Value.ToString("N", culture)}" : x.Otros.CxCAccionistasYRelacionados.HasValue ? $"{x.Otros.CxCAccionistasYRelacionados.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ProvisionesCorrientes", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ProvisionesCorrientes.Value.ToString("N", culture)}" : x.Otros.ProvisionesCorrientes.HasValue ? $"{x.Otros.ProvisionesCorrientes.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ProvisionesNoCorrientes", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ProvisionesNoCorrientes.Value.ToString("N", culture)}" : x.Otros.ProvisionesNoCorrientes.HasValue ? $"{x.Otros.ProvisionesNoCorrientes.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ProvisionesBeneficiosEmpleados", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ProvisionesBeneficiosEmpleados.Value.ToString("N", culture)}" : x.Otros.ProvisionesBeneficiosEmpleados.HasValue ? $"{x.Otros.ProvisionesBeneficiosEmpleados.Value.ToString("N", culture)}%" : string.Empty)
                              ),
                              new XElement("Gastos",
                                  new XElement("GastosOperacionales", x.Periodo.ToString().Length == 4 ? $"${x.Otros.GastosOperacionales.Value.ToString("N", culture)}" : x.Otros.GastosOperacionales.HasValue ? $"{x.Otros.GastosOperacionales.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("GastosFinancieros", x.Periodo.ToString().Length == 4 ? $"${x.Otros.GastosFinancieros.Value.ToString("N", culture)}" : x.Otros.GastosFinancieros.HasValue ? $"{x.Otros.GastosFinancieros.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("P15x100Trabajadores", x.Periodo.ToString().Length == 4 ? $"${x.Otros.P15x100Trabajadores.Value.ToString("N", culture)}" : x.Otros.P15x100Trabajadores.HasValue ? $"{x.Otros.P15x100Trabajadores.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CxPProveedoresTerceros", x.Periodo.ToString().Length == 4 ? $"${x.Otros.CxPProveedoresTerceros.Value.ToString("N", culture)}" : x.Otros.CxPProveedoresTerceros.HasValue ? $"${x.Otros.CxPProveedoresTerceros.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("CxPAccionistasYRelacionados", x.Periodo.ToString().Length == 4 ? $"${x.Otros.CxPAccionistasYRelacionados.Value.ToString("N", culture)}" : x.Otros.CxPAccionistasYRelacionados.HasValue ? $"{x.Otros.CxPAccionistasYRelacionados.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ObFinancierasCortoPlazo", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ObFinancierasCortoPlazo.Value.ToString("N", culture)}" : x.Otros.ObFinancierasCortoPlazo.HasValue ? $"{x.Otros.ObFinancierasCortoPlazo.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("OBFinancierasLargoPlazo", x.Periodo.ToString().Length == 4 ? $"${x.Otros.OBFinancierasLargoPlazo.Value.ToString("N", culture)}" : x.Otros.OBFinancierasLargoPlazo.HasValue ? $"{x.Otros.OBFinancierasLargoPlazo.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("Depreciaciones", x.Periodo.ToString().Length == 4 ? $"${x.Otros.Depreciaciones.Value.ToString("N", culture)}" : x.Otros.Depreciaciones.HasValue ? $"{x.Otros.Depreciaciones.Value.ToString("N", culture)}%" : string.Empty)
                              ),
                              new XElement("Resultados",
                                  new XElement("UtilidadEjercicio", x.Periodo.ToString().Length == 4 ? $"${x.Otros.UtilidadEjercicio.Value.ToString("N", culture)}" : x.Otros.UtilidadEjercicio.HasValue ? $"{x.Otros.UtilidadEjercicio.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("PerdidaEjercicio", x.Periodo.ToString().Length == 4 ? $"${x.Otros.PerdidaEjercicio.Value.ToString("N", culture)}" : x.Otros.PerdidaEjercicio.HasValue ? $"{x.Otros.PerdidaEjercicio.Value.ToString("N", culture)}%" : string.Empty),
                                  new XElement("ResultadosAcumulados", x.Periodo.ToString().Length == 4 ? $"${x.Otros.ResultadosAcumulados.Value.ToString("N", culture)}" : x.Otros.ResultadosAcumulados.HasValue ? $"{x.Otros.ResultadosAcumulados.Value.ToString("N", culture)}%" : string.Empty)
                              ))) : string.Empty),
                         new XElement("ResultadoPoliticas", datos.ResultadoPoliticas != null ?
                            new XElement("Elementos",
                                new XElement("Calificacion",
                                      new XElement("EmpresaPersonalizada", !string.IsNullOrEmpty(datos.EmpresaPersonalizada) ? datos.EmpresaPersonalizada : string.Empty),
                                      new XElement("TotalValidados", datos.ResultadoPoliticas.TotalValidados),
                                      new XElement("TotalRechazados", datos.ResultadoPoliticas.TotalRechazados),
                                      new XElement("TotalAprobados", datos.ResultadoPoliticas.TotalAprobados),
                                      new XElement("Calificacion", datos.ResultadoPoliticas.Calificacion),
                                      new XElement("Aprobado", datos.ResultadoPoliticas.Aprobado),
                                      new XElement("Politicas", datos.ResultadoPoliticas.DetalleCalificacion.Any() ? datos.ResultadoPoliticas.DetalleCalificacion.Select(x => new XElement("Politica",
                                         new XElement("Politica", $"{x.Politica} {(lstImpuestoRenta.Contains(x.Tipo) ? periodo : string.Empty)}"),
                                         new XElement("ReferenciaMinima", x.ReferenciaMinima),
                                         new XElement("Valor", x.ValorResultado),
                                         new XElement("ResultadoPolitica", x.ResultadoPolitica)
                                      )) : string.Empty))
                            ) : string.Empty),
                         new XElement("ResultadoPoliticasBuro", datos.ResultadoPoliticasBuro != null ?
                            new XElement("Elementos",
                                new XElement("Calificacion",
                                      new XElement("TotalValidados", datos.ResultadoPoliticasBuro.TotalValidados.ToString()),
                                      new XElement("TotalRechazados", datos.ResultadoPoliticasBuro.TotalRechazados.ToString()),
                                      new XElement("TotalAprobados", datos.ResultadoPoliticasBuro.TotalAprobados.ToString()),
                                      new XElement("Calificacion", datos.ResultadoPoliticasBuro.Calificacion),
                                      new XElement("Aprobado", datos.ResultadoPoliticasBuro.Aprobado),
                                      new XElement("Score", datos.ResultadoPoliticasBuro.Score.HasValue && datos.ResultadoPoliticasBuro.Score > 0 ? datos.ResultadoPoliticasBuro.Score : string.Empty),
                                      new XElement("ScoreRagui", datos.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1091796789001 && datos.ResultadoPoliticasBuro.Score.HasValue ? datos.ResultadoPoliticasBuro.Score : string.Empty),
                                      new XElement("AprobadoCupoPlazo", datos.ResultadoPoliticasBuro.Aprobado ? datos.ResultadoPoliticasBuro.Aprobado : string.Empty),
                                      new XElement("CupoEstimado", datos.ResultadoPoliticasBuro.Aprobado && datos.ResultadoPoliticasBuro.CupoEstimado.HasValue ? datos.ResultadoPoliticasBuro.CupoEstimado : string.Empty),
                                      new XElement("VentasEmpresa", datos.ResultadoPoliticasBuro.VentasEmpresa.HasValue ? datos.ResultadoPoliticasBuro.VentasEmpresa : string.Empty),
                                      new XElement("PatrimonioEmpresa", datos.ResultadoPoliticasBuro.PatrimonioEmpresa.HasValue ? datos.ResultadoPoliticasBuro.PatrimonioEmpresa : string.Empty),
                                      new XElement("RangoIngreso", !string.IsNullOrEmpty(datos.ResultadoPoliticasBuro.RangoIngreso) ? datos.ResultadoPoliticasBuro.RangoIngreso : string.Empty),
                                      new XElement("GastoFinanciero", datos.ResultadoPoliticasBuro.GastoFinanciero.HasValue ? datos.ResultadoPoliticasBuro.GastoFinanciero : string.Empty),
                                      new XElement("VendedorAlmespana", datos.ResultadoPoliticasBuro.CalificacionVendedorAlmespana ? "SI" : "NO"),
                                      new XElement("Politicas", datos.ResultadoPoliticasBuro.DetalleCalificacion.Any() ? datos.ResultadoPoliticasBuro.DetalleCalificacion.Select(x => new XElement("Politica",
                                         new XElement("Politica", x.Politica),
                                         new XElement("ReferenciaMinima", x.ReferenciaMinima),
                                         new XElement("Valor", x.ValorResultado),
                                         new XElement("ResultadoPolitica", x.ResultadoPolitica),
                                         new XElement("TipoRagui", datos.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1091796789001 && politicasEvaluacion.Contains(x.Tipo) ? "SI" : "NO"),
                                         new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte.Value.ToString("dd/MM/yyyy") : string.Empty),
                                         new XElement("Instituciones", !string.IsNullOrEmpty(x.Instituciones) ? JsonConvert.DeserializeObject<List<InstitucionViewModel>>(x.Instituciones).Select(x => new XElement("Institucion",
                                            new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                                            new XElement("Valor", x.Valor.ToString("N", culture)),
                                            new XElement("NmbVencimiento", !string.IsNullOrEmpty(x.NmbVencimiento) ? x.NmbVencimiento : string.Empty)
                                         )) : string.Empty)
                                      )) : string.Empty))
                            ) : string.Empty),
                         new XElement("ResultadoPoliticasBuroAyasa", datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1792899036001 && datos.ResultadoPoliticasBuro != null && datos.BuroCredito.Result.ModeloAutomotrizAyasa != null && datos.BuroCredito.Result.ModeloAutomotrizAyasa.Any() && datos.BuroCredito.Result.ModeloAutomotrizAyasa.FirstOrDefault().Resumen != null ?
                            new XElement("Elementos",
                                new XElement("Calificacion",
                                      new XElement("Score", datos.ResultadoPoliticasBuro.Score.HasValue && datos.ResultadoPoliticasBuro.Score > 0 ? datos.ResultadoPoliticasBuro.Score : string.Empty),
                                      new XElement("TipoDecision", datos.BuroCredito.Result.ModeloAutomotrizAyasa.FirstOrDefault().Resumen.TipoDecisionValor),
                                      new XElement("DecisionModelo", datos.BuroCredito.Result.ModeloAutomotrizAyasa.FirstOrDefault().Resumen.DecisionModelo))
                            ) : string.Empty),
                         new XElement("ResultadoPoliticasBuroIndumot", datos.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001 && datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion != null && datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.Any() ?
                            new XElement("Datos",
                                new XElement("MontoAprobado", datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().MontoAprobado),
                                new XElement("SegmentacionCliente", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().SegmentacionCliente) ? datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().SegmentacionCliente : string.Empty),
                                new XElement("Score", datos.ResultadoPoliticasBuro != null && datos.ResultadoPoliticasBuro.Score.HasValue && datos.ResultadoPoliticasBuro.Score > 0 ? datos.ResultadoPoliticasBuro.Score : string.Empty),
                                new XElement("RangodeIngreso", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().RangodeIngreso) ? datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().RangodeIngreso : string.Empty),
                                new XElement("GastoFinanciero", datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().GastoFinanciero.ToString("N", culture)),
                                new XElement("Plazo", datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().Plazo),
                                new XElement("MensajeValorEntrada", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().MensajeValorEntrada) ? datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().MensajeValorEntrada : string.Empty),
                                new XElement("ResultadoEvaluacion", datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.FirstOrDefault().ResultadoEvaluacion),
                                new XElement("TotalValidados", datos.ResultadoPoliticasBuro != null ? datos.ResultadoPoliticasBuro.TotalValidados.ToString() : string.Empty),
                                new XElement("TotalRechazados", datos.ResultadoPoliticasBuro != null ? datos.ResultadoPoliticasBuro.TotalRechazados.ToString() : string.Empty),
                                new XElement("TotalAprobados", datos.ResultadoPoliticasBuro != null ? datos.ResultadoPoliticasBuro.TotalAprobados.ToString() : string.Empty),
                                new XElement("Calificacion", datos.ResultadoPoliticasBuro != null ? datos.ResultadoPoliticasBuro.Calificacion : string.Empty),
                                new XElement("Politicas", datos.ResultadoPoliticasBuro != null && datos.ResultadoPoliticasBuro.DetalleCalificacion.Any() ? datos.ResultadoPoliticasBuro.DetalleCalificacion.Select(x => new XElement("Politica",
                                         new XElement("Politica", x.Politica),
                                         new XElement("ReferenciaMinima", x.ReferenciaMinima),
                                         new XElement("Valor", x.ValorResultado),
                                         new XElement("ResultadoPolitica", x.ResultadoPolitica),
                                         new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte.Value.ToString("dd/MM/yyyy") : string.Empty),
                                         new XElement("Instituciones", !string.IsNullOrEmpty(x.Instituciones) ? JsonConvert.DeserializeObject<List<InstitucionViewModel>>(x.Instituciones).Select(x => new XElement("Institucion",
                                            new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                                            new XElement("Valor", x.Valor.ToString("N", culture)),
                                            new XElement("NmbVencimiento", !string.IsNullOrEmpty(x.NmbVencimiento) ? x.NmbVencimiento : string.Empty)
                                         )) : string.Empty)
                                      )) : string.Empty)
                            ) : string.Empty),
                         new XElement("ResultadoPoliticasBuroBancoCapital", datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 && datos.ResultadoPoliticasBuro != null ?
                            new XElement("Elementos",
                                new XElement("BuroModeloBancoCapital", datos.BuroCredito.Result.ModeloBancoCapital != null && datos.BuroCredito.Result.ModeloBancoCapital.Any() && datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen != null ?
                                    new XElement("Datos",
                                        new XElement("TipoDecisionBancoCapital", !string.IsNullOrEmpty(datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.TipoDecision) ?
                                        datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.TipoDecision : string.Empty),
                                        new XElement("DecisionModeloBancoCapital", !string.IsNullOrEmpty(datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.DecisionModelo) ?
                                        datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.DecisionModelo : string.Empty))
                                : string.Empty),
                                new XElement("BuroCapacidadPagoBancoCapital", datos.BuroCredito != null && datos.BuroCredito.Result != null && datos.BuroCredito.Result.CapacidadPago != null && datos.BuroCredito.Result.CapacidadPago.Any() && datos.BuroCredito.Result.CapacidadPago.FirstOrDefault() != null ?
                                    new XElement("Datos",
                                        new XElement("MontoAprobado", datos.BuroCredito.Result.CapacidadPago.FirstOrDefault().MontoAprobado.HasValue ? $"{datos.BuroCredito.Result.CapacidadPago.FirstOrDefault().MontoAprobado.Value.ToString("N", culture)}" : string.Empty),
                                        new XElement("PlazoAprobado", datos.BuroCredito.Result.CapacidadPago.FirstOrDefault().PlazoAprobado.HasValue ? $"{datos.BuroCredito.Result.CapacidadPago.FirstOrDefault().PlazoAprobado.Value.ToString(culture)} meses" : string.Empty),
                                        new XElement("Mensaje", !string.IsNullOrEmpty(datos.BuroCredito.Result.CapacidadPago.FirstOrDefault().Mensaje) ? datos.BuroCredito.Result.CapacidadPago.FirstOrDefault().Mensaje : string.Empty))
                                : string.Empty),
                                new XElement("BuroParametrosCapacidadPagoBancoCapital", datos.BuroCredito != null && datos.BuroCredito.Result != null && datos.BuroCredito.Result.ParametrosCapacidadPago != null && datos.BuroCredito.Result.ParametrosCapacidadPago.Any() && datos.BuroCredito.Result.ParametrosCapacidadPago.FirstOrDefault() != null ?
                                    new XElement("Datos",
                                        new XElement("PrestamoSolicitado", !string.IsNullOrEmpty(datos.BuroCredito.Result.ParametrosCapacidadPago.FirstOrDefault().PrestamoSolicitado) ? datos.BuroCredito.Result.ParametrosCapacidadPago.FirstOrDefault().PrestamoSolicitado : string.Empty))
                                : string.Empty))
                        : string.Empty),
                          new XElement("ResultadoPoliticasBuroCooperativas", modeloCooperativasBuro && datos.ResultadoPoliticasBuro != null && datos.BuroCredito.Result.ModeloCoopsSegmento4y5 != null && datos.BuroCredito.Result.ModeloCoopsSegmento4y5.Any() && datos.BuroCredito.Result.ModeloCoopsSegmento4y5.FirstOrDefault().Resumen != null ?
                            new XElement("Elementos",
                                new XElement("Calificacion",
                                      new XElement("Score", datos.ResultadoPoliticasBuro.Score.HasValue && datos.ResultadoPoliticasBuro.Score > 0 ? datos.ResultadoPoliticasBuro.Score : string.Empty),
                                      new XElement("TipoDecision", datos.BuroCredito.Result.ModeloCoopsSegmento4y5.FirstOrDefault().Resumen.TipoDecision),
                                      new XElement("DecisionModelo", datos.BuroCredito.Result.ModeloCoopsSegmento4y5.FirstOrDefault().Resumen.DecisionModelo),
                                      new XElement("CapacidadPago", datos.BuroCredito.Result.CapacidadPago != null && datos.BuroCredito.Result.CapacidadPago.Any() ? datos.BuroCredito.Result.CapacidadPago.FirstOrDefault()?.MontoAprobado?.ToString("N", culture) : string.Empty),
                                      new XElement("Plazo", datos.BuroCredito.Result.CapacidadPago != null && datos.BuroCredito.Result.CapacidadPago.Any() ? datos.BuroCredito.Result.CapacidadPago.FirstOrDefault()?.PlazoAprobado?.ToString("N", culture) : string.Empty),
                                      new XElement("Mensaje", datos.BuroCredito.Result.CapacidadPago != null && datos.BuroCredito.Result.CapacidadPago.Any() ? datos.BuroCredito.Result.CapacidadPago.FirstOrDefault()?.Mensaje : string.Empty))
                            ) : string.Empty),
                        new XElement("MensajeEvaluacion", !string.IsNullOrEmpty(datos.MensajeEvaluacion) ? datos.MensajeEvaluacion : string.Empty),
                        new XElement("CacheBuro", datos.CacheBuro ? "SI" : "NO"),
                        new XElement("FechaReporte", $"Reporte obtenido el: {DateTime.Now.ToString("dd/MM/yyyy")} a las {DateTime.Now.ToString("hh:mm:ss tt")}")
                ));

                if (datos.BuroCredito != null && datos.BuroCredito.Result != null)
                {
                    fn.Element("Reporte").Element("FechaReporte").AddBeforeSelf(new XElement("BuroCredito", datos.BuroCredito != null && datos.BuroCredito.Result != null ? new XElement("Elementos",
                            new XElement("IdentificacionTitular", datos.BuroCredito.Result.IdentificacionTitular != null && datos.BuroCredito.Result.IdentificacionTitular.Any() ?
                                datos.BuroCredito.Result.IdentificacionTitular.Select(x => new XElement("Datos",
                                    new XElement("TipoIdentificacionSujetoDescripcion", !string.IsNullOrEmpty(x.TipoIdentificacionSujetoDescripcion) ? x.TipoIdentificacionSujetoDescripcion : string.Empty),
                                    new XElement("IdentificacionSujeto", !string.IsNullOrEmpty(x.IdentificacionSujeto) ? x.IdentificacionSujeto : string.Empty),
                                    new XElement("NombreRazonSocial", !string.IsNullOrEmpty(x.NombreRazonSocial) ? x.NombreRazonSocial : string.Empty)
                                    )) : string.Empty),
                            new XElement("DatosGeneralesEmpresa", datos.BuroCredito.Result.DatosGeneralesEmpresa != null && datos.BuroCredito.Result.DatosGeneralesEmpresa.Any() ?
                                datos.BuroCredito.Result.DatosGeneralesEmpresa.Select(x => new XElement("Datos",
                                    new XElement("TipoIdentificacionSujetoDescripcion", !string.IsNullOrEmpty(x.TipoIdentificacionSujetoDescripcion) ? @x.TipoIdentificacionSujetoDescripcion : "N/A"),
                                    new XElement("IdentificacionSujeto", !string.IsNullOrEmpty(x.IdentificacionSujeto) ? x.IdentificacionSujeto : "N/A"),
                                    new XElement("NombreRazonSocial", !string.IsNullOrEmpty(x.NombreRazonSocial) ? x.NombreRazonSocial : "N/A"),
                                    new XElement("TipoCompania", !string.IsNullOrEmpty(x.TipoCompania) ? x.TipoCompania : "N/A"),
                                    new XElement("FechaConstitucion", x.FechaConstitucion.HasValue && x.FechaConstitucion.Value != default ? x.FechaConstitucion.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("ObjetoSocial", !string.IsNullOrEmpty(x.ObjetoSocial) ? x.ObjetoSocial : "N/A"),
                                    new XElement("EstadoSocial", !string.IsNullOrEmpty(x.EstadoSocial) ? x.EstadoSocial : "N/A")
                                    )) : string.Empty),
                            new XElement("RucPersonal", datos.BuroCredito.Result.RucPersonal != null && datos.BuroCredito.Result.RucPersonal.Any() ?
                                datos.BuroCredito.Result.RucPersonal.Select(x => new XElement("Datos",
                                    new XElement("RucPersonal", !string.IsNullOrEmpty(x.RucPersonal) ? x.RucPersonal : "N/A"),
                                    new XElement("EstadoContribuyente", !string.IsNullOrEmpty(x.EstadoContribuyente) ? x.EstadoContribuyente : "N/A"),
                                    new XElement("FechaInicioActividades", x.FechaInicioActividades.HasValue && x.FechaInicioActividades.Value != default ? x.FechaInicioActividades.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("ActividadEconomica", !string.IsNullOrEmpty(x.ActividadEconomica) ? x.ActividadEconomica : "N/A"),
                                    new XElement("CodigoCiiu", !string.IsNullOrEmpty(x.CodigoCiiu) ? x.CodigoCiiu : "N/A"),
                                    new XElement("NumeroEstablecimiento", x.NumeroEstablecimiento.ToString("N", culture))
                                    )) : string.Empty),
                            new XElement("ModeloAutomotrizAyasa", datos.BuroCredito.Result.ModeloAutomotrizAyasa != null && datos.BuroCredito.Result.ModeloAutomotrizAyasa.Any() && datos.BuroCredito.Result.ModeloAutomotrizAyasa.FirstOrDefault().Detalle != null && datos.BuroCredito.Result.ModeloAutomotrizAyasa.FirstOrDefault().Detalle.Any() ?
                                datos.BuroCredito.Result.ModeloAutomotrizAyasa.FirstOrDefault().Detalle.Select(x => new XElement("Datos",
                                    new XElement("FechaEvaluacionRegla", x.FechaEvaluacionRegla.HasValue ? x.FechaEvaluacionRegla.Value.ToString("dd/MM/yyyy") : string.Empty),
                                    new XElement("ReglaPadre", !string.IsNullOrEmpty(x.ReglaPadre) ? x.ReglaPadre : "N/A"),
                                    new XElement("ReglaUsada", !string.IsNullOrEmpty(x.ReglaUsada) ? x.ReglaUsada : "N/A"),
                                    new XElement("ValorObtenido", !string.IsNullOrEmpty(x.ValorObtenido) ? x.ValorObtenido : "N/A"),
                                    new XElement("EstadoResultado", !string.IsNullOrEmpty(x.EstadoResultado) ? x.EstadoResultado : "N/A")
                                    )) : string.Empty),
                    #region Cooperativas
                            new XElement("ModeloCoopsSegmento4y5Coac", datos.BuroCredito.Result.ModeloCoopsSegmento4y5 != null && datos.BuroCredito.Result.ModeloCoopsSegmento4y5.Any() && datos.BuroCredito.Result.ModeloCoopsSegmento4y5.FirstOrDefault().Detalle != null && datos.BuroCredito.Result.ModeloCoopsSegmento4y5.FirstOrDefault().Detalle.Any() && modeloCooperativasBuro ?
                                datos.BuroCredito.Result.ModeloCoopsSegmento4y5.FirstOrDefault().Detalle.Select(x => new XElement("Datos",
                                    new XElement("FechaEvaluacionRegla", x.FechaEvaluacionRegla.HasValue ? x.FechaEvaluacionRegla.Value.ToString("dd/MM/yyyy") : string.Empty),
                                    new XElement("ReglaPadre", !string.IsNullOrEmpty(x.ReglaPadre) ? x.ReglaPadre : "N/A"),
                                    new XElement("ReglaUsada", !string.IsNullOrEmpty(x.ReglaUsada) ? x.ReglaUsada : "N/A"),
                                    new XElement("ValorObtenido", !string.IsNullOrEmpty(x.ValorObtenido) ? x.ValorObtenido : "N/A"),
                                    new XElement("EstadoResultado", !string.IsNullOrEmpty(x.EstadoResultado) ? x.EstadoResultado : "N/A")
                                    )) : string.Empty),
                             new XElement("InformacionAdicionalMercadoCoac", datos.BuroCredito.Result.InformacionAdicionalMercado != null && datos.BuroCredito.Result.InformacionAdicionalMercado.Any() && modeloCooperativasBuro ?
                                datos.BuroCredito.Result.InformacionAdicionalMercado.Select(x => new XElement("Datos",
                                    new XElement("Factor", !string.IsNullOrEmpty(x.Factor) ? x.Factor : "N/A"),
                                    new XElement("Valor", x.Valor?.ToString("N", culture)),
                                    new XElement("Mensaje", !string.IsNullOrEmpty(x.Mensaje) ? x.Mensaje : "N/A")
                                    )) : string.Empty),
                             new XElement("CapacidadPagoCoac", datos.BuroCredito.Result.CapacidadPago != null && datos.BuroCredito.Result.CapacidadPago.Any() && modeloCooperativasBuro ?
                                datos.BuroCredito.Result.CapacidadPago.Select(x => new XElement("Datos",
                                    new XElement("ProductoSolicitado", !string.IsNullOrEmpty(x.ProductoSolicitado) ? x.ProductoSolicitado : "N/A"),
                                    new XElement("MontoSolicitado", x.MontoSolicitado?.ToString("N", culture)),
                                    new XElement("PlazoSolicitado", x.PlazoSolicitado?.ToString("N", culture)),
                                    new XElement("IngresoDigitado", x.IngresoDigitado?.ToString("N", culture)),
                                    new XElement("MontoAprobado", x.MontoAprobado?.ToString("N", culture)),
                                    new XElement("PlazoAprobado", x.PlazoAprobado?.ToString("N", culture)),
                                    new XElement("CuotaCredito", x.CuotaCredito?.ToString("N", culture)),
                                    new XElement("Mensaje", !string.IsNullOrEmpty(x.Mensaje) ? x.Mensaje : "N/A")
                                    )) : string.Empty),
                              new XElement("OfertaProactivaCoac", datos.BuroCredito.Result.OfertaProactiva != null && datos.BuroCredito.Result.OfertaProactiva.Any() && modeloCooperativasBuro ?
                                datos.BuroCredito.Result.OfertaProactiva.Select(x => new XElement("Datos",
                                    new XElement("Tipo", !string.IsNullOrEmpty(x.Tipo) ? x.Tipo : "N/A"),
                                    new XElement("Plazo", x.Plazo?.ToString("N", culture)),
                                    new XElement("Monto", x.Monto?.ToString("N", culture)),
                                    new XElement("Mensaje", !string.IsNullOrEmpty(x.Mensaje) ? x.Mensaje : "N/A")
                                    )) : string.Empty),
                              new XElement("ScoreFinanciero", datos.BuroCredito.Result.ScoreFinanciero != null && datos.BuroCredito.Result.ScoreFinanciero.Any() && datos.BuroCredito.Result.ScoreFinanciero.FirstOrDefault().Score > 0 && modeloCooperativasBuro ?
                                datos.BuroCredito.Result.ScoreFinanciero.Select(x => new XElement("Datos",
                                    new XElement("Score", x.Score.ToString("N", culture)),
                                    new XElement("ClientesPeorScore", $"{(x.ClientesPeorScore * 100).ToString("N", culture)}%"),
                                    new XElement("TasaMalos", $"{((double.Parse(x.TasaMalos)) * 100).ToString("N", culture)}%")
                                    )) : string.Empty),
                    #endregion Cooperativas
                            new XElement("Score", datos.BuroCredito.Result.Score != null && datos.BuroCredito.Result.Score.Any() && datos.BuroCredito.Result.Score.FirstOrDefault().Score > 0 ?
                                datos.BuroCredito.Result.Score.Select(x => new XElement("Datos",
                                    new XElement("Score", x.Score.ToString("N", culture)),
                                    new XElement("ClientesPeorScore", $"{(x.ClientesPeorScore * 100).ToString("N", culture)}%"),
                                    new XElement("TasaMalos", $"{(x.TasaMalos * 100).ToString("N", culture)}%")
                                    )) : string.Empty),
                            new XElement("Ingreso", datos.BuroCredito.Result.Ingreso != null && datos.BuroCredito.Result.Ingreso.Any() ?
                                datos.BuroCredito.Result.Ingreso.Select(x => new XElement("Datos",
                                    new XElement("RangoIngreso", !string.IsNullOrEmpty(x.RangoIngreso) ? x.RangoIngreso : string.Empty)
                                    )) : string.Empty),
                            new XElement("ScoreEmpresa", datos.BuroCredito.Result.ScoreEmpresa != null && datos.BuroCredito.Result.ScoreEmpresa.Any() && datos.BuroCredito.Result.ScoreEmpresa.FirstOrDefault().ScoreEmpresa > 0 ?
                                datos.BuroCredito.Result.ScoreEmpresa.Select(x => new XElement("Datos",
                                    new XElement("ScoreEmpresa", x.ScoreEmpresa.ToString("N", culture)),
                                    new XElement("EmpresasPeorScore", $"{(x.EmpresasPeorScore * 100).ToString("N", culture)}%"),
                                    new XElement("TasaMalos", $"{(x.TasaMalos * 100).ToString("N", culture)}%")
                                    )) : string.Empty),
                            new XElement("ManejoCuentasCorrientes", datos.BuroCredito.Result.ManejoCuentasCorrientes != null && datos.BuroCredito.Result.ManejoCuentasCorrientes.Any() ?
                                datos.BuroCredito.Result.ManejoCuentasCorrientes.Select(x => new XElement("Datos",
                                    new XElement("TiempoInhabilitadoDescripcion", !string.IsNullOrEmpty(x.TiempoInhabilitadoDescripcion) ? x.TiempoInhabilitadoDescripcion : "N/A"),
                                    new XElement("FechaInhabilitado", x.FechaInhabilitado.HasValue && x.FechaInhabilitado.Value != default ? x.FechaInhabilitado.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("FechaCumplimientoSancion", x.FechaCumplimientoSancion.HasValue && x.FechaCumplimientoSancion.Value != default ? x.FechaCumplimientoSancion.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("MotivoInhabilitadoDescripcion", !string.IsNullOrEmpty(x.MotivoInhabilitadoDescripcion) ? x.MotivoInhabilitadoDescripcion : "N/A"),
                                    new XElement("AccionDescripcion", !string.IsNullOrEmpty(x.AccionDescripcion) ? x.AccionDescripcion : "N/A")
                                    )) : string.Empty),
                            new XElement("DeudaVigenteTotal", datos.BuroCredito.Result.DeudaVigenteTotal != null && datos.BuroCredito.Result.DeudaVigenteTotal.Any() ?
                                datos.BuroCredito.Result.DeudaVigenteTotal.Select(x => new XElement("Datos",
                                    new XElement("SistemaCrediticio", !string.IsNullOrEmpty(x.SistemaCrediticio) ? x.SistemaCrediticio : "N/A"),
                                    new XElement("ValorPorVencer", $"${x.ValorPorVencer?.ToString("N", culture)}"),
                                    new XElement("NoDevengaIntereses", $"${x.NoDevengaIntereses?.ToString("N", culture)}"),
                                    new XElement("ValorVencido", $"${x.ValorVencido?.ToString("N", culture)}"),
                                    new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial?.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada?.ToString("N", culture)}"),
                                    new XElement("TotalDeuda", $"${x.TotalDeuda?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                            new XElement("GastoFinanciero", datos.BuroCredito.Result.GastoFinanciero != null && datos.BuroCredito.Result.GastoFinanciero.Any() ?
                                datos.BuroCredito.Result.GastoFinanciero.Select(x => new XElement("Datos",
                                    new XElement("CuotaEstimadaTitular", $"${x.CuotaEstimadaTitular?.ToString("N", culture)}"),
                                    new XElement("CuotaTotalOperaciones", $"${x.CuotaTotalOperaciones?.ToString("N", culture)}"),
                                    new XElement("CuotaTotalTarjeta", $"${x.CuotaTotalTarjeta?.ToString("N", culture)}"),
                                    new XElement("CuotaTotalServicios", $"${x.CuotaTotalServicios?.ToString("N", culture)}"),
                                    new XElement("CuotaVencidos", $"${x.CuotaVencidos?.ToString("N", culture)}"),
                                    new XElement("NumOperacionesExcluidasCuota", x.NumOperacionesExcluidasCuota?.ToString("N", culture)),
                                    new XElement("SaldoExcluidoCuota", $"${x.SaldoExcluidoCuota?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                            new XElement("OperacionesCodeudorGarante", datos.BuroCredito.Result.OperacionesCodeudorGarante != null && datos.BuroCredito.Result.OperacionesCodeudorGarante.Any() ?
                                datos.BuroCredito.Result.OperacionesCodeudorGarante.Select(x => new XElement("Datos",
                                    new XElement("IdentificacionTitular", !string.IsNullOrEmpty(x.IdentificacionTitular) ? x.IdentificacionTitular : "N/A"),
                                    new XElement("NombreRazonSocial", !string.IsNullOrEmpty(x.NombreRazonSocial) ? x.NombreRazonSocial : "N/A"),
                                    new XElement("TipoDeudorDescripcion", !string.IsNullOrEmpty(x.TipoDeudorDescripcion) ? x.TipoDeudorDescripcion : "N/A"),
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte.Value.ToString("dd/MM/yyyy") : "N/A")
                                    )).Take(24) : string.Empty),
                            new XElement("InformacionComoRUC", datos.BuroCredito.Result.InformacionComoRUC != null && datos.BuroCredito.Result.InformacionComoRUC.Any() ?
                                datos.BuroCredito.Result.InformacionComoRUC.Select(x => new XElement("Datos",
                                    new XElement("IdentificacionSujeto", !string.IsNullOrEmpty(x.IdentificacionSujeto) ? x.IdentificacionSujeto : "N/A"),
                                    new XElement("NombreRazonSocial", !string.IsNullOrEmpty(x.NombreRazonSocial) ? x.NombreRazonSocial : "N/A"),
                                    new XElement("TipoRelacion", !string.IsNullOrEmpty(x.TipoRelacion) ? x.TipoRelacion : "N/A")
                                    )) : string.Empty),
                            new XElement("TendenciaDeuda", datos.BuroCredito.Result.TendenciaDeuda != null && datos.BuroCredito.Result.TendenciaDeuda.Any() ?
                                datos.BuroCredito.Result.TendenciaDeuda.OrderByDescending(x => x.FechaCorte).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("TotalDeuda", $"${x.TotalDeuda?.ToString("N", culture)}"),
                                    new XElement("ValorVencidoTotal", $"${x.ValorVencidoTotal?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                            new XElement("IndicadoresDeuda", datos.BuroCredito.Result.IndicadoresDeuda != null && datos.BuroCredito.Result.IndicadoresDeuda.Any() ?
                                datos.BuroCredito.Result.IndicadoresDeuda.Select(x => new XElement("Datos",
                                    new XElement("SaldoPromedio36M", $"${x.SaldoPromedio36M?.ToString("N", culture)}"),
                                    new XElement("SaldoPromedioTarjetas36M", $"${x.SaldoPromedioTarjetas36M?.ToString("N", culture)}"),
                                    new XElement("MaxMontoDeuda", $"${x.MaxMontoDeuda?.ToString("N", culture)}"),
                                    new XElement("PeorEdadVencidoDirecta36M", !string.IsNullOrEmpty(x.PeorEdadVencidoDirecta36M) ? x.PeorEdadVencidoDirecta36M : "N/A"),
                                    new XElement("MaySaldoVencDirecta36M", $"${x.MaySaldoVencDirecta36M?.ToString("N", culture)}"),
                                    new XElement("FechaUltimoVencido", x.FechaUltimoVencido.HasValue && x.FechaUltimoVencido.Value != default ? x.FechaUltimoVencido.Value.ToString("dd/MM/yyyy") : "N/A")
                                    )).Take(24) : string.Empty),
                            new XElement("RelacionEmpresas", datos.BuroCredito.Result.RelacionEmpresas != null && datos.BuroCredito.Result.RelacionEmpresas.Any() ?
                                datos.BuroCredito.Result.RelacionEmpresas.OrderBy(x => x.IdentificacionEmpresa).Select(x => new XElement("Datos",
                                    new XElement("IdentificacionEmpresa", !string.IsNullOrEmpty(x.IdentificacionEmpresa) ? x.IdentificacionEmpresa : "N/A"),
                                    new XElement("NombreRazonSocial", !string.IsNullOrEmpty(x.NombreRazonSocial) ? x.NombreRazonSocial : "N/A"),
                                    new XElement("TipoRelacion", !string.IsNullOrEmpty(x.TipoRelacion) ? x.TipoRelacion : "N/A")
                                    )).Take(24) : string.Empty),
                            new XElement("ResumenPrincipalesCuentasFinancieras", datos.BuroCredito.Result.ResumenPrincipalesCuentasFinancieras != null && datos.BuroCredito.Result.ResumenPrincipalesCuentasFinancieras.Any() ?
                                datos.BuroCredito.Result.ResumenPrincipalesCuentasFinancieras.Select(x => new XElement("Datos",
                                    new XElement("Cuenta", !string.IsNullOrEmpty(x.Cuenta) ? x.Cuenta : "N/A"),
                                    new XElement("AnioActualMenos5", !string.IsNullOrEmpty(x.AnioActualMenos5) ? $"${x.AnioActualMenos5}" : "N/A"),
                                    new XElement("AnioActualMenos4", !string.IsNullOrEmpty(x.AnioActualMenos4) ? $"${x.AnioActualMenos4}" : "N/A"),
                                    new XElement("AnioActualMenos3", !string.IsNullOrEmpty(x.AnioActualMenos3) ? $"${x.AnioActualMenos3}" : "N/A"),
                                    new XElement("AnioActualMenos2", !string.IsNullOrEmpty(x.AnioActualMenos2) ? $"${x.AnioActualMenos2}" : "N/A"),
                                    new XElement("AnioActualMenos1", !string.IsNullOrEmpty(x.AnioActualMenos1) ? $"${x.AnioActualMenos1}" : "N/A")
                                    )) : string.Empty),
                            new XElement("CuentasEstadosFinancieros", datos.BuroCredito.Result.CuentasEstadosFinancieros != null && datos.BuroCredito.Result.CuentasEstadosFinancieros.Any() ?
                                datos.BuroCredito.Result.CuentasEstadosFinancieros.Select(x => new XElement("Datos",
                                    new XElement("Cuenta", !string.IsNullOrEmpty(x.Cuenta) ? x.Cuenta : "N/A"),
                                    new XElement("AnioActualMenos5", !string.IsNullOrEmpty(x.AnioActualMenos5) ? $"${x.AnioActualMenos5}" : "N/A"),
                                    new XElement("AnioActualMenos4", !string.IsNullOrEmpty(x.AnioActualMenos4) ? $"${x.AnioActualMenos4}" : "N/A"),
                                    new XElement("AnioActualMenos3", !string.IsNullOrEmpty(x.AnioActualMenos3) ? $"${x.AnioActualMenos3}" : "N/A"),
                                    new XElement("AnioActualMenos2", !string.IsNullOrEmpty(x.AnioActualMenos2) ? $"${x.AnioActualMenos2}" : "N/A"),
                                    new XElement("AnioActualMenos1", !string.IsNullOrEmpty(x.AnioActualMenos1) ? $"${x.AnioActualMenos1}" : "N/A")
                                    )) : string.Empty),
                            new XElement("IndicesFinancieros", datos.BuroCredito.Result.IndicesFinancieros != null && datos.BuroCredito.Result.IndicesFinancieros.Any() ?
                                datos.BuroCredito.Result.IndicesFinancieros.Select(x => new XElement("Datos",
                                    new XElement("TipoIndice", !string.IsNullOrEmpty(x.TipoIndice) ? x.TipoIndice : "N/A"),
                                    new XElement("NombreIndice", !string.IsNullOrEmpty(x.NombreIndice) ? x.NombreIndice : "N/A"),
                                    new XElement("AnioActualMenos5", !string.IsNullOrEmpty(x.AnioActualMenos5) ? x.AnioActualMenos5 : "N/A"),
                                    new XElement("AnioActualMenos4", !string.IsNullOrEmpty(x.AnioActualMenos4) ? x.AnioActualMenos4 : "N/A"),
                                    new XElement("AnioActualMenos3", !string.IsNullOrEmpty(x.AnioActualMenos3) ? x.AnioActualMenos3 : "N/A"),
                                    new XElement("AnioActualMenos2", !string.IsNullOrEmpty(x.AnioActualMenos2) ? x.AnioActualMenos2 : "N/A"),
                                    new XElement("AnioActualMenos1", !string.IsNullOrEmpty(x.AnioActualMenos1) ? x.AnioActualMenos1 : "N/A")
                                    )) : string.Empty),
                            new XElement("PrincipalesAccionistas", datos.BuroCredito.Result.PrincipalesAccionistas != null && datos.BuroCredito.Result.PrincipalesAccionistas.Any() ?
                                datos.BuroCredito.Result.PrincipalesAccionistas.Select(x => new XElement("Datos",
                                    new XElement("IdentificacionSujeto", !string.IsNullOrEmpty(x.IdentificacionSujeto) ? x.IdentificacionSujeto : "N/A"),
                                    new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                                    new XElement("Participacion", x.Participacion?.ToString("N", culture))
                                    )).Take(24) : string.Empty),
                            new XElement("RepresentantesLegales", datos.BuroCredito.Result.RepresentantesLegales != null && datos.BuroCredito.Result.RepresentantesLegales.Any() ?
                                datos.BuroCredito.Result.RepresentantesLegales.Select(x => new XElement("Datos",
                                    new XElement("IdentificacionSujeto", !string.IsNullOrEmpty(x.IdentificacionSujeto) ? x.IdentificacionSujeto : "N/A"),
                                    new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                                    new XElement("Cargo", !string.IsNullOrEmpty(x.Cargo) ? x.Cargo : "N/A")
                                    )) : string.Empty),
                            new XElement("OperacionesVigentesTarjeta", datos.BuroCredito.Result.OperacionesVigentesTarjeta != null && datos.BuroCredito.Result.OperacionesVigentesTarjeta.Any() ?
                                datos.BuroCredito.Result.OperacionesVigentesTarjeta.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("CupoTarjeta", $"${x.CupoTarjeta?.ToString("N", culture)}"),
                                    new XElement("CapitalxVencerTotal", $"${x.CapitalxVencerTotal?.ToString("N", culture)}"),
                                    new XElement("ValorNoDevengaInteresTotal", $"${x.ValorNoDevengaInteresTotal?.ToString("N", culture)}"),
                                    new XElement("SaldoVencido", $"${x.SaldoVencido?.ToString("N", culture)}"),
                                    new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial?.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada?.ToString("N", culture)}"),
                                    new XElement("SaldoTotal", $"${x.SaldoTotal?.ToString("N", culture)}"),
                                    new XElement("CuotaEstimadaTarjetas", $"${x.CuotaEstimadaTarjetas?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                             new XElement("OperacionesVigentesBanco", datos.BuroCredito.Result.OperacionesVigentesBanco != null && datos.BuroCredito.Result.OperacionesVigentesBanco.Any() ?
                                datos.BuroCredito.Result.OperacionesVigentesBanco.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("ValorOperacion", $"${x.ValorOperacion?.ToString("N", culture)}"),
                                    new XElement("ValorxVencerTotal", $"${x.ValorxVencerTotal?.ToString("N", culture)}"),
                                    new XElement("ValorNoDevengaInteresTotal", $"${x.ValorNoDevengaInteresTotal?.ToString("N", culture)}"),
                                    new XElement("ValorVencidoTotal", $"${x.ValorVencidoTotal?.ToString("N", culture)}"),
                                    new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial?.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada?.ToString("N", culture)}"),
                                    new XElement("SaldoTotalCalculado", $"${x.SaldoTotalCalculado?.ToString("N", culture)}"),
                                    new XElement("CuotaEstimadaOperacion", $"${x.CuotaEstimadaOperacion?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                             new XElement("OperacionesHistoricasTarjeta", datos.BuroCredito.Result.OperacionesHistoricasTarjeta != null && datos.BuroCredito.Result.OperacionesHistoricasTarjeta.Any() ?
                                datos.BuroCredito.Result.OperacionesHistoricasTarjeta.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("CupoTarjeta", $"${x.CupoTarjeta?.ToString("N", culture)}"),
                                    new XElement("CapitalxVencerTotal", $"${x.CapitalxVencerTotal?.ToString("N", culture)}"),
                                    new XElement("ValorNoDevengaInteresTotal", $"${x.ValorNoDevengaInteresTotal?.ToString("N", culture)}"),
                                    new XElement("SaldoVencido", $"${x.SaldoVencido?.ToString("N", culture)}"),
                                    new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial?.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada?.ToString("N", culture)}"),
                                    new XElement("SaldoTotal", $"${x.SaldoTotal?.ToString("N", culture)}"),
                                    new XElement("CuotaEstimadaTarjetas", $"${x.CuotaEstimadaTarjetas?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                             new XElement("OperacionesHistoricasBanco", datos.BuroCredito.Result.OperacionesHistoricasBanco != null && datos.BuroCredito.Result.OperacionesHistoricasBanco.Any() ?
                                datos.BuroCredito.Result.OperacionesHistoricasBanco.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("ValorxVencerTotal", $"${x.ValorxVencerTotal?.ToString("N", culture)}"),
                                    new XElement("ValorNoDevengaInteresTotal", $"${x.ValorNoDevengaInteresTotal?.ToString("N", culture)}"),
                                    new XElement("ValorVencidoTotal", $"${x.ValorVencidoTotal?.ToString("N", culture)}"),
                                    new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial?.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada?.ToString("N", culture)}"),
                                    new XElement("SaldoTotalCalculado", $"${x.SaldoTotalCalculado?.ToString("N", culture)}"),
                                    new XElement("CuotaEstimadaOperacion", $"${x.CuotaEstimadaOperacion?.ToString("N", culture)}")
                                    )).Take(24) : string.Empty),
                    #region BANCO CAPITAL
                            new XElement("DatosConyugeBancoCapital", datos.BuroCredito.Result.DatosConyuge != null && datos.BuroCredito.Result.DatosConyuge.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.DatosConyuge.Select(x => new XElement("Datos",
                                    new XElement("NombresConyuge", !string.IsNullOrEmpty(x.NombresConyuge) ? x.NombresConyuge : "N/A"),
                                    new XElement("IdentificacionConyuge", !string.IsNullOrEmpty(x.IdentificacionConyuge) ? x.IdentificacionConyuge : "N/A")
                                )) : string.Empty),
                            new XElement("ModeloBancoCapital", datos.BuroCredito.Result.ModeloBancoCapital != null && datos.BuroCredito.Result.ModeloBancoCapital.Any() && datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen != null && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                new XElement("Datos",
                                    new XElement("FechaEvaluacion", datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.FechaEvaluacion.HasValue ? datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.FechaEvaluacion.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("DecisionModelo", !string.IsNullOrEmpty(datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.DecisionModelo) ? datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.DecisionModelo : "N/A"),
                                    new XElement("TipoDecision", !string.IsNullOrEmpty(datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.TipoDecision) ? datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Resumen.TipoDecision : "N/A")
                                ) : string.Empty),
                             new XElement("ModeloBancoCapitalDetalle", datos.BuroCredito.Result.ModeloBancoCapital != null && datos.BuroCredito.Result.ModeloBancoCapital.Any() && datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Detalle != null && datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Detalle.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.ModeloBancoCapital.FirstOrDefault().Detalle.Select(x => new XElement("Datos",
                                    new XElement("FechaEvaluacionRegla", x.FechaEvaluacionRegla.HasValue ? x.FechaEvaluacionRegla.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("ReglaPadre", !string.IsNullOrEmpty(x.ReglaPadre) ? x.ReglaPadre : "N/A"),
                                    new XElement("ReglaUsada", !string.IsNullOrEmpty(x.ReglaUsada) ? x.ReglaUsada : "N/A"),
                                    new XElement("ValorObtenido", !string.IsNullOrEmpty(x.ValorObtenido) ? x.ValorObtenido : "N/A"),
                                    new XElement("EstadoResultado", !string.IsNullOrEmpty(x.EstadoResultado) ? x.EstadoResultado : "N/A")
                                )) : string.Empty),
                            new XElement("ModeloBancoCapitalConyuge", datos.BuroCredito.Result.ModeloBancoCapitalConyuge != null && datos.BuroCredito.Result.ModeloBancoCapitalConyuge.Any() && datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen != null && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                new XElement("Datos",
                                    new XElement("FechaEvaluacion", datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen.FechaEvaluacion.HasValue ? datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen.FechaEvaluacion.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("DecisionModelo", !string.IsNullOrEmpty(datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen.DecisionModelo) ? datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen.DecisionModelo : "N/A"),
                                    new XElement("TipoDecision", !string.IsNullOrEmpty(datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen.TipoDecision) ? datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Resumen.TipoDecision : "N/A")
                                ) : string.Empty),
                            new XElement("ModeloBancoCapitalConyugeDetalle", datos.BuroCredito.Result.ModeloBancoCapitalConyuge != null && datos.BuroCredito.Result.ModeloBancoCapitalConyuge.Any() && datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Detalle != null && datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Detalle.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.ModeloBancoCapitalConyuge.FirstOrDefault().Detalle.Select(x => new XElement("Datos",
                                    new XElement("FechaEvaluacionRegla", x.FechaEvaluacionRegla.HasValue ? x.FechaEvaluacionRegla.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("ReglaPadre", !string.IsNullOrEmpty(x.ReglaPadre) ? x.ReglaPadre : "N/A"),
                                    new XElement("ReglaUsada", !string.IsNullOrEmpty(x.ReglaUsada) ? x.ReglaUsada : "N/A"),
                                    new XElement("ValorObtenido", !string.IsNullOrEmpty(x.ValorObtenido) ? x.ValorObtenido : "N/A"),
                                    new XElement("EstadoResultado", !string.IsNullOrEmpty(x.EstadoResultado) ? x.EstadoResultado : "N/A")
                                )) : string.Empty),
                             new XElement("EvaluacionIntegralBancoCapital", datos.BuroCredito.Result.EvaluacionIntegralBancoCapital != null && datos.BuroCredito.Result.EvaluacionIntegralBancoCapital.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.EvaluacionIntegralBancoCapital.Select(x => new XElement("Datos",
                                    new XElement("EvaluacionIntegral", !string.IsNullOrEmpty(x.EvaluacionIntegral) ? x.EvaluacionIntegral : "N/A"),
                                    new XElement("ResultadoTitular", !string.IsNullOrEmpty(x.ResultadoTitular) ? x.ResultadoTitular : "N/A"),
                                    new XElement("ResultadoConyuge", !string.IsNullOrEmpty(x.ResultadoConyuge) ? x.ResultadoConyuge : "N/A")
                                )) : string.Empty),
                             new XElement("ParametrosCapacidadPagoBancoCapital", datos.BuroCredito.Result.ParametrosCapacidadPago != null && datos.BuroCredito.Result.ParametrosCapacidadPago.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.ParametrosCapacidadPago.Select(x => new XElement("Datos",
                                    new XElement("PrestamoSolicitado", !string.IsNullOrEmpty(x.PrestamoSolicitado) ? x.PrestamoSolicitado : "N/A"),
                                    new XElement("MontoSolicitado", x.MontoSolicitado.HasValue ? $"{x.MontoSolicitado.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("PlazoSolicitado", !string.IsNullOrEmpty(x.PlazoSolicitado) ? x.PlazoSolicitado : "N/A"),
                                    new XElement("IngresoDigitado", x.IngresoDigitado.HasValue ? $"{x.IngresoDigitado.Value.ToString(culture)}" : "0"),
                                    new XElement("GastosPersonales", x.GastosPersonales.HasValue ? $"{x.GastosPersonales.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("Propiedades", !string.IsNullOrEmpty(x.Propiedades) ? x.Propiedades : "N/A"),
                                    new XElement("MesesExperienciaActividad", x.MesesExperienciaActividad.HasValue ? x.MesesExperienciaActividad?.ToString(culture) : "0")
                                )) : string.Empty),
                              new XElement("CapacidadPagoBancoCapital", datos.BuroCredito.Result.CapacidadPago != null && datos.BuroCredito.Result.CapacidadPago.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.CapacidadPago.Select(x => new XElement("Datos",
                                    new XElement("CapacidadPagoBancoCapital", x.CapacidadPagoBancoCapital.HasValue ? $"{x.CapacidadPagoBancoCapital.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("MontoAprobado", x.MontoAprobado.HasValue ? $"{x.MontoAprobado.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("PlazoAprobado", x.PlazoAprobado.HasValue ? $"{x.PlazoAprobado.Value.ToString(culture)} meses" : "N/A"),
                                    new XElement("CuotaMensual", x.CuotaMensual.HasValue ? $"{x.CuotaMensual.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("Mensaje", !string.IsNullOrEmpty(x.Mensaje) ? x.Mensaje : "N/A")
                                )) : string.Empty),
                              new XElement("OfertaProactivaBancoCapital", datos.BuroCredito.Result.OfertaProactiva != null && datos.BuroCredito.Result.OfertaProactiva.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.OfertaProactiva.Select(x => new XElement("Datos",
                                    new XElement("Plazo", x.Plazo.HasValue ? $"{x.Plazo.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("MontoSugerido", x.MontoSugerido.HasValue ? $"{x.MontoSugerido.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("CuotaSugeridaMensual", x.CuotaSugeridaMensual.HasValue ? $"{x.CuotaSugeridaMensual.Value.ToString("N", culture)}" : "0.00"),
                                    new XElement("Observaciones", !string.IsNullOrEmpty(x.Observaciones) ? x.Observaciones : "N/A")
                                )) : string.Empty),
                              new XElement("ScoreFinancieroBancoCapital", datos.BuroCredito.Result.ScoreFinanciero != null && datos.BuroCredito.Result.ScoreFinanciero.Any() && datos.BuroCredito.Result.ScoreFinanciero.FirstOrDefault().Score > 0 && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.ScoreFinanciero.Select(x => new XElement("Datos",
                                    new XElement("Score", x.Score.ToString("N", culture)),
                                    new XElement("ClientesPeorScore", $"{(x.ClientesPeorScore * 100).ToString("N", culture)}%"),
                                    new XElement("TasaMalos", !string.IsNullOrEmpty(x.TasaMalos) && double.TryParse(x.TasaMalos, out _) ? $"{(double.Parse(x.TasaMalos) * 100).ToString("N", culture)}%" : "N/A")
                                    )) : string.Empty),
                               new XElement("DetalleTarjetaCreditoBancoCapital", datos.BuroCredito.Result.DetalleTarjetaCredito != null && datos.BuroCredito.Result.DetalleTarjetaCredito.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.DetalleTarjetaCredito.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("RazonSocial", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("MarcaTarjetaDescripcion", !string.IsNullOrEmpty(x.MarcaTarjetaDescripcion) ? x.MarcaTarjetaDescripcion : "N/A"),
                                    new XElement("FormaPagoDescripcion", !string.IsNullOrEmpty(x.FormaPagoDescripcion) ? x.FormaPagoDescripcion : "N/A"),
                                    new XElement("FechaEmision", x.FechaEmision.HasValue && x.FechaEmision.Value != default ? x.FechaEmision.Value.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento.HasValue && x.FechaVencimiento.Value != default ? x.FechaVencimiento?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("SaldoTotal", x.SaldoTotal.HasValue ? $"${x.SaldoTotal.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("SaldoVencido", x.SaldoVencido.HasValue ? $"${x.SaldoVencido.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("ValorDemandaJudicial", x.ValorDemandaJudicial.HasValue ? $"${x.ValorDemandaJudicial.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("CarteraCastigada", x.CarteraCastigada.HasValue ? $"${x.CarteraCastigada.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("DiasMorosidad", x.DiasMorosidad.HasValue ? x.DiasMorosidad.Value.ToString("N", culture) : "0.00")
                                )).Take(24) : string.Empty),
                                new XElement("EstructuraOperacionBancosDetalleBancoCapital", datos.BuroCredito.Result.EstructuraOperacionBancosDetalle != null && datos.BuroCredito.Result.EstructuraOperacionBancosDetalle.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.EstructuraOperacionBancosDetalle.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("RazonSocial", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("TipoIdentificacionSujetoDescripcion", !string.IsNullOrEmpty(x.TipoIdentificacionSujetoDescripcion) ? x.TipoIdentificacionSujetoDescripcion : "N/A"),
                                    new XElement("TipoCreditoDescripcion", !string.IsNullOrEmpty(x.TipoCreditoDescripcion) ? x.TipoCreditoDescripcion : "N/A"),
                                    new XElement("FechaConcesion", x.FechaConcesion.HasValue && x.FechaConcesion.Value != default ? x.FechaConcesion?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento.HasValue && x.FechaVencimiento.Value != default ? x.FechaVencimiento?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("SaldoTotalCalculado", x.SaldoTotalCalculado.HasValue ? $"${x.SaldoTotalCalculado.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("ValorVencidoTotal", x.ValorVencidoTotal.HasValue ? $"${x.ValorVencidoTotal.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("ValorDemandaJudicial", x.ValorDemandaJudicial.HasValue ? $"${x.ValorDemandaJudicial.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("CarteraCastigada", x.CarteraCastigada.HasValue ? $"${x.CarteraCastigada.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("DiasMorosidad", x.DiasMorosidad.HasValue ? x.DiasMorosidad.Value.ToString("N", culture) : "0.00")
                                )).Take(24) : string.Empty),
                                new XElement("EstructuraOperacionCooperativaDetalleBancoCapital", datos.BuroCredito.Result.EstructuraOperacionCooperativaDetalle != null && datos.BuroCredito.Result.EstructuraOperacionCooperativaDetalle.Any() && datos.IdentificacionEmpresa == Dominio.Constantes.Clientes.Cliente1090105244001 ?
                                datos.BuroCredito.Result.EstructuraOperacionCooperativaDetalle.Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte.HasValue && x.FechaCorte.Value != default ? x.FechaCorte?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("RazonSocial", !string.IsNullOrEmpty(x.RazonSocial) ? x.RazonSocial : "N/A"),
                                    new XElement("TipoIdentificacionSujetoDescripcion", !string.IsNullOrEmpty(x.TipoIdentificacionSujetoDescripcion) ? x.TipoIdentificacionSujetoDescripcion : "N/A"),
                                    new XElement("TipoCreditoDescripcion", !string.IsNullOrEmpty(x.TipoCreditoDescripcion) ? x.TipoCreditoDescripcion : "N/A"),
                                    new XElement("FechaConcesion", x.FechaConcesion.HasValue && x.FechaConcesion.Value != default ? x.FechaConcesion?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("FechaVencimiento", x.FechaVencimiento.HasValue && x.FechaVencimiento.Value != default ? x.FechaVencimiento?.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("SaldoTotalCalculado", x.SaldoTotalCalculado.HasValue ? $"${x.SaldoTotalCalculado.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("ValorVencidoTotal", x.ValorVencidoTotal.HasValue ? $"${x.ValorVencidoTotal.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("ValorDemandaJudicial", x.ValorDemandaJudicial.HasValue ? $"${x.ValorDemandaJudicial.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("CarteraCastigada", x.CarteraCastigada.HasValue ? $"${x.CarteraCastigada.Value.ToString("N", culture)}" : "$0.00"),
                                    new XElement("DiasMorosidad", x.DiasMorosidad.HasValue ? x.DiasMorosidad.Value.ToString("N", culture) : "0.00")
                                )).Take(24) : string.Empty),
                            new XElement("GraficoTendenciaDeuda", datos.BuroCredito.Result.TendenciaDeuda != null && datos.BuroCredito.Result.TendenciaDeuda.Any() ? GenerarGraficoTendenciaDeuda(datos.BuroCredito.Result.TendenciaDeuda) : string.Empty)
                    #endregion BANCO CAPITAL
                            )
                         : string.Empty));
                }
                else if (datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.Resultados != null && datos.BuroCreditoEquifax.ResultadosIndumot == null && datos.BuroCreditoEquifax.ResultadosCBCooperativa == null)
                {
                    fn.Element("Reporte").Element("FechaReporte").AddBeforeSelf(new XElement("BuroCreditoEquifax", datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.Resultados != null ? new XElement("Elementos",
                            new XElement("Score", datos.BuroCreditoEquifax.Resultados.ScoreV4V10 != null && datos.BuroCreditoEquifax.Resultados.ScoreV4V10.Score > 0 && datos.BuroCreditoEquifax.ResultadosNivelIndexPymes == null ? new XElement("Datos",
                                new XElement("Score", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.Score),
                                new XElement("ClientesPeorScore", $"{datos.BuroCreditoEquifax.Resultados.ScoreV4V10.TotalAcum.ToString("N", culture)}%"),
                                new XElement("TasaMalos", $"{datos.BuroCreditoEquifax.Resultados.ScoreV4V10.TasaDeMalosAcum.ToString("N", culture)}%")
                             ) : string.Empty),
                            new XElement("ScoreEmpresa", datos.BuroCreditoEquifax.ResultadosNivelIndexPymes != null && datos.BuroCreditoEquifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes != null && datos.BuroCreditoEquifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes.Score > 0 ? new XElement("Datos",
                                new XElement("Score", datos.BuroCreditoEquifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes.Score),
                                new XElement("ClientesPeorScore", $"{datos.BuroCreditoEquifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes.TasaMalosAcum.ToString("N", culture)}%"),
                                new XElement("TasaMalos", $"{datos.BuroCreditoEquifax.ResultadosNivelIndexPymes.PuntajeyGraficoIndexPymes.Porcentaje}")
                             ) : string.Empty),
                            new XElement("IngresoEstimado", datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0 != null && datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor > 0 && datos.BuroCreditoEquifax.ResultadosNivelIndexPymes == null ? $"${datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor.ToString("N", culture)}" : string.Empty),
                            new XElement("HistoricoScore360", datos.BuroCreditoEquifax.Resultados.HistoricoScore360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoScore360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.HistoricoScore360.OrderBy(m => int.Parse(m.RowOrder ?? "0")).Select(x => new XElement("Datos",
                                    new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : "N/A"),
                                    new XElement("Score", x.Score)
                                )) : string.Empty),
                            new XElement("HistoricoCuotaEstimada360", datos.BuroCreditoEquifax.Resultados.HistoricoCuotaEstimada360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoCuotaEstimada360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.HistoricoCuotaEstimada360.OrderBy(m => m.Orden).Select(x => new XElement("Datos",
                                    new XElement("Orden", x.Orden),
                                    new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : "N/A"),
                                    new XElement("CuotaMensual", $"${x.CuotaMensual.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("HistoricoVencidosComercial360", datos.BuroCreditoEquifax.Resultados.HistoricoVencidosComercial360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoVencidosComercial360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.HistoricoVencidosComercial360.Select(x => new XElement("Datos",
                                    new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : "N/A"),
                                    new XElement("SaldoTotal", $"${x.SaldoVencido.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("HistoricoVencidosFinanciero360", datos.BuroCreditoEquifax.Resultados.HistoricoVencidosFinanciero360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoVencidosFinanciero360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.HistoricoVencidosFinanciero360.Select(x => new XElement("Datos",
                                    new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : "N/A"),
                                    new XElement("SaldoTotal", $"${x.SaldoVencido.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("PersonasInhabilitadas", datos.BuroCreditoEquifax.Resultados.PersonasInhabilitadas != null && datos.BuroCreditoEquifax.Resultados.PersonasInhabilitadas.Any() ?
                                datos.BuroCreditoEquifax.Resultados.PersonasInhabilitadas.OrderByDescending(m => m.FechaInhabilitacion).Take(10).Select(x => new XElement("Datos",
                                new XElement("NumeroDocumentoInv", !string.IsNullOrEmpty(x.NumeroDocumentoInv) ? x.NumeroDocumentoInv : "N/A"),
                                new XElement("NombreSujetoInv", !string.IsNullOrEmpty(x.NombreSujetoInv) ? x.NombreSujetoInv : "N/A"),
                                new XElement("FechaInhabilitacion", x.FechaInhabilitacion != default && x.FechaInhabilitacion != DateTime.MinValue && x.FechaInhabilitacion.Date != new DateTime(1900, 1, 1).Date ? x.FechaInhabilitacion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("TiempoInhabilitacion", x.TiempoInhabilitacion),
                                new XElement("Accion", !string.IsNullOrEmpty(x.Accion) ? x.Accion : "N/A"),
                                new XElement("MotivoInv", !string.IsNullOrEmpty(x.MotivoInv) ? x.MotivoInv : "N/A"),
                                new XElement("CodigoInhabilitado", !string.IsNullOrEmpty(x.CodigoInhabilitado) ? x.CodigoInhabilitado : "N/A"),
                                new XElement("NumeroProtestos", x.NumeroProtestos)
                            )) : string.Empty),
                            new XElement("DeudaReportadaPorRFR360", datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorRFR360 != null && datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorRFR360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorRFR360.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor) && !string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                    //new XElement("CodTipoCreditoInv", !string.IsNullOrEmpty(x.CodTipoCreditoInv) ? x.CodTipoCreditoInv : "N/A"),
                                    //new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                                    //new XElement("Calificacion", !string.IsNullOrEmpty(x.Calificacion) ? x.Calificacion : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DiasVencido", x.DiasVencido),
                                    new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                                    new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                                //new XElement("CodTipoDeudorInv", !string.IsNullOrEmpty(x.CodTipoDeudorInv) ? x.CodTipoDeudorInv : "N/A"),
                                //new XElement("NumeroDocumentoInv", !string.IsNullOrEmpty(x.NumeroDocumentoInv) ? x.NumeroDocumentoInv : "N/A"),
                                //new XElement("NombreSujetoInv", !string.IsNullOrEmpty(x.NombreSujetoInv) ? x.NombreSujetoInv : "N/A"),
                                //new XElement("CodigoInstitucionInv",  x.CodigoInstitucionInv)
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorRFR360Footer", datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorRFR360 != null && datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorRFR360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorRFR360.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor) && string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DiasVencido", x.DiasVencido),
                                    new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                                    new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                                )) : string.Empty),
                             new XElement("MantieneHistorialCrediticioDesde", datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde != null ? new XElement("Datos",
                                new XElement("Titulo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde.Titulo) ? datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde.Titulo : "N/A"),
                                new XElement("PrimeraFecha", datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde.PrimeraFecha != default && datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde.PrimeraFecha != DateTime.MinValue && datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde.PrimeraFecha.Date != new DateTime(1900, 1, 1).Date ? datos.BuroCreditoEquifax.Resultados.MantieneHistorialCrediticioDesde.PrimeraFecha.ToString("dd/MM/yyyy") : "N/A")
                            ) : string.Empty),
                            new XElement("IdentificadorPerfilRiesgoDirectoDesde20051", datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirectoDesde20051 != null && datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirectoDesde20051.Any() ?
                            datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirectoDesde20051.Select(x => new XElement("Datos",
                                new XElement("Indicador", !string.IsNullOrEmpty(x.Indicador) ? x.Indicador : "N/A"),
                                new XElement("Valor", !string.IsNullOrEmpty(x.Valor) ? (double.TryParse(x.Valor, out _) ? $"${x.Valor}" : x.Valor) : "N/A"),
                                new XElement("Fecha", x.Fecha != default && x.Fecha != DateTime.MinValue && x.Fecha.Date != new DateTime(1900, 1, 1).Date ? x.Fecha.ToString("dd/MM/yyyy") : "N/A")
                            )) : string.Empty),
                            new XElement("IdentificadorPerfilRiesgoDirecto6Meses2", datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirecto6Meses2 != null && datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirecto6Meses2.Any() ?
                            datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirecto6Meses2.Take(10).Select(x => new XElement("Datos",
                                new XElement("Indicador", !string.IsNullOrEmpty(x.Indicador) ? x.Indicador : "N/A"),
                                new XElement("Valor", !string.IsNullOrEmpty(x.Valor) ? $"${x.Valor}" : "N/A"),
                                new XElement("Fecha", x.Fecha != DateTime.MinValue && !string.IsNullOrEmpty(x.Fecha.ToString()) ? x.Fecha.ToString("dd/MM/yyyy") : "N/A")
                            )) : string.Empty),
                            new XElement("FactoresQueInfluyenScoreV4", datos.BuroCreditoEquifax.ResultadosNivelIndexPymes == null && datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4 != null ? new XElement("Datos",
                                new XElement("Segmento", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.Segmento) ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.Segmento : "N/A"),
                                new XElement("TiempoDesdePrimerCredito", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.TiempoDesdePrimerCredito),
                                new XElement("RatioDeudaReciente", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.RatioDeudaReciente.ToString("N", culture)),
                                new XElement("RatioDeudaVencida", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.RatioDeudaVencida.ToString("N", culture)),
                                new XElement("PresenciaConsultas", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaConsultas),
                                new XElement("PresenciaMora", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaMora),
                                new XElement("CupoTarjetaCredito", $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CupoTarjetaCredito.ToString("N", culture)}"),
                                new XElement("UtilizacionTc", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.UtilizacionTc.ToString("N", culture)),
                                new XElement("DeudaTotal", $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DeudaTotal.ToString("N", culture)}"),
                                new XElement("MaximoMontoOtorgado", $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.MaximoMontoOtorgado.ToString("N", culture)}"),
                                new XElement("TiempoSinOperaciones", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.TiempoSinOperaciones),
                                new XElement("CantidadOperacionesSinMora", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CantidadOperacionesSinMora),
                                new XElement("PresenciaCreditosHipotecarios", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaCreditosHipotecarios),
                                new XElement("NivelRiesgo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.NivelRiesgo) ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.NivelRiesgo : "N/A"),
                                new XElement("ValorDeudasVencidas", $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.ValorDeudasVencidas.ToString("N", culture)}"),
                                new XElement("DiasAtraso", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiasAtraso != 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiasAtraso : (datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiaDeAtraso != 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiaDeAtraso : 0)),
                                new XElement("PresenciaDeudaCastigadaDemanda", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaDeudaCastigadaDemanda),
                                new XElement("CantidadOperacionesConMora", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CantidadOperacionesConMora),
                                new XElement("ValorDeudasCastigadasDemandaJudicial", $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.ValorDeudasCastigadasDemandaJudicial.ToString("N", culture)}")
                            ) : string.Empty),
                            new XElement("IdentificadorPerfilRiesgoDirecto6Meses2Msj", datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirecto6Meses2 != null && datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirecto6Meses2.Any()
                                && datos.BuroCreditoEquifax.Resultados.IdentificadorPerfilRiesgoDirecto6Meses2.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("RecursivoDetalleDistribucionEndeudamientoEducativo3600", datos.BuroCreditoEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600 != null && datos.BuroCreditoEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600.Any() ?
                                datos.BuroCreditoEquifax.Resultados.RecursivoDetalleDistribucionEndeudamientoEducativo3600.Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : (!string.IsNullOrEmpty(x.Institucion?.Trim()) && x.Institucion.Contains("Total") ? "" : "N/A")),
                                    //new XElement("FechaCorteParam", x.FechaCorteParam != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCorteParam.ToString()) ? x.FechaCorteParam.ToString("dd/MM/yyyy") : "N/A"),
                                    //new XElement("CodigoInstitucionParam", x.CodigoInstitucionParam),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    //new XElement("TipoCreditoParam", !string.IsNullOrEmpty(x.TipoCreditoParam) ? x.TipoCreditoParam : "N/A"),
                                    //new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                                    new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Titular", $"${x.Titular.ToString("N", culture)}"),
                                    new XElement("Garante", $"${x.Garante.ToString("N", culture)}"),
                                    new XElement("Codeudor", $"${x.Codeudor.ToString("N", culture)}"),
                                    new XElement("TarjetaCredito", $"${x.TarjetaCredito.ToString("N", culture)}")
                                //new XElement("AcuerdoConcordatorio", !string.IsNullOrEmpty(x.AcuerdoConcordatorio) ? x.AcuerdoConcordatorio : "N/A"),
                                //new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle) ? x.Detalle : "N/A"),
                                //new XElement("ResaltadaInv", !string.IsNullOrEmpty(x.ResaltadaInv) ? x.ResaltadaInv : "N/A"),
                                //new XElement("Opcion", !string.IsNullOrEmpty(x.Opcion) ? x.Opcion : "N/A"),
                                //new XElement("OpcionParam", !string.IsNullOrEmpty(x.OpcionParam) ? x.OpcionParam : "N/A")
                                )) : string.Empty),
                            new XElement("EvolucionHistorica", datos.EvolucionHistorica != null && datos.EvolucionHistorica.ResultadosEvolucionHistorico != null && datos.EvolucionHistorica.ResultadosEvolucionHistorico.DetalleDistribucionDeEndeudamiento != null && datos.EvolucionHistorica.ResultadosEvolucionHistorico.DetalleDistribucionDeEndeudamiento.Any() ?
                                        datos.EvolucionHistorica.ResultadosEvolucionHistorico.DetalleDistribucionDeEndeudamiento.Take(10).Select(x => new XElement("Datos",
                                        new XElement("FechaCorte", x.FechaCorte != default ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                        new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                        new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                        new XElement("Vencida", $"${x.Vencida.ToString("N", culture)}"),
                                        new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                        new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                        new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                    )) : string.Empty),
                            new XElement("EvolucionHistoricaMsj", datos.EvolucionHistorica != null && datos.EvolucionHistorica.ResultadosEvolucionHistorico != null && datos.EvolucionHistorica.ResultadosEvolucionHistorico.DetalleDistribucionDeEndeudamiento != null
                            && datos.EvolucionHistorica.ResultadosEvolucionHistorico.DetalleDistribucionDeEndeudamiento.Any() && datos.EvolucionHistorica.ResultadosEvolucionHistorico.DetalleDistribucionDeEndeudamiento.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("OperacionInstitucion", datos.OperacionInstitucion != null && datos.OperacionInstitucion.Any() ? datos.OperacionInstitucion.Select(x => new XElement("Datos",
                                new XElement("Elementos", x.OperacionInstitucion.ResultadosNivelOperacionInstitucion != null && x.OperacionInstitucion.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones != null && x.OperacionInstitucion.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Any() ?
                                    x.OperacionInstitucion.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Take(10).Select(x => new XElement("Componentes",
                                        new XElement("FechaCorte", x.FechaCorteParam != default ? x.FechaCorteParam.ToString("dd/MM/yyyy") : x.FechaCorteParam == default ? "TOTAL" : "N/A"),
                                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                        new XElement("OperacionParam", !string.IsNullOrEmpty(x.OperacionParam) ? x.OperacionParam : "N/A"),
                                        new XElement("FechaOperacion", x.FechaOperacion != default && x.FechaOperacion != default ? x.FechaOperacion.ToString("dd/MM/yyyy") : "N/A"),
                                        new XElement("ValorTotal", $"${x.ValorTotal.ToString("N", culture)}"),
                                        new XElement("ValorTotalPorVencer", $"${x.ValorTotalPorVencer.ToString("N", culture)}"),
                                        new XElement("ValorTotalNdi", $"${x.ValorTotalNdi.ToString("N", culture)}"),
                                        new XElement("ValorVencido", $"${x.ValorVencido.ToString("N", culture)}"),
                                        new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial.ToString("N", culture)}"),
                                        new XElement("ValorCarteraCastigada", $"${x.ValorCarteraCastigada.ToString("N", culture)}")
                                    ))
                                : string.Empty)
                            )) : string.Empty),
                            new XElement("OperacionInstitucionMsj", datos.OperacionInstitucion != null && datos.OperacionInstitucion.Any() && datos.OperacionInstitucion.Any(x => x.OperacionInstitucion.ResultadosNivelOperacionInstitucion != null
                            && x.OperacionInstitucion.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones != null && x.OperacionInstitucion.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Any()
                            && x.OperacionInstitucion.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Count() > 10) ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("OperacionInstitucionPorVencer", datos.OperacionInstitucionPV != null && datos.OperacionInstitucionPV.Any() ? datos.OperacionInstitucionPV.Select(x => new XElement("Datos",
                                new XElement("Elementos", x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion != null && x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones != null && x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Any() ?
                                    x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Take(10).Select(x => new XElement("Componentes",
                                        new XElement("FechaCorte", x.FechaCorteParam != default ? x.FechaCorteParam.ToString("dd/MM/yyyy") : x.FechaCorteParam == default ? "TOTAL" : "N/A"),
                                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                        new XElement("OperacionParam", !string.IsNullOrEmpty(x.OperacionParam) ? x.OperacionParam : "N/A"),
                                        new XElement("FechaOperacion", x.FechaOperacion != default && x.FechaOperacion != default ? x.FechaOperacion.ToString("dd/MM/yyyy") : "N/A"),
                                        new XElement("ValorTotal", $"${x.ValorTotal.ToString("N", culture)}"),
                                        new XElement("ValorTotalPorVencer", $"${x.ValorTotalPorVencer.ToString("N", culture)}"),
                                        new XElement("ValorTotalNdi", $"${x.ValorTotalNdi.ToString("N", culture)}"),
                                        new XElement("ValorVencido", $"${x.ValorVencido.ToString("N", culture)}"),
                                        new XElement("ValorDemandaJudicial", $"${x.ValorDemandaJudicial.ToString("N", culture)}"),
                                        new XElement("ValorCarteraCastigada", $"${x.ValorCarteraCastigada.ToString("N", culture)}")
                                    ))
                                : string.Empty)
                            )) : string.Empty),
                            new XElement("OperacionInstitucionPorVencerMsj", datos.OperacionInstitucionPV != null && datos.OperacionInstitucionPV.Any() && datos.OperacionInstitucionPV.Any(x => x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion != null
                            && x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones != null && x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Any()
                            && x.OperacionInstitucionPV.ResultadosNivelOperacionInstitucion.RecursivoAnalisisDeOperaciones.Count() > 10) ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("RecursivoComposicionEstructuraDeVencimiento", datos.BuroCreditoEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento != null && datos.BuroCreditoEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento.Any() ?
                                datos.BuroCreditoEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento.Where(x => x.FechaCorte != default && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date && x.FechaCorte.Date != new DateTime(1899, 12, 31).Date).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date && x.FechaCorte.Date != new DateTime(1899, 12, 31).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    //new XElement("CodigoInstitucionParam", x.CodigoInstitucionParam),
                                    //new XElement("AcuerdoConcordatorio", !string.IsNullOrEmpty(x.AcuerdoConcordatorio) ? x.AcuerdoConcordatorio : "N/A"),
                                    //new XElement("InstitucionParam", !string.IsNullOrEmpty(x.InstitucionParam) ? x.InstitucionParam : "N/A"),
                                    new XElement("Opcion", !string.IsNullOrEmpty(x.Opcion) ? x.Opcion : "N/A")
                                //new XElement("OpcionParam", !string.IsNullOrEmpty(x.OpcionParam) ? x.OpcionParam : "N/A")
                                )) : string.Empty),
                            new XElement("HistoricoEstructuraVencimientos", datos.HistoricoEstructuraVencimiento != null && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento != null && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento.DetalleEstructuraDeVencimiento != null && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento.DetalleEstructuraDeVencimiento.Any() ?
                                    datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento.DetalleEstructuraDeVencimiento.Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Vencido0A1", $"${x.Vencido0A1.ToString("N", culture)}"),
                                    new XElement("Vencido1A2", $"${x.Vencido1A2.ToString("N", culture)}"),
                                    new XElement("Vencido2A3", $"${x.Vencido2A3.ToString("N", culture)}"),
                                    new XElement("Vencido3A6", $"${x.Vencido3A6.ToString("N", culture)}"),
                                    new XElement("Vencido6A9", $"${x.Vencido6A9.ToString("N", culture)}"),
                                    new XElement("Vencido9A12", $"${x.Vencido9A12.ToString("N", culture)}"),
                                    new XElement("Vencida", $"${x.Vencida.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("HistoricoEstructuraVencimientosaMsj", datos.HistoricoEstructuraVencimiento != null && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento != null && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento.DetalleEstructuraDeVencimiento != null
                            && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento.DetalleEstructuraDeVencimiento.Any() && datos.HistoricoEstructuraVencimiento.ResultadosHistoricoEstructuraVencimiento.DetalleEstructuraDeVencimiento.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("SaldoVencerInstitucion", datos.SaldoVencerInstitucion != null && datos.SaldoVencerInstitucion.Any() ? datos.SaldoVencerInstitucion.Select(x => new XElement("Datos",
                                new XElement("Elementos", x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion != null && x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion.RecursivoAnalisisSaldosPorVencerSistemaFinanciero != null && x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion.RecursivoAnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                                    x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion.RecursivoAnalisisSaldosPorVencerSistemaFinanciero.Take(10).Select(x => new XElement("Componentes",
                                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                        new XElement("ValorTotalPorVencer", $"${x.ValorTotalPorVencer.ToString("N", culture)}"),
                                        new XElement("ValorPorVencer0_1", $"${x.ValorPorVencer0_1.ToString("N", culture)}"),
                                        new XElement("ValorPorVencer1_3", $"${x.ValorPorVencer1_3.ToString("N", culture)}"),
                                        new XElement("ValorPorVencer3_6", $"${x.ValorPorVencer3_6.ToString("N", culture)}"),
                                        new XElement("ValorPorVencer6_12", $"${x.ValorPorVencer6_12.ToString("N", culture)}"),
                                        new XElement("ValorPorVencer12", $"${x.ValorPorVencer12.ToString("N", culture)}"),
                                        new XElement("CodigoInstitucionParam", x.CodigoInstitucionParam),
                                        new XElement("TipoVencimientoParam", !string.IsNullOrEmpty(x.TipoVencimientoParam) ? x.TipoVencimientoParam : "N/A")
                                    )) : string.Empty)
                            )) : string.Empty),
                            new XElement("SaldoVencerInstitucionMsj", datos.SaldoVencerInstitucion != null && datos.SaldoVencerInstitucion.Any() && datos.SaldoVencerInstitucion.Any(x => x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion != null
                            && x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion.RecursivoAnalisisSaldosPorVencerSistemaFinanciero != null && x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion.RecursivoAnalisisSaldosPorVencerSistemaFinanciero.Any()
                            && x.SaldoVencerInstitucion.ResultadosNivelSaldoVencerInstitucion.RecursivoAnalisisSaldosPorVencerSistemaFinanciero.Count() > 10) ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("DetalleVencidoInstitucion", datos.DetalleVencidoInstitucion != null && datos.DetalleVencidoInstitucion.Any() ? datos.DetalleVencidoInstitucion.Select(x => new XElement("Datos",
                                new XElement("Elementos", x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion != null && x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion.RecursivoDetalleDelVencidoPorInstitucionSubnivel != null && x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion.RecursivoDetalleDelVencidoPorInstitucionSubnivel.Any() ?
                                    x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion.RecursivoDetalleDelVencidoPorInstitucionSubnivel.Take(10).Select(x => new XElement("Componentes",
                                        new XElement("DiasVencido", !string.IsNullOrEmpty(x.DiasVencido) ? x.DiasVencido : "N/A"),
                                        new XElement("Monto", $"${x.Monto.ToString("N", culture)}"),
                                        new XElement("PorcentajeTotalVencido", $"{x.PorcentajeTotalVencido.ToString("N", culture)}"),
                                        new XElement("TipoVencimientoParam", !string.IsNullOrEmpty(x.TipoVencimientoParam) ? x.TipoVencimientoParam : "N/A")
                                    )) : string.Empty)
                            )) : string.Empty),
                            new XElement("DetalleVencidoInstitucionMsj", datos.DetalleVencidoInstitucion != null && datos.DetalleVencidoInstitucion.Any() && datos.DetalleVencidoInstitucion.Any(x => x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion != null
                            && x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion.RecursivoDetalleDelVencidoPorInstitucionSubnivel != null && x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion.RecursivoDetalleDelVencidoPorInstitucionSubnivel.Any()
                            && x.DetalleVencidoInstitucion.ResultadosNivelDetalleVencidoPorInstitucion.RecursivoDetalleDelVencidoPorInstitucionSubnivel.Count() > 10) ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                            new XElement("RecursivoComposicionEstructuraDeVencimientoFooter", datos.BuroCreditoEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento != null && datos.BuroCreditoEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento.Any() ?
                                datos.BuroCreditoEquifax.Resultados.RecursivoComposicionEstructuraDeVencimiento.Where(x => x.FechaCorte == default || x.FechaCorte.Date == new DateTime(1900, 1, 1).Date || x.FechaCorte.Date == new DateTime(1899, 12, 31).Date).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Opcion", !string.IsNullOrEmpty(x.Opcion) ? x.Opcion : "N/A")
                                )) : string.Empty),
                            //new XElement("RecursivoDeudaHistorica3601", datos.BuroCreditoEquifax.Resultados.RecursivoDeudaHistorica3601 != null && datos.BuroCreditoEquifax.Resultados.RecursivoDeudaHistorica3601.Any() ?
                            //    datos.BuroCreditoEquifax.Resultados.RecursivoDeudaHistorica3601.OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                            //        new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                            //        new XElement("FechaCorteParam", x.FechaCorteParam != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCorteParam.ToString()) ? x.FechaCorteParam.ToString("dd/MM/yyyy") : "N/A"),
                            //        new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                            //        new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                            //        new XElement("Vencido0a1", $"${x.Vencido0a1.ToString("N", culture)}"),
                            //        new XElement("Vencido1a2", $"${x.Vencido1a2.ToString("N", culture)}"),
                            //        new XElement("Vencido2a3", $"${x.Vencido2a3.ToString("N", culture)}"),
                            //        new XElement("Vencido3a6", $"${x.Vencido3a6.ToString("N", culture)}"),
                            //        new XElement("Vencido6a9", $"${x.Vencido6a9.ToString("N", culture)}"),
                            //        new XElement("Vencido9a12", $"${x.Vencido9a12.ToString("N", culture)}"),
                            //        new XElement("Vencido12a24", $"${x.Vencido12a24.ToString("N", culture)}"),
                            //        new XElement("Vencido24", $"${x.Vencido24.ToString("N", culture)}"),
                            //        new XElement("Vencido36", $"${x.Vencido36.ToString("N", culture)}"),
                            //        new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                            //        new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                            //        new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                            //        new XElement("TipoDeudaParam", !string.IsNullOrEmpty(x.TipoDeudaParam) ? x.TipoDeudaParam : "N/A"),
                            //        new XElement("Opcion", !string.IsNullOrEmpty(x.Opcion) ? x.Opcion : "N/A"),
                            //        new XElement("OpcionParam", !string.IsNullOrEmpty(x.OpcionParam) ? x.OpcionParam : "N/A")
                            //    )) : string.Empty),
                            new XElement("TarjetasCreditoAnuladasMalManejo", datos.BuroCreditoEquifax.Resultados.TarjetasCreditoAnuladasMalManejo != null && datos.BuroCreditoEquifax.Resultados.TarjetasCreditoAnuladasMalManejo.Any() ?
                                datos.BuroCreditoEquifax.Resultados.TarjetasCreditoAnuladasMalManejo.OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A")
                                )) : string.Empty),
                            new XElement("RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes", datos.BuroCreditoEquifax.Resultados.RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes != null && datos.BuroCreditoEquifax.Resultados.RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes.Any() ?
                                datos.BuroCreditoEquifax.Resultados.RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes.OrderByDescending(m => m.FechaCorteParam).Take(10).Select(x => new XElement("Datos",
                                    new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                    new XElement("NombreTitular", !string.IsNullOrEmpty(x.NombreTitular) ? x.NombreTitular : "N/A"),
                                    new XElement("IdentificacionTitular", !string.IsNullOrEmpty(x.IdentificacionTitular) ? x.IdentificacionTitular : "N/A"),
                                    new XElement("NumeroOperacion", !string.IsNullOrEmpty(x.NumeroOperacion) ? x.NumeroOperacion : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("DeudaTotal", $"${x.DeudaTotal.ToString("N", culture)}"),
                                    //new XElement("CodigoInstitucionParam", x.CodigoInstitucionParam),
                                    //new XElement("OperacionParam", !string.IsNullOrEmpty(x.OperacionParam) ? x.OperacionParam : "N/A"),
                                    //new XElement("CodigoTipoDeudorParam", !string.IsNullOrEmpty(x.CodigoTipoDeudorParam) ? x.CodigoTipoDeudorParam : "N/A"),
                                    //new XElement("TipoDocumentoTitularParam", !string.IsNullOrEmpty(x.TipoDocumentoTitularParam) ? x.TipoDocumentoTitularParam : "N/A"),
                                    //new XElement("NumeroDocumentoTitularParam", !string.IsNullOrEmpty(x.NumeroDocumentoTitularParam) ? x.NumeroDocumentoTitularParam : "N/A"),
                                    new XElement("FechaCorteParam", x.FechaCorteParam != default && x.FechaCorteParam != DateTime.MinValue && x.FechaCorteParam.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorteParam.ToString("dd/MM/yyyy") : "N/A")
                                )) : string.Empty),
                            new XElement("AnalisisDetalleDelVencido", datos.BuroCreditoEquifax.Resultados.AnalisisDetalleDelVencido != null && datos.BuroCreditoEquifax.Resultados.AnalisisDetalleDelVencido.Any() ?
                                datos.BuroCreditoEquifax.Resultados.AnalisisDetalleDelVencido.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    //new XElement("CodigoInstitucionInv", !string.IsNullOrEmpty(x.CodigoInstitucionInv) ? x.CodigoInstitucionInv : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("Vencido0a1", $"${x.Vencido0a1.ToString("N", culture)}"),
                                    new XElement("Vencido1a2", $"${x.Vencido1a2.ToString("N", culture)}"),
                                    new XElement("Vencido2a3", $"${x.Vencido2a3.ToString("N", culture)}"),
                                    new XElement("Vencido3a6", $"${x.Vencido3a6.ToString("N", culture)}"),
                                    new XElement("Vencido6a9", $"${x.Vencido6a9.ToString("N", culture)}"),
                                    new XElement("Vencido9a12", $"${x.Vencido9a12.ToString("N", culture)}"),
                                    new XElement("Vencido12a24", $"${x.Vencido12a24.ToString("N", culture)}"),
                                    new XElement("Vencido36", $"${x.Vencido36.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("NoDevengaInteresesInv", $"${x.NoDevengaInteresesInv.ToString("N", culture)}"),
                                    new XElement("TotalVencidoInv", $"${x.TotalVencidoInv.ToString("N", culture)}")
                                //new XElement("AcuerdoConcordato", !string.IsNullOrEmpty(x.AcuerdoConcordato) ? x.AcuerdoConcordato : "N/A")
                                )) : string.Empty),
                            new XElement("AnalisisDetalleDelVencidoFooter", datos.BuroCreditoEquifax.Resultados.AnalisisDetalleDelVencido != null && datos.BuroCreditoEquifax.Resultados.AnalisisDetalleDelVencido.Any() ?
                                datos.BuroCreditoEquifax.Resultados.AnalisisDetalleDelVencido.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                    new XElement("Vencido0a1", $"${x.Vencido0a1.ToString("N", culture)}"),
                                    new XElement("Vencido1a2", $"${x.Vencido1a2.ToString("N", culture)}"),
                                    new XElement("Vencido2a3", $"${x.Vencido2a3.ToString("N", culture)}"),
                                    new XElement("Vencido3a6", $"${x.Vencido3a6.ToString("N", culture)}"),
                                    new XElement("Vencido6a9", $"${x.Vencido6a9.ToString("N", culture)}"),
                                    new XElement("Vencido9a12", $"${x.Vencido9a12.ToString("N", culture)}"),
                                    new XElement("Vencido12a24", $"${x.Vencido12a24.ToString("N", culture)}"),
                                    new XElement("Vencido36", $"${x.Vencido36.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("NoDevengaInteresesInv", $"${x.NoDevengaInteresesInv.ToString("N", culture)}"),
                                    new XElement("TotalVencidoInv", $"${x.TotalVencidoInv.ToString("N", culture)}")
                                //new XElement("AcuerdoConcordato", !string.IsNullOrEmpty(x.AcuerdoConcordato) ? x.AcuerdoConcordato : "N/A")
                                )) : string.Empty),
                            new XElement("AnalisisSaldosPorVencerSistemaFinanciero", datos.BuroCreditoEquifax.Resultados.AnalisisSaldosPorVencerSistemaFinanciero != null && datos.BuroCreditoEquifax.Resultados.AnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                                datos.BuroCreditoEquifax.Resultados.AnalisisSaldosPorVencerSistemaFinanciero.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte != new DateTime(1900, 1, 1) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    //new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv),
                                    new XElement("TotalPorVencer", $"${x.TotalPorVencer.ToString("N", culture)}"),
                                    new XElement("PorVencer0a1", $"${x.PorVencer0a1.ToString("N", culture)}"),
                                    new XElement("PorVencer1a3", $"${x.PorVencer1a3.ToString("N", culture)}"),
                                    new XElement("PorVencer3a6", $"${x.PorVencer3a6.ToString("N", culture)}"),
                                    new XElement("PorVencer6a12", $"${x.PorVencer6a12.ToString("N", culture)}"),
                                    new XElement("PorVencer12", $"${x.PorVencer12.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("AnalisisSaldosPorVencerSistemaFinancieroFooter", datos.BuroCreditoEquifax.Resultados.AnalisisSaldosPorVencerSistemaFinanciero != null && datos.BuroCreditoEquifax.Resultados.AnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                                datos.BuroCreditoEquifax.Resultados.AnalisisSaldosPorVencerSistemaFinanciero.Where(m => m.FechaCorte == default && string.IsNullOrEmpty(m.Institucion)).Select(x => new XElement("Datos",
                                    new XElement("TotalPorVencer", $"${x.TotalPorVencer.ToString("N", culture)}"),
                                    new XElement("PorVencer0a1", $"${x.PorVencer0a1.ToString("N", culture)}"),
                                    new XElement("PorVencer1a3", $"${x.PorVencer1a3.ToString("N", culture)}"),
                                    new XElement("PorVencer3a6", $"${x.PorVencer3a6.ToString("N", culture)}"),
                                    new XElement("PorVencer6a12", $"${x.PorVencer6a12.ToString("N", culture)}"),
                                    new XElement("PorVencer12", $"${x.PorVencer12.ToString("N", culture)}")
                                )) : string.Empty),
                            //new XElement("WSOGraficarEvolucionDeuda3Sistemas", datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas != null && datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas.Any() ?
                            //    datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas.OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                            //        new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                            //        new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                            //        new XElement("Vencidos", $"${x.Vencidos.ToString("N", culture)}")
                            //    new XElement("Opcion", !string.IsNullOrEmpty(x.Opcion) ? x.Opcion : "N/A")
                            //    )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESS", datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorINFOCOMExcluyendoIESS != null && datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorINFOCOMExcluyendoIESS.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorINFOCOMExcluyendoIESS.OrderByDescending(m => m.FechaCorte).Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor)).Take(10).Select(x => new XElement("Datos",
                                   new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                   new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                   new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                //new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv),
                                //new XElement("CodTipoDeudorInv", !string.IsNullOrEmpty(x.CodTipoDeudorInv) ? x.CodTipoDeudorInv : "N/A"),
                                //new XElement("NumeroDocumentoInv", !string.IsNullOrEmpty(x.NumeroDocumentoInv) ? x.NumeroDocumentoInv : "N/A"),
                                //new XElement("NombreSujetoInv", !string.IsNullOrEmpty(x.NombreSujetoInv) ? x.NombreSujetoInv : "N/A")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSFooter", datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorINFOCOMExcluyendoIESS != null && datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorINFOCOMExcluyendoIESS.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DeudaReportadaPorINFOCOMExcluyendoIESS.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                )) : string.Empty),
                            new XElement("ValorDeudaTotalEnLos3SegmentosSinIESS360", datos.BuroCreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && datos.BuroCreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => !string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                                    new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo) ? x.Titulo : "N/A"),
                                    //new XElement("TituloWSInv", !string.IsNullOrEmpty(x.TituloWSInv) ? x.TituloWSInv : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("ValorDeudaTotalEnLos3SegmentosSinIESS360Footer", datos.BuroCreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360 != null && datos.BuroCreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.ValorDeudaTotalEnLos3SegmentosSinIESS360.Where(x => string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("CuotaEstimadaMensualWeb", datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb != null ? new XElement("Datos",
                                new XElement("Pago", $"${datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.Pago.ToString("N", culture)}"),
                                new XElement("NumeroCreditosComercial", datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.NumeroCreditosComercial),
                                new XElement("TotalVencido", $"${datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.TotalVencido.ToString("N", culture)}"),
                                new XElement("TotalDemanda", $"${datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.TotalDemanda.ToString("N", culture)}"),
                                new XElement("TotalCartera", $"${datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.TotalCartera.ToString("N", culture)}"),
                                new XElement("NumeroCreditosIece", datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.NumeroCreditosIece),
                                new XElement("NumeroOperacionesExcluidas", datos.BuroCreditoEquifax.Resultados.CuotaEstimadaMensualWeb.NumeroOperacionesExcluidas)
                             ) : string.Empty),
                            new XElement("GarantiasPersonalesCoudeudoresOperacionesNoVigentes", datos.BuroCreditoEquifax.Resultados.GarantiasPersonalesCoudeudoresOperacionesNoVigentes != null && datos.BuroCreditoEquifax.Resultados.GarantiasPersonalesCoudeudoresOperacionesNoVigentes.Any() ?
                              datos.BuroCreditoEquifax.Resultados.GarantiasPersonalesCoudeudoresOperacionesNoVigentes.OrderByDescending(m => m.FechaCorteInv).Take(10).Select(x => new XElement("Datos",
                                new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                new XElement("FechaConcesion", x.FechaConcesion != default && x.FechaConcesion != DateTime.MinValue && x.FechaConcesion.Date != new DateTime(1900, 1, 1).Date ? x.FechaConcesion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaEliminacion", x.FechaEliminacion != default && x.FechaEliminacion != DateTime.MinValue && x.FechaEliminacion.Date != new DateTime(1900, 1, 1).Date ? x.FechaEliminacion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("NumeroDocumento", !string.IsNullOrEmpty(x.NumeroDocumento) ? x.NumeroDocumento : "N/A"),
                                new XElement("NombreSujeto", !string.IsNullOrEmpty(x.NombreSujeto) ? x.NombreSujeto : "N/A"),
                                new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                new XElement("NumeroOperacion", !string.IsNullOrEmpty(x.NumeroOperacion) ? x.NumeroOperacion : "N/A"),
                                new XElement("ValorOperacion", $"${x.ValorOperacion.ToString("N", culture)}"),
                                new XElement("FechaCancelacion", x.FechaCancelacion != default && x.FechaCancelacion != DateTime.MinValue && x.FechaCancelacion.Date != new DateTime(1900, 1, 1).Date ? x.FechaCancelacion.ToString("dd/MM/yyyy") : "N/A"),
                                new XElement("FechaCorteInv", x.FechaCorteInv != default && x.FechaCorteInv != DateTime.MinValue && x.FechaCorteInv.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorteInv.ToString("dd/MM/yyyy") : "N/A")
                              )) : string.Empty),
                            new XElement("DetalleDeudaActualReportadaRFR360", datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaRFR360 != null && datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaRFR360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaRFR360.OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                   new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                   new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                   //new XElement("TipoRiesgo", !string.IsNullOrEmpty(x.TipoRiesgo) ? x.TipoRiesgo : "N/A"),
                                   //new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                                   new XElement("CupoMontoOriginal", $"${x.CupoMontoOriginal.ToString("N", culture)}"),
                                   new XElement("FechaApertura", !string.IsNullOrEmpty(x.FechaApertura) ? x.FechaApertura : "N/A"),
                                   //new XElement("FechaVencimiento", !string.IsNullOrEmpty(x.FechaVencimiento) ? x.FechaVencimiento : "N/A"),
                                   //new XElement("CalifPropia", !string.IsNullOrEmpty(x.CalifPropia) ? x.CalifPropia : "N/A"),
                                   new XElement("TotalVencer", $"${x.TotalVencer.ToString("N", culture)}"),
                                   new XElement("Ndi", $"${x.Ndi.ToString("N", culture)}"),
                                   new XElement("TotalVencido", $"${x.TotalVencido.ToString("N", culture)}"),
                                   new XElement("DemJud", $"${x.DemJud.ToString("N", culture)}"),
                                   new XElement("CartCast", $"${x.CartCast.ToString("N", culture)}"),
                                   new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                   new XElement("CuotaMensual", $"${x.CuotaMensual.ToString("N", culture)}")
                                )) : string.Empty),
                             new XElement("DetalleDeudaActualReportadaSBS360", datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaSBS360 != null && datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaSBS360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaSBS360.OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    //new XElement("TipoRiesgo", !string.IsNullOrEmpty(x.TipoRiesgo) ? x.TipoRiesgo : "N/A"),
                                    //new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                                    new XElement("CupoMontoOriginal", $"${x.CupoMontoOriginal.ToString("N", culture)}"),
                                    //new XElement("FechaApertura", !string.IsNullOrEmpty(x.FechaApertura) ? x.FechaApertura : "N/A"),
                                    //new XElement("FechaVencimiento", !string.IsNullOrEmpty(x.FechaVencimiento) ? x.FechaVencimiento : "N/A"),
                                    //new XElement("CalifPropia", !string.IsNullOrEmpty(x.CalifPropia) ? x.CalifPropia : "N/A"),
                                    new XElement("TotalVencer", $"${x.TotalVencer.ToString("N", culture)}"),
                                    new XElement("Ndi", $"${x.Ndi.ToString("N", culture)}"),
                                    new XElement("TotalVencido", $"${x.TotalVencido.ToString("N", culture)}"),
                                    new XElement("DemJud", $"${x.DemJud.ToString("N", culture)}"),
                                    new XElement("CartCast", $"${x.CartCast.ToString("N", culture)}"),
                                    new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                    new XElement("CuotaMensual", $"${x.CuotaMensual.ToString("N", culture)}")
                                )) : string.Empty),
                             new XElement("DetalleDeudaActualReportadaSICOM360", datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaSICOM360 != null && datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaSICOM360.Any() ?
                                datos.BuroCreditoEquifax.Resultados.DetalleDeudaActualReportadaSICOM360.OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    //new XElement("TipoRiesgo", !string.IsNullOrEmpty(x.TipoRiesgo) ? x.TipoRiesgo : "N/A"),
                                    //new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                                    new XElement("CupoMontoOriginal", $"${x.CupoMontoOriginal.ToString("N", culture)}"),
                                    //new XElement("FechaApertura", !string.IsNullOrEmpty(x.FechaApertura) ? x.FechaApertura : "N/A"),
                                    //new XElement("FechaVencimiento", !string.IsNullOrEmpty(x.FechaVencimiento) ? x.FechaVencimiento : "N/A"),
                                    //new XElement("CalifPropia", !string.IsNullOrEmpty(x.CalifPropia) ? x.CalifPropia : "N/A"),
                                    new XElement("TotalVencer", $"${x.TotalVencer.ToString("N", culture)}"),
                                    new XElement("Ndi", $"${x.Ndi.ToString("N", culture)}"),
                                    new XElement("TotalVencido", $"${x.TotalVencido.ToString("N", culture)}"),
                                    new XElement("DemJud", $"${x.DemJud.ToString("N", culture)}"),
                                    new XElement("CartCast", $"${x.CartCast.ToString("N", culture)}"),
                                    new XElement("SaldoDeuda", $"${x.SaldoDeuda.ToString("N", culture)}"),
                                    new XElement("CuotaMensual", $"${x.CuotaMensual.ToString("N", culture)}")
                                )) : string.Empty),
                             new XElement("ScoreSobreEndeudamiento", datos.BuroCreditoEquifax.ResultadosNivelScoreSobreEndeudamiento != null
                             && datos.BuroCreditoEquifax.ResultadosNivelScoreSobreEndeudamiento.ScoreSobreEndeudamiento != null
                             && datos.BuroCreditoEquifax.ResultadosNivelScoreSobreEndeudamiento.ScoreSobreEndeudamiento.Any()
                             && datos.BuroCreditoEquifax.ResultadosNivelScoreSobreEndeudamiento.ScoreSobreEndeudamiento.Where(x => x.Retroactivo.Trim().ToUpper() == "ACTUAL").FirstOrDefault() != null ?
                                datos.BuroCreditoEquifax.ResultadosNivelScoreSobreEndeudamiento.ScoreSobreEndeudamiento.Where(x => x.Retroactivo.Trim().ToUpper() == "ACTUAL").FirstOrDefault().Score
                             : string.Empty),
                    new XElement("EvolucionHistoricaDistEndeudamientoSICOM", datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoSICOM != null && datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoSICOM.Any() ?
                       datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoSICOM.Select(x => new XElement("Datos",
                           new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                           new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                           new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                           new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                           new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                           new XElement("ValNdi", x.ValNdi >= 0 ? $"${x.ValNdi.ToString("N", culture)}" : "N/A"),
                           new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                           new XElement("ValCarCastigada", x.ValCarCastigada >= 0 ? $"${x.ValCarCastigada.ToString("N", culture)}" : "N/A"),
                           new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                       )).Take(10) : string.Empty),
                     new XElement("EvolucionHistoricaDistEndeudamientoSICOMMsj", datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoSICOM != null && datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoSICOM.Any()
                        && datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoSICOM.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                             new XElement("GraficoED3S", datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas != null && datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas.Any() ? GenerarGraficoED3S(datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas) : string.Empty),
                    #region Fragancias
                             new XElement("GraficoED3SFragancias", datos.BuroCreditoEquifax.ResultadosFragancias != null && datos.BuroCreditoEquifax.ResultadosFragancias.WSOGraficarEvolucionDeuda != null && datos.BuroCreditoEquifax.ResultadosFragancias.WSOGraficarEvolucionDeuda.Any() && datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas != null && datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas.Any() ?
                             GenerarGraficoED3SFragancias(datos.BuroCreditoEquifax.Resultados.WSOGraficarEvolucionDeuda3Sistemas) : string.Empty),
                             new XElement("PersonasInabilitadasFragancias", datos.BuroCreditoEquifax.ResultadoConsultaFragancias.HasValue && datos.BuroCreditoEquifax.ResultadoConsultaFragancias.Value ? "SI" : string.Empty),
                             new XElement("RecursivoEndeudamientoFragancias", datos.BuroCreditoEquifax.ResultadoConsultaFragancias.HasValue && datos.BuroCreditoEquifax.ResultadoConsultaFragancias.Value ? "SI" : string.Empty),
                    #endregion Fragancias
                    #region Banco Litoral
                            new XElement("DatosSolicitudBancoLitoral", datos.BuroCreditoEquifax.ResultadosBancoLitoral != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.DatosSolicitud != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.DatosSolicitud.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoral.DatosSolicitud.Select(x => new XElement("Datos",
                                new XElement("Variables", !string.IsNullOrEmpty(x.Variable?.Trim()) ? x.Variable.Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado?.Trim()) ? x.Resultado.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoBancoLitoral", datos.BuroCreditoEquifax.ResultadosBancoLitoral != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.Resultado != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.Resultado.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoral.Resultado.Select(x => new XElement("Datos",
                                new XElement("Variables", !string.IsNullOrEmpty(x.Variable?.Trim()) ? x.Variable.Replace(":", "").Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado?.Trim()) ? x.Resultado.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("SugerenciaBancoLitoral", datos.BuroCreditoEquifax.ResultadosBancoLitoral != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.Sugerencia != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.Sugerencia.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoral.Sugerencia.Select(x => new XElement("Datos",
                                new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle?.Trim()) ? x.Detalle.Trim() : "N/A"),
                                new XElement("MontoUsd", !string.IsNullOrEmpty(x.MontoUsd?.Trim()) ? x.MontoUsd.Trim() : "N/A"),
                                new XElement("Plazo", !string.IsNullOrEmpty(x.Plazo?.Trim()) ? x.Plazo.Trim() : "N/A"),
                                new XElement("CuotaUsd", !string.IsNullOrEmpty(x.CuotaUsd?.Trim()) ? x.CuotaUsd.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoPoliticaBancoLitoral", datos.BuroCreditoEquifax.ResultadosBancoLitoral != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.ResultadoPoliticas != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.ResultadoPoliticas.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoral.ResultadoPoliticas.Select(x => new XElement("Datos",
                                new XElement("Politica", !string.IsNullOrEmpty(x.Politica?.Trim()) ? x.Politica.Trim() : "N/A"),
                                new XElement("Valor", !string.IsNullOrEmpty(x.Valor?.Trim()) ? x.Valor.Trim() : "N/A"),
                                new XElement("Decision", !string.IsNullOrEmpty(x.Decision?.Trim()) ? x.Decision.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoSegmentacionBancoLitoral", datos.BuroCreditoEquifax.ResultadosBancoLitoral != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.ResultadoSegmentacion != null && datos.BuroCreditoEquifax.ResultadosBancoLitoral.ResultadoSegmentacion.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoral.ResultadoSegmentacion.Select(x => new XElement("Datos",
                                new XElement("ResultadoEvaluacion", !string.IsNullOrEmpty(x.ResultadoEvaluacion?.Trim()) ? x.ResultadoEvaluacion.Trim() : "N/A"),
                                new XElement("SegmentacionCliente", !string.IsNullOrEmpty(x.SegmentacionCliente?.Trim()) ? x.SegmentacionCliente.Trim() : "N/A"),
                                new XElement("ModeloUtilizado", !string.IsNullOrEmpty(x.ModeloUtilizado?.Trim()) ? x.ModeloUtilizado.Trim() : "N/A")
                            )) : string.Empty),
                    #endregion Banco Litoral
                    #region Banco Litoral Microfinanza
                            new XElement("DatosSolicitudBancoLitoralMicrofinanza", datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.DatosSolicitud != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.DatosSolicitud.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.DatosSolicitud.Select(x => new XElement("Datos",
                                new XElement("Variables", !string.IsNullOrEmpty(x.Variable?.Trim()) ? x.Variable.Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado?.Trim()) ? x.Resultado.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoBancoLitoralMicrofinanza", datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.Resultado != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.Resultado.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.Resultado.Select(x => new XElement("Datos",
                                new XElement("Variables", !string.IsNullOrEmpty(x.Variable?.Trim()) ? x.Variable.Replace(":", "").Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado?.Trim()) ? x.Resultado.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("SugerenciaBancoLitoralMicrofinanza", datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.Sugerencia != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.Sugerencia.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.Sugerencia.Select(x => new XElement("Datos",
                                new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle?.Trim()) ? x.Detalle.Trim() : "N/A"),
                                new XElement("MontoUsd", !string.IsNullOrEmpty(x.MontoUsd?.Trim()) ? x.MontoUsd.Trim() : "N/A"),
                                new XElement("Plazo", !string.IsNullOrEmpty(x.Plazo?.Trim()) ? x.Plazo.Trim() : "N/A"),
                                new XElement("CuotaUsd", !string.IsNullOrEmpty(x.CuotaUsd?.Trim()) ? x.CuotaUsd.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoPoliticaBancoLitoralMicrofinanza", datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.ResultadoPoliticas != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.ResultadoPoliticas.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.ResultadoPoliticas.Select(x => new XElement("Datos",
                                new XElement("Politica", !string.IsNullOrEmpty(x.Politica?.Trim()) ? x.Politica.Trim() : "N/A"),
                                new XElement("Valor", !string.IsNullOrEmpty(x.Valor?.Trim()) ? x.Valor.Trim() : "N/A"),
                                new XElement("Decision", !string.IsNullOrEmpty(x.Decision?.Trim()) ? x.Decision.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoSegmentacionBancoLitoralMicrofinanza", datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.ResultadoSegmentacion != null && datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.ResultadoSegmentacion.Any() ?
                            datos.BuroCreditoEquifax.ResultadosBancoLitoralMicrofinanza.ResultadoSegmentacion.Select(x => new XElement("Datos",
                                new XElement("ResultadoEvaluacion", !string.IsNullOrEmpty(x.ResultadoEvaluacion?.Trim()) ? x.ResultadoEvaluacion.Trim() : "N/A"),
                                new XElement("SegmentacionCliente", !string.IsNullOrEmpty(x.SegmentacionCliente?.Trim()) ? x.SegmentacionCliente.Trim() : "N/A"),
                                new XElement("ModeloUtilizado", !string.IsNullOrEmpty(x.ModeloUtilizado?.Trim()) ? x.ModeloUtilizado.Trim() : "N/A")
                            )) : string.Empty),
                    #endregion Banco Litoral Microfinanza
                    #region Cooperativa Tena
                            new XElement("DatosSolicitudCoopTena", datos.BuroCreditoEquifax.ResultadosCooperativaTena != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.DatosSolicitud != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.DatosSolicitud.Any() ?
                            datos.BuroCreditoEquifax.ResultadosCooperativaTena.DatosSolicitud.Select(x => new XElement("Datos",
                                new XElement("Variables", !string.IsNullOrEmpty(x.Variable?.Trim()) ? x.Variable.Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado?.Trim()) ? x.Resultado.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoCoopTena", datos.BuroCreditoEquifax.ResultadosCooperativaTena != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.Resultado != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.Resultado.Any() ?
                            datos.BuroCreditoEquifax.ResultadosCooperativaTena.Resultado.Select(x => new XElement("Datos",
                                new XElement("Variables", !string.IsNullOrEmpty(x.Variable?.Trim()) ? x.Variable.Replace(":", "").Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado?.Trim()) ? x.Resultado.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("SugerenciaCoopTena", datos.BuroCreditoEquifax.ResultadosCooperativaTena != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.Sugerencia != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.Sugerencia.Any() ?
                            datos.BuroCreditoEquifax.ResultadosCooperativaTena.Sugerencia.Select(x => new XElement("Datos",
                                new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle?.Trim()) ? x.Detalle.Trim() : "N/A"),
                                new XElement("MontoUsd", !string.IsNullOrEmpty(x.MontoUsd?.Trim()) ? x.MontoUsd.Trim() : "N/A"),
                                new XElement("Plazo", !string.IsNullOrEmpty(x.Plazo?.Trim()) ? x.Plazo.Trim() : "N/A"),
                                new XElement("CuotaUsd", !string.IsNullOrEmpty(x.CuotaUsd?.Trim()) ? x.CuotaUsd.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoPoliticaCoopTena", datos.BuroCreditoEquifax.ResultadosCooperativaTena != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.ResultadoPoliticas != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.ResultadoPoliticas.Any() ?
                            datos.BuroCreditoEquifax.ResultadosCooperativaTena.ResultadoPoliticas.Select(x => new XElement("Datos",
                                new XElement("Politica", !string.IsNullOrEmpty(x.Politica?.Trim()) ? x.Politica.Trim() : "N/A"),
                                new XElement("Valor", !string.IsNullOrEmpty(x.Valor?.Trim()) ? x.Valor.Trim() : "N/A"),
                                new XElement("Decision", !string.IsNullOrEmpty(x.Decision?.Trim()) ? x.Decision.Trim() : "N/A")
                            )) : string.Empty),
                            new XElement("ResultadoSegmentacionCoopTena", datos.BuroCreditoEquifax.ResultadosCooperativaTena != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.ResultadoSegmentacion != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.ResultadoSegmentacion.Any() ?
                            datos.BuroCreditoEquifax.ResultadosCooperativaTena.ResultadoSegmentacion.Select(x => new XElement("Datos",
                                new XElement("ResultadoEvaluacion", !string.IsNullOrEmpty(x.ResultadoEvaluacion?.Trim()) ? x.ResultadoEvaluacion.Trim() : "N/A"),
                                new XElement("SegmentacionCliente", !string.IsNullOrEmpty(x.SegmentacionCliente?.Trim()) ? x.SegmentacionCliente.Trim() : "N/A"),
                                new XElement("ModeloUtilizado", !string.IsNullOrEmpty(x.ModeloUtilizado?.Trim()) ? x.ModeloUtilizado.Trim() : "N/A")
                            )) : string.Empty),
                             new XElement("CalificaDetalledeTarjetas360CoopTena", datos.BuroCreditoEquifax.ResultadosCooperativaTena != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.CalificaDetalledeTarjetas360 != null && datos.BuroCreditoEquifax.ResultadosCooperativaTena.CalificaDetalledeTarjetas360.Any() ?
                            datos.BuroCreditoEquifax.ResultadosCooperativaTena.CalificaDetalledeTarjetas360.Select(x => new XElement("Datos",
                                new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion?.Trim()) ? x.Institucion.Trim() : "N/A"),
                                new XElement("Emisor", !string.IsNullOrEmpty(x.Emisor?.Trim()) ? x.Emisor.Trim() : "N/A"),
                                new XElement("Antiguedad", x.Antiguedad.HasValue ? x.Antiguedad.Value.ToString("N", culture) : "N/A"),
                                new XElement("Cupo", x.Cupo.HasValue ? $"${x.Cupo.Value.ToString("N", culture)}" : "N/A"),
                                new XElement("SaldoActual", x.SaldoActual.HasValue ? $"${x.SaldoActual.Value.ToString("N", culture)}" : "N/A"),
                                new XElement("SaldoPromedioUltimos6Meses", x.SaldoPromedioUltimos6Meses.HasValue ? $"${x.SaldoPromedioUltimos6Meses.Value.ToString("N", culture)}" : "N/A"),
                                new XElement("PorcentajeUsoTarjeta", x.PorcentajeUsoTarjeta.HasValue ? $"{x.PorcentajeUsoTarjeta.Value.ToString("N", culture)}%" : "N/A"),
                                new XElement("PorcentajeRelacionDeudaTCDeudaTotal", x.PorcentajeRelacionDeudaTCDeudaTotal.HasValue ? $"{x.PorcentajeRelacionDeudaTCDeudaTotal.Value.ToString("N", culture)}%" : "N/A"),
                                new XElement("NumeroTarjetaInv", !string.IsNullOrEmpty(x.NumeroTarjetaInv?.Trim()) ? x.NumeroTarjetaInv.Trim() : "N/A")
                            )) : string.Empty)
                    #endregion Cooperativa Tena                            
                             ) : string.Empty));

                    //   new XElement("ScoreV4", datos.BuroCreditoEquifax.Resultados.ScoreV4V10 != null ? new XElement("Datos",
                    //       new XElement("Score", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.Score >= 0 ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.Score : "N/A"),
                    //       new XElement("TotalAcum", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.TotalAcum >= 0 ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.TotalAcum : "N/A"),
                    //       new XElement("TasaDeMalosAcum", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.TasaDeMalosAcum >= 0 ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.TasaDeMalosAcum.ToString("N", culture) : "N/A"),
                    //       new XElement("ScoreMin", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.ScoreMin >= 0 ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.ScoreMin.ToString("N", culture) : "N/A"),
                    //       new XElement("ScoreMax", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.ScoreMax >= 0 ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.ScoreMax.ToString("N", culture) : "N/A"),
                    //       new XElement("FechaInicial", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.ScoreV4V10.FechaInicial.ToString()) ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.FechaInicial.ToString("dd/MM/yyyy") : "N/A"),
                    //       new XElement("FechaFinal", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.ScoreV4V10.FechaFinal.ToString()) ? datos.BuroCreditoEquifax.Resultados.ScoreV4V10.FechaFinal.ToString("dd/MM/yyyy") : "N/A")
                    //   ) : string.Empty),
                    //   new XElement("AnalisisdeSaldosPorVencer360", datos.BuroCreditoEquifax.Resultados.AnalisisdeSaldosPorVencer360 != null && datos.BuroCreditoEquifax.Resultados.AnalisisdeSaldosPorVencer360.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.AnalisisdeSaldosPorVencer360.Select(x => new XElement("Datos",
                    //           new XElement("PeriodoOperacion", !string.IsNullOrEmpty(x.PeriodoOperacion) ? x.PeriodoOperacion : "N/A"),
                    //           new XElement("CantidadOperaciones", x.CantidadOperaciones >= 0 ? x.CantidadOperaciones : "N/A"),
                    //           new XElement("SaldosXVencer", x.SaldosPorVencer >= 0 ? $"${x.SaldosPorVencer.ToString("N", culture)}" : "N/A")
                    //       )) : string.Empty),
                    //   new XElement("ResumenProtestosMorosidades360", datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360 != null ? new XElement("Datos",
                    //       new XElement("Morosidades", datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.Morosidades >= 0 ? datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.Morosidades : string.Empty),
                    //       new XElement("Protestos", datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.Protestos >= 0 ? datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.Protestos : string.Empty),
                    //       new XElement("MontoTotalMorosidades", datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.MontoTotalMorosidades >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.MontoTotalMorosidades.ToString("N", culture)}" : string.Empty),
                    //       new XElement("TotalNumeroOperaciones", datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.TotalNumeroOperaciones >= 0 ? datos.BuroCreditoEquifax.Resultados.ResumenProtestosMorosidades360.TotalNumeroOperaciones : string.Empty)
                    //   ) : string.Empty),
                    //   new XElement("HistoricoAcreedores360", datos.BuroCreditoEquifax.Resultados.HistoricoAcreedores360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoAcreedores360.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.HistoricoAcreedores360.Select(x => new XElement("Datos",
                    //           new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : string.Empty),
                    //           new XElement("Acredores", x.Acredores >= 0 ? x.Acredores : string.Empty)
                    //       )) : string.Empty),
                    //   new XElement("HistoricoEndeudamientoComercial360", datos.BuroCreditoEquifax.Resultados.HistoricoEndeudamientoComercial360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoEndeudamientoComercial360.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.HistoricoEndeudamientoComercial360.Select(x => new XElement("Datos",
                    //           new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : "N/A"),
                    //           new XElement("SaldoTotal", x.SaldoTotal >= 0 ? $"${x.SaldoTotal.ToString("N", culture)}" : "N/A")
                    //       )) : string.Empty),
                    //   new XElement("HistoricoEndeudamientoFinanciero360", datos.BuroCreditoEquifax.Resultados.HistoricoEndeudamientoFinanciero360 != null && datos.BuroCreditoEquifax.Resultados.HistoricoEndeudamientoFinanciero360.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.HistoricoEndeudamientoFinanciero360.Select(x => new XElement("Datos",
                    //           new XElement("Retroactivo", !string.IsNullOrEmpty(x.Retroactivo) ? x.Retroactivo : "N/A"),
                    //           new XElement("SaldoTotal", x.SaldoTotal >= 0 ? $"${x.SaldoTotal.ToString("N", culture)}" : "N/A")
                    //       )) : string.Empty),
                    //   new XElement("InformacionSri360", datos.BuroCreditoEquifax.Resultados.InformacionSri360 != null && datos.BuroCreditoEquifax.Resultados.InformacionSri360.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.InformacionSri360.Select(x => new XElement("Datos",
                    //           new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre) ? x.Nombre : "N/A"),
                    //           new XElement("Actividad", !string.IsNullOrEmpty(x.Actividad) ? x.Actividad : "N/A"),
                    //           new XElement("Ruc", !string.IsNullOrEmpty(x.Ruc) ? x.Ruc : "N/A"),
                    //           new XElement("Direccion", !string.IsNullOrEmpty(x.Direccion) ? x.Direccion : "N/A"),
                    //           new XElement("EstadoContribuyente", !string.IsNullOrEmpty(x.EstadoContribuyente) ? x.EstadoContribuyente : "N/A"),
                    //           new XElement("ClaseContribuyente", !string.IsNullOrEmpty(x.ClaseContribuyente) ? x.ClaseContribuyente : "N/A"),
                    //           new XElement("CodigoCiiu", !string.IsNullOrEmpty(x.CodigoCiiu) ? x.CodigoCiiu : "N/A"),
                    //           new XElement("FechaInicioActividades", x.FechaInicioActividades != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaInicioActividades.ToString()) ? x.FechaInicioActividades.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("FechaSuspensionDefinitiva", x.FechaSuspensionDefinitiva != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaSuspensionDefinitiva.ToString()) ? x.FechaSuspensionDefinitiva.Value.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("NumeroEstablecimiento", x.NumeroEstablecimiento >= 0 ? x.NumeroEstablecimiento : "N/A"),
                    //           new XElement("Obligado", !string.IsNullOrEmpty(x.Obligado) ? x.Obligado : "N/A"),
                    //           new XElement("NombreFantasiaComercial", !string.IsNullOrEmpty(x.NombreFantasiaComercial) ? x.NombreFantasiaComercial : "N/A")
                    //       )) : string.Empty),
                    //   new XElement("DatosResumenInforme360", datos.BuroCreditoEquifax.Resultados.DatosResumenInforme360 != null && datos.BuroCreditoEquifax.Resultados.DatosResumenInforme360.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.DatosResumenInforme360.Select(x => new XElement("Datos",
                    //           new XElement("MontoTotalOpeImpagos", x.MontoTotalOpeImpagos >= 0 ? $"${x.MontoTotalOpeImpagos.ToString("N", culture)}" : "N/A"),
                    //           new XElement("NumTotalOpeImpagos", x.NumTotalOpeImpagos >= 0 ? x.NumTotalOpeImpagos : "N/A"),
                    //           new XElement("Tipo", !string.IsNullOrEmpty(x.Tipo) ? x.Tipo : "N/A")
                    //       )) : string.Empty),
                    //   new XElement("IdentificacionConsultada", datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada != null ? new XElement("Datos",
                    //       new XElement("NombreSujeto", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada.NombreSujeto) ? datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada.NombreSujeto : "N/A"),
                    //       new XElement("TipoDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada.TipoDocumentoDobleInfo) ? datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada.TipoDocumentoDobleInfo : "N/A"),
                    //       new XElement("NumeroDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada.NumeroDocumentoDobleInfo) ? datos.BuroCreditoEquifax.Resultados.IdentificacionConsultada.NumeroDocumentoDobleInfo : "N/A")
                    //   ) : string.Empty),
                    //    new XElement("EntidadesQueHanConsultado", datos.BuroCreditoEquifax.Resultados.EntidadesQueHanConsultado != null && datos.BuroCreditoEquifax.Resultados.EntidadesQueHanConsultado.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.EntidadesQueHanConsultado.Select(x => new XElement("Datos",
                    //           new XElement("NombreCliente", !string.IsNullOrEmpty(x.NombreCliente) ? x.NombreCliente : "N/A"),
                    //           new XElement("Mes1", !string.IsNullOrEmpty(x.Mes1) ? x.Mes1 : "N/A"),
                    //           new XElement("Mes2", !string.IsNullOrEmpty(x.Mes2) ? x.Mes2 : "N/A"),
                    //           new XElement("Mes3", !string.IsNullOrEmpty(x.Mes3) ? x.Mes3 : "N/A"),
                    //           new XElement("Mes4", !string.IsNullOrEmpty(x.Mes4) ? x.Mes4 : "N/A"),
                    //           new XElement("Mes5", !string.IsNullOrEmpty(x.Mes5) ? x.Mes5 : "N/A"),
                    //           new XElement("Mes6", !string.IsNullOrEmpty(x.Mes6) ? x.Mes6 : "N/A"),
                    //           new XElement("Mes7", !string.IsNullOrEmpty(x.Mes7) ? x.Mes7 : "N/A"),
                    //           new XElement("Mes8", !string.IsNullOrEmpty(x.Mes8) ? x.Mes8 : "N/A"),
                    //           new XElement("Mes9", !string.IsNullOrEmpty(x.Mes9) ? x.Mes9 : "N/A"),
                    //           new XElement("Mes10", !string.IsNullOrEmpty(x.Mes10) ? x.Mes10 : "N/A"),
                    //           new XElement("Mes11", !string.IsNullOrEmpty(x.Mes11) ? x.Mes11 : "N/A"),
                    //           new XElement("Mes12", !string.IsNullOrEmpty(x.Mes12) ? x.Mes12 : "N/A"),
                    //           new XElement("ResaltadaInv", !string.IsNullOrEmpty(x.ResaltadaInv) ? x.ResaltadaInv : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("CreditosOtorgados12UltimosMesesEducativo3600", datos.BuroCreditoEquifax.Resultados.CreditosOtorgados12UltimosMesesEducativo3600 != null && datos.BuroCreditoEquifax.Resultados.CreditosOtorgados12UltimosMesesEducativo3600.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.CreditosOtorgados12UltimosMesesEducativo3600.Select(x => new XElement("Datos",
                    //           new XElement("CodigoInstitucionInv", !string.IsNullOrEmpty(x.CodigoInstitucionInv) ? x.CodigoInstitucionInv : "N/A"),
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("EstadoOperacion", !string.IsNullOrEmpty(x.EstadoOperacion) ? x.EstadoOperacion : "N/A"),
                    //           new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                    //           new XElement("ValorOperacion", x.ValorOperacion >= 0 ? $"${x.ValorOperacion.ToString("N", culture)}" : "N/A"),
                    //           new XElement("Titular", x.Titular >= 0 ? $"${x.Titular.ToString("N", culture)}" : "N/A"),
                    //           new XElement("Codeudor", x.Codeudor >= 0 ? $"${x.Codeudor.ToString("N", culture)}" : "N/A"),
                    //           new XElement("Garante", x.Garante >= 0 ? $"${x.Garante.ToString("N", culture)}" : "N/A"),
                    //           new XElement("FechaConcesion", x.FechaConcesion != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaConcesion.ToString()) ? x.FechaConcesion.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("FechaVencimiento", x.FechaVencimiento != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaVencimiento.ToString()) ? x.FechaVencimiento.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("CodEstadoOpInv", !string.IsNullOrEmpty(x.CodEstadoOpInv) ? x.CodEstadoOpInv : "N/A"),
                    //           new XElement("CodTipoCreditoInv", !string.IsNullOrEmpty(x.CodTipoCreditoInv) ? x.CodTipoCreditoInv : "N/A"),
                    //           new XElement("CodTipoDeudorInv", !string.IsNullOrEmpty(x.CodTipoDeudorInv) ? x.CodTipoDeudorInv : "N/A"),
                    //           new XElement("CodCalificacionInv", !string.IsNullOrEmpty(x.CodCalificacionInv) ? x.CodCalificacionInv : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("Ultimas10OperacionesCanceladas", datos.BuroCreditoEquifax.Resultados.Ultimas10OperacionesCanceladas != null && datos.BuroCreditoEquifax.Resultados.Ultimas10OperacionesCanceladas.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.Ultimas10OperacionesCanceladas.Select(x => new XElement("Datos",
                    //           new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv >= 0 ? x.CodigoInstitucionInv : "N/A"),
                    //           new XElement("CodEstadoOpInv", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("NumeroOperaciones", !string.IsNullOrEmpty(x.NumeroOperaciones) ? x.NumeroOperaciones : "N/A"),
                    //           new XElement("ValorOriginal", x.ValorOriginal >= 0 ? $"${x.ValorOriginal.ToString("N", culture)}" : "N/A"),
                    //           new XElement("CodFormaCancelacionInv", !string.IsNullOrEmpty(x.CodFormaCancelacionInv) ? x.CodFormaCancelacionInv : "N/A"),
                    //           new XElement("FormaCancelacion", !string.IsNullOrEmpty(x.FormaCancelacion) ? x.FormaCancelacion : "N/A"),
                    //           new XElement("FechaCancelacion", x.FechaCancelacion != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCancelacion.ToString()) ? x.FechaCancelacion.ToString("dd/MM/yyyy") : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("VinculacionesInstitucionesFinancieras", datos.BuroCreditoEquifax.Resultados.VinculacionesInstitucionesFinancieras != null && datos.BuroCreditoEquifax.Resultados.VinculacionesInstitucionesFinancieras.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.VinculacionesInstitucionesFinancieras.Select(x => new XElement("Datos",
                    //           new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv >= 0 ? x.CodigoInstitucionInv : "N/A"),
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("Vinculacion", !string.IsNullOrEmpty(x.Vinculacion) ? x.Vinculacion : "N/A"),
                    //           new XElement("Causal", !string.IsNullOrEmpty(x.Causal) ? x.Causal : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("ContribuyenteEspecial", datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial != null ? new XElement("Datos",
                    //       new XElement("NombreSujeto", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial.NombreSujeto) ? datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial.NombreSujeto : "N/A"),
                    //       new XElement("Provincia", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial.Provincia) ? datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial.Provincia : "N/A"),
                    //       new XElement("FechaNotificacion", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial.FechaNotificacion) ? datos.BuroCreditoEquifax.Resultados.ContribuyenteEspecial.FechaNotificacion : "N/A")
                    //    ) : string.Empty),
                    //    new XElement("InformacionPosteriorFechaCorteOperacionesCanceladas", datos.BuroCreditoEquifax.Resultados.InformacionPosteriorFechaCorteOperacionesCanceladas != null && datos.BuroCreditoEquifax.Resultados.InformacionPosteriorFechaCorteOperacionesCanceladas.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.InformacionPosteriorFechaCorteOperacionesCanceladas.Select(x => new XElement("Datos",
                    //           new XElement("FechaCorte", x.FechaCorte != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCorte.ToString()) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("NumeroOperacion", !string.IsNullOrEmpty(x.NumeroOperacion) ? x.NumeroOperacion : "N/A"),
                    //           new XElement("FechaCancelacion", x.FechaCancelacion != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCancelacion.ToString()) ? x.FechaCancelacion.ToString("dd/MM/yyyy") : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("InformacionPosteriorFechaCorteTarjetasCanceladas", datos.BuroCreditoEquifax.Resultados.InformacionPosteriorFechaCorteTarjetasCanceladas != null && datos.BuroCreditoEquifax.Resultados.InformacionPosteriorFechaCorteTarjetasCanceladas.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.InformacionPosteriorFechaCorteTarjetasCanceladas.Select(x => new XElement("Datos",
                    //           new XElement("FechaCorte", x.FechaCorte != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCorte.ToString()) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("NumeroTarjeta", !string.IsNullOrEmpty(x.NumeroTarjeta) ? x.NumeroTarjeta : "N/A"),
                    //           new XElement("FechaCancelacion", x.FechaCancelacion != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCancelacion.ToString()) ? x.FechaCancelacion.ToString("dd/MM/yyyy") : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("SujetoAlDiaInfocom", datos.BuroCreditoEquifax.Resultados.SujetoAlDiaInfocom != null && datos.BuroCreditoEquifax.Resultados.SujetoAlDiaInfocom.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.SujetoAlDiaInfocom.Select(x => new XElement("Datos",
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                    //           new XElement("Mensaje", !string.IsNullOrEmpty(x.Mensaje) ? x.Mensaje : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("MensajeTieneOpEnIfisLiquidadas", datos.BuroCreditoEquifax.Resultados.MensajeTieneOpEnIfisLiquidadas != null ? new XElement("Datos",
                    //       new XElement("Column1", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.MensajeTieneOpEnIfisLiquidadas.Column1) ? datos.BuroCreditoEquifax.Resultados.MensajeTieneOpEnIfisLiquidadas.Column1 : "N/A")
                    //    ) : string.Empty),
                    //    new XElement("ReclamoSujeto", datos.BuroCreditoEquifax.Resultados.ReclamoSujeto != null ? new XElement("Datos",
                    //       new XElement("Column1", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.ReclamoSujeto.Column1) ? datos.BuroCreditoEquifax.Resultados.ReclamoSujeto.Column1 : "N/A")
                    //    ) : string.Empty),
                    //    new XElement("DeudaRefinanciadaInfocom", datos.BuroCreditoEquifax.Resultados.DeudaRefinanciadaInfocom != null && datos.BuroCreditoEquifax.Resultados.DeudaRefinanciadaInfocom.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.DeudaRefinanciadaInfocom.Select(x => new XElement("Datos",
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("Fecha", !string.IsNullOrEmpty(x.Fecha) ? x.Fecha : "N/A"),
                    //           new XElement("Observacion", !string.IsNullOrEmpty(x.Observacion) ? x.Observacion : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("DeudaReportadaSeguridadSocial", datos.BuroCreditoEquifax.Resultados.DeudaReportadaSeguridadSocial != null && datos.BuroCreditoEquifax.Resultados.DeudaReportadaSeguridadSocial.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.DeudaReportadaSeguridadSocial.Select(x => new XElement("Datos",
                    //           new XElement("FechaCorte", x.FechaCorte != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCorte.ToString()) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                    //           new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                    //           new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                    //           new XElement("CupoMontoOriginal", x.CupoMontoOriginal >= 0 ? $"${x.CupoMontoOriginal.ToString("N", culture)}" : "N/A"),
                    //           new XElement("FechaApertura", !string.IsNullOrEmpty(x.FechaApertura) ? x.FechaApertura : "N/A"),
                    //           new XElement("FechaVencimiento", !string.IsNullOrEmpty(x.FechaVencimiento) ? x.FechaVencimiento : "N/A"),
                    //           new XElement("CausaVinculacion", !string.IsNullOrEmpty(x.CausaVinculacion) ? x.CausaVinculacion : "N/A"),
                    //           new XElement("Calificacion", !string.IsNullOrEmpty(x.Calificacion) ? x.Calificacion : "N/A"),
                    //           new XElement("CalificacionHomologada", !string.IsNullOrEmpty(x.CalificacionHomologada) ? x.CalificacionHomologada : "N/A"),
                    //           new XElement("TotalVencer", x.TotalVencer >= 0 ? $"${x.TotalVencer.ToString("N", culture)}" : "N/A"),
                    //           new XElement("NoDevengaInt", x.NoDevengaInt >= 0 ? $"${x.NoDevengaInt.ToString("N", culture)}" : "N/A"),
                    //           new XElement("TotalVencido", x.TotalVencido >= 0 ? $"${x.TotalVencido.ToString("N", culture)}" : "N/A"),
                    //           new XElement("DemandaJudicial", x.DemandaJudicial >= 0 ? $"${x.DemandaJudicial.ToString("N", culture)}" : "N/A"),
                    //           new XElement("CarteraCastigada", x.CarteraCastigada >= 0 ? $"${x.CarteraCastigada.ToString("N", culture)}" : "N/A"),
                    //           new XElement("SaldoDeuda", x.SaldoDeuda >= 0 ? $"${x.SaldoDeuda.ToString("N", culture)}" : "N/A"),
                    //           new XElement("AcuerdoConcordato", !string.IsNullOrEmpty(x.AcuerdoConcordato) ? x.AcuerdoConcordato : "N/A"),
                    //           new XElement("CuotaMensual", x.CuotaMensual >= 0 ? $"${x.CuotaMensual.ToString("N", culture)}" : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("InformacionSbsBiess", datos.BuroCreditoEquifax.Resultados.InformacionSbsBiess != null && datos.BuroCreditoEquifax.Resultados.InformacionSbsBiess.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.InformacionSbsBiess.Select(x => new XElement("Datos",
                    //           new XElement("FechaCorte", x.FechaCorte != DateTime.MinValue && !string.IsNullOrEmpty(x.FechaCorte.ToString()) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                    //           new XElement("NoOperacion", !string.IsNullOrEmpty(x.NoOperacion) ? x.NoOperacion : "N/A"),
                    //           new XElement("Acreedor", !string.IsNullOrEmpty(x.Acreedor) ? x.Acreedor : "N/A"),
                    //           new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                    //           new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito) ? x.TipoCredito : "N/A"),
                    //           new XElement("SaldoDeuda", x.SaldoDeuda >= 0 ? $"${x.SaldoDeuda.ToString("N", culture)}" : "N/A"),
                    //           new XElement("ValorPorVencer", x.ValorPorVencer >= 0 ? $"${x.ValorPorVencer.ToString("N", culture)}" : "N/A"),
                    //           new XElement("ValorVencido", x.ValorVencido >= 0 ? $"${x.ValorVencido.ToString("N", culture)}" : "N/A"),
                    //           new XElement("CuotaVigente", x.CuotaVigente >= 0 ? $"${x.CuotaVigente.ToString("N", culture)}" : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("InformacionBiessHistoria", datos.BuroCreditoEquifax.Resultados.InformacionBiessHistoria != null && datos.BuroCreditoEquifax.Resultados.InformacionBiessHistoria.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.InformacionBiessHistoria.Select(x => new XElement("Datos",
                    //           new XElement("TipoDeudaParam", !string.IsNullOrEmpty(x.TipoDeudaParam) ? x.TipoDeudaParam : "N/A"),
                    //           new XElement("MesesAtrasParam", x.MesesAtrasParam >= 0 ? x.MesesAtrasParam : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("IndicadorCOVID0", datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0 != null ? new XElement("Datos",
                    //       new XElement("Fecha", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.Fecha) ? datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.Fecha : "N/A"),
                    //       new XElement("Escenario1", datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.Escenario1 >= 0 ? datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.Escenario1 : "N/A"),
                    //       new XElement("IncomePredictor", datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor}" : "N/A"),
                    //       new XElement("CuotaFinanciera", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.CuotaFinanciera) ? datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.CuotaFinanciera : "N/A"),
                    //       new XElement("IndicadorCovid", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IndicadorCovid) ? datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IndicadorCovid : "N/A")
                    //    ) : string.Empty),
                    //    new XElement("EvolucionHistoricaDistEndeudamientoRFR", datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoRFR != null && datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoRFR.Any() ?
                    //       datos.BuroCreditoEquifax.Resultados.EvolucionHistoricaDistEndeudamientoRFR.Select(x => new XElement("Datos",
                    //           new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                    //           new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                    //           new XElement("NomTipoCred", !string.IsNullOrEmpty(x.NomTipoCred) ? x.NomTipoCred : "N/A"),
                    //           new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                    //           new XElement("CodCalificacionOrigen", !string.IsNullOrEmpty(x.CodCalificacionOrigen) ? x.CodCalificacionOrigen : "N/A"),
                    //           new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                    //           new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                    //           new XElement("ValNdi", x.ValNdi >= 0 ? $"${x.ValNdi.ToString("N", culture)}" : "N/A"),
                    //           new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                    //           new XElement("ValCartCastigada", x.ValCartCastigada >= 0 ? $"${x.ValCartCastigada.ToString("N", culture)}" : "N/A"),
                    //           new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                    //       )) : string.Empty),
                    //    new XElement("FactoresQueInfluyenScoreV4", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4 != null ? new XElement("Datos",
                    //       new XElement("Segmento", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.Segmento) ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.Segmento : "N/A"),
                    //       new XElement("TiempoDesdePrimerCredito", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.TiempoDesdePrimerCredito >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.TiempoDesdePrimerCredito : "N/A"),
                    //       new XElement("DiaDeAtraso", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiaDeAtraso >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiaDeAtraso : "N/A"),
                    //       new XElement("RatioDeudaReciente", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.RatioDeudaReciente >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.RatioDeudaReciente.ToString("N", culture)}" : "N/A"),
                    //       new XElement("RatioDeudaVencida", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.RatioDeudaVencida >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.RatioDeudaVencida.ToString("N", culture)}" : "N/A"),
                    //       new XElement("PresenciaConsultas", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaConsultas >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaConsultas : "N/A"),
                    //       new XElement("PresenciaMora", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaMora >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaMora : "N/A"),
                    //       new XElement("CupoTarjetaCredito", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CupoTarjetaCredito >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CupoTarjetaCredito.ToString("N", culture)}" : "N/A"),
                    //       new XElement("UtilizacionTc", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.UtilizacionTc >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.UtilizacionTc.ToString("N", culture)}" : "N/A"),
                    //       new XElement("DeudaTotal", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DeudaTotal >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DeudaTotal.ToString("N", culture)}" : "N/A"),
                    //       new XElement("MaximoMontoOtorgado", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.MaximoMontoOtorgado >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.MaximoMontoOtorgado.ToString("N", culture)}" : "N/A"),
                    //       new XElement("TiempoSinOperaciones", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.TiempoSinOperaciones >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.TiempoSinOperaciones : "N/A"),
                    //       new XElement("CantidadOperacionesSinMora", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CantidadOperacionesSinMora >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CantidadOperacionesSinMora : "N/A"),
                    //       new XElement("PresenciaCreditosHipotecarios", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaCreditosHipotecarios >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaCreditosHipotecarios : "N/A"),
                    //       new XElement("NivelRiesgo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.NivelRiesgo) ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.NivelRiesgo : "N/A"),
                    //       new XElement("ValorDeudasVencidas", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.ValorDeudasVencidas >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.ValorDeudasVencidas.ToString("N", culture)}" : "N/A"),
                    //       new XElement("DiasAtraso", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiasAtraso >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.DiasAtraso : "N/A"),
                    //       new XElement("PresenciaDeudaCastigadaDemanda", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaDeudaCastigadaDemanda >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.PresenciaDeudaCastigadaDemanda : "N/A"),
                    //       new XElement("CantidadOperacionesConMora", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CantidadOperacionesConMora >= 0 ? datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.CantidadOperacionesConMora : "N/A"),
                    //       new XElement("ValorDeudasCastigadasDemandaJudicial", datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.ValorDeudasCastigadasDemandaJudicial >= 0 ? $"${datos.BuroCreditoEquifax.Resultados.FactoresQueInfluyenScoreV4.ValorDeudasCastigadasDemandaJudicial.ToString("N", culture)}" : "N/A")
                    //    ) : string.Empty)
                }
                else if (datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.ResultadosIndumot != null)
                {
                    fn.Element("Reporte").Element("FechaReporte").AddBeforeSelf(new XElement("BuroEquifaxIndumot", datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.ResultadosIndumot != null ? new XElement("Elementos",
                    new XElement("ResultadoSegmentacionIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion != null && datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.Any() ?
                             datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoSegmentacion.Select(x => new XElement("Datos",
                                new XElement("ResultadoEvaluacion", x.ResultadoEvaluacion),
                                new XElement("SegmentacionCliente", !string.IsNullOrEmpty(x.SegmentacionCliente) ? x.SegmentacionCliente.ToUpper().Trim() : "N/A"),
                                new XElement("Perfil", !string.IsNullOrEmpty(x.Perfil) ? x.Perfil.ToUpper().Trim() : "N/A"),
                                new XElement("ModeloUtilizado", !string.IsNullOrEmpty(x.ModeloUtilizado) ? x.ModeloUtilizado.ToUpper().Trim() : "N/A"),
                                new XElement("GastoFinanciero", $"${x.GastoFinanciero.ToString("N", culture)}"),
                                new XElement("GastoHogar", $"${x.GastoHogar.ToString("N", culture)}"),
                                new XElement("ScoreDeudor", !string.IsNullOrEmpty(x.ScoreDeudor) ? x.ScoreDeudor.ToUpper().Trim() : "N/A"),
                                new XElement("ScoreSobreendeudamiento", !string.IsNullOrEmpty(x.ScoreSobreendeudamiento) ? x.ScoreSobreendeudamiento.ToUpper().Trim() : "N/A"),
                                new XElement("ScoreSociodemografico", !string.IsNullOrEmpty(x.ScoreSociodemografico) ? x.ScoreSociodemografico.ToUpper().Trim() : "N/A"),
                                new XElement("IndexPymes", !string.IsNullOrEmpty(x.IndexPymes) ? x.IndexPymes.ToUpper().Trim() : "N/A"),
                                new XElement("RangodeIngreso", !string.IsNullOrEmpty(x.RangodeIngreso) ? x.RangodeIngreso.ToUpper().Trim() : "N/A"),
                                new XElement("MontoAprobado", $"${x.MontoAprobado.ToString("N", culture)}"),
                                new XElement("MontoSugerido", $"${x.MontoSugerido.ToString("N", culture)}"),
                                new XElement("Plazo", $"{x.Plazo.ToString("N", culture)}"),
                                new XElement("Tasa", $"{x.Tasa.ToString("N", culture)}"),
                                new XElement("CuotaMensual", $"{x.CuotaMensual.ToString("N", culture)}"),
                                new XElement("CapacidadPago", $"${x.CapacidadPago.ToString("N", culture)}"),
                                new XElement("IngresoValidado", !string.IsNullOrEmpty(x.IngresoValidado) ? x.IngresoValidado.ToUpper().Trim() : "N/A"),
                                new XElement("SujetoExclusivo", !string.IsNullOrEmpty(x.SujetoExclusivo) ? x.SujetoExclusivo.ToUpper().Trim() : "N/A"),
                                new XElement("ValorEntrada", $"${x.ValorEntrada.ToString("N", culture)}"),
                                new XElement("ValorMinimoEntrada", $"${x.ValorMinimoEntrada.ToString("N", culture)}"),
                                new XElement("MensajeValorEntrada", !string.IsNullOrEmpty(x.MensajeValorEntrada) ? x.MensajeValorEntrada.ToUpper().Trim() : "N/A"),
                                new XElement("ValorFinanciar", $"${x.ValorFinanciar.ToString("N", culture)}")
                             )) : string.Empty),
                             new XElement("ResultadoPoliticasIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoPoliticas != null && datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoPoliticas.Any() ?
                             datos.BuroCreditoEquifax.ResultadosIndumot.ResultadoPoliticas.Select(x => new XElement("Datos",
                                new XElement("Politica", !string.IsNullOrEmpty(x.Politica) ? x.Politica.ToUpper().Trim() : "N/A"),
                                new XElement("Valor", !string.IsNullOrEmpty(x.Valor) ? x.Valor.ToUpper().Trim() : "N/A"),
                                new XElement("Resultado", !string.IsNullOrEmpty(x.Resultado) ? x.Resultado.ToUpper().Trim() : "N/A")
                             )) : string.Empty),
                             new XElement("PoliticasIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.Politicas != null && datos.BuroCreditoEquifax.ResultadosIndumot.Politicas.Any() ?
                             datos.BuroCreditoEquifax.ResultadosIndumot.Politicas.Select(x => new XElement("Datos",
                                new XElement("EntradaMinima", !string.IsNullOrEmpty(x.EntradaMinima) ? x.EntradaMinima.ToUpper().Trim() : "N/A"),
                                new XElement("Plazos", !string.IsNullOrEmpty(x.Plazos) ? x.Plazos.ToUpper().Trim() : "N/A"),
                                new XElement("EdadEvaluacion", !string.IsNullOrEmpty(x.EdadParaOptarALaEvaluacionDeCredito) ? x.EdadParaOptarALaEvaluacionDeCredito.ToUpper().Trim() : "N/A"),
                                new XElement("Codeudor", !string.IsNullOrEmpty(x.Codeudor) ? x.Codeudor.ToUpper().Trim() : "N/A")
                             )) : string.Empty),
                             new XElement("OfertaSugeridaIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.OfertaSugerida != null && datos.BuroCreditoEquifax.ResultadosIndumot.OfertaSugerida.Any() ?
                             datos.BuroCreditoEquifax.ResultadosIndumot.OfertaSugerida.Select(x => new XElement("Datos",
                                new XElement("Detalle", !string.IsNullOrEmpty(x.Detalle) ? x.Detalle.ToUpper().Trim() : "N/A"),
                                new XElement("MontoSugerido", $"{x.MontoSugerido.ToString("N", culture)}"),
                                new XElement("CuotaMensual", $"{x.CuotaMensual.ToString("N", culture)}"),
                                new XElement("Plazo", x.Plazo)
                             )) : string.Empty),
                             new XElement("RequisitosIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.RequisitosDeudorCodeudor != null && datos.BuroCreditoEquifax.ResultadosIndumot.RequisitosDeudorCodeudor.Any() ?
                             datos.BuroCreditoEquifax.ResultadosIndumot.RequisitosDeudorCodeudor.Select(x => new XElement("Datos",
                                new XElement("CopiaDeCedulaVigente", !string.IsNullOrEmpty(x.CopiaDeCedulaVigente) ? x.CopiaDeCedulaVigente.ToUpper().Trim() : "N/A"),
                                new XElement("PapeletaDeVotacionVigente", !string.IsNullOrEmpty(x.PapeletaDeVotacionVigente) ? x.PapeletaDeVotacionVigente.ToUpper().Trim() : "N/A"),
                                new XElement("PlanillaServicioBasicoUltimoMes", !string.IsNullOrEmpty(x.PlanillaDeServicioBasicoDelUltimoMes) ? x.PlanillaDeServicioBasicoDelUltimoMes.ToUpper().Trim() : "N/A"),
                                new XElement("CroquisDeUbicacionDeDomicilio", !string.IsNullOrEmpty(x.CroquisDeUbicacionDeDomicilio) ? x.CroquisDeUbicacionDeDomicilio.ToUpper().Trim() : "N/A"),
                                new XElement("CertificadoComercialPorEscrito", !string.IsNullOrEmpty(x.CertificadoComercialPorEscrito) ? x.CertificadoComercialPorEscrito.ToUpper().Trim() : "N/A"),
                                new XElement("RolDePagosJustificativoDeIngresos", !string.IsNullOrEmpty(x.RolDePagosJustificativoDeIngresos) ? x.RolDePagosJustificativoDeIngresos.ToUpper().Trim() : "N/A"),
                                new XElement("CopiaDeRucRiseVigenteIndependientes", !string.IsNullOrEmpty(x.CopiaDeRucRiseVigenteIndependientes) ? x.CopiaDeRucRiseVigenteIndependientes.ToUpper().Trim() : "N/A")
                             )) : string.Empty),
                             new XElement("VerificacionIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.VerificacionDeudorCodeudor != null && datos.BuroCreditoEquifax.ResultadosIndumot.VerificacionDeudorCodeudor.Any() ?
                             datos.BuroCreditoEquifax.ResultadosIndumot.VerificacionDeudorCodeudor.Select(x => new XElement("Datos",
                                new XElement("VerificacionTelefonicaCliente", !string.IsNullOrEmpty(x.VerificacionTelefonicaCliente) ? x.VerificacionTelefonicaCliente.ToUpper().Trim() : "N/A"),
                                new XElement("VerificacionReferencias", !string.IsNullOrEmpty(x.VerificacionReferencias) ? x.VerificacionReferencias.ToUpper().Trim() : "N/A"),
                                new XElement("VerificacionDeIngresos", !string.IsNullOrEmpty(x.VerificacionDeIngresos) ? x.VerificacionDeIngresos.ToUpper().Trim() : "N/A"),
                                new XElement("VerificacionDocumentalDomicilio", !string.IsNullOrEmpty(x.VerificacionDocumentalDomicilio) ? x.VerificacionDocumentalDomicilio.ToUpper().Trim() : "N/A"),
                                new XElement("VerificacionFisicaDomicilio", !string.IsNullOrEmpty(x.VerificacionFisicaDomicilio) ? x.VerificacionFisicaDomicilio.ToUpper().Trim() : "N/A"),
                                new XElement("VerificacionFisicaTrabajo", !string.IsNullOrEmpty(x.VerificacionFisicaTrabajo) ? x.VerificacionFisicaTrabajo.ToUpper().Trim() : "N/A"),
                                new XElement("VerificacionFisicaTrabajoIndependientes", !string.IsNullOrEmpty(x.VerificacionFisicaTrabajoIndependientes) ? x.VerificacionFisicaTrabajoIndependientes.ToUpper().Trim() : "N/A")
                             )) : string.Empty),
                             new XElement("CuotaEstimadaIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual != null ?
                                 new XElement("Datos",
                                    new XElement("Pago", $"${datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.Pago.ToString("N", culture)}"),
                                    new XElement("NumeroCreditosComercial", $"{datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.NumeroCreditosComercial}"),
                                    new XElement("TotalVencido", $"${datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.TotalVencido.ToString("N", culture)}"),
                                    new XElement("TotalDemanda", $"${datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.TotalDemanda.ToString("N", culture)}"),
                                    new XElement("TotalCartera", $"${datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.TotalCartera.ToString("N", culture)}"),
                                    new XElement("NumeroCreditosIece", $"{datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.NumeroCreditosIece}"),
                                    new XElement("NumeroOperacionesExcluidas", $"{datos.BuroCreditoEquifax.ResultadosIndumot.CuotaEstimadaMensual.NumeroOperacionesExcluidas}")
                                 ) : string.Empty),
                              new XElement("MensajeValorComprometidoIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.MensajeValorComprometido != null ?
                                    new XElement("Mensaje", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.MensajeValorComprometido.Mensaje) ? datos.BuroCreditoEquifax.ResultadosIndumot.MensajeValorComprometido.Mensaje.ToUpper().Trim() : "N/A")
                                  : string.Empty),
                              new XElement("MensajeClienteIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.MensajeCliente != null ?
                                    new XElement("Mensaje", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.MensajeCliente.Mensaje) ? datos.BuroCreditoEquifax.ResultadosIndumot.MensajeCliente.Mensaje.ToUpper().Trim() : "N/A")
                                  : string.Empty),
                              new XElement("MensajeNivelAprobacionFinalIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.MensajeNivelAprobacionFinal != null ?
                                    new XElement("Mensaje", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.MensajeNivelAprobacionFinal.Mensaje) ? datos.BuroCreditoEquifax.ResultadosIndumot.MensajeNivelAprobacionFinal.Mensaje.ToUpper().Trim() : "N/A")
                                  : string.Empty),
                              new XElement("PerfilIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.Perfil != null ?
                                    new XElement("Mensaje", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.Perfil.Perfil) ? datos.BuroCreditoEquifax.ResultadosIndumot.Perfil.Perfil.ToUpper().Trim() : "N/A")
                                  : string.Empty),
                              new XElement("AnalisisSaldosPorVencerSistemaFinanciero", datos.BuroCreditoEquifax.ResultadosIndumot.AnalisisSaldosPorVencerSistemaFinanciero != null && datos.BuroCreditoEquifax.ResultadosIndumot.AnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.AnalisisSaldosPorVencerSistemaFinanciero.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte != new DateTime(1900, 1, 1) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    //new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv),
                                    new XElement("TotalPorVencer", $"${x.TotalPorVencer.ToString("N", culture)}"),
                                    new XElement("PorVencer0a1", $"${x.PorVencer0A1.ToString("N", culture)}"),
                                    new XElement("PorVencer1a3", $"${x.PorVencer1A3.ToString("N", culture)}"),
                                    new XElement("PorVencer3a6", $"${x.PorVencer3A6.ToString("N", culture)}"),
                                    new XElement("PorVencer6a12", $"${x.PorVencer6A12.ToString("N", culture)}"),
                                    new XElement("PorVencer12", $"${x.PorVencer12.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("AnalisisSaldosPorVencerSistemaFinancieroFooter", datos.BuroCreditoEquifax.ResultadosIndumot.AnalisisSaldosPorVencerSistemaFinanciero != null && datos.BuroCreditoEquifax.ResultadosIndumot.AnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.AnalisisSaldosPorVencerSistemaFinanciero.Where(m => m.FechaCorte == default && string.IsNullOrEmpty(m.Institucion)).Select(x => new XElement("Datos",
                                    new XElement("TotalPorVencer", $"${x.TotalPorVencer.ToString("N", culture)}"),
                                    new XElement("PorVencer0a1", $"${x.PorVencer0A1.ToString("N", culture)}"),
                                    new XElement("PorVencer1a3", $"${x.PorVencer1A3.ToString("N", culture)}"),
                                    new XElement("PorVencer3a6", $"${x.PorVencer3A6.ToString("N", culture)}"),
                                    new XElement("PorVencer6a12", $"${x.PorVencer6A12.ToString("N", culture)}"),
                                    new XElement("PorVencer12", $"${x.PorVencer12.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESS", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESS != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESS.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESS.OrderByDescending(m => m.FechaCorte).Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor)).Take(10).Select(x => new XElement("Datos",
                                   new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                   new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                   new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                //new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv),
                                //new XElement("CodTipoDeudorInv", !string.IsNullOrEmpty(x.CodTipoDeudorInv) ? x.CodTipoDeudorInv : "N/A"),
                                //new XElement("NumeroDocumentoInv", !string.IsNullOrEmpty(x.NumeroDocumentoInv) ? x.NumeroDocumentoInv : "N/A"),
                                //new XElement("NombreSujetoInv", !string.IsNullOrEmpty(x.NombreSujetoInv) ? x.NombreSujetoInv : "N/A")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSFooter", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESS != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESS.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESS.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                )) : string.Empty),
                            new XElement("ValorDeudaTotalEnLos3SegmentosSinIESS360", datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos3SegmentosSinIESS != null && datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos3SegmentosSinIESS.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos3SegmentosSinIESS.Where(x => !string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                                    new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo) ? x.Titulo : "N/A"),
                                    //new XElement("TituloWSInv", !string.IsNullOrEmpty(x.TituloWSInv) ? x.TituloWSInv : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("ValorDeudaTotalEnLos3SegmentosSinIESS360Footer", datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos3SegmentosSinIESS != null && datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos3SegmentosSinIESS.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos3SegmentosSinIESS.Where(x => string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("ValorDeudaTotalEnLos4Segmentos", datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos4Segmentos != null && datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos4Segmentos.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos4Segmentos.Where(x => string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                                    new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo) ? x.Titulo : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("ValorDeudaTotalEnLos4SegmentosFooter", datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos4Segmentos != null && datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos4Segmentos.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.ValorDeudaTotalEnLos4Segmentos.Where(x => string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("IdentificacionConsultadaGaranteIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante != null ?
                                 new XElement("Datos",
                                    new XElement("NombreSujeto", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante.NombreSujeto) ? datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante.NombreSujeto : "N/A"),
                                    new XElement("TipoDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante.TipoDocumentoDobleInfo) ? datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante.TipoDocumentoDobleInfo : "N/A"),
                                    new XElement("NumeroDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante.NumeroDocumentoDobleInfo) ? datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaGarante.NumeroDocumentoDobleInfo : "N/A")
                                 ) : string.Empty),
                            new XElement("ScoreGaranteIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.ScoreGarante != null ?
                                 new XElement("Datos",
                                    new XElement("Score", datos.BuroCreditoEquifax.ResultadosIndumot.ScoreGarante.Score)
                                 ) : string.Empty),
                            new XElement("DeudaReportadaPorRFRGarante", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRGarante.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRGarante.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor) && !string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DiasVencido", x.DiasVencido),
                                    new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                                    new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorRFRGaranteFooter", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRGarante.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRGarante.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor) && string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DiasVencido", x.DiasVencido),
                                    new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                                    new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSGarante", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSGarante.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSGarante.OrderByDescending(m => m.FechaCorte).Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor)).Take(10).Select(x => new XElement("Datos",
                                   new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                   new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                   new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSGaranteFooter", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSGarante.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSGarante.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                )) : string.Empty),
                            new XElement("EvolucionHistoricaDistEndeudamientoRFRGarante", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRGarante.Any() ?
                                    datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRGarante.Take(10).Select(x => new XElement("Datos",
                                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                        new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                                        new XElement("NomTipoCred", !string.IsNullOrEmpty(x.NomTipoCred) ? x.NomTipoCred : "N/A"),
                                        new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                        new XElement("CodCalificacionOrigen", !string.IsNullOrEmpty(x.CodCalificacionOrigen) ? x.CodCalificacionOrigen : "N/A"),
                                        new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValNdi", x.ValNdi >= 0 ? $"${x.ValNdi.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValCartCastigada", x.ValCartCastigada >= 0 ? $"${x.ValCartCastigada.ToString("N", culture)}" : "N/A"),
                                        new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                                    )) : string.Empty),
                            new XElement("EvolucionHistoricaDistEndeudamientoRFRGaranteMsj", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRGarante.Any()
                                 && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRGarante.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS"
                                 : string.Empty),
                            new XElement("EvolucionHistoricaYDistEndeudamientoSICOMGarante", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMGarante.Any() ?
                                    datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMGarante.Take(10).Select(x => new XElement("Datos",
                                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                        new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                                        new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                        new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValNdi", x.ValNdi >= 0 ? $"${x.ValNdi.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValCarCastigada", x.ValCarCastigada >= 0 ? $"${x.ValCarCastigada.ToString("N", culture)}" : "N/A"),
                                        new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                                    )) : string.Empty),
                             new XElement("EvolucionHistoricaYDistEndeudamientoSICOMGaranteMsj", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMGarante != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMGarante.Any()
                                 && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMGarante.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS"
                                 : string.Empty),
                             new XElement("IdentificacionConsultadaConyugeIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge != null ?
                                 new XElement("Datos",
                                    new XElement("NombreSujeto", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge.NombreSujeto) ? datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge.NombreSujeto : "N/A"),
                                    new XElement("TipoDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge.TipoDocumentoDobleInfo) ? datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge.TipoDocumentoDobleInfo : "N/A"),
                                    new XElement("NumeroDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge.NumeroDocumentoDobleInfo) ? datos.BuroCreditoEquifax.ResultadosIndumot.IdentificacionConsultadaConyuge.NumeroDocumentoDobleInfo : "N/A")
                                 ) : string.Empty),
                            new XElement("ScoreConyugeIndumot", datos.BuroCreditoEquifax.ResultadosIndumot != null && datos.BuroCreditoEquifax.ResultadosIndumot.ScoreConyuge != null ?
                                 new XElement("Datos",
                                    new XElement("Score", datos.BuroCreditoEquifax.ResultadosIndumot.ScoreConyuge.Score)
                                 ) : string.Empty),
                            new XElement("DeudaReportadaPorRFRConyuge", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRConyuge.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRConyuge.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor) && !string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                                    new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                    new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                    new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DiasVencido", x.DiasVencido),
                                    new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                                    new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorRFRConyugeFooter", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRConyuge.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorRFRConyuge.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor) && string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                    new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                    new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                    new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                    new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                    new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                    new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                    new XElement("DiasVencido", x.DiasVencido),
                                    new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                                    new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSConyuge", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSConyuge.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSConyuge.OrderByDescending(m => m.FechaCorte).Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor)).Take(10).Select(x => new XElement("Datos",
                                   new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                                   new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                                   new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                )) : string.Empty),
                            new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSConyugeFooter", datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSConyuge.Any() ?
                                datos.BuroCreditoEquifax.ResultadosIndumot.DeudaReportadaPorINFOCOMExcluyendoIESSConyuge.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                                   new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                                   new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                                   new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                                   new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                                   new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                                   new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                                   new XElement("DiasVencido", x.DiasVencido)
                                )) : string.Empty),
                            new XElement("EvolucionHistoricaDistEndeudamientoRFRConyuge", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRConyuge.Any() ?
                                    datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRConyuge.Take(10).Select(x => new XElement("Datos",
                                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                        new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                                        new XElement("NomTipoCred", !string.IsNullOrEmpty(x.NomTipoCred) ? x.NomTipoCred : "N/A"),
                                        new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                        new XElement("CodCalificacionOrigen", !string.IsNullOrEmpty(x.CodCalificacionOrigen) ? x.CodCalificacionOrigen : "N/A"),
                                        new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValNdi", x.ValNdi >= 0 ? $"${x.ValNdi.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValCartCastigada", x.ValCartCastigada >= 0 ? $"${x.ValCartCastigada.ToString("N", culture)}" : "N/A"),
                                        new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                                    )) : string.Empty),
                            new XElement("EvolucionHistoricaDistEndeudamientoRFRConyugeMsj", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRConyuge.Any()
                                 && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaDistEndeudamientoRFRConyuge.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS"
                                 : string.Empty),
                            new XElement("EvolucionHistoricaYDistEndeudamientoSICOMConyuge", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMConyuge.Any() ?
                                    datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMConyuge.Take(10).Select(x => new XElement("Datos",
                                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                                        new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                                        new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                                        new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValNdi", x.ValNdi >= 0 ? $"${x.ValNdi.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                                        new XElement("ValCarCastigada", x.ValCarCastigada >= 0 ? $"${x.ValCarCastigada.ToString("N", culture)}" : "N/A"),
                                        new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                                    )) : string.Empty),
                             new XElement("EvolucionHistoricaYDistEndeudamientoSICOMConyugeMsj", datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMConyuge != null && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMConyuge.Any()
                                 && datos.BuroCreditoEquifax.ResultadosIndumot.EvolucionHistoricaYDistEndeudamientoSICOMConyuge.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS"
                                 : string.Empty),
                            new XElement("Score", datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.Resultados != null && datos.BuroCreditoEquifax.Resultados.ScoreV4V10 != null && datos.BuroCreditoEquifax.Resultados.ScoreV4V10.Score > 0 && datos.BuroCreditoEquifax.ResultadosNivelIndexPymes == null ? new XElement("Datos",
                                new XElement("Score", datos.BuroCreditoEquifax.Resultados.ScoreV4V10.Score)
                             ) : string.Empty),
                            new XElement("GraficoEvolucionDeuda", datos.BuroCreditoEquifax.ResultadosIndumot.WSOGraficarEvolucionDeuda != null && datos.BuroCreditoEquifax.ResultadosIndumot.WSOGraficarEvolucionDeuda.Any() ? GenerarGraficoEvolucionDeuda(datos.BuroCreditoEquifax.ResultadosIndumot.WSOGraficarEvolucionDeuda) : string.Empty)
                    ) : string.Empty));
                }
                else if (datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa != null)
                {
                    fn.Element("Reporte").Element("FechaReporte").AddBeforeSelf(new XElement("BuroEquifaxCBCooperativa", datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa != null ? new XElement("Elementos",
                    new XElement("IdentificacionConsultada", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada != null ? new XElement("Datos",
                        new XElement("NombreSujeto", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada.NombreSujeto?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada.NombreSujeto.Trim() : string.Empty),
                        new XElement("TipoDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada.TipoDocumentoDobleInfo?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada.TipoDocumentoDobleInfo.Trim() : string.Empty),
                        new XElement("NumeroDocumentoDobleInfo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada.NumeroDocumentoDobleInfo?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificacionConsultada.NumeroDocumentoDobleInfo.Trim() : string.Empty)
                    ) : string.Empty),
                    new XElement("DeudaHistorica", datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaHistorica != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaHistorica.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaHistorica.OrderByDescending(x => x.FechaCorte).Select(x => new XElement("Datos",
                        new XElement("FechaCorte", x.FechaCorte != default ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                        new XElement("FechaCorteParam", x.FechaCorteParam != default ? x.FechaCorteParam.ToString("dd/MM/yyyy") : "N/A"),
                        new XElement("PorVencer", x.PorVencer.ToString("N", culture)),
                        new XElement("NoDevengaInt", x.NoDevengaInt.ToString("N", culture)),
                        new XElement("Vencido0a1", x.Vencido0a1.ToString("N", culture)),
                        new XElement("Vencido1a2", x.Vencido1a2.ToString("N", culture)),
                        new XElement("Vencido2a3", x.Vencido2a3.ToString("N", culture)),
                        new XElement("Vencido3a6", x.Vencido3a6.ToString("N", culture)),
                        new XElement("Vencido6a9", x.Vencido6a9.ToString("N", culture)),
                        new XElement("Vencido9a12", x.Vencido9a12.ToString("N", culture)),
                        new XElement("Vencido12a24", x.Vencido12a24.ToString("N", culture)),
                        new XElement("Vencido24", x.Vencido24.ToString("N", culture)),
                        new XElement("Vencido36", x.Vencido36.ToString("N", culture)),
                        new XElement("DemandaJudicial", x.DemandaJudicial.ToString("N", culture)),
                        new XElement("CarteraCastigada", x.CarteraCastigada.ToString("N", culture)),
                        new XElement("SaldoDeuda", x.SaldoDeuda.ToString("N", culture)),
                        new XElement("TipoDeudaParam", !string.IsNullOrEmpty(x.TipoDeudaParam?.Trim()) ? x.TipoDeudaParam.Trim() : "N/A")
                    )).Take(10) : string.Empty),
                    new XElement("DeudaHistoricaMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaHistorica != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaHistorica.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaHistorica.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                    new XElement("WSONumeroTarjetasVigentes", datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSONumeroTarjetasVigentes != null ? new XElement("Datos",
                        new XElement("NumeroTarjetas", datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSONumeroTarjetasVigentes.NumeroTarjetas.ToString("N", culture))
                    ) : string.Empty),
                    new XElement("SujetoAlDiaInfocom", datos.BuroCreditoEquifax.ResultadosCBCooperativa.SujetoAlDiaInfocom != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.SujetoAlDiaInfocom.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.SujetoAlDiaInfocom.Select(x => new XElement("Datos",
                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion?.Trim()) ? x.Institucion.Trim() : "N/A"),
                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte?.Trim()) ? x.FechaCorte.Trim() : "N/A"),
                        new XElement("Mensaje", !string.IsNullOrEmpty(x.Mensaje?.Trim()) ? x.Mensaje.Trim() : "N/A")
                    )).Take(10) : string.Empty),
                    new XElement("SujetoAlDiaInfocomMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.SujetoAlDiaInfocom != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.SujetoAlDiaInfocom.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.SujetoAlDiaInfocom.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                     new XElement("WSODeudaReportadaSBS", datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSODeudaReportadaSBS != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSODeudaReportadaSBS.Any() ?
                     datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSODeudaReportadaSBS.OrderByDescending(x => x.FechaCorte).Select(x => new XElement("Datos",
                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte?.Trim()) ? x.FechaCorte.Trim().Substring(0, 10) : "N/A"),
                        new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo?.Trim()) ? x.Titulo.Trim() : "N/A"),
                        //new XElement("CodigoInstitucionInv", !string.IsNullOrEmpty(x.CodigoInstitucionInv?.Trim()) ? x.CodigoInstitucionInv.Trim() : "N/A"),
                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion?.Trim()) ? x.Institucion.Trim() : "N/A"),
                        //new XElement("CodigoTipoDeudorInv", !string.IsNullOrEmpty(x.CodigoTipoDeudorInv?.Trim()) ? x.CodigoTipoDeudorInv.Trim() : "N/A"),
                        //new XElement("TipoDeudorInv", !string.IsNullOrEmpty(x.TipoDeudorInv?.Trim()) ? x.TipoDeudorInv.Trim() : "N/A"),
                        //new XElement("CodigoTipoCreditoInv", !string.IsNullOrEmpty(x.CodigoTipoCreditoInv?.Trim()) ? x.CodigoTipoCreditoInv.Trim() : "N/A"),
                        new XElement("TipoCredito", !string.IsNullOrEmpty(x.TipoCredito?.Trim()) ? x.TipoCredito.Trim() : "N/A"),
                        //new XElement("CodigoCausalVinculacionInv", !string.IsNullOrEmpty(x.CodigoCausalVinculacionInv?.Trim()) ? x.CodigoCausalVinculacionInv.Trim() : "N/A"),
                        //new XElement("CausalVinculacion", !string.IsNullOrEmpty(x.CausalVinculacion?.Trim()) ? x.CausalVinculacion.Trim() : "N/A"),
                        new XElement("Total", x.Total.ToString("N", culture)),
                        new XElement("TotalVencer", x.TotalVencer.ToString("N", culture)),
                        new XElement("NoDevengaInt", x.NoDevengaInt.ToString("N", culture)),
                        new XElement("TotalVencido", x.TotalVencido.ToString("N", culture)),
                        new XElement("DemandaJudicial", x.DemandaJudicial.ToString("N", culture)),
                        new XElement("CarteraCastigada", x.CarteraCastigada.ToString("N", culture)),
                        new XElement("SaldoDeuda", x.SaldoDeuda.ToString("N", culture))
                    )).Take(10) : string.Empty),
                     new XElement("WSODeudaReportadaSBSMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSODeudaReportadaSBS != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSODeudaReportadaSBS.Any()
                     && datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSODeudaReportadaSBS.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                     new XElement("AnalisisSaldosPorVencerSistemaFinanciero", datos.BuroCreditoEquifax.ResultadosCBCooperativa.AnalisisSaldosPorVencerSistemaFinanciero != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.AnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                     datos.BuroCreditoEquifax.ResultadosCBCooperativa.AnalisisSaldosPorVencerSistemaFinanciero.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                        new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte != new DateTime(1900, 1, 1) ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion?.Trim()) ? x.Institucion.Trim() : "N/A"),
                         //new XElement("CodigoInstitucionInv", x.CodigoInstitucionInv.ToString("N", culture)),
                         new XElement("TotalPorVencer", x.TotalPorVencer.ToString("N", culture)),
                         new XElement("PorVencer0a1", x.PorVencer0a1.ToString("N", culture)),
                         new XElement("PorVencer1a3", x.PorVencer1a3.ToString("N", culture)),
                         new XElement("PorVencer3a6", x.PorVencer3a6.ToString("N", culture)),
                         new XElement("PorVencer6a12", x.PorVencer6a12.ToString("N", culture)),
                         new XElement("PorVencer12", x.PorVencer12.ToString("N", culture))
                    )) : string.Empty),
                     new XElement("AnalisisSaldosPorVencerSistemaFinancieroFooter", datos.BuroCreditoEquifax.ResultadosCBCooperativa.AnalisisSaldosPorVencerSistemaFinanciero != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.AnalisisSaldosPorVencerSistemaFinanciero.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.AnalisisSaldosPorVencerSistemaFinanciero.Where(m => m.FechaCorte == default && string.IsNullOrEmpty(m.Institucion)).Select(x => new XElement("Datos",
                            new XElement("TotalPorVencer", $"${x.TotalPorVencer.ToString("N", culture)}"),
                            new XElement("PorVencer0a1", $"${x.PorVencer0a1.ToString("N", culture)}"),
                            new XElement("PorVencer1a3", $"${x.PorVencer1a3.ToString("N", culture)}"),
                            new XElement("PorVencer3a6", $"${x.PorVencer3a6.ToString("N", culture)}"),
                            new XElement("PorVencer6a12", $"${x.PorVencer6a12.ToString("N", culture)}"),
                            new XElement("PorVencer12", $"${x.PorVencer12.ToString("N", culture)}")
                        )) : string.Empty),
                      new XElement("CuotaEstimadaMensual", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual != null ? new XElement("Datos",
                        new XElement("Pago", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual.Pago.ToString("N", culture)),
                        new XElement("NumeroCreditosComercial", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual.NumeroCreditosComercial.ToString("N", culture)),
                        new XElement("TotalVencido", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual.TotalVencido.ToString("N", culture)),
                        new XElement("TotalDemanda", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual.TotalDemanda.ToString("N", culture)),
                        new XElement("TotalCartera", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual.TotalCartera.ToString("N", culture)),
                        new XElement("NumeroCreditosIece", datos.BuroCreditoEquifax.ResultadosCBCooperativa.CuotaEstimadaMensual.NumeroCreditosIece.ToString("N", culture))
                    ) : string.Empty),
                    new XElement("MantieneHistorialCrediticioDesde", datos.BuroCreditoEquifax.ResultadosCBCooperativa.MantieneHistorialCrediticioDesde != null ? new XElement("Datos",
                        new XElement("Titulo", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.MantieneHistorialCrediticioDesde.Titulo?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.MantieneHistorialCrediticioDesde.Titulo.Trim() : "N/A"),
                        new XElement("PrimeraFecha", datos.BuroCreditoEquifax.ResultadosCBCooperativa.MantieneHistorialCrediticioDesde.PrimeraFecha != default ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.MantieneHistorialCrediticioDesde.PrimeraFecha.ToString("dd/MM/yyyy") : "N/A")
                    ) : string.Empty),
                    new XElement("IdentificadorPerfilRiesgoDirectoDesde20051", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirectoDesde20051 != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirectoDesde20051.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirectoDesde20051.Select(x => new XElement("Datos",
                        new XElement("Indicador", !string.IsNullOrEmpty(x.Indicador?.Trim()) ? x.Indicador.Trim() : "N/A"),
                        new XElement("Valor", !string.IsNullOrEmpty(x.Valor) ? (double.TryParse(x.Valor, out _) ? $"${x.Valor}" : x.Valor) : "N/A")
                    )).Take(10) : string.Empty),
                    new XElement("IdentificadorPerfilRiesgoDirectoDesde20051Msj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirectoDesde20051 != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirectoDesde20051.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirectoDesde20051.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                    new XElement("IdentificadorPerfilRiesgoDirecto6Meses2", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirecto6Meses2 != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirecto6Meses2.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirecto6Meses2.Select(x => new XElement("Datos",
                        new XElement("Indicador", !string.IsNullOrEmpty(x.Indicador?.Trim()) ? x.Indicador.Trim() : "N/A"),
                        new XElement("Valor", !string.IsNullOrEmpty(x.Valor) ? (double.TryParse(x.Valor, out _) ? $"${x.Valor}" : x.Valor) : "N/A")
                    )).Take(10) : string.Empty),
                    new XElement("IdentificadorPerfilRiesgoDirecto6Meses2Msj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirecto6Meses2 != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirecto6Meses2.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IdentificadorPerfilRiesgoDirecto6Meses2.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                    new XElement("IndicadorPerfilCrediticio", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IndicadorPerfilCrediticio != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IndicadorPerfilCrediticio.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.IndicadorPerfilCrediticio.Select(x => new XElement("Datos",
                        new XElement("Indicador", !string.IsNullOrEmpty(x.Indicador?.Trim()) ? x.Indicador.Trim() : "N/A"),
                        new XElement("Valor", !string.IsNullOrEmpty(x.Valor) ? (double.TryParse(x.Valor, out _) ? $"${x.Valor}" : x.Valor) : "N/A")
                    )).Take(10) : string.Empty),
                    new XElement("IndicadorPerfilCrediticioMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.IndicadorPerfilCrediticio != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IndicadorPerfilCrediticio.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.IndicadorPerfilCrediticio.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                    new XElement("PorcentajeDeudaAcreedor", datos.BuroCreditoEquifax.ResultadosCBCooperativa.PorcentajeDeudaAcreedor != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.PorcentajeDeudaAcreedor.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.PorcentajeDeudaAcreedor.Select(x => new XElement("Datos",
                        new XElement("PrincipalAcreedor", !string.IsNullOrEmpty(x.PrincipalAcreedor?.Trim()) ? x.PrincipalAcreedor.Trim() : "N/A"),
                        new XElement("Porcentaje", x.Porcentaje.ToString("N", culture))
                    )).Take(10) : string.Empty),
                    new XElement("PorcentajeDeudaAcreedorMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.PorcentajeDeudaAcreedor != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.PorcentajeDeudaAcreedor.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.PorcentajeDeudaAcreedor.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                    new XElement("OperacionMasReciente", datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente != null ? new XElement("Datos",
                        new XElement("Institucion", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.Institucion?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.Institucion.Trim() : "N/A"),
                        new XElement("ValorOperacion", datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.ValorOperacion.ToString("N", culture)),
                        new XElement("FechaConcesion", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.FechaConcesion?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.FechaConcesion.Trim() : "N/A"),
                        new XElement("FechaCancelacion", !string.IsNullOrEmpty(datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.FechaCancelacion?.Trim()) ? datos.BuroCreditoEquifax.ResultadosCBCooperativa.OperacionMasReciente.FechaCancelacion.Trim() : "N/A")
                    ) : string.Empty),
                     new XElement("TendenciaDeuda", datos.BuroCreditoEquifax.ResultadosCBCooperativa.TendenciaDeuda != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.TendenciaDeuda.Any() ?
                     datos.BuroCreditoEquifax.ResultadosCBCooperativa.TendenciaDeuda.Select(x => new XElement("Datos",
                        new XElement("Deuda3", x.Deuda3.HasValue ? x.Deuda3.Value.ToString("N", culture) : "0.00"),
                        new XElement("Deuda1", x.Deuda1.HasValue ? x.Deuda1.Value.ToString("N", culture) : "0.00"),
                        new XElement("Disminucion", x.Disminucion.HasValue ? x.Disminucion.Value.ToString("N", culture) : "0.00"),
                        new XElement("Porcentaje", x.Porcentaje.HasValue ? x.Porcentaje.Value.ToString("N", culture) : "0.00")
                    )).Take(10) : string.Empty),
                     new XElement("TendenciaDeudaMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.TendenciaDeuda != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.TendenciaDeuda.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.TendenciaDeuda.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                      new XElement("EntidadesQueHanConsultado", datos.BuroCreditoEquifax.ResultadosCBCooperativa.EntidadesQueHanConsultado != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EntidadesQueHanConsultado.Any() ?
                      datos.BuroCreditoEquifax.ResultadosCBCooperativa.EntidadesQueHanConsultado.Select(x => new XElement("Datos",
                        new XElement("NombreCliente", !string.IsNullOrEmpty(x.NombreCliente?.Trim()) ? x.NombreCliente.Trim() : "N/A"),
                        new XElement("Mes1", !string.IsNullOrEmpty(x.Mes1?.Trim()) ? x.Mes1.Trim() : string.Empty),
                        new XElement("Mes2", !string.IsNullOrEmpty(x.Mes2?.Trim()) ? x.Mes2.Trim() : string.Empty),
                        new XElement("Mes3", !string.IsNullOrEmpty(x.Mes3?.Trim()) ? x.Mes3.Trim() : string.Empty),
                        new XElement("Mes4", !string.IsNullOrEmpty(x.Mes4?.Trim()) ? x.Mes4.Trim() : string.Empty),
                        new XElement("Mes5", !string.IsNullOrEmpty(x.Mes5?.Trim()) ? x.Mes5.Trim() : string.Empty),
                        new XElement("Mes6", !string.IsNullOrEmpty(x.Mes6?.Trim()) ? x.Mes6.Trim() : string.Empty),
                        new XElement("Mes7", !string.IsNullOrEmpty(x.Mes7?.Trim()) ? x.Mes7.Trim() : string.Empty),
                        new XElement("Mes8", !string.IsNullOrEmpty(x.Mes8?.Trim()) ? x.Mes8.Trim() : string.Empty),
                        new XElement("Mes9", !string.IsNullOrEmpty(x.Mes9?.Trim()) ? x.Mes9.Trim() : string.Empty),
                        new XElement("Mes10", !string.IsNullOrEmpty(x.Mes10?.Trim()) ? x.Mes10.Trim() : string.Empty),
                        new XElement("Mes11", !string.IsNullOrEmpty(x.Mes11?.Trim()) ? x.Mes11.Trim() : string.Empty),
                        new XElement("Mes12", !string.IsNullOrEmpty(x.Mes12?.Trim()) ? x.Mes12.Trim() : string.Empty)
                    )).Take(10) : string.Empty),
                      new XElement("EntidadesQueHanConsultadoMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.EntidadesQueHanConsultado != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EntidadesQueHanConsultado.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EntidadesQueHanConsultado.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                       new XElement("ValorDeudaTotalEnLos4Segmentos", datos.BuroCreditoEquifax.ResultadosCBCooperativa.ValorDeudaTotalEnLos4Segmentos != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.ValorDeudaTotalEnLos4Segmentos.Any() ?
                       datos.BuroCreditoEquifax.ResultadosCBCooperativa.ValorDeudaTotalEnLos4Segmentos.Where(x => !string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                        new XElement("Titulo", !string.IsNullOrEmpty(x.Titulo?.Trim()) ? x.Titulo.Trim() : "N/A"),
                        //new XElement("TituloWSInv", !string.IsNullOrEmpty(x.TituloWSInv?.Trim()) ? x.TituloWSInv.Trim() : "N/A"),
                        new XElement("PorVencer", x.PorVencer.ToString("N", culture)),
                        new XElement("NoDevengaInt", x.NoDevengaInt.ToString("N", culture)),
                        new XElement("Vencido", x.Vencido.ToString("N", culture)),
                        new XElement("Total", x.Total.ToString("N", culture)),
                        new XElement("DemandaJudicial", x.DemandaJudicial.ToString("N", culture)),
                        new XElement("CarteraCastigada", x.CarteraCastigada.ToString("N", culture))
                    )) : string.Empty),
                    new XElement("ValorDeudaTotalEnLos4SegmentosFooter", datos.BuroCreditoEquifax.ResultadosCBCooperativa.ValorDeudaTotalEnLos4Segmentos != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.ValorDeudaTotalEnLos4Segmentos.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.ValorDeudaTotalEnLos4Segmentos.Where(x => string.IsNullOrEmpty(x.Titulo)).Select(x => new XElement("Datos",
                            new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                            new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                            new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                            new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                            new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                            new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}")
                    )) : string.Empty),
                       new XElement("Score", datos.BuroCreditoEquifax.ResultadosCBCooperativa.Score != null ? new XElement("Datos",
                        new XElement("Score", datos.BuroCreditoEquifax.ResultadosCBCooperativa.Score.Score.ToString("N", culture)),
                        new XElement("Porcentaje", datos.BuroCreditoEquifax.ResultadosCBCooperativa.Score.Porcentaje.ToString("N", culture)),
                        new XElement("RiesgoInv", datos.BuroCreditoEquifax.ResultadosCBCooperativa.Score.RiesgoInv.ToString("N", culture))
                    ) : string.Empty),
                    new XElement("GraficoEvolucionDeuda", datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSOGraficarEvolucionDeuda != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSOGraficarEvolucionDeuda.Any() ? GenerarGraficoEvolucionDeudaCBCooperativa(datos.BuroCreditoEquifax.ResultadosCBCooperativa.WSOGraficarEvolucionDeuda) : string.Empty),
                    new XElement("EvolucionHistoricaDistEndeudamientoSICOM", datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoSICOM != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoSICOM.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoSICOM.Select(x => new XElement("Datos",
                        new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte?.Trim()) ? x.FechaCorte.Trim() : "N/A"),
                        new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion?.Trim()) ? x.NomInstitucion.Trim() : "N/A"),
                        new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor?.Trim()) ? x.TipoDeudor.Trim() : "N/A"),
                        new XElement("ValPorVencer", x.ValPorVencer.ToString("N", culture)),
                        new XElement("ValVencido", x.ValVencido.ToString("N", culture)),
                        new XElement("ValNdi", x.ValNdi.ToString("N", culture)),
                        new XElement("ValDemJudicial", x.ValDemJudicial.ToString("N", culture)),
                        new XElement("ValCarCastigada", x.ValCarCastigada.ToString("N", culture)),
                        new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado.ToString("N", culture))
                    )).Take(10) : string.Empty),
                    new XElement("EvolucionHistoricaDistEndeudamientoSICOMMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoSICOM != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoSICOM.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoSICOM.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty),
                    new XElement("RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes", datos.BuroCreditoEquifax.ResultadosCBCooperativa.RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.RecursivoGarantiasPersonalesCodeudoresOperacionesVigentes.OrderByDescending(m => m.FechaCorteParam).Take(10).Select(x => new XElement("Datos",
                            new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                            new XElement("NombreTitular", !string.IsNullOrEmpty(x.NombreTitular) ? x.NombreTitular : "N/A"),
                            new XElement("IdentificacionTitular", !string.IsNullOrEmpty(x.IdentificacionTitular) ? x.IdentificacionTitular : "N/A"),
                            new XElement("NumeroOperacion", !string.IsNullOrEmpty(x.NumeroOperacion) ? x.NumeroOperacion : "N/A"),
                            new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                            new XElement("DeudaTotal", $"${x.DeudaTotal.ToString("N", culture)}"),
                            new XElement("FechaCorteParam", x.FechaCorteParam != default && x.FechaCorteParam != DateTime.MinValue && x.FechaCorteParam.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorteParam.ToString("dd/MM/yyyy") : "N/A")
                        )) : string.Empty),
                    new XElement("DeudaReportadaPorRFR360", datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorRFR != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorRFR.Any() ?
                    datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorRFR.Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor) && !string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Take(10).Select(x => new XElement("Datos",
                        new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                        new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                        new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                        new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                        new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                        new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                        new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                        new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                        new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                        new XElement("DiasVencido", x.DiasVencido),
                        new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                        new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                    )) : string.Empty),
                    new XElement("DeudaReportadaPorRFR360Footer", datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorRFR != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorRFR.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorRFR.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor) && string.IsNullOrEmpty(x.TipoCredito)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                            new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                            new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                            new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                            new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                            new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                            new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                            new XElement("DiasVencido", x.DiasVencido),
                            new XElement("MayorPlazoVencidoInv", !string.IsNullOrEmpty(x.MayorPlazoVencidoInv) ? x.MayorPlazoVencidoInv : "N/A"),
                            new XElement("SaldoTotalInv", $"${x.SaldoTotalInv.ToString("N", culture)}")
                        )) : string.Empty),
                    new XElement("DeudaReportadaPorINFOCOMExcluyendoIESS", datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorINFOCOMExcluyendoIESS != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorINFOCOMExcluyendoIESS.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorINFOCOMExcluyendoIESS.OrderByDescending(m => m.FechaCorte).Where(x => x.FechaCorte != default && !string.IsNullOrEmpty(x.Institucion) && !string.IsNullOrEmpty(x.TipoDeudor)).Take(10).Select(x => new XElement("Datos",
                            new XElement("FechaCorte", x.FechaCorte != default && x.FechaCorte != DateTime.MinValue && x.FechaCorte.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorte.ToString("dd/MM/yyyy") : "N/A"),
                            new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                            new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                            new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                            new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                            new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                            new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                            new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                            new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                            new XElement("DiasVencido", x.DiasVencido)
                        )) : string.Empty),
                    new XElement("DeudaReportadaPorINFOCOMExcluyendoIESSFooter", datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorINFOCOMExcluyendoIESS != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorINFOCOMExcluyendoIESS.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.DeudaReportadaPorINFOCOMExcluyendoIESS.Where(x => x.FechaCorte == default && string.IsNullOrEmpty(x.Institucion) && string.IsNullOrEmpty(x.TipoDeudor)).OrderByDescending(m => m.FechaCorte).Select(x => new XElement("Datos",
                            new XElement("Total", $"${x.Total.ToString("N", culture)}"),
                            new XElement("PorVencer", $"${x.PorVencer.ToString("N", culture)}"),
                            new XElement("NoDevengaInt", $"${x.NoDevengaInt.ToString("N", culture)}"),
                            new XElement("Vencido", $"${x.Vencido.ToString("N", culture)}"),
                            new XElement("DemandaJudicial", $"${x.DemandaJudicial.ToString("N", culture)}"),
                            new XElement("CarteraCastigada", $"${x.CarteraCastigada.ToString("N", culture)}"),
                            new XElement("DiasVencido", x.DiasVencido)
                        )) : string.Empty),
                    new XElement("GarantiasPersonalesCoudeudoresOperacionesNoVigentes", datos.BuroCreditoEquifax.ResultadosCBCooperativa.GarantiasPersonalesCoudeudoresOperacionesNoVigentes != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.GarantiasPersonalesCoudeudoresOperacionesNoVigentes.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.GarantiasPersonalesCoudeudoresOperacionesNoVigentes.OrderByDescending(m => m.FechaCorteInv).Take(10).Select(x => new XElement("Datos",
                            new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                            new XElement("FechaConcesion", x.FechaConcesion != default && x.FechaConcesion != DateTime.MinValue && x.FechaConcesion.Date != new DateTime(1900, 1, 1).Date ? x.FechaConcesion.ToString("dd/MM/yyyy") : "N/A"),
                            new XElement("FechaEliminacion", x.FechaEliminacion != default && x.FechaEliminacion != DateTime.MinValue && x.FechaEliminacion.Date != new DateTime(1900, 1, 1).Date ? x.FechaEliminacion.ToString("dd/MM/yyyy") : "N/A"),
                            new XElement("NumeroDocumento", !string.IsNullOrEmpty(x.NumeroDocumento) ? x.NumeroDocumento : "N/A"),
                            new XElement("NombreSujeto", !string.IsNullOrEmpty(x.NombreSujeto) ? x.NombreSujeto : "N/A"),
                            new XElement("Institucion", !string.IsNullOrEmpty(x.Institucion) ? x.Institucion : "N/A"),
                            new XElement("NumeroOperacion", !string.IsNullOrEmpty(x.NumeroOperacion) ? x.NumeroOperacion : "N/A"),
                            new XElement("ValorOperacion", $"${x.ValorOperacion.ToString("N", culture)}"),
                            new XElement("FechaCancelacion", x.FechaCancelacion != default && x.FechaCancelacion != DateTime.MinValue && x.FechaCancelacion.Date != new DateTime(1900, 1, 1).Date ? x.FechaCancelacion.ToString("dd/MM/yyyy") : "N/A"),
                            new XElement("FechaCorteInv", x.FechaCorteInv != default && x.FechaCorteInv != DateTime.MinValue && x.FechaCorteInv.Date != new DateTime(1900, 1, 1).Date ? x.FechaCorteInv.ToString("dd/MM/yyyy") : "N/A")
                        )) : string.Empty),
                    new XElement("PersonasInhabilitadas", datos.BuroCreditoEquifax.ResultadosCBCooperativa.PersonasInhabilitadas != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.PersonasInhabilitadas.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.PersonasInhabilitadas.OrderByDescending(m => m.FechaInhabilitacion).Take(10).Select(x => new XElement("Datos",
                            new XElement("FechaInhabilitacion", x.FechaInhabilitacion != default && x.FechaInhabilitacion != DateTime.MinValue && x.FechaInhabilitacion.Date != new DateTime(1900, 1, 1).Date ? x.FechaInhabilitacion.ToString("dd/MM/yyyy") : "N/A"),
                            new XElement("TiempoInhabilitacion", x.TiempoInhabilitacion),
                            new XElement("Accion", !string.IsNullOrEmpty(x.Accion) ? x.Accion : "N/A"),
                            new XElement("MotivoInv", !string.IsNullOrEmpty(x.MotivoInv) ? x.MotivoInv : "N/A"),
                            new XElement("NumeroProtestos", x.NumeroProtestos)
                        )) : string.Empty),
                    new XElement("EvolucionHistoricaDistEndeudamientoRFR", datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoRFR != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoRFR.Any() ?
                        datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoRFR.Select(x => new XElement("Datos",
                            new XElement("FechaCorte", !string.IsNullOrEmpty(x.FechaCorte) ? x.FechaCorte : "N/A"),
                            new XElement("NomInstitucion", !string.IsNullOrEmpty(x.NomInstitucion) ? x.NomInstitucion : "N/A"),
                            new XElement("TipoDeudor", !string.IsNullOrEmpty(x.TipoDeudor) ? x.TipoDeudor : "N/A"),
                            new XElement("ValPorVencer", x.ValPorVencer >= 0 ? $"${x.ValPorVencer.ToString("N", culture)}" : "N/A"),
                            new XElement("ValVencido", x.ValVencido >= 0 ? $"${x.ValVencido.ToString("N", culture)}" : "N/A"),
                            new XElement("ValDemJudicial", x.ValDemJudicial >= 0 ? $"${x.ValDemJudicial.ToString("N", culture)}" : "N/A"),
                            new XElement("ValCartCastigada", x.ValCartCastigada >= 0 ? $"${x.ValCartCastigada.ToString("N", culture)}" : "N/A"),
                            new XElement("NumDiasVencidoActualizado", x.NumDiasVencidoActualizado >= 0 ? x.NumDiasVencidoActualizado : "N/A")
                        )).Take(10) : string.Empty),
                    new XElement("EvolucionHistoricaDistEndeudamientoRFRMsj", datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoRFR != null && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoRFR.Any()
                        && datos.BuroCreditoEquifax.ResultadosCBCooperativa.EvolucionHistoricaDistEndeudamientoRFR.Count() > 10 ? "SE MUESTRAN LOS DIEZ PRIMEROS REGISTROS" : string.Empty)
                    ) : string.Empty));
                }
                var dataxml = fn.ToString();
                var dataHtml = GenerarHtml(plantilla, dataxml);
                var dataPdf = ObtenerPdfHTML(dataHtml);
                return dataPdf;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                throw;
            }
        }

        private async Task<byte[]> ObtenerPdfArchivoSolicitudMundoFactor(SolicitudCreditoMundoFactorViewModel datos, string plantilla)
        {
            try
            {
                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var culture = System.Globalization.CultureInfo.CurrentCulture;
                var telefonoPrincipalEmpresa = string.Empty;
                var celularPrincipalEmpresa = string.Empty;
                var direccionPrincipalEmpresa = string.Empty;
                var correoPrincipalEmpresa = string.Empty;
                var telefonoPrincipal = string.Empty;
                var celularPrincipal = string.Empty;
                var direccionPrincipal = string.Empty;
                var correoPrincipal = string.Empty;
                var nacionalidadEmpresa = string.Empty;
                var cargoEmpresa = string.Empty;

                if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null && datos.ContactosEmpresa.Telefonos.Any())
                {
                    celularPrincipalEmpresa = datos.ContactosEmpresa.Telefonos.FirstOrDefault(x => (x.Length == 10 && x.Substring(0, 2) == "09") || (x.Length == 12 && x.Substring(0, 3) == "593") || (x.Length == 9 && x.Substring(0, 1) == "9") || (x.Length == 13 && x.Substring(0, 4) == "+593"))?.Trim();
                    telefonoPrincipalEmpresa = datos.ContactosEmpresa.Telefonos.FirstOrDefault(x => x.Length == 9 || x.Length == 7)?.Trim();
                }

                if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Direcciones != null && datos.ContactosEmpresa.Direcciones.Any())
                    direccionPrincipalEmpresa = datos.ContactosEmpresa.Direcciones.FirstOrDefault()?.Trim();

                if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Correos != null && datos.ContactosEmpresa.Correos.Any())
                    correoPrincipalEmpresa = datos.ContactosEmpresa.Correos.FirstOrDefault()?.Trim();

                if (datos.ContactosIess != null && datos.ContactosIess.Telefonos != null && datos.ContactosIess.Telefonos.Any())
                {
                    celularPrincipal = datos.ContactosIess.Telefonos.FirstOrDefault(x => (x.Length == 10 && x.Substring(0, 2) == "09") || (x.Length == 12 && x.Substring(0, 3) == "593") || (x.Length == 9 && x.Substring(0, 1) == "9") || (x.Length == 13 && x.Substring(0, 4) == "+593"))?.Trim();
                    telefonoPrincipal = datos.ContactosIess.Telefonos.FirstOrDefault(x => x.Length == 9 || x.Length == 7)?.Trim();
                }
                else if (datos.Contactos != null && datos.Contactos.Telefonos != null && datos.Contactos.Telefonos.Any())
                {
                    celularPrincipal = datos.Contactos.Telefonos.FirstOrDefault(x => (x.Length == 10 && x.Substring(0, 2) == "09") || (x.Length == 12 && x.Substring(0, 3) == "593") || (x.Length == 9 && x.Substring(0, 1) == "9") || (x.Length == 13 && x.Substring(0, 4) == "+593"))?.Trim();
                    telefonoPrincipal = datos.Contactos.Telefonos.FirstOrDefault(x => x.Length == 9 || x.Length == 7)?.Trim();
                }

                if (datos.ContactosIess != null && datos.ContactosIess.Direcciones != null && datos.ContactosIess.Direcciones.Any())
                    direccionPrincipal = datos.ContactosIess.Direcciones.FirstOrDefault()?.Trim();
                else if (datos.Contactos != null && datos.Contactos.Direcciones != null && datos.Contactos.Direcciones.Any())
                    direccionPrincipal = datos.Contactos.Direcciones.FirstOrDefault()?.Trim();

                if (datos.ContactosIess != null && datos.ContactosIess.Correos != null && datos.ContactosIess.Correos.Any())
                    correoPrincipal = datos.ContactosIess.Correos.FirstOrDefault()?.Trim();
                else if (datos.Contactos != null && datos.Contactos.Correos != null && datos.Contactos.Correos.Any())
                    correoPrincipal = datos.Contactos.Correos.FirstOrDefault()?.Trim();

                var lstAutos = new List<AutosMundoFactorViewModel>(new AutosMundoFactorViewModel[2]);
                if (datos.Ant != null && datos.Ant.Autos != null && datos.Ant.Autos.Any())
                {
                    var autos = datos.Ant.Autos.Where(m => (!string.IsNullOrEmpty(m.Placa) && m.Placa.Length > 1 && m.Placa != "SIN/PLACA") && m.NombrePropietario == datos.Ant.Titular).Select(x => new AutosMundoFactorViewModel { Marca = x.Marca, Modelo = x.Modelo, Anio = x.Anio, Placa = x.Placa }).Take(2).ToList();
                    for (int i = 0; i < autos.Count; i++)
                    {
                        lstAutos[i] = autos[i];
                    }
                    for (int i = autos.Count; i < lstAutos.Count; i++)
                    {
                        lstAutos[i] = new AutosMundoFactorViewModel() { Marca = string.Empty, Modelo = string.Empty, Anio = null, Placa = string.Empty };
                    }
                }
                var primerApellido = string.Empty;
                var segundoApellido = string.Empty;
                var nombresPersona = string.Empty;
                var nombreCompletoPersona = string.Empty;
                var primerApellidoConyuge = string.Empty;
                var segundoApellidoConyuge = string.Empty;
                var nombresPersonaConyuge = string.Empty;

                if (datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()))
                {
                    nombreCompletoPersona = datos.RegistroCivil.Nombre.Trim();
                    var nombreCompleto = datos.RegistroCivil.Nombre.Trim().Split(" ");
                    if (nombreCompleto.Length == 4)
                    {
                        primerApellido = nombreCompleto[0].Trim();
                        segundoApellido = nombreCompleto[1].Trim();
                        nombresPersona = string.Join(" ", nombreCompleto.Skip(2));
                    }
                    else if (nombreCompleto.Length > 4)
                    {
                        primerApellido = nombreCompleto[0].Trim();
                        segundoApellido = nombreCompleto[1].Trim();
                        nombresPersona = string.Join(" ", nombreCompleto.Skip(2));
                    }
                    else
                    {
                        primerApellido = nombreCompleto[0].Trim();
                        segundoApellido = nombreCompleto[1].Trim();
                        nombresPersona = string.Join(" ", nombreCompleto.Skip(2));
                    }
                }
                else if (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres?.Trim()))
                {
                    nombreCompletoPersona = datos.Ciudadano.Nombres.Trim();
                    var nombreCompleto = datos.Ciudadano.Nombres.Trim().Split(" ");
                    if (nombreCompleto.Length == 4)
                    {
                        primerApellido = nombreCompleto[0].Trim();
                        segundoApellido = nombreCompleto[1].Trim();
                        nombresPersona = string.Join(" ", nombreCompleto.Skip(2));
                    }
                    else if (nombreCompleto.Length > 4)
                    {
                        primerApellido = nombreCompleto[0].Trim();
                        segundoApellido = nombreCompleto[1].Trim();
                        nombresPersona = string.Join(" ", nombreCompleto.Skip(2));
                    }
                    else
                    {
                        primerApellido = nombreCompleto[0].Trim();
                        segundoApellido = nombreCompleto[1].Trim();
                        nombresPersona = string.Join(" ", nombreCompleto.Skip(2));
                    }
                }

                if (datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Conyuge?.Trim()))
                {
                    var nombreCompletoConyuge = datos.RegistroCivil.Conyuge.Trim().Split(" ");
                    if (nombreCompletoConyuge.Length == 4)
                    {
                        primerApellidoConyuge = nombreCompletoConyuge[0].Trim();
                        segundoApellidoConyuge = nombreCompletoConyuge[1].Trim();
                        nombresPersonaConyuge = string.Join(" ", nombreCompletoConyuge.Skip(2));
                    }
                    else if (nombreCompletoConyuge.Length > 4)
                    {
                        primerApellidoConyuge = nombreCompletoConyuge[0].Trim();
                        segundoApellidoConyuge = nombreCompletoConyuge[1].Trim();
                        nombresPersonaConyuge = string.Join(" ", nombreCompletoConyuge.Skip(2));
                    }
                    else
                    {
                        primerApellidoConyuge = nombreCompletoConyuge[0].Trim();
                        segundoApellidoConyuge = nombreCompletoConyuge[1].Trim();
                        nombresPersonaConyuge = string.Join(" ", nombreCompletoConyuge.Skip(2));
                    }
                }
                else if (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NombreConyuge?.Trim()))
                {
                    var nombreCompletoConyuge = datos.Personales.NombreConyuge.Trim().Split(" ");
                    if (nombreCompletoConyuge.Length == 4)
                    {
                        primerApellidoConyuge = nombreCompletoConyuge[0].Trim();
                        segundoApellidoConyuge = nombreCompletoConyuge[1].Trim();
                        nombresPersonaConyuge = string.Join(" ", nombreCompletoConyuge.Skip(2));
                    }
                    else if (nombreCompletoConyuge.Length > 4)
                    {
                        primerApellidoConyuge = nombreCompletoConyuge[0].Trim();
                        segundoApellidoConyuge = nombreCompletoConyuge[1].Trim();
                        nombresPersonaConyuge = string.Join(" ", nombreCompletoConyuge.Skip(2));
                    }
                    else
                    {
                        primerApellidoConyuge = nombreCompletoConyuge[0].Trim();
                        segundoApellidoConyuge = nombreCompletoConyuge[1].Trim();
                        nombresPersonaConyuge = string.Join(" ", nombreCompletoConyuge.Skip(2));
                    }
                }

                if (datos.DirectorioCompania != null)
                {
                    if (!string.IsNullOrEmpty(datos.DirectorioCompania.Pais?.Trim()))
                        nacionalidadEmpresa = datos.DirectorioCompania.Pais.Trim();

                    if (!string.IsNullOrEmpty(datos.DirectorioCompania.Telefono?.Trim()))
                        telefonoPrincipalEmpresa = datos.DirectorioCompania.Telefono.Trim();

                    if (!string.IsNullOrEmpty(nombreCompletoPersona?.Trim()) && !string.IsNullOrEmpty(datos.DirectorioCompania.Representante?.Trim()))
                    {
                        var representanteIgual = GenerarInterviniente(nombreCompletoPersona.Trim(), datos.DirectorioCompania.Representante.Trim());
                        if (representanteIgual)
                            cargoEmpresa = !string.IsNullOrEmpty(datos.DirectorioCompania.Cargo?.Trim()) ? datos.DirectorioCompania.Cargo.Trim() : null;
                    }
                }

                var edadPersona = 0;
                if (datos.RegistroCivil != null && datos.RegistroCivil.FechaNacimiento != default)
                {
                    edadPersona = DateTime.Today.Year - datos.RegistroCivil.FechaNacimiento.Year;
                    if (datos.RegistroCivil.FechaNacimiento.Date > DateTime.Today.AddYears(-edadPersona))
                        edadPersona--;
                }
                else if (datos.Ciudadano != null && datos.Ciudadano.FechaNacimiento.HasValue && datos.Ciudadano.FechaNacimiento.Value != default)
                {
                    edadPersona = DateTime.Today.Year - datos.Ciudadano.FechaNacimiento.Value.Year;
                    if (datos.Ciudadano.FechaNacimiento.Value.Date > DateTime.Today.AddYears(-edadPersona))
                        edadPersona--;
                }

                var otrosIngresos = string.Empty;
                if (datos.BuroCreditoEquifax != null && datos.BuroCreditoEquifax.Resultados != null && datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0 != null && datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor > 0)
                    otrosIngresos = datos.BuroCreditoEquifax.Resultados.IndicadorCOVID0.IncomePredictor.ToString("N", culture);

                var nombreEmpresa = string.Empty;
                var fechaInicioEmpresa = string.Empty;
                var antiguedadEmpresa = string.Empty;
                if (datos.Afiliado != null && datos.Afiliado.EmpresasAfiliado != null && datos.Afiliado.EmpresasAfiliado.Any())
                {
                    var empresasAfiliado = datos.Afiliado.EmpresasAfiliado.FirstOrDefault(x => x.Estado.Contains("ACTIVO"));
                    if (empresasAfiliado != null && datos.AfiliadoAdicional != null && datos.AfiliadoAdicional.Any())
                    {
                        var empresa = empresasAfiliado.IdentificacionEmpresa;
                        var afiliadoAdicional = datos.AfiliadoAdicional.FirstOrDefault(x => x.RucEmpresa.Trim() == empresa);
                        if (afiliadoAdicional != null)
                        {
                            if (!string.IsNullOrEmpty(afiliadoAdicional.Cargo?.Trim()) && string.IsNullOrEmpty(cargoEmpresa?.Trim()))
                                cargoEmpresa = afiliadoAdicional.Cargo?.Trim();

                            nombreEmpresa = afiliadoAdicional.NombreEmpresa?.Trim();

                            if (string.IsNullOrEmpty(telefonoPrincipalEmpresa?.Trim()))
                                telefonoPrincipalEmpresa = afiliadoAdicional.TelefonoEmpresa?.Trim();

                            fechaInicioEmpresa = afiliadoAdicional.FechaInicioAfiliacion.HasValue && afiliadoAdicional.FechaInicioAfiliacion.Value != default ? afiliadoAdicional.FechaInicioAfiliacion.Value.ToString("dd/MM/yyyy") : null;
                            if (afiliadoAdicional.FechaInicioAfiliacion.HasValue && afiliadoAdicional.FechaInicioAfiliacion.Value != default)
                            {
                                var antiguedadEmpresaValor = 0;
                                antiguedadEmpresaValor = DateTime.Today.Year - afiliadoAdicional.FechaInicioAfiliacion.Value.Year;
                                if (afiliadoAdicional.FechaInicioAfiliacion.Value.Date > DateTime.Today.AddYears(-antiguedadEmpresaValor))
                                    antiguedadEmpresaValor--;

                                antiguedadEmpresa = antiguedadEmpresaValor.ToString();
                            }
                        }
                    }
                }

                var provinciaEmpresa = string.Empty;
                var cantonEmpresa = string.Empty;
                var parroquiaEmpresa = string.Empty;
                if (datos.Sri != null && datos.Sri.Establecimientos != null && datos.Sri.Establecimientos.Any())
                {
                    var direccion = datos.Sri.Establecimientos.FirstOrDefault(x => x.Value.Estado.ToUpper().Trim() == "ABIERTO").Value;
                    if (direccion != null && !string.IsNullOrEmpty(direccion.Direccion?.Trim()))
                    {
                        var direccionEstablecimiento = direccion.Direccion.Split("/");
                        if (direccionEstablecimiento != null && direccionEstablecimiento.Any() && direccionEstablecimiento.Length >= 4)
                        {
                            provinciaEmpresa = direccionEstablecimiento[0];
                            cantonEmpresa = direccionEstablecimiento[1];
                            parroquiaEmpresa = direccionEstablecimiento[2];
                            if (string.IsNullOrEmpty(direccionPrincipalEmpresa?.Trim()))
                                direccionPrincipalEmpresa = string.Join(" ", direccionEstablecimiento.Skip(3));
                        }
                    }
                }

                var sexoConyuge = string.Empty;
                if (datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Conyuge?.Trim()) && !string.IsNullOrEmpty(datos.RegistroCivil.Genero?.Trim()))
                    sexoConyuge = datos.RegistroCivil.Genero.Trim().ToUpper() == "HOMBRE" ? "FEMENINO" : datos.RegistroCivil.Genero.Trim().ToUpper() == "MUJER" ? "MASCULINO" : "DESCONOCIDO";
                else if (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NombreConyuge?.Trim()) && !string.IsNullOrEmpty(datos.Personales.Sexo?.Trim()))
                    sexoConyuge = datos.Personales.Sexo.Trim().ToUpper() == "MASCULINO" ? "FEMENINO" : datos.Personales.Sexo.Trim().ToUpper() == "FEMENINO" ? "MASCULINO" : "DESCONOCIDO";

                var independientePersona = false;
                if (datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.Estado?.Trim()) && datos.Sri.Estado.Trim().ToUpper() == "ACT" && !string.IsNullOrEmpty(datos.Sri.Tipo?.Trim()) && datos.Sri.Tipo.Contains("NATURAL"))
                    independientePersona = true;

                var empresaConsultada = string.Empty;
                var rucConsultado = string.Empty;
                if (datos.Sri != null)
                {
                    if (!string.IsNullOrEmpty(datos.Sri.RazonSocial?.Trim()))
                        empresaConsultada = datos.Sri.RazonSocial.Trim();
                    if (!string.IsNullOrEmpty(datos.Sri.RUC?.Trim()))
                        rucConsultado = datos.Sri.RUC.Trim();
                }

                var personaConsultada = string.Empty;
                var cedulaConsultada = string.Empty;
                if (datos.RegistroCivil != null)
                {
                    if (!string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()))
                        personaConsultada = datos.RegistroCivil.Nombre.Trim();
                    if (!string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()))
                        cedulaConsultada = datos.RegistroCivil.Cedula.Trim();
                }
                else if (datos.Ciudadano != null)
                {
                    if (!string.IsNullOrEmpty(datos.Ciudadano.Nombres?.Trim()))
                        cedulaConsultada = datos.Ciudadano.Nombres.Trim();
                    if (!string.IsNullOrEmpty(datos.Ciudadano.Identificacion?.Trim()))
                        cedulaConsultada = datos.Ciudadano.Identificacion.Trim();
                }

                var lstAccionista = new List<AccionistaMundoFactorViewModel>(new AccionistaMundoFactorViewModel[4]);
                if (datos.Accionistas != null && datos.Accionistas.Any())
                {
                    var accionistaEmpresa = datos.Accionistas.Where(x => !string.IsNullOrEmpty(x.IdentificacionAccionista)).Select(x => new AccionistaMundoFactorViewModel { Nombre = x.NombreAccionista, Identificacion = x.IdentificacionAccionista }).Take(4).ToList();
                    for (int i = 0; i < accionistaEmpresa.Count; i++)
                    {
                        lstAccionista[i] = accionistaEmpresa[i];
                    }
                    for (int i = accionistaEmpresa.Count; i < lstAccionista.Count; i++)
                    {
                        lstAccionista[i] = new AccionistaMundoFactorViewModel() { Nombre = string.Empty, Identificacion = string.Empty };
                    }
                }

                var ventasEmpresa = 0m;
                var costoVentasEmpresa = 0m;
                var utilidadOperacionalEmpresa = 0m;
                var otrosIngresosNoOperacionalesEmpresa = 0m;
                var totalIngresoEmpresa = 0m;
                if (datos.Balances != null && datos.Balances.Any())
                {
                    var balancesUltimoPeriodo = datos.Balances.OrderByDescending(x => x.Periodo).Select(x => x).FirstOrDefault();
                    if (balancesUltimoPeriodo != null)
                    {
                        ventasEmpresa = balancesUltimoPeriodo.Otros.Ventas;
                        costoVentasEmpresa = balancesUltimoPeriodo.Otros.CostoDeVentas;
                        utilidadOperacionalEmpresa = balancesUltimoPeriodo.Indices.UtilidadOperacional;
                        otrosIngresosNoOperacionalesEmpresa = balancesUltimoPeriodo.Otros.OtrosIngresosNoOperacionales;
                        totalIngresoEmpresa = ventasEmpresa + costoVentasEmpresa + utilidadOperacionalEmpresa + otrosIngresosNoOperacionalesEmpresa;
                    }
                }

                var fn = new XDocument();
                fn.Add(new XElement("Reporte",
                        new XElement("Logo", "./wwwroot/images/logomundofactor.png"),
                 new XElement("SRI", datos.Sri != null ? new XElement("Elementos",
                            new XElement("RazonSocial", !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Ruc", !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("ActividadEconomica", datos.Balance != null && !string.IsNullOrEmpty(datos.Balance.ActividadEconomica) ? datos.Balance.ActividadEconomica : string.Empty),
                            new XElement("Actividad", !string.IsNullOrEmpty(datos.Sri.Actividad) ? datos.Sri.Actividad : string.Empty),
                            new XElement("AgenteRepresentante", !string.IsNullOrEmpty(datos.Sri.AgenteRepresentante) ? datos.Sri.AgenteRepresentante : string.Empty),
                            new XElement("RepresentanteLegal", !string.IsNullOrEmpty(datos.Sri.RepresentanteLegal) ? datos.Sri.RepresentanteLegal : string.Empty),
                            new XElement("CelularEmpresa", !string.IsNullOrEmpty(celularPrincipalEmpresa) ? celularPrincipalEmpresa : string.Empty),
                            new XElement("TelefonoEmpresa", !string.IsNullOrEmpty(telefonoPrincipalEmpresa) ? telefonoPrincipalEmpresa : string.Empty),
                            new XElement("CorreoEmpresa", !string.IsNullOrEmpty(correoPrincipalEmpresa) ? correoPrincipalEmpresa : string.Empty),
                            new XElement("FechaInicio", datos.Sri.FechaInicio != default ? datos.Sri.FechaInicio.ToString("dd/MM/yyyy") : string.Empty)

                       ) : string.Empty),
                 new XElement("Ciudadano", datos.RegistroCivil != null || datos.Ciudadano != null ? new XElement("Elementos",
                            new XElement("Nombre", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("PrimerApellido", !string.IsNullOrEmpty(primerApellido?.Trim()) ? primerApellido.Trim() : string.Empty),
                            new XElement("SegundoApellido", !string.IsNullOrEmpty(segundoApellido?.Trim()) ? segundoApellido.Trim() : string.Empty),
                            new XElement("NombresPersona", !string.IsNullOrEmpty(nombresPersona?.Trim()) ? nombresPersona.Trim() : string.Empty),
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("EstadoCivil", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.EstadoCivil?.Trim()) ? datos.RegistroCivil.EstadoCivil : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.EstadoCivil) ? datos.Personales.EstadoCivil : string.Empty)),
                            new XElement("Genero", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Genero?.Trim()) ? ReporteViewModel.FormatoGenero(datos.RegistroCivil.Genero) : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Genero) ? datos.Ciudadano.Genero : string.Empty)),
                            new XElement("FechaNacimiento", datos.RegistroCivil != null && datos.RegistroCivil.FechaNacimiento != default ? datos.RegistroCivil.FechaNacimiento.ToString("dd/MM/yyyy") : (datos.Ciudadano != null && datos.Ciudadano.FechaNacimiento.HasValue && datos.Ciudadano.FechaNacimiento.Value != default ? datos.Ciudadano.FechaNacimiento.Value.ToString("dd/MM/yyyy") : string.Empty)),
                            new XElement("Nacionalidad", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nacionalidad?.Trim()) ? datos.RegistroCivil.Nacionalidad : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nacionalidad) ? datos.Ciudadano.Nacionalidad : string.Empty)),
                            new XElement("DesEstudio", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Instruccion?.Trim()) ? datos.RegistroCivil.Instruccion : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NivelEstudio) ? datos.Personales.NivelEstudio : string.Empty)),
                            new XElement("DesProfesion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Profesion?.Trim()) ? datos.RegistroCivil.Profesion : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.Profesion) ? datos.Personales.Profesion : string.Empty)),
                            new XElement("Estado", datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.Estado) ? datos.Personales.Estado : string.Empty),
                            new XElement("Conyuge", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Conyuge?.Trim()) ? datos.RegistroCivil.Conyuge : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.NombreConyuge) ? datos.Personales.NombreConyuge : string.Empty)),
                            new XElement("PrimerApellidoConyuge", !string.IsNullOrEmpty(primerApellidoConyuge?.Trim()) ? primerApellidoConyuge.Trim() : string.Empty),
                            new XElement("SegundoApellidoConyuge", !string.IsNullOrEmpty(segundoApellidoConyuge?.Trim()) ? segundoApellidoConyuge.Trim() : string.Empty),
                            new XElement("NombresPersonaConyuge", !string.IsNullOrEmpty(nombresPersonaConyuge?.Trim()) ? nombresPersonaConyuge.Trim() : string.Empty),
                            new XElement("CedulaConyuge", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.CedulaConyuge?.Trim()) ? datos.RegistroCivil.CedulaConyuge : (datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.CedulaConyuge) && datos.Personales.CedulaConyuge != "0" ? datos.Personales.CedulaConyuge : string.Empty)),
                            new XElement("FechaMatrimonio", datos.RegistroCivil != null && string.IsNullOrEmpty(datos.RegistroCivil.Conyuge) && datos.Personales != null && !string.IsNullOrEmpty(datos.Personales.FechaMatrimonio) ? datos.Personales.FechaMatrimonio : string.Empty),
                            new XElement("ProvinciaNacimiento", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarNacimiento?.Trim()) ? (datos.RegistroCivil.LugarNacimiento.Split('/').Length >= 1 ? datos.RegistroCivil.LugarNacimiento.Split('/')[0] : string.Empty) : string.Empty),
                            new XElement("CantonNacimiento", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarNacimiento?.Trim()) ? (datos.RegistroCivil.LugarNacimiento.Split('/').Length >= 2 ? datos.RegistroCivil.LugarNacimiento.Split('/')[1] : string.Empty) : string.Empty),
                            new XElement("ParroquiaNacimiento", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.LugarNacimiento?.Trim()) ? (datos.RegistroCivil.LugarNacimiento.Split('/').Length >= 3 ? datos.RegistroCivil.LugarNacimiento.Split('/')[2] : string.Empty) : string.Empty),
                            new XElement("Celular", !string.IsNullOrEmpty(celularPrincipal) ? celularPrincipal : string.Empty),
                            new XElement("Telefono", !string.IsNullOrEmpty(telefonoPrincipal) ? telefonoPrincipal : string.Empty),
                            new XElement("Correo", !string.IsNullOrEmpty(correoPrincipal) ? correoPrincipal : string.Empty)
                            ) : string.Empty),
                 new XElement("Autos", lstAutos != null && lstAutos.Any() && lstAutos.ElementAtOrDefault(0) != null ? lstAutos.Select(x => new XElement("Elementos",
                    new XElement("Marca", !string.IsNullOrEmpty(x.Marca?.Trim()) ? x.Marca.Trim() : string.Empty),
                    new XElement("Modelo", !string.IsNullOrEmpty(x.Modelo?.Trim()) ? x.Modelo.Trim() : string.Empty),
                    new XElement("Anio", x.Anio.HasValue && x.Anio.Value != 0 ? x.Anio : string.Empty),
                    new XElement("Placa", !string.IsNullOrEmpty(x.Placa?.Trim()) ? x.Placa.Trim() : string.Empty)
                 )) : string.Empty),
                new XElement("IndependientePersona", independientePersona ? "X" : string.Empty),
                new XElement("Accionistas", lstAccionista != null && lstAccionista.Any() && lstAccionista.ElementAtOrDefault(0) != null ? lstAccionista.Select(x => new XElement("Elementos",
                    new XElement("Nombre", !string.IsNullOrEmpty(x.Nombre?.Trim()) ? x.Nombre.Trim() : string.Empty),
                    new XElement("Identificacion", !string.IsNullOrEmpty(x.Identificacion?.Trim()) ? x.Identificacion.Trim() : string.Empty)
                )).Take(4) : string.Empty),
                new XElement("EdadPersona", edadPersona > 0 ? edadPersona : string.Empty),
                new XElement("GeneroConyuge", !string.IsNullOrEmpty(sexoConyuge?.Trim()) ? sexoConyuge.Trim() : string.Empty),
                new XElement("OtrosIngresos", !string.IsNullOrEmpty(otrosIngresos?.Trim()) ? otrosIngresos.Trim() : string.Empty),
                new XElement("CargoEmpresa", !string.IsNullOrEmpty(cargoEmpresa?.Trim()) ? cargoEmpresa.Trim() : string.Empty),
                new XElement("NombreEmpresa", !string.IsNullOrEmpty(nombreEmpresa?.Trim()) ? nombreEmpresa.Trim() : string.Empty),
                new XElement("FechaInicioEmpresa", !string.IsNullOrEmpty(fechaInicioEmpresa?.Trim()) ? fechaInicioEmpresa.Trim() : string.Empty),
                new XElement("AntiguedadEmpresa", !string.IsNullOrEmpty(antiguedadEmpresa?.Trim()) ? antiguedadEmpresa.Trim() : string.Empty),
                new XElement("ProvinciaEmpresa", !string.IsNullOrEmpty(provinciaEmpresa?.Trim()) ? provinciaEmpresa.Trim() : string.Empty),
                new XElement("CantonEmpresa", !string.IsNullOrEmpty(cantonEmpresa?.Trim()) ? cantonEmpresa.Trim() : string.Empty),
                new XElement("ParroquiaEmpresa", !string.IsNullOrEmpty(parroquiaEmpresa?.Trim()) ? parroquiaEmpresa.Trim() : string.Empty),
                new XElement("DireccionEmpresa", !string.IsNullOrEmpty(direccionPrincipalEmpresa?.Trim()) ? direccionPrincipalEmpresa.Trim() : string.Empty),
                new XElement("EmpresaConsultada", !string.IsNullOrEmpty(empresaConsultada?.Trim()) ? empresaConsultada.Trim() : string.Empty),
                new XElement("RucConsultado", !string.IsNullOrEmpty(rucConsultado?.Trim()) ? rucConsultado.Trim() : string.Empty),
                new XElement("PersonaConsultada", !string.IsNullOrEmpty(personaConsultada?.Trim()) ? personaConsultada.Trim() : string.Empty),
                new XElement("CedulaConsultada", !string.IsNullOrEmpty(cedulaConsultada?.Trim()) ? cedulaConsultada.Trim() : string.Empty),
                new XElement("NacionalidadEmpresa", !string.IsNullOrEmpty(nacionalidadEmpresa?.Trim()) ? nacionalidadEmpresa.Trim() : string.Empty),
                new XElement("VentasEmpresa", $"${ventasEmpresa.ToString("N", culture)}"),
                new XElement("CostoVentasEmpresa", $"${costoVentasEmpresa.ToString("N", culture)}"),
                new XElement("UtilidadOperacionalEmpresa", $"${utilidadOperacionalEmpresa.ToString("N", culture)}"),
                new XElement("OtrosIngresosNoOperacionalesEmpresa", $"${otrosIngresosNoOperacionalesEmpresa.ToString("N", culture)}"),
                new XElement("TotalIngresoEmpresa", $"${totalIngresoEmpresa.ToString("N", culture)}"),
                new XElement("FechaSolicitud", DateTime.Now.ToString("dd/MM/yyyy"))
                ));
                var dataxml = fn.ToString();
                var dataHtml = GenerarHtml(plantilla, dataxml);
                var dataPdf = ObtenerPdfHTMLMundoFactor(dataHtml);
                return dataPdf;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                throw;
            }
        }

        private string GenerarGraficoED3S(List<Externos.Logica.Equifax.Resultados._WSOGraficarEvolucionDeuda3Sistemas> datos)
        {
            try
            {
                var url = string.Empty;
                if (datos != null && datos.Any())
                {
                    var evolucionDeuda = datos.Select(x => x);
                    var listaFecha = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(x => $"'{x.Key.ToString("dd/MM/yyyy")}'").Take(10).Reverse().ToList();
                    var listaTotalDeuda = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Total)).Take(10).Reverse().ToList();
                    var listaValorVencido = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Vencidos)).Take(10).Reverse().ToList();
                    var qc = new Chart();
                    qc.Width = 600;
                    qc.Height = 250;
                    qc.Config = $@"{{
                        type: 'line',
                        data: {{
                            labels:  [ {string.Join(",", listaFecha)} ],
                            datasets: [
                                {{
                                label: 'Total Deuda Suma 3 Sistemas',
                                fill: false,
                                backgroundColor: 'rgb(54, 162, 235)',
                                borderColor: 'rgb(54, 162, 235)',
                                data: [{string.Join(",", listaTotalDeuda)}],
                                }},
                                {{
                                label: 'Valor Vencido Suma 3 Sistemas',
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                data: [{string.Join(",", listaValorVencido)}],
                                fill: false,
                                }},                            
                            ],
                        }},
                        options: {{
                            scales: {{
                              yAxes: [{{
                                ticks: {{
                                  callback: (val) => {{
                                    return '$' + val.toLocaleString();
                                  }},
                                }}
                              }}]
                            }}                        
                        }}
                    }}";
                    url = qc.GetUrl();
                }
                return url;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return null;
            }
        }

        private string GenerarGraficoED3SFragancias(List<Externos.Logica.Equifax.Resultados._WSOGraficarEvolucionDeuda3Sistemas> datos)
        {
            try
            {
                var url = string.Empty;
                if (datos != null && datos.Any())
                {
                    var evolucionDeuda = datos.Select(x => x);
                    var listaFecha = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(x => $"'{x.Key.ToString("dd/MM/yyyy")}'").Take(10).Reverse().ToList();
                    var listaTotalDeuda = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Total)).Take(10).Reverse().ToList();
                    var listaValorVencido = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Vencidos)).Take(10).Reverse().ToList();
                    var qc = new Chart();
                    qc.Width = 600;
                    qc.Height = 250;
                    qc.Config = $@"{{
                        type: 'line',
                        data: {{
                            labels:  [ {string.Join(",", listaFecha)} ],
                            datasets: [
                                {{
                                label: 'Total Deuda',
                                fill: false,
                                backgroundColor: 'rgb(54, 162, 235)',
                                borderColor: 'rgb(54, 162, 235)',
                                data: [{string.Join(",", listaTotalDeuda)}],
                                }},
                                {{
                                label: 'Valor Vencido',
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                data: [{string.Join(",", listaValorVencido)}],
                                fill: false,
                                }},                            
                            ],
                        }},
                        options: {{
                            scales: {{
                              yAxes: [{{
                                ticks: {{
                                  callback: (val) => {{
                                    return '$' + val.toLocaleString();
                                  }},
                                }}
                              }}]
                            }}                        
                        }}
                    }}";
                    url = qc.GetUrl();
                }
                return url;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return null;
            }
        }

        private string GenerarGraficoTendenciaDeuda(List<Externos.Logica.BuroCredito.Modelos.CreditoRespuesta.TendenciaDeuda> datos)
        {
            try
            {
                var url = string.Empty;
                if (datos != null && datos.Any())
                {
                    var evolucionDeuda = datos.OrderByDescending(x => x.FechaCorte).Select(x => x).Take(24).Reverse();
                    var listaFecha = evolucionDeuda.Select(x => $"'{x.FechaCorte?.ToString("dd/MM/yyyy")}'").ToList();
                    var listaTotalDeuda = evolucionDeuda.Select(x => x.TotalDeuda).ToList();
                    var listaValorVencido = evolucionDeuda.Select(x => x.ValorVencidoTotal).ToList();
                    var qc = new Chart();
                    qc.Width = 600;
                    qc.Height = 250;
                    qc.Config = $@"{{
                        type: 'line',
                        data: {{
                            labels:  [ {string.Join(",", listaFecha)} ],
                            datasets: [
                                {{
                                label: 'Total Deuda',
                                fill: false,
                                backgroundColor: 'rgb(54, 162, 235)',
                                borderColor: 'rgb(54, 162, 235)',
                                data: [{string.Join(",", listaTotalDeuda)}],
                                }},
                                {{
                                label: 'Valor Vencido',
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                data: [{string.Join(",", listaValorVencido)}],
                                fill: false,
                                }},                            
                            ],
                        }},
                        options: {{
                            scales: {{
                              yAxes: [{{
                                ticks: {{
                                  callback: (val) => {{
                                    return '$' + val.toLocaleString();
                                  }},
                                }}
                              }}]
                            }}                        
                        }}
                    }}";
                    url = qc.GetUrl();
                }
                return url;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return null;
            }
        }

        private string GenerarGraficoEvolucionDeuda(List<Externos.Logica.Equifax.Resultados._WsoGraficarEvolucionDeudaExpertoIndumot> datos)
        {
            try
            {
                var url = string.Empty;
                if (datos != null && datos.Any())
                {
                    var evolucionDeuda = datos.Select(x => x);
                    var listaFecha = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(x => $"'{x.Key.ToString("dd/MM/yyyy")}'").Take(10).Reverse().ToList();
                    var listaTotalDeuda = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Total)).Take(10).Reverse().ToList();
                    var listaValorVencido = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Vencidos)).Take(10).Reverse().ToList();
                    var qc = new Chart();
                    qc.Width = 600;
                    qc.Height = 250;
                    qc.Config = $@"{{
                        type: 'line',
                        data: {{
                            labels:  [ {string.Join(",", listaFecha)} ],
                            datasets: [
                                {{
                                label: 'Total Deuda',
                                fill: false,
                                backgroundColor: 'rgb(54, 162, 235)',
                                borderColor: 'rgb(54, 162, 235)',
                                data: [{string.Join(",", listaTotalDeuda)}],
                                }},
                                {{
                                label: 'Valor Vencido',
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                data: [{string.Join(",", listaValorVencido)}],
                                fill: false,
                                }},                            
                            ],
                        }},
                        options: {{
                            scales: {{
                              yAxes: [{{
                                ticks: {{
                                  callback: (val) => {{
                                    return '$' + val.toLocaleString();
                                  }},
                                }}
                              }}]
                            }}                        
                        }}
                    }}";
                    url = qc.GetUrl();
                }
                return url;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return null;
            }
        }

        private string GenerarGraficoEvolucionDeudaCBCooperativa(List<Externos.Logica.Equifax.Resultados._WSOGraficarEvolucionDeudaCBCooperativa> datos)
        {
            try
            {
                var url = string.Empty;
                if (datos != null && datos.Any())
                {
                    var evolucionDeuda = datos.Select(x => x);
                    var listaFecha = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(x => $"'{x.Key.ToString("dd/MM/yyyy")}'").Take(18).Reverse().ToList();
                    var listaTotalDeuda = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Total)).Take(18).Reverse().ToList();
                    var listaValorVencido = evolucionDeuda.GroupBy(x => x.FechaCorte).OrderByDescending(x => x.Key).Select(y => y.Sum(z => z.Vencidos)).Take(18).Reverse().ToList();
                    var qc = new Chart();
                    qc.Width = 600;
                    qc.Height = 250;
                    qc.Config = $@"{{
                        type: 'line',
                        data: {{
                            labels:  [ {string.Join(",", listaFecha)} ],
                            datasets: [
                                {{
                                label: 'Total Deuda',
                                fill: false,
                                backgroundColor: 'rgb(54, 162, 235)',
                                borderColor: 'rgb(54, 162, 235)',
                                data: [{string.Join(",", listaTotalDeuda)}],
                                }},
                                {{
                                label: 'Valor Vencido',
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                data: [{string.Join(",", listaValorVencido)}],
                                fill: false,
                                }},                            
                            ],
                        }},
                        options: {{
                            scales: {{
                              yAxes: [{{
                                ticks: {{
                                  callback: (val) => {{
                                    return '$' + val.toLocaleString();
                                  }},
                                }}
                              }}]
                            }}                        
                        }}
                    }}";
                    url = qc.GetUrl();
                }
                return url;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return null;
            }
        }

        [HttpPost]
        [Route("ObtenerVerificarAccionistas")]
        public async Task<IActionResult> ObtenerVerificarAccionistas(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.Identificacion?.Trim()))
                    throw new Exception("El campo RUC es obligatorio");

                modelo.Identificacion = modelo.Identificacion.Trim();
                Externos.Logica.Balances.Modelos.DatosAccionista r_accionistas = null;

                ViewBag.RutaArchivo = string.Empty;

                var datos = new DatosAccionistasViewModel();
                var busquedaNuevaVerificarAccionistas = false;
                var cacheAccionistas = false;

                if (!_cache)
                {
                    var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);

                    //_logger.LogInformation($"Procesando Fuente Balances identificación: {modelo.Identificacion}");
                    //if (historialTemp.TipoIdentificacion == Dominio.Constantes.General.Cedula || historialTemp.TipoIdentificacion == Dominio.Constantes.General.RucNatural)
                    //{
                    //    _logger.LogInformation($"Procesando Empresas Representante identificación: {modelo.Identificacion}");
                    //    representantesEmpresas = await _balances.GetRepresentantesEmpresasAsync(historialTemp.NombresPersona);
                    //    _logger.LogInformation($"Procesando Empresas Accionistas identificación: {modelo.Identificacion}");
                    //    empresasAccionista = await _balances.GetAccionistaEmpresasAsync(historialTemp.NombresPersona);
                    //    busquedaNoJuridico = true;
                    //}
                    //else if (ValidacionViewModel.ValidarRuc(modelo.Identificacion))
                    //{
                    //    directorioCompania = await _balances.GetDirectorioCompaniasAsync(modelo.Identificacion);
                    //    balancesMultiples = true;
                    //    var infoPeriodos = _configuration.GetSection("AppSettings:PeriodosDinamicos").Get<PeriodosDinamicosViewModel>();
                    //}

                    r_accionistas = _balances.GetAccionistas(modelo.Identificacion);
                    if (r_accionistas != null && !r_accionistas.Detalle.Any())
                        r_accionistas = null;

                    if (r_accionistas == null)
                    {
                        busquedaNuevaVerificarAccionistas = true;
                        var datosDetalleAccionistas = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.Identificacion == modelo.Identificacion && m.TipoFuente == Dominio.Tipos.Fuentes.VerificarAccionistas && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleAccionistas != null)
                        {
                            cacheAccionistas = true;
                            r_accionistas = JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.DatosAccionista>(datosDetalleAccionistas);
                        }
                    }

                    datos = new DatosAccionistasViewModel()
                    {
                        DatosAccionista = r_accionistas,
                        BusquedaNueva = busquedaNuevaVerificarAccionistas,
                    };
                    var datosJson = JsonConvert.SerializeObject(datos);
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathBalances = Path.Combine(pathFuentes, "balancesVerificarAccionistasDemo.json");
                    datos = JsonConvert.DeserializeObject<DatosAccionistasViewModel>(System.IO.File.ReadAllText(pathBalances));
                }

                _logger.LogInformation("Fuente de De No Baja procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente De No Baja. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuenteBalance = new[] { Dominio.Tipos.Fuentes.VerificarAccionistas };

                        var historialesBalance = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuenteBalance.Contains(m.TipoFuente));
                        var historialAccionistas = historialesBalance.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.VerificarAccionistas);
                        //var historialDeNoBaja = await _detallesHistorial.FirstOrDefaultAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.DeNoBaja);
                        var historial = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial);
                        if (historialAccionistas != null)
                        {
                            if (!historialAccionistas.Generado || !busquedaNuevaVerificarAccionistas)
                            {
                                historialAccionistas.IdHistorial = modelo.IdHistorial;
                                historialAccionistas.TipoFuente = Dominio.Tipos.Fuentes.VerificarAccionistas;
                                historialAccionistas.Generado = r_accionistas != null;
                                historialAccionistas.Data = r_accionistas != null ? JsonConvert.SerializeObject(r_accionistas) : null;
                                historialAccionistas.Cache = cacheAccionistas;
                                historialAccionistas.FechaRegistro = DateTime.Now;
                                historialAccionistas.Reintento = true;
                                await _detallesHistorial.ActualizarDetalleHistorialAsync(historialAccionistas);
                                _logger.LogInformation("Historial de la Fuente De No Baja actualizado correctamente");
                            }
                        }
                        else
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.VerificarAccionistas,
                                Generado = datos.DatosAccionista != null,
                                Data = datos.DatosAccionista != null ? JsonConvert.SerializeObject(datos.DatosAccionista) : null,
                                Cache = cacheAccionistas,
                                FechaRegistro = DateTime.Now,
                                Reintento = false
                            });
                            _logger.LogInformation("Historial de la Fuente De No Baja procesado correctamente");
                        }
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteVerificarAccionistas", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteVerificarAccionistas", null);
            }
        }

        private bool GenerarInterviniente(string nombre, string intervinienteNombre)
        {
            try
            {
                if (string.IsNullOrEmpty(nombre))
                    return false;

                if (string.IsNullOrEmpty(intervinienteNombre))
                    return false;

                var listaNombre = new List<bool>();
                var nombreDivido = intervinienteNombre.Split(' ');
                listaNombre.Clear();
                foreach (var item3 in nombreDivido)
                {
                    if (nombre.RemoverCaracteresEspeciales().Contains(item3.ToUpper().RemoverCaracteresEspeciales()))
                        listaNombre.Add(true);
                    else
                        listaNombre.Add(false);
                }
                if (listaNombre.Count(x => x) == nombreDivido.Length)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return false;
            }
        }

        [HttpGet]
        [Route("DescargarCertificado")]
        public IActionResult DescargarCertificado(string ruta)
        {
            try
            {
                if (string.IsNullOrEmpty(ruta))
                    throw new Exception("No se ha definido la ruta del archivo");

                if (System.IO.File.Exists(ruta))
                {
                    var bytesReporte = System.IO.File.ReadAllBytes(ruta);
                    return File(bytesReporte, "application/pdf");
                }
                else
                    throw new Exception($"El archivo con ruta {ruta} ya no existe");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message);
            }
        }

        [HttpPost]
        [Route("ObtenerSolicitudCredito")]
        public async Task<IActionResult> ObtenerSolicitudCredito(int idHistorial)
        {
            try
            {
                if (idHistorial == 0)
                    throw new Exception("El historial ingresado no se encuentra registrado.");

                var calfCredito = await _calificaciones.ReadAsync(m => m, m => m.IdHistorial == idHistorial, null, null, 0, null, true);

                if (calfCredito == null || !calfCredito.Any())
                    throw new Exception("No se encontro evaluación.");

                if (!calfCredito.Any(m => m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Evaluacion))
                    throw new Exception("No se encontro evaluación de Fuentes Externas.");

                var aprobadoEvaluacion = calfCredito.FirstOrDefault(m => m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Evaluacion).Aprobado;
                if (!aprobadoEvaluacion)
                    throw new Exception("No se aprobó evaluación de Fuentes Externas.");

                var evaluacionBuro = calfCredito.Any(m => m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Buro);
                var aprobadoEvaluacionBuro = calfCredito.FirstOrDefault(m => m.TipoCalificacion == Dominio.Tipos.TiposCalificaciones.Buro)?.Aprobado;
                if (aprobadoEvaluacion && evaluacionBuro && aprobadoEvaluacionBuro.HasValue && !aprobadoEvaluacionBuro.Value)
                    throw new Exception("No se aprobó evaluación del Buró de Crédito.");

                var detallesHistorial = await _detallesHistorial.ReadAsync(m => new { m.TipoFuente, m.Data, m.FuenteActiva, m.Historial }, m => m.IdHistorial == idHistorial, null, i => i.Include(t => t.Historial));
                if (!detallesHistorial.Any())
                    throw new Exception("No se han registrado correctamente el detalle del historial.");

                Externos.Logica.SRi.Modelos.Contribuyente r_sri = null;
                var datosSri = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Sri);
                if (datosSri != null)
                    r_sri = datosSri.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(datosSri.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactos = null;
                var datosContactos = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Contactos);
                if (datosContactos != null)
                    contactos = datosContactos.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContactos.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactosEmpresa = null;
                var datosContEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa);
                if (datosContEmpresa != null)
                    contactosEmpresa = datosContEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContEmpresa.Data) : null;

                Externos.Logica.Garancheck.Modelos.RegistroCivil r_regCivil = null;
                var datosRegCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil);
                if (datosRegCivil != null)
                    r_regCivil = datosRegCivil.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(datosRegCivil.Data) : null;

                Externos.Logica.Garancheck.Modelos.Persona r_garancheck = null;
                if (r_regCivil == null)
                {
                    var datosCivilGarancheck = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano);
                    if (datosCivilGarancheck != null)
                        r_garancheck = datosCivilGarancheck.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(datosCivilGarancheck.Data) : null;
                }

                var historial = detallesHistorial.FirstOrDefault().Historial;
                var idPlanEmpresa = historial.IdPlanEmpresa;
                var datos = new SolicitudCreditoViewModel()
                {
                    Sri = r_sri,
                    Contactos = contactos,
                    ContactosEmpresa = contactosEmpresa,
                    RegistroCivil = r_regCivil,
                    TipoJuridico = historial.TipoIdentificacion == Dominio.Constantes.General.RucJuridico,
                    PersonaGarancheck = r_garancheck
                };
                var fileName = Path.Combine("wwwroot", "templates", $"SolicitudCredito.xsl");
                //TREX
                if (idPlanEmpresa == 75) //TREX 75
                {
                    fileName = Path.Combine("wwwroot", "templates", $"SolicitudCredito1315758605001.xsl");
                }
                var plantilla = await System.IO.File.ReadAllTextAsync(fileName);
                var datosReporte = await ObtenerPdfArchivoSolicitudCredito(datos, plantilla);
                return File(datosReporte, "application/pdf");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }

        [HttpPost]
        [Route("ObtenerReporteConsultasMundoFactor")]
        public async Task<IActionResult> ObtenerSolicitudCreditoMundoFactor(int idHistorial)
        {
            try
            {
                if (idHistorial == 0)
                    throw new Exception("El historial ingresado no se encuentra registrado.");

                var detallesHistorial = await _detallesHistorial.ReadAsync(m => new { m.TipoFuente, m.Data, m.FuenteActiva, m.Historial, m.Cache }, m => m.IdHistorial == idHistorial, null, null, null, null, true);
                if (!detallesHistorial.Any())
                    throw new Exception("no se han registrado correctamente el detalle del historial.");

                var cachesri = false;
                Externos.Logica.SRi.Modelos.Contribuyente r_sri = null;
                var datosSri = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Sri);
                if (datosSri != null)
                {
                    r_sri = datosSri.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.SRi.Modelos.Contribuyente>(datosSri.Data) : null;
                    cachesri = datosSri.Cache;
                }

                Externos.Logica.Garancheck.Modelos.RegistroCivil r_regCivil = null;
                var datosRegCivil = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.RegistroCivil);
                if (datosRegCivil != null)
                    r_regCivil = datosRegCivil.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.RegistroCivil>(datosRegCivil.Data) : null;

                Externos.Logica.Garancheck.Modelos.Persona r_garancheck = null;
                var datosGarancheck = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ciudadano);
                if (datosGarancheck != null)
                    r_garancheck = datosGarancheck.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Persona>(datosGarancheck.Data) : null;

                Externos.Logica.ANT.Modelos.Licencia r_ant = null;
                var datosAnt = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Ant);
                if (datosAnt != null)
                    r_ant = datosAnt.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.ANT.Modelos.Licencia>(datosAnt.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactos = null;
                var datosContactos = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Contactos);
                if (datosContactos != null)
                    contactos = datosContactos.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContactos.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactosEmpresa = null;
                var datosContEmpresa = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosEmpresa);
                if (datosContEmpresa != null)
                    contactosEmpresa = datosContEmpresa.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContEmpresa.Data) : null;

                Externos.Logica.IESS.Modelos.Afiliacion r_afiliacion = null;
                var datosAfiliado = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Afiliado);
                if (datosAfiliado != null)
                    r_afiliacion = datosAfiliado.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.IESS.Modelos.Afiliacion>(datosAfiliado.Data) : null;

                Externos.Logica.Balances.Modelos.BalanceEmpresa r_balance = null;
                var datosBalance = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Balance);
                if (datosBalance != null)
                    r_balance = datosBalance.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.BalanceEmpresa>(datosBalance.Data) : null;

                Externos.Logica.Garancheck.Modelos.Personal datosPersonal = null;
                var datosPersonales = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Personales);
                if (datosPersonales != null)
                    datosPersonal = datosPersonales.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Personal>(datosPersonales.Data) : null;

                Externos.Logica.Garancheck.Modelos.Contacto contactosIess = null;
                var datosContIess = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.ContactosIess);
                if (datosContIess != null)
                    contactosIess = datosContIess.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Garancheck.Modelos.Contacto>(datosContIess.Data) : null;

                Externos.Logica.Equifax.Modelos.Resultado r_burocreditoEquifax = null;
                var tipoFuenteBuro = await _historiales.FirstOrDefaultAsync(m => m.TipoFuenteBuro, m => m.Id == idHistorial);
                if (tipoFuenteBuro != null && tipoFuenteBuro == Dominio.Tipos.FuentesBuro.Equifax)
                {
                    var datosBuroEquifax = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.BuroCredito);
                    if (datosBuroEquifax != null)
                        r_burocreditoEquifax = datosBuroEquifax.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Equifax.Modelos.Resultado>(datosBuroEquifax.Data) : null;
                }

                List<Externos.Logica.IESS.Modelos.Afiliado> r_afiliacionAdicional = null;
                var datosAfiliadoAdicional = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.AfiliadoAdicional);
                if (datosAfiliadoAdicional != null)
                    r_afiliacionAdicional = datosAfiliadoAdicional.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.IESS.Modelos.Afiliado>>(datosAfiliadoAdicional.Data) : null;

                Externos.Logica.Balances.Modelos.DirectorioCompania directCompania = null;
                var datosDirectCompanias = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.DirectorioCompanias);
                if (datosDirectCompanias != null)
                    directCompania = datosDirectCompanias.Data != null ? JsonConvert.DeserializeObject<Externos.Logica.Balances.Modelos.DirectorioCompania>(datosDirectCompanias.Data) : null;

                List<Externos.Logica.Balances.Modelos.Accionista> accionistas = null;
                var datosAccionistas = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Accionistas);
                if (datosAccionistas != null)
                    accionistas = datosAccionistas.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.Accionista>>(datosAccionistas.Data) : null;

                List<Externos.Logica.Balances.Modelos.BalanceEmpresa> r_balances = null;
                var datosBalances = detallesHistorial.FirstOrDefault(m => m.TipoFuente == Dominio.Tipos.Fuentes.Balances);
                if (datosBalances != null)
                    r_balances = datosBalances.Data != null ? JsonConvert.DeserializeObject<List<Externos.Logica.Balances.Modelos.BalanceEmpresa>>(datosBalances.Data) : null;

                var datos = new SolicitudCreditoMundoFactorViewModel()
                {
                    Sri = r_sri,
                    Ciudadano = r_garancheck,
                    Ant = r_ant,
                    Contactos = contactos,
                    ContactosEmpresa = contactosEmpresa,
                    RegistroCivil = r_regCivil,
                    Afiliado = r_afiliacion,
                    Balance = r_balance,
                    Personales = datosPersonal,
                    ContactosIess = contactosIess,
                    BuroCreditoEquifax = r_burocreditoEquifax,
                    AfiliadoAdicional = r_afiliacionAdicional,
                    DirectorioCompania = directCompania,
                    Accionistas = accionistas,
                    Balances = r_balances
                };

                var fileName = string.Empty;
                var tipoIdentificacion = await _historiales.FirstOrDefaultAsync(m => m.TipoIdentificacion, m => m.Id == idHistorial, null, null, true);
                if (!string.IsNullOrEmpty(tipoIdentificacion?.Trim()))
                {
                    if (tipoIdentificacion.Trim() == Dominio.Constantes.General.Cedula || tipoIdentificacion.Trim() == Dominio.Constantes.General.RucNatural)
                        fileName = Path.Combine("wwwroot", "templates", "ReporteMundoFactorPersonaNatural.xsl");
                    else if (tipoIdentificacion.Trim() == Dominio.Constantes.General.RucJuridico || tipoIdentificacion.Trim() == Dominio.Constantes.General.SectorPublico)
                        fileName = Path.Combine("wwwroot", "templates", "ReporteMundoFactor.xsl");
                }
                else
                    throw new Exception($"No se Encontró el Tipo de Identificación para el IdHistorial: {idHistorial}.");

                if (string.IsNullOrEmpty(fileName?.Trim()))
                    throw new Exception($"No se Encontró la Ruta del Archivo: {idHistorial}.");

                var plantilla = await System.IO.File.ReadAllTextAsync(fileName);
                var datosReporte = await ObtenerPdfArchivoSolicitudMundoFactor(datos, plantilla);
                return File(datosReporte, "application/pdf");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }

        private async Task<byte[]> ObtenerPdfArchivoSolicitudCredito(SolicitudCreditoViewModel datos, string plantilla)
        {
            try
            {
                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var culture = System.Globalization.CultureInfo.CurrentCulture;
                var razonSocial = string.Empty;
                var identificacion = string.Empty;
                var regimen = string.Empty;
                var actividadEconomica = string.Empty;
                var direccion = string.Empty;
                var provincia = string.Empty;
                var ciudad = string.Empty;
                var nombreComercial = string.Empty;
                var nombreRep = string.Empty;
                var cedulaRep = string.Empty;
                var correoRep = string.Empty;

                if (datos.Sri != null)
                {
                    //Datos sri
                    if (!string.IsNullOrEmpty(datos.Sri.RazonSocial)) razonSocial = datos.Sri.RazonSocial;
                    if (!string.IsNullOrEmpty(datos.Sri.RUC)) identificacion = datos.Sri.RUC;
                    if (!string.IsNullOrEmpty(datos.Sri.Clase)) regimen = datos.Sri.Clase;
                    if (!string.IsNullOrEmpty(datos.Sri.Actividad)) actividadEconomica = datos.Sri.Actividad;
                    if (!string.IsNullOrEmpty(datos.Sri.NombreComercial)) nombreComercial = datos.Sri.NombreComercial;

                    //Representante legal
                    if (!string.IsNullOrEmpty(datos.Sri.AgenteRepresentante)) nombreRep = datos.Sri.AgenteRepresentante;
                    if (!string.IsNullOrEmpty(datos.Sri.RepresentanteLegal)) cedulaRep = datos.Sri.RepresentanteLegal;

                    if (datos.Sri.Establecimientos != null)
                    {
                        direccion = datos.Sri.Establecimientos.Take(1).Select(x => x.Value.Direccion).FirstOrDefault();
                        provincia = datos.Sri.Establecimientos.Select(x => x.Value.Direccion.Split('/')[0]).FirstOrDefault();
                        ciudad = datos.Sri.Establecimientos.Select(x => x.Value.Direccion.Split('/')[1]).FirstOrDefault();
                    }
                }

                if (datos.RegistroCivil != null)
                {
                    if (string.IsNullOrEmpty(razonSocial) && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre)) razonSocial = datos.RegistroCivil.Nombre;
                    if (string.IsNullOrEmpty(identificacion) && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula)) identificacion = datos.RegistroCivil.Cedula;
                }
                else if (datos.PersonaGarancheck != null)
                {
                    if (string.IsNullOrEmpty(razonSocial) && !string.IsNullOrEmpty(datos.PersonaGarancheck.Nombres)) razonSocial = datos.PersonaGarancheck.Nombres;
                    if (string.IsNullOrEmpty(identificacion) && !string.IsNullOrEmpty(datos.PersonaGarancheck.Identificacion)) identificacion = datos.PersonaGarancheck.Identificacion;
                }

                var telefono = string.Empty;
                var celular = string.Empty;
                if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null && datos.ContactosEmpresa.Telefonos.Any())
                {
                    telefono = datos.ContactosEmpresa.Telefonos.FirstOrDefault(x => !x.StartsWith("09") && !x.StartsWith("593") && !x.StartsWith("+593"));
                    celular = datos.ContactosEmpresa.Telefonos.FirstOrDefault(x => x.StartsWith("09") || x.StartsWith("593") || x.StartsWith("+593"));
                }
                else if (datos.Contactos != null && datos.Contactos.Telefonos != null && datos.Contactos.Telefonos.Any())
                {
                    telefono = datos.Contactos.Telefonos.FirstOrDefault(x => !x.StartsWith("09") && !x.StartsWith("593") && !x.StartsWith("+593"));
                    celular = datos.Contactos.Telefonos.FirstOrDefault(x => x.StartsWith("09") || x.StartsWith("593") || x.StartsWith("+593"));
                }

                var direccionCivil = string.Empty;
                if (datos.ContactosEmpresa != null && datos.ContactosEmpresa.Direcciones != null && datos.ContactosEmpresa.Direcciones.Any())
                    direccionCivil = datos.ContactosEmpresa.Direcciones.FirstOrDefault();
                if (datos.Contactos != null && datos.Contactos.Direcciones != null && datos.Contactos.Direcciones.Any())
                    direccionCivil = datos.Contactos.Direcciones.FirstOrDefault();

                var fn = new XDocument();
                fn.Add(new XElement("Reporte",
                        //new XElement("LogoGarancheck", "./wwwroot/images/logogaranchecknuevo.png"),
                        new XElement("LogoEmpresa", usuarioActual.Empresa != null && !string.IsNullOrEmpty(usuarioActual.Empresa.RutaLogo) ? $"./wwwroot/app/logos/{usuarioActual.Empresa.RutaLogo}" : ""),
                        new XElement("NombreEmpresa", usuarioActual.Empresa != null && !string.IsNullOrEmpty(usuarioActual.Empresa.RazonSocial) ? usuarioActual.Empresa.RazonSocial : string.Empty),
                        new XElement("IdentificacionEmpresa", usuarioActual.Empresa != null && !string.IsNullOrEmpty(usuarioActual.Empresa.Identificacion) ? usuarioActual.Empresa.Identificacion : string.Empty),
                        new XElement("identificacion", identificacion),
                        datos.TipoJuridico ? new XElement("infoEmpresa",
                            new XElement("razonSocial", !string.IsNullOrEmpty(razonSocial) ? razonSocial : string.Empty),
                            new XElement("rucEmpresa", identificacion),
                             new XElement("regimen", regimen),
                             new XElement("actividadEconomica", actividadEconomica),
                             new XElement("direccionMatriz", direccion),
                             new XElement("provincia", provincia),
                             new XElement("ciudad", ciudad),
                             new XElement("telefono", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null ? datos.ContactosEmpresa.Telefonos.FirstOrDefault(x => !x.StartsWith("09") && !x.StartsWith("593") && !x.StartsWith("+593")) : string.Empty),
                             new XElement("celular", datos.ContactosEmpresa != null && datos.ContactosEmpresa.Telefonos != null ? datos.ContactosEmpresa.Telefonos.FirstOrDefault(x => x.StartsWith("09") || x.StartsWith("593") || x.StartsWith("+593")) : string.Empty),
                             new XElement("nombreComercial", nombreComercial)
                        ) : new XElement("infoEmpresa", string.Empty),
                       !datos.TipoJuridico ? new XElement("infoPersona",
                            new XElement("nombrePersona", !string.IsNullOrEmpty(razonSocial) ? razonSocial : string.Empty),
                            new XElement("identificacion", identificacion),
                             new XElement("regimen", regimen),
                             new XElement("actividadEconomica", actividadEconomica),
                             new XElement("direccionMatriz", !string.IsNullOrEmpty(direccion?.Trim()) ? direccion.Trim() : !string.IsNullOrEmpty(direccionCivil?.Trim()) ? direccionCivil.Trim() : string.Empty),
                             new XElement("provincia", provincia),
                             new XElement("ciudad", ciudad),
                             new XElement("telefono", !string.IsNullOrEmpty(telefono) ? telefono : string.Empty),
                             new XElement("celular", !string.IsNullOrEmpty(celular) ? celular : string.Empty),
                             new XElement("nombreComercial", nombreComercial)
                        ) : new XElement("infoPersona", string.Empty),
                        datos.TipoJuridico ? new XElement("infoRepresentante",
                            new XElement("nombreRep", nombreRep),
                            new XElement("cedulaRep", cedulaRep),
                            new XElement("correoRep", datos.Contactos != null && !string.IsNullOrEmpty(datos.Contactos.Correos.FirstOrDefault()) ? datos.Contactos.Correos.FirstOrDefault() : string.Empty),
                            new XElement("telfRep", datos.Contactos != null && !string.IsNullOrEmpty(datos.Contactos.Telefonos.FirstOrDefault()) ? datos.Contactos.Telefonos.FirstOrDefault() : string.Empty)
                        ) : new XElement("infoRepresentante", string.Empty),
                        new XElement("fechaSolicitud", $"{DateTime.Now.ToString("dd/MM/yyyy")} a las {DateTime.Now.ToString("hh:mm:ss tt")}")
                ));

                var dataxml = fn.ToString();
                var dataHtml = GenerarHtml(plantilla, dataxml);
                var dataPdf = ObtenerPdfHTML(dataHtml);
                return dataPdf;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                throw;
            }
        }
        #endregion Reporte PDF

        #region Otros
        [HttpPost]
        [Route("PermisoBuroCredito")]
        public async Task<IActionResult> PermisoBuroCredito()
        {
            try
            {
                int idUsuario = 0;
                int idEmpresa = 0;
                idUsuario = User.GetUserId<int>();
                var resultadoPermiso = Dominio.Tipos.EstadosPlanesBuroCredito.Desconocido;
                var numeroHistorialBuro = 0;
                var numeroConsultasBuro = 0;

                if (idUsuario == 0)
                    throw new Exception("No se encontró el usuario.");

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva actualizar la página por favor.");
                idEmpresa = usuarioActual.IdEmpresa;

                if (idEmpresa == 0)
                    throw new Exception("No se encontró la empresa.");

                var modeloCooperativas = false;
                var dataPlanBuro = await _planesBuroCredito.FirstOrDefaultAsync(s => s, s => s.IdEmpresa == idEmpresa && s.Estado == Dominio.Tipos.EstadosPlanesBuroCredito.Activo);
                if (dataPlanBuro != null)
                {
                    numeroConsultasBuro = dataPlanBuro.NumeroMaximoConsultas;
                    modeloCooperativas = dataPlanBuro.ModeloCooperativas;
                    var dataUsuario = await _accesos.AnyAsync(s => s.IdUsuario == idUsuario && s.Estado == Dominio.Tipos.EstadosAccesos.Activo && s.Acceso == Dominio.Tipos.TiposAccesos.BuroCredito);
                    if (!dataUsuario)
                        resultadoPermiso = Dominio.Tipos.EstadosPlanesBuroCredito.Bloqueado;

                    numeroHistorialBuro = await _historiales.CountAsync(s => s.IdPlanBuroCredito == dataPlanBuro.Id && s.Fecha.Month == DateTime.Today.Month && s.Fecha.Year == DateTime.Today.Year);
                    if (resultadoPermiso == 0)
                    {
                        resultadoPermiso = Dominio.Tipos.EstadosPlanesBuroCredito.Activo;

                        if (dataPlanBuro.BloquearConsultas)
                            resultadoPermiso = dataPlanBuro.NumeroMaximoConsultas > numeroHistorialBuro ? Dominio.Tipos.EstadosPlanesBuroCredito.Activo : Dominio.Tipos.EstadosPlanesBuroCredito.Inactivo;
                    }

                    if (dataPlanBuro.ConsultasCompartidas && dataPlanBuro.NumeroMaximoConsultasCompartidas.HasValue && dataPlanBuro.NumeroMaximoConsultasCompartidas.Value > 0)
                    {
                        var numeroHistorialBuroComp = await _historiales.CountAsync(s => s.IdPlanBuroCredito == dataPlanBuro.Id && s.Fecha.Month == DateTime.Today.Month && s.Fecha.Year == DateTime.Today.Year && s.ConsultaBuroCompartido);
                        if ((resultadoPermiso == Dominio.Tipos.EstadosPlanesBuroCredito.Inactivo || resultadoPermiso == Dominio.Tipos.EstadosPlanesBuroCredito.Bloqueado) &&
                            numeroHistorialBuroComp < dataPlanBuro.NumeroMaximoConsultasCompartidas)
                            resultadoPermiso = Dominio.Tipos.EstadosPlanesBuroCredito.Activo;

                        numeroConsultasBuro += dataPlanBuro.NumeroMaximoConsultasCompartidas.Value;
                    }
                }

                return Ok(new
                {
                    IdEmpresa = idEmpresa,
                    ResultadoPermiso = (short)resultadoPermiso,
                    NumeroConsultasRealizadas = numeroHistorialBuro,
                    NumeroConsultasContratadas = numeroConsultasBuro,
                    ModeloIndumot = usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990304211001,
                    ModeloBCapital = usuarioActual.Empresa.Identificacion == Dominio.Constantes.Clientes.Cliente1090105244001,
                    ModeloCooperativas = modeloCooperativas,
                    ModeloBLitoral = usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0990981930001,
                    ModeloCoopTena = usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente1590001585001,
                    ModeloBancoDMiro = usuarioActual.IdEmpresa == Dominio.Constantes.Clientes.IdCliente0992701374001
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(CalificacionController), StatusCodes.Status500InternalServerError);
            }
        }

        [HttpPost]
        [Route("ObtenerFechaExpedicionHistorial")]
        public async Task<IActionResult> ObtenerFechaExpedicionHistorial(int idHistorial)
        {
            try
            {
                if (idHistorial == 0)
                    throw new Exception("El historial ingresado no se encuentra registrado.");

                if (!await _historiales.AnyAsync(m => m.Id == idHistorial))
                    throw new Exception("no se han registrado correctamente el historial.");

                var fechaExpedicionCedula = string.Empty;

                var historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == idHistorial, null, null, true);
                if (historialTemp != null && !string.IsNullOrWhiteSpace(historialTemp.FechaExpedicionCedula?.Trim()))
                    fechaExpedicionCedula = historialTemp.FechaExpedicionCedula.Trim();
                else
                    fechaExpedicionCedula = null;

                return Ok(fechaExpedicionCedula);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }
        #endregion Otros

        #region HistorialFlexiplast
        [HttpPost]
        [Route("GuardarHistorialProveedorInternacional")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> GuardarHistorialProveedorInternacional(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han ingresado los datos de la consulta.");

                if (string.IsNullOrEmpty(modelo.ProveedorInternacional?.Trim()))
                    throw new Exception("El Proveedor Internacional se encuentra vacío.");

                var idUsuario = User.GetUserId<int>();

                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                if (!usuarioActual.Empresa.PlanesEmpresas.Any(m => m.Estado == Dominio.Tipos.EstadosPlanesEmpresas.Activo))
                    throw new Exception("No es posible realizar esta consulta ya que no tiene planes activos vigentes.");

                var idPlan = 0;

                var planEmpresaRucs = usuarioActual.Empresa.PlanesEmpresas.FirstOrDefault(m => (m.NumeroConsultasRuc > 0 || (m.NumeroConsultas.HasValue && m.NumeroConsultas.Value > 0)) && m.Estado == Dominio.Tipos.EstadosPlanesEmpresas.Activo);
                if (planEmpresaRucs == null)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene un plan activo para RUCs naturales o jurídicos.");

                if (planEmpresaRucs.BloquearConsultas)
                {
                    if (planEmpresaRucs.PlanDemostracion)
                    {
                        if (planEmpresaRucs.NumeroConsultas.HasValue && planEmpresaRucs.NumeroConsultas.Value > 0)
                        {
                            var historialUnificado = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaRucs.Id);
                            if (historialUnificado >= planEmpresaRucs.NumeroConsultas)
                                throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas ({planEmpresaRucs.NumeroConsultas}) en su plan de demostración.");
                        }
                        else
                            throw new Exception("El plan contratado no tiene definido un número de consultas");
                    }
                    else
                    {
                        if (planEmpresaRucs.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Separado)
                        {
                            var fechaActual = DateTime.Today;
                            var historialCedulas = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaRucs.Id && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year && (m.TipoIdentificacion == Dominio.Constantes.General.RucNatural || m.TipoIdentificacion == Dominio.Constantes.General.RucJuridico || m.TipoIdentificacion == Dominio.Constantes.General.SectorPublico));
                            if (historialCedulas >= planEmpresaRucs.NumeroConsultasRuc)
                                throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas para RUCs ({planEmpresaRucs.NumeroConsultasRuc}) en su plan.");
                        }
                        else if (planEmpresaRucs.TipoPlan == Dominio.Tipos.PlanesIdentificaciones.Unificado)
                        {
                            if (planEmpresaRucs.NumeroConsultas.HasValue && planEmpresaRucs.NumeroConsultas.Value > 0)
                            {
                                var fechaActual = DateTime.Today;
                                var historialUnificado = await _historiales.CountAsync(m => m.IdPlanEmpresa == planEmpresaRucs.Id && m.Fecha.Month == fechaActual.Month && m.Fecha.Year == fechaActual.Year);
                                if (historialUnificado >= planEmpresaRucs.NumeroConsultas)
                                    throw new Exception($"No es posible realizar esta consulta ya que alcanzó el límite máximo de consultas ({planEmpresaRucs.NumeroConsultas}) en su plan.");
                            }
                            else
                                throw new Exception("El plan contratado no tiene definido un número de consultas");
                        }
                        else
                            throw new Exception("El plan contratado no tiene definido un tipo de consultas");
                    }
                }
                idPlan = planEmpresaRucs.Id;

                if (idPlan == 0)
                    throw new Exception("No es posible realizar esta consulta ya que no tiene planes vigentes.");

                var ip = HttpContext.Connection.RemoteIpAddress?.ToString();
                _logger.LogInformation($"Procesando historial de usuario: {idUsuario}. IP: {ip}.");

                _logger.LogInformation("Registrando historial de usuarios en base de datos");
                var idHistorial = await _historiales.GuardarHistorialProveedorInternacionalAsync(new Historial()
                {
                    IdUsuario = idUsuario,
                    DireccionIp = ip?.Trim().ToUpper(),
                    Identificacion = "N/A",
                    TipoIdentificacion = Dominio.Constantes.General.PrdInternacionalFlexiplast,
                    RazonSocialEmpresa = modelo.ProveedorInternacional.Trim().ToUpper(),
                    Periodo = 0,
                    Fecha = DateTime.Now,
                    TipoConsulta = Dominio.Tipos.Consultas.Web,
                    ParametrosBusqueda = JsonConvert.SerializeObject(new { ProveedorInternacional = modelo.ProveedorInternacional.Trim() }),
                    IdPlanEmpresa = idPlan,
                });
                _logger.LogInformation($"Registro de historial exitoso. Id Historial: {idHistorial}");

                if (usuarioActual.Empresa.VistaPersonalizada)
                {
                    await _parametrosClientesHistoriales.GuardarParametroClienteHistorialAsync(new ParametroClienteHistorial()
                    {
                        IdHistorial = idHistorial,
                        Valor = true.ToString(),
                        Parametro = Dominio.Tipos.ParametrosClientes.ProveedorInternacional,
                        FechaCreacion = DateTime.Now,
                        UsuarioCreacion = usuarioActual.Id
                    });
                    await _parametrosClientesHistoriales.GuardarParametroClienteHistorialAsync(new ParametroClienteHistorial()
                    {
                        IdHistorial = idHistorial,
                        Valor = modelo.ProveedorInternacional.Trim().ToUpper(),
                        Parametro = Dominio.Tipos.ParametrosClientes.ProveedorInternacional,
                        FechaCreacion = DateTime.Now,
                        UsuarioCreacion = usuarioActual.Id
                    });
                }
                return Json(new { idHistorial, ProveedorInternacional = modelo.ProveedorInternacional.Trim() });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return Problem(ex.Message, nameof(PrincipalController), StatusCodes.Status500InternalServerError);
            }
        }

        [HttpPost]
        [Route("ObtenerUafeProveedorInternacional")]
        public async Task<IActionResult> ObtenerUafeProveedorInternacional(ReporteViewModel modelo)
        {
            try
            {
                if (modelo == null)
                    throw new Exception("No se han enviado parámetros para obtener el reporte");

                if (string.IsNullOrEmpty(modelo.ProveedorInternacional?.Trim()))
                    throw new Exception("El campo Proveedor Internacional es obligatorio");

                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                Externos.Logica.UAFE.Modelos.Resultado r_onu = null;
                Externos.Logica.UAFE.Modelos.Resultado r_onu2206 = null;
                Externos.Logica.UAFE.Modelos.ResultadoOfac r_ofac = null;
                var busquedaNuevaOnu = false;
                var busquedaNuevaOnu2206 = false;
                var busquedaNuevaOfac = false;
                var cacheOnu = false;
                var cacheOnu2206 = false;
                var cacheOfac = false;
                string mensajeErrorOnu = null;
                string mensajeErrorOnu2206 = null;
                string mensajeErrorOfac = null;
                var busquedaJuridica = false;

                var datos = new UafeViewModel();
                Historial historialTemp = null;
                if (!_cache)
                {
                    try
                    {
                        _logger.LogInformation($"Procesando Fuente UAFE identificación: {modelo.Identificacion}");
                        historialTemp = await _historiales.FirstOrDefaultAsync(m => m, m => m.Id == modelo.IdHistorial, null, null, true);
                        if (historialTemp != null)
                        {
                            r_onu = await _uafe.GetRespuestaAsync(historialTemp.RazonSocialEmpresa, new[] { historialTemp.RazonSocialEmpresa });
                            r_onu2206 = _uafe.GetInformacionOnu2206(historialTemp.RazonSocialEmpresa, historialTemp.RazonSocialEmpresa);
                            r_ofac = _uafe.GetInformacionOfac(historialTemp.NombresPersona, historialTemp.IdentificacionSecundaria, historialTemp.RazonSocialEmpresa, historialTemp.Identificacion);
                            busquedaJuridica = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Error al consultar fuente UAFE con identificación {modelo.Identificacion}: {ex.Message}");
                    }

                    var aplicaBusquedaCacheOnu = true;
                    if (datos.ONU != null && datos.ONU.Individuo == null && datos.ONU.Entidad == null && !string.IsNullOrEmpty(datos.ONU.MensajeError))
                    {
                        aplicaBusquedaCacheOnu = false;
                        mensajeErrorOnu = datos.ONU.MensajeError;
                    }

                    var aplicaBusquedaCacheOnu2206 = true;
                    if (datos.ONU2206 != null && datos.ONU2206.Individuo == null && datos.ONU2206.Entidad == null && !string.IsNullOrEmpty(datos.ONU2206.MensajeError))
                    {
                        aplicaBusquedaCacheOnu2206 = false;
                        mensajeErrorOnu2206 = datos.ONU2206.MensajeError;
                    }

                    if (r_onu == null && aplicaBusquedaCacheOnu)
                    {
                        busquedaNuevaOnu = true;
                        var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.IdUsuario == idUsuario && m.Historial.RazonSocialEmpresa == modelo.ProveedorInternacional && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleUafe != null)
                        {
                            cacheOnu = true;
                            r_onu = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.Resultado>(datosDetalleUafe);
                        }
                    }

                    if (r_onu2206 == null && aplicaBusquedaCacheOnu2206)
                    {
                        busquedaNuevaOnu2206 = true;
                        var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.IdUsuario == idUsuario && m.Historial.RazonSocialEmpresa == modelo.ProveedorInternacional && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu2206 && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleUafe != null)
                        {
                            cacheOnu2206 = true;
                            r_onu2206 = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.Resultado>(datosDetalleUafe);
                        }
                    }

                    var aplicaBusquedaCacheOfac = true;
                    if (datos.OFAC != null && string.IsNullOrEmpty(datos.OFAC.ContenidoIndividuo) && string.IsNullOrEmpty(datos.OFAC.ContenidoEmpresa) && !string.IsNullOrEmpty(datos.OFAC.MensajeError))
                    {
                        aplicaBusquedaCacheOfac = false;
                        mensajeErrorOfac = datos.OFAC.MensajeError;
                    }

                    if (r_ofac == null && aplicaBusquedaCacheOfac)
                    {
                        busquedaNuevaOfac = true;
                        var datosDetalleUafe = await _detallesHistorial.FirstOrDefaultAsync(m => m.Data, m => m.Historial.IdUsuario == idUsuario && m.Historial.RazonSocialEmpresa == modelo.ProveedorInternacional && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOfac && m.Generado && !m.Cache, o => o.OrderByDescending(m => m.Id));
                        if (datosDetalleUafe != null)
                        {
                            cacheOfac = true;
                            r_ofac = JsonConvert.DeserializeObject<Externos.Logica.UAFE.Modelos.ResultadoOfac>(datosDetalleUafe);
                        }
                    }

                    datos = new UafeViewModel()
                    {
                        HistorialCabecera = historialTemp,
                        ONU = r_onu,
                        ONU2206 = r_onu2206,
                        OFAC = r_ofac,
                        BusquedaNuevaOnu = busquedaNuevaOnu,
                        BusquedaNuevaOnu2206 = busquedaNuevaOnu2206,
                        BusquedaNuevaOfac = busquedaNuevaOfac,
                        MensajeErrorOnu = mensajeErrorOnu,
                        MensajeErrorOnu2206 = mensajeErrorOnu2206,
                        MensajeErrorOfac = mensajeErrorOfac,
                        BusquedaJuridica = busquedaJuridica,
                        AccesoOnu = true,
                        AccesoOfac = true
                    };
                }
                else
                {
                    var pathBase = System.IO.Path.Combine("wwwroot", "data");
                    var pathFuentes = System.IO.Path.Combine(pathBase, "Fuentes");
                    var pathLegal = Path.Combine(pathFuentes, "uafeDemo.json");
                    var archivo = System.IO.File.ReadAllText(pathLegal);
                    datos = JsonConvert.DeserializeObject<UafeViewModel>(archivo);
                    datos.BusquedaJuridica = true;
                    datos.AccesoOnu = true;
                    datos.AccesoInterpol = true;
                    datos.AccesoOfac = true;
                }

                if (datos.ONU != null && datos.ONU.Individuo == null && datos.ONU.Entidad == null)
                    datos.ONU = null;

                if (datos.ONU2206 != null && datos.ONU2206.Individuo == null && datos.ONU2206.Entidad == null)
                    datos.ONU2206 = null;

                if (datos.OFAC != null && string.IsNullOrEmpty(datos.OFAC.ContenidoIndividuo) && string.IsNullOrEmpty(datos.OFAC.ContenidoEmpresa))
                    datos.OFAC = null;

                _logger.LogInformation("Fuente de UAFE procesada correctamente");
                _logger.LogInformation($"Procesando registro de historiales de la fuente UAFE. Id Historial: {modelo.IdHistorial}");

                try
                {
                    if (modelo.IdHistorial > 0)
                    {
                        var fuentesUafe = new[] { Dominio.Tipos.Fuentes.UafeOnu, Dominio.Tipos.Fuentes.UafeOnu2206, Dominio.Tipos.Fuentes.UafeOfac };
                        var historialesUafe = await _detallesHistorial.ReadAsync(m => m, m => m.IdHistorial == modelo.IdHistorial && fuentesUafe.Contains(m.TipoFuente));
                        var historialOnu = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu);
                        var historialOnu2206 = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOnu2206);
                        var historialOfac = historialesUafe.FirstOrDefault(m => m.IdHistorial == modelo.IdHistorial && m.TipoFuente == Dominio.Tipos.Fuentes.UafeOfac);

                        if (historialOnu != null && (!historialOnu.Generado || !busquedaNuevaOnu))
                        {
                            historialOnu.IdHistorial = modelo.IdHistorial;
                            historialOnu.TipoFuente = Dominio.Tipos.Fuentes.UafeOnu;
                            historialOnu.Generado = datos.ONU != null;
                            historialOnu.Data = datos.ONU != null ? JsonConvert.SerializeObject(datos.ONU) : null;
                            historialOnu.Cache = cacheOnu;
                            historialOnu.FechaRegistro = DateTime.Now;
                            historialOnu.Reintento = true;
                            historialOnu.DataError = mensajeErrorOnu;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialOnu);
                            _logger.LogInformation("Historial de la Fuente UAFE ONU actualizado correctamente");
                        }
                        else if (historialOnu == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.UafeOnu,
                                Generado = datos.ONU != null,
                                Data = datos.ONU != null ? JsonConvert.SerializeObject(datos.ONU) : null,
                                Cache = cacheOnu,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = mensajeErrorOnu
                            });
                        }

                        if (historialOnu2206 != null && (!historialOnu2206.Generado || !busquedaNuevaOnu2206))
                        {
                            historialOnu2206.IdHistorial = modelo.IdHistorial;
                            historialOnu2206.TipoFuente = Dominio.Tipos.Fuentes.UafeOnu2206;
                            historialOnu2206.Generado = datos.ONU2206 != null;
                            historialOnu2206.Data = datos.ONU2206 != null ? JsonConvert.SerializeObject(datos.ONU2206) : null;
                            historialOnu2206.Cache = cacheOnu2206;
                            historialOnu2206.FechaRegistro = DateTime.Now;
                            historialOnu2206.Reintento = true;
                            historialOnu2206.DataError = mensajeErrorOnu2206;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialOnu2206);
                            _logger.LogInformation("Historial de la Fuente UAFE ONU 2206 actualizado correctamente");
                        }
                        else if (historialOnu2206 == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.UafeOnu2206,
                                Generado = datos.ONU2206 != null,
                                Data = datos.ONU2206 != null ? JsonConvert.SerializeObject(datos.ONU2206) : null,
                                Cache = cacheOnu2206,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = mensajeErrorOnu2206
                            });
                        }

                        if (historialOfac != null && (!historialOfac.Generado || !busquedaNuevaOfac))
                        {
                            historialOfac.IdHistorial = modelo.IdHistorial;
                            historialOfac.TipoFuente = Dominio.Tipos.Fuentes.UafeOfac;
                            historialOfac.Generado = datos.OFAC != null;
                            historialOfac.Data = datos.OFAC != null ? JsonConvert.SerializeObject(datos.OFAC) : null;
                            historialOfac.Cache = cacheOfac;
                            historialOfac.FechaRegistro = DateTime.Now;
                            historialOfac.Reintento = true;
                            historialOfac.DataError = mensajeErrorOfac;
                            await _detallesHistorial.ActualizarDetalleHistorialAsync(historialOfac);
                            _logger.LogInformation("Historial de la Fuente UAFE OFAC actualizado correctamente");
                        }
                        else if (historialOfac == null)
                        {
                            await _detallesHistorial.GuardarDetalleHistorialAsync(new DetalleHistorial()
                            {
                                IdHistorial = modelo.IdHistorial,
                                TipoFuente = Dominio.Tipos.Fuentes.UafeOfac,
                                Generado = datos.OFAC != null,
                                Data = datos.OFAC != null ? JsonConvert.SerializeObject(datos.OFAC) : null,
                                Cache = cacheOfac,
                                FechaRegistro = DateTime.Now,
                                Reintento = false,
                                DataError = mensajeErrorOfac
                            });
                        }

                        _logger.LogInformation("Historial de la Fuente UAFE procesado correctamente");
                    }
                    else
                        throw new Exception("El Id del Historial no se ha generado correctamente");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ex.Message);
                }
                return PartialView("../Shared/Fuentes/_FuenteUAFE", datos);
            }
            catch (Exception e)
            {
                _logger.LogError(e, e.Message);
                return PartialView("../Shared/Fuentes/_FuenteUAFE", null);
            }
        }

        private async Task<byte[]> ObtenerPdfArchivoFlexiPlast(BalanceViewModel datos, string plantilla)
        {
            try
            {
                var idUsuario = User.GetUserId<int>();
                var usuarioActual = await _usuarios.ObtenerInformacionUsuarioAsync(idUsuario);
                if (usuarioActual == null)
                    throw new Exception("Se ha terminado la sesión. Vuelva a actualizar la página por favor...");

                var fn = new XDocument();
                fn.Add(new XElement("Reporte",
                        //new XElement("LogoGarancheck", "./wwwroot/images/logogaranchecknuevo.png"),
                        new XElement("LogoEmpresa", usuarioActual.Empresa != null && !string.IsNullOrEmpty(usuarioActual.Empresa.RutaLogo) ? $"./wwwroot/app/logos/{usuarioActual.Empresa.RutaLogo}" : ""),
                        new XElement("RazonSocial", !string.IsNullOrEmpty(datos.RazonSocial?.Trim()) ? datos.RazonSocial.Trim() : "N/A"),
                        new XElement("UafeOnuPersona", datos.ONU != null && datos.ONU.Individuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Id", datos.ONU.Individuo.Dataid),
                            new XElement("Referencia", datos.ONU.Individuo.ReferenceNumber),
                            //new XElement("Nombres", string.Join(" ", new[] { datos.ONU.Individuo.FourthName, datos.ONU.Individuo.ThirdName, datos.ONU.Individuo.SecondName, datos.ONU.Individuo.FirstName }.Where(m => !string.IsNullOrEmpty(m)).ToArray())),
                            new XElement("Nacionalidad", datos.ONU.Individuo.Nationality != null && datos.ONU.Individuo.Nationality.Value != null && datos.ONU.Individuo.Nationality.Value.Any(m => !string.IsNullOrEmpty(m)) ? datos.ONU.Individuo.Nationality.Value.FirstOrDefault(m => !string.IsNullOrEmpty(m)) : string.Empty),
                            new XElement("Tipo", datos.ONU.Individuo.UnListType),
                            new XElement("Registro", datos.ONU.Individuo.ListedOn),
                            new XElement("Comentarios", datos.ONU.Individuo.Comments1),
                            new XElement("Actualizaciones", datos.ONU.Individuo.LastDayUpdated != null && datos.ONU.Individuo.LastDayUpdated.Value != null && datos.ONU.Individuo.LastDayUpdated.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Individuo.LastDayUpdated.Value) : string.Empty),
                            new XElement("Alias", datos.ONU.Individuo.IndividualAlias != null && datos.ONU.Individuo.IndividualAlias.Any(m => !string.IsNullOrEmpty(m.AliasName)) ? string.Join(" | ", datos.ONU.Individuo.IndividualAlias.Select(m => m.AliasName)) : string.Empty),
                            new XElement("Titulos", datos.ONU.Individuo.Title != null && datos.ONU.Individuo.Title.Value != null && datos.ONU.Individuo.Title.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Individuo.Title.Value) : string.Empty),
                            new XElement("Designaciones", datos.ONU.Individuo.Designation != null && datos.ONU.Individuo.Designation.Value != null && datos.ONU.Individuo.Designation.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Individuo.Designation.Value) : string.Empty),
                            new XElement("Direcciones", datos.ONU.Individuo.IndividualAddress != null && datos.ONU.Individuo.IndividualAddress.Any(m => m != null) ? datos.ONU.Individuo.IndividualAddress.Take(10).Select(x => new XElement("Direccion", $"• {string.Join("/", new[] { x.Country, x.StateProvince, x.City, x.Street }.Where(m => !string.IsNullOrEmpty(m)).ToArray())}")) : string.Empty),
                            new XElement("Documentos", datos.ONU.Individuo.IndividualDocument != null && datos.ONU.Individuo.IndividualDocument.Any(m => m != null) ? datos.ONU.Individuo.IndividualDocument.Take(10).Select(x => new XElement("Documento", $"• {x.Number} ({x.TypeOfDocument})")) : string.Empty))
                        : string.Empty),
                        new XElement("UafeOnuEmpresa", datos.ONU != null && datos.ONU.Entidad != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Id", datos.ONU.Entidad.Dataid),
                            new XElement("Referencia", datos.ONU.Entidad.ReferenceNumber),
                            //new XElement("Nombres", datos.ONU.Entidad.FirstName),
                            new XElement("Tipo", datos.ONU.Entidad.UnListType),
                            new XElement("Registro", datos.ONU.Entidad.ListedOn),
                            new XElement("Comentarios", datos.ONU.Entidad.Comments1),
                            new XElement("Actualizaciones", datos.ONU.Entidad.LastDayUpdated != null && datos.ONU.Entidad.LastDayUpdated.Value != null && datos.ONU.Entidad.LastDayUpdated.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU.Entidad.LastDayUpdated.Value) : string.Empty),
                            new XElement("Alias", datos.ONU.Entidad.EntityAlias != null && datos.ONU.Entidad.EntityAlias.Any(m => !string.IsNullOrEmpty(m.AliasName)) ? string.Join(" | ", datos.ONU.Entidad.EntityAlias.Select(m => m.AliasName)) : string.Empty),
                            new XElement("Direcciones", datos.ONU.Entidad.EntityAddress != null && datos.ONU.Entidad.EntityAddress.Any(m => m != null) ? datos.ONU.Entidad.EntityAddress.Take(10).Select(x => new XElement("Direccion", $"• {string.Join("/", new[] { x.Country, x.StateProvince, x.City, x.Street }.Where(m => !string.IsNullOrEmpty(m)).ToArray())}")) : string.Empty))
                        : string.Empty),
                        new XElement("UafeOnuPersona2206", datos.ONU2206 != null && datos.ONU2206.Individuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Id", datos.ONU2206.Individuo.Dataid),
                            new XElement("Referencia", datos.ONU2206.Individuo.ReferenceNumber),
                            //new XElement("Nombres", string.Join(" ", new[] { datos.ONU2206.Individuo.FourthName, datos.ONU2206.Individuo.ThirdName, datos.ONU2206.Individuo.SecondName, datos.ONU2206.Individuo.FirstName }.Where(m => !string.IsNullOrEmpty(m)).ToArray())),
                            new XElement("Nacionalidad", datos.ONU2206.Individuo.Nationality != null && datos.ONU2206.Individuo.Nationality.Value != null && datos.ONU2206.Individuo.Nationality.Value.Any(m => !string.IsNullOrEmpty(m)) ? datos.ONU2206.Individuo.Nationality.Value.FirstOrDefault(m => !string.IsNullOrEmpty(m)) : string.Empty),
                            new XElement("Tipo", datos.ONU2206.Individuo.UnListType),
                            new XElement("Registro", datos.ONU2206.Individuo.ListedOn),
                            new XElement("Comentarios", datos.ONU2206.Individuo.Comments1),
                            new XElement("Actualizaciones", datos.ONU2206.Individuo.LastDayUpdated != null && datos.ONU2206.Individuo.LastDayUpdated.Value != null && datos.ONU2206.Individuo.LastDayUpdated.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU2206.Individuo.LastDayUpdated.Value) : string.Empty),
                            new XElement("Alias", datos.ONU2206.Individuo.IndividualAlias != null && datos.ONU2206.Individuo.IndividualAlias.Any(m => !string.IsNullOrEmpty(m.AliasName)) ? string.Join(" | ", datos.ONU2206.Individuo.IndividualAlias.Select(m => m.AliasName)) : string.Empty),
                            new XElement("Titulos", datos.ONU2206.Individuo.Title != null && datos.ONU2206.Individuo.Title.Value != null && datos.ONU2206.Individuo.Title.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU2206.Individuo.Title.Value) : string.Empty),
                            new XElement("Designaciones", datos.ONU2206.Individuo.Designation != null && datos.ONU2206.Individuo.Designation.Value != null && datos.ONU2206.Individuo.Designation.Value.Any(m => !string.IsNullOrEmpty(m)) ? string.Join(" | ", datos.ONU2206.Individuo.Designation.Value) : string.Empty),
                            new XElement("Direcciones", datos.ONU2206.Individuo.IndividualAddress != null && datos.ONU2206.Individuo.IndividualAddress.Any(m => m != null) ? datos.ONU2206.Individuo.IndividualAddress.Take(10).Select(x => new XElement("Direccion", $"• {string.Join("/", new[] { x.Country, x.StateProvince, x.City, x.Street }.Where(m => !string.IsNullOrEmpty(m)).ToArray())}")) : string.Empty),
                            new XElement("Documentos", datos.ONU2206.Individuo.IndividualDocument != null && datos.ONU2206.Individuo.IndividualDocument.Any(m => m != null) ? datos.ONU2206.Individuo.IndividualDocument.Take(10).Select(x => new XElement("Documento", $"• {x.Number} ({x.TypeOfDocument})")) : string.Empty))
                        : string.Empty),
                         new XElement("UafeOfacPersona", datos.OFAC != null && datos.OFAC.ContenidoIndividuo != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Cedula?.Trim()) ? datos.RegistroCivil.Cedula : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Identificacion) ? datos.Ciudadano.Identificacion : string.Empty)),
                            new XElement("Nombres", datos.RegistroCivil != null && !string.IsNullOrEmpty(datos.RegistroCivil.Nombre?.Trim()) ? datos.RegistroCivil.Nombre : (datos.Ciudadano != null && !string.IsNullOrEmpty(datos.Ciudadano.Nombres) ? datos.Ciudadano.Nombres : string.Empty)),
                            new XElement("Contenido", datos.OFAC.ContenidoIndividuo))
                        : string.Empty),
                         new XElement("UafeOfacEmpresa", datos.OFAC != null && datos.OFAC.ContenidoEmpresa != null ? new XElement("Elementos",
                            new XElement("Identificacion", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RUC) ? datos.Sri.RUC : string.Empty),
                            new XElement("Nombres", datos.Sri != null && !string.IsNullOrEmpty(datos.Sri.RazonSocial) ? datos.Sri.RazonSocial : string.Empty),
                            new XElement("Contenido", datos.OFAC.ContenidoEmpresa))
                        : string.Empty),
                        new XElement("FechaReporte", $"Reporte obtenido el: {DateTime.Now.ToString("dd/MM/yyyy")} a las {DateTime.Now.ToString("hh:mm:ss tt")}")
                ));

                var dataxml = fn.ToString();
                var dataHtml = GenerarHtml(plantilla, dataxml);
                var dataPdf = ObtenerPdfHTML(dataHtml);
                return dataPdf;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                throw;
            }
        }

        #endregion HistorialFlexiplast
    }
}
